% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/2DLTfunctions.r
\name{sim.n}
\alias{sim.n}
\title{Simulate n sightings from NHPP}
\usage{
sim.n(n, ymin, ystart, w, hr, b, pi.x, logphi, fix.n = TRUE,
  intscale = NULL, nbuffer = NULL)
}
\arguments{
\item{n}{sample size}

\item{ymin}{smallest forward distance}

\item{b}{vector of detection hazard function parameters}

\item{pi.x}{perpendicular distance distribution function}

\item{logphi}{vector with log of pi.x parameters}

\item{fix.n}{if TRUE sample size of exactly n is generated, else sample is
generated from model with expected sample size n}

\item{intscale}{amount by which to multiply detection location pdf f(x,y)
in order to get required sample size. Either an object of class
"ppscale" output by \code{\link{calc.lpars}} or NULL (in which case
\code{\link{calc.lpars}} is called inside \code{sim.n}.}

\item{nbuffer}{amount by which to multiply the expected n by (given all model
parameters and intscale) to reduce probability that generated n is less
that n on first call to NHPP generating funciton rpoispp. If NULL,
it is set to 1.25 inside \code{sim.n}.}

\item{ymax}{largest forward distance}

\item{W}{perpendicular truncation distance}

\item{hfun}{detection hazard function}
}
\value{
a list object with element 1 a data.frame of simulated \code{x} and \code{y} sightings locations; element 2 \code{spatstat} object of class "ppp" with x- and y-coordinates
of detections and element 2 simulation settings, comprising of \code{n}
}
\description{
Simulates n sighting locations (x,y) given a perp.dist
distribution model and detection hazard model
}
\details{
Uses the \code{spatstat} function \code{rpoispp} to
generate detections from a NHPP, with intensity parameter such that the
expected (if fix.n is FALSE) or actual (if fix.n is TRUE) sample size is n.
}
\examples{
\dontrun{
# simulate with fixed n:
n=100;ymin=0.01;ymax=5;W=2
b=log(c(0.75,1));logphi=c(0.5,log(0.3))
dat=sim.n(n,ymin,ymax,W,h2,b,pi.norm,logphi)
dat$locs$n

plot(density(dat))
contour(density(dat),add=TRUE)
plot(dat,pch="+",cex=0.75,add=TRUE)
hist(abs(dat$y),xlab="Perpendicular distance",main="")
hist(dat$x,xlab="Forward distance",main="")
# do same with random n:
dat=sim.n(n,ymin,ymax,W,h2,b,pi.norm,logphi,fix.n=FALSE)

# compare time taken if calculate intscale on the run vs pass it:
# first calculate each time:
system.time(for(i in 1:20) dat<-sim.n(n,ymin,ymax,W,h2,b,pi.norm,logphi))
# then calculate once and pass:
intscale=calc.lpars(n,ymin,ymax,W,h2,b,pi.norm,logphi)
system.time(for(i in 1:20) dat<-sim.n(n,ymin,ymax,W,h2,b,pi.norm,logphi,intscale=intscale))
}
}

