structure(list(n_30_1 = structure(list(par = c(-0.0952940003642279, 
0.42082152098059, 0.554688819657394, -1.73093385449376), value = 5.48469265912484, 
    counts = structure(c(245L, NA), .Names = c("function", "gradient"
    )), convergence = 0L, message = NULL, hessian = structure(c(13.2022513645857, 
    -1.42214022869069, 35.7680236757751, -2.45992772840431, -1.42214022869069, 
    9.61812656541383, -4.50987842071093, -2.2264296652974, 35.7680236757751, 
    -4.50987842071093, 807.786179730652, -69.5284920297912, -2.45992772840431, 
    -2.2264296652974, -69.5284920297912, 46.411528900947), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0952940003642279, 0.42082152098059
    ), logphi = c(0.554688819657394, -1.73093385449376)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_2 = structure(list(
    par = c(-0.98244053609282, 0.100002118809651, 0.481827362602349, 
    -1.96809285350683), value = -5.32624563974318, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.80014581178057, -0.74643259395657, 
    44.6699960274799, -5.54063549706996, -0.74643259395657, 5.68504569953276, 
    -7.83051344876995, -2.52180681070691, 44.6699960274799, -7.83051344876995, 
    1420.05272342782, -115.250961381097, -5.54063549706996, -2.52180681070691, 
    -115.250961381097, 59.3166185964833), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.98244053609282, 0.100002118809651
    ), logphi = c(0.481827362602349, -1.96809285350683)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_3 = structure(list(
    par = c(-0.629743023746331, 0.133452835436696, 0.497313027600366, 
    -1.70413349257964), value = 5.76257754651128, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8871298185598, -0.191268873184214, 
    37.3779318962875, -4.14186002561934, -0.191268873184214, 
    6.03899869622282, -3.74320223661684, -2.51250499538891, 37.3779318962875, 
    -3.74320223661684, 757.642680735415, -68.573900760649, -4.14186002561934, 
    -2.51250499538891, -68.573900760649, 44.7298813246455), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.629743023746331, 0.133452835436696
    ), logphi = c(0.497313027600366, -1.70413349257964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_4 = structure(list(
    par = c(-0.218477069870962, 0.263001748898894, 0.530012708321847, 
    -1.56906055597095), value = 10.3152501683086, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.7965767490478, -1.19548838162231, 
    31.0615646026413, -2.5753195722622, -1.19548838162231, 6.62690181618686, 
    -3.68144828888362, -1.97991150541199, 31.0615646026413, -3.68144828888362, 
    539.514135006858, -52.8709122116222, -2.5753195722622, -1.97991150541199, 
    -52.8709122116222, 36.6614048199487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218477069870962, 0.263001748898894
    ), logphi = c(0.530012708321847, -1.56906055597095)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_5 = structure(list(
    par = c(0.139276072008801, 0.45991547689619, 0.4870516862823, 
    -1.72242564399559), value = 9.63883525832395, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.3168858236549, -1.43492964665981, 
    29.2473419700734, 0.623099378760372, -1.43492964665981, 9.43511125850449, 
    0.247925318941355, -1.60833744189404, 29.2473419700734, 0.247925318941355, 
    794.605741092358, -37.9798798209041, 0.623099378760372, -1.60833744189404, 
    -37.9798798209041, 41.7175957254656), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.139276072008801, 0.45991547689619
    ), logphi = c(0.4870516862823, -1.72242564399559)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_6 = structure(list(
    par = c(-0.0290190273850806, -0.60028900247131, 0.505496691902678, 
    -1.70912395543064), value = 15.1335245251628, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.7007174829098, -2.10745836604076, 
    30.513499162943, -1.7119036459512, -2.10745836604076, 1.90988650272672, 
    -3.62918490726116, -0.766801378615511, 30.513499162943, -3.62918490726116, 
    813.045434715054, -43.0618644582381, -1.7119036459512, -0.766801378615511, 
    -43.0618644582381, 44.7847325757422), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0290190273850806, -0.60028900247131
    ), logphi = c(0.505496691902678, -1.70912395543064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_7 = structure(list(
    par = c(-0.320098331221167, -0.244824909794096, 0.460004168661562, 
    -1.50517290559207), value = 16.3375009090219, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.7834610711707, -0.819337938828824, 
    27.7799566505976, -1.35379798837931, -0.819337938828824, 
    3.38317271442179, -2.39833692372571, -1.35008264745551, 27.7799566505976, 
    -2.39833692372571, 450.746417469006, -21.5815660333796, -1.35379798837931, 
    -1.35008264745551, -21.5815660333796, 27.7973406817011), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320098331221167, -0.244824909794096
    ), logphi = c(0.460004168661562, -1.50517290559207)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_8 = structure(list(
    par = c(-0.666030788005627, -0.549057574485057, 0.512341414641213, 
    -1.48742911002323), value = 18.1785126136865, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.26585901872556, -0.877902264662112, 
    28.6837830580922, -4.62146362334437, -0.877902264662112, 
    1.91889758927033, -4.83380365245978, -0.876387054482564, 
    28.6837830580922, -4.83380365245978, 454.835188071989, -48.7863674196731, 
    -4.62146362334437, -0.876387054482564, -48.7863674196731, 
    33.0685116844975), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.666030788005627, -0.549057574485057
    ), logphi = c(0.512341414641213, -1.48742911002323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_9 = structure(list(
    par = c(-0.178104005477417, 0.440758777122479, 0.514044057708632, 
    -1.44486846652534), value = 10.453947868693, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4902436741166, 1.05454560950236, 
    26.1784683606159, -1.44207801122676, 1.05454560950236, 10.9594038182337, 
    -1.70832276324973, -1.98766814452078, 26.1784683606159, -1.70832276324973, 
    372.623706679676, -36.1987300183664, -1.44207801122676, -1.98766814452078, 
    -36.1987300183664, 26.7486780600734), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178104005477417, 0.440758777122479
    ), logphi = c(0.514044057708632, -1.44486846652534)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_10 = structure(list(
    par = c(0.157697931586588, -0.182929183077486, 0.459723697660272, 
    -1.77823891457965), value = 11.0243327374095, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4140739258301, -2.83035929182773, 
    29.016167479412, 0.344023670439952, -2.83035929182773, 3.6624461943191, 
    -1.47389802895859, -1.00109232903378, 29.016167479412, -1.47389802895859, 
    933.646108262298, -27.1146751285034, 0.344023670439952, -1.00109232903378, 
    -27.1146751285034, 44.8753457220619), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.157697931586588, -0.182929183077486
    ), logphi = c(0.459723697660272, -1.77823891457965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_11 = structure(list(
    par = c(-0.0221741606796104, 0.145055126329963, 0.502336607850744, 
    -1.44245771490697), value = 13.4868398586141, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.1334023047743, -1.2032425780184, 
    24.7101492574231, -0.826188542246697, -1.2032425780184, 6.67219645977823, 
    -2.73474627032755, -1.41541665654721, 24.7101492574231, -2.73474627032755, 
    382.892193384166, -27.4607882779776, -0.826188542246697, 
    -1.41541665654721, -27.4607882779776, 26.0086480539101), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0221741606796104, 0.145055126329963
    ), logphi = c(0.502336607850744, -1.44245771490697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_12 = structure(list(
    par = c(-0.762568272923241, 0.315946864046466, 0.510114907802019, 
    -1.53338739143271), value = 2.32684534448617, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.5831847288538, 2.3780965863196, 
    32.750385509317, -4.572375831291, 2.3780965863196, 10.4001396965536, 
    -2.29541605989425, -3.00139205777761, 32.750385509317, -2.29541605989425, 
    471.025028818239, -57.6633903772716, -4.572375831291, -3.00139205777761, 
    -57.6633903772716, 34.6101734338689), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.762568272923241, 0.315946864046466
    ), logphi = c(0.510114907802019, -1.53338739143271)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_13 = structure(list(
    par = c(-0.550784650909567, 0.43693548404158, 0.515211467502796, 
    -1.82829969293424), value = 0.838974181939447, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.3583826868435, 0.0752786548652296, 
    41.9261159567696, -3.80077368222764, 0.0752786548652296, 
    8.50623942483253, -1.63003630238023, -3.26557158336627, 41.9261159567696, 
    -1.63003630238023, 996.804019127939, -84.5659422703537, -3.80077368222764, 
    -3.26557158336627, -84.5659422703537, 50.6939412416862), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.550784650909567, 0.43693548404158
    ), logphi = c(0.515211467502796, -1.82829969293424)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_14 = structure(list(
    par = c(-0.249665246144049, 0.408374288047046, 0.490300699616035, 
    -1.26125027269861), value = 9.91090434230769, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.604017115147, 1.76963868936397, 
    20.3592661156549, -0.793296335288574, 1.76963868936397, 10.1485103352061, 
    -1.22642846722698, -1.63622894566728, 20.3592661156549, -1.22642846722698, 
    208.467532754941, -17.186264595237, -0.793296335288574, -1.63622894566728, 
    -17.186264595237, 15.1867442306219), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249665246144049, 0.408374288047046
    ), logphi = c(0.490300699616035, -1.26125027269861)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_15 = structure(list(
    par = c(0.117628311937823, 0.511848973606729, 0.500593235314186, 
    -1.566739369644), value = 7.70494656596409, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.4240369756061, -0.364395473351209, 
    26.253402699794, 0.251846920651388, -0.364395473351209, 11.4765267131833, 
    -0.947414988683448, -1.70389546683136, 26.253402699794, -0.947414988683448, 
    532.180433168605, -34.157914587718, 0.251846920651388, -1.70389546683136, 
    -34.157914587718, 33.029908909521), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.117628311937823, 0.511848973606729
    ), logphi = c(0.500593235314186, -1.566739369644)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_16 = structure(list(
    par = c(-0.452204175042289, -0.308034687561002, 0.479655700548335, 
    -1.73452401218987), value = 10.4745812604133, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.2664802099639, -1.34279859453912, 
    35.4404285034526, -3.14405976098442, -1.34279859453912, 2.8583273055105, 
    -4.16389578816734, -1.42254052382107, 35.4404285034526, -4.16389578816734, 
    840.41101517851, -55.4965656638373, -3.14405976098442, -1.42254052382107, 
    -55.4965656638373, 45.2916371149747), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.452204175042289, -0.308034687561002
    ), logphi = c(0.479655700548335, -1.73452401218987)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_17 = structure(list(
    par = c(0.370654223458175, 0.374772617965943, 0.449874711057953, 
    -2.19920229211515), value = -5.22376462757483, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.3230125252206, -2.68034351535995, 
    27.7322259103485, 1.42853145290722, -2.68034351535995, 9.63534399200938, 
    4.76092497891933, -0.442716205695248, 27.7322259103485, 4.76092497891933, 
    2324.34549767513, -31.6792730503668, 1.42853145290722, -0.442716205695248, 
    -31.6792730503668, 55.2079265321304), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.370654223458175, 0.374772617965943
    ), logphi = c(0.449874711057953, -2.19920229211515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_18 = structure(list(
    par = c(0.549252429023756, 0.534957438809244, 0.498955238841546, 
    -1.4651010342732), value = 13.5428037254946, counts = structure(c(299L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.3570275469088, -4.15063464043186, 
    18.4205645488156, 1.39923107722595, -4.15063464043186, 11.2382383541387, 
    -2.09537156026229, -1.11032414018553, 18.4205645488156, -2.09537156026229, 
    419.009489000199, -18.6887785496026, 1.39923107722595, -1.11032414018553, 
    -18.6887785496026, 26.8266812759599), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.549252429023756, 0.534957438809244
    ), logphi = c(0.498955238841546, -1.4651010342732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_19 = structure(list(
    par = c(0.142046712709545, 0.236102054885095, 0.516902174101543, 
    -1.5662536342517), value = 11.2758507588473, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4838114811161, -2.27728032564656, 
    26.9638041507925, -0.49307197702575, -2.27728032564656, 7.49949304612585, 
    -3.0073229186911, -1.46669397071975, 26.9638041507925, -3.0073229186911, 
    545.307909037174, -37.5123814038147, -0.49307197702575, -1.46669397071975, 
    -37.5123814038147, 34.6343907642321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.142046712709545, 0.236102054885095
    ), logphi = c(0.516902174101543, -1.5662536342517)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_20 = structure(list(
    par = c(-0.469704123637393, -0.49444624745711, 0.510604004849663, 
    -1.36854726020402), value = 17.5368952093864, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.4005792113403, -0.767882622376703, 
    24.7439423688434, -3.29545359978312, -0.767882622376703, 
    2.39141645330676, -3.5983294317532, -0.848468273861869, 24.7439423688434, 
    -3.5983294317532, 317.432553586627, -31.5870144445007, -3.29545359978312, 
    -0.848468273861869, -31.5870144445007, 23.6315537476273), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.469704123637393, -0.49444624745711
    ), logphi = c(0.510604004849663, -1.36854726020402)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_21 = structure(list(
    par = c(-0.621861287156883, -0.449326426241468, 0.50471405486235, 
    -1.553758223054), value = 12.6696731602323, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.43678847864504, -0.779693920982538, 
    30.7755143622579, -4.38197364527326, -0.779693920982538, 
    2.60656295747452, -5.01903570926387, -1.09170824114102, 30.7755143622579, 
    -5.01903570926387, 541.072481563543, -52.0686097402745, -4.38197364527326, 
    -1.09170824114102, -52.0686097402745, 36.7707099195869), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.621861287156883, -0.449326426241468
    ), logphi = c(0.50471405486235, -1.553758223054)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_22 = structure(list(
    par = c(-0.822644405202112, 0.194739058608403, 0.524459889739711, 
    -1.42779697078324), value = 7.88647444518816, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.1418532699202, 2.06450282025372, 
    29.1881133054339, -5.13320057016209, 2.06450282025372, 9.02829734439337, 
    -3.7406632973358, -2.39103791166428, 29.1881133054339, -3.7406632973358, 
    355.404655455693, -51.2481321748304, -5.13320057016209, -2.39103791166428, 
    -51.2481321748304, 29.5614373024833), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.822644405202112, 0.194739058608403
    ), logphi = c(0.524459889739711, -1.42779697078324)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_23 = structure(list(
    par = c(-0.129565589147726, -0.554250601449656, 0.430524993517731, 
    -1.77991497637031), value = 10.460877328999, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.7604276737591, -1.40383722291304, 
    31.9416187140042, -0.585290914623116, -1.40383722291304, 
    2.38739694014001, -1.4514487172157, -0.914623921488555, 31.9416187140042, 
    -1.4514487172157, 924.789792199565, -26.3740085899578, -0.585290914623116, 
    -0.914623921488555, -26.3740085899578, 43.0371105135663), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129565589147726, -0.554250601449656
    ), logphi = c(0.430524993517731, -1.77991497637031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_24 = structure(list(
    par = c(-0.581167522803916, -0.708104987060258, 0.541139205527503, 
    -1.65304155312961), value = 12.0822592411461, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.80994933510704, -1.28274241939508, 
    30.9145259609345, -4.99703787837369, -1.28274241939508, 1.50440596158319, 
    -6.45254270059681, -0.445637731827375, 30.9145259609345, 
    -6.45254270059681, 729.084438511052, -75.3585513324495, -4.99703787837369, 
    -0.445637731827375, -75.3585513324495, 48.1447498121845), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.581167522803916, -0.708104987060258
    ), logphi = c(0.541139205527503, -1.65304155312961)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_25 = structure(list(
    par = c(-0.340751004676718, 0.223323608369645, 0.448065418223815, 
    -1.72341394740414), value = 2.43557766482901, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.2396204398109, 1.10017101651039, 
    34.3128840356588, -0.889289908490021, 1.10017101651039, 8.55826746803956, 
    1.32352491299947, -2.10068092787452, 34.3128840356588, 1.32352491299947, 
    770.214365740651, -39.7124717139707, -0.889289908490021, 
    -2.10068092787452, -39.7124717139707, 39.2421675554644), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340751004676718, 0.223323608369645
    ), logphi = c(0.448065418223815, -1.72341394740414)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_26 = structure(list(
    par = c(-0.4620537325667, 0.140476885607477, 0.599022378755806, 
    -1.01020050138486), value = 16.3317517042439, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.5920088883145, 0.826499341854969, 
    15.5215697210664, -3.97161521403788, 0.826499341854969, 7.16295006153445, 
    -2.78565622036098, -0.654364479046876, 15.5215697210664, 
    -2.78565622036098, 94.6790972031764, -23.6797897987806, -3.97161521403788, 
    -0.654364479046876, -23.6797897987806, 12.4952567857051), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4620537325667, 0.140476885607477
    ), logphi = c(0.599022378755806, -1.01020050138486)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_27 = structure(list(
    par = c(0.536954925690455, 0.554101169070875, 0.457349250011981, 
    -1.75026065548565), value = 5.77373809064513, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.9847805535144, -3.07400080612474, 
    19.7959152616889, 2.12020050427419, -3.07400080612474, 12.5193906794774, 
    0.681212289910249, -0.766148767761266, 19.7959152616889, 
    0.681212289910249, 876.04470073388, -16.6431506725129, 2.12020050427419, 
    -0.766148767761266, -16.6431506725129, 42.6230855421483), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.536954925690455, 0.554101169070875
    ), logphi = c(0.457349250011981, -1.75026065548565)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_28 = structure(list(
    par = c(-0.119873865946631, -0.169384837225402, 0.554638725987845, 
    -1.49553441797546), value = 13.9305778267933, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.0596385371208, -1.79670936573118, 
    27.4829865589687, -3.12004744196237, -1.79670936573118, 4.3399084930229, 
    -4.98586447550409, -0.956073509916777, 27.4829865589687, 
    -4.98586447550409, 461.566332254026, -51.2302154773714, -3.12004744196237, 
    -0.956073509916777, -51.2302154773714, 34.1500891201107), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.119873865946631, -0.169384837225402
    ), logphi = c(0.554638725987845, -1.49553441797546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_29 = structure(list(
    par = c(-0.202350813431313, 0.268034248076599, 0.459661077018389, 
    -1.41904174880479), value = 8.27714901441425, counts = structure(c(325L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.2964598696979, 1.08133707588109, 
    24.0898235968068, -0.0921079350568732, 1.08133707588109, 
    8.89400350478908, -0.849483002607343, -1.67444661025584, 
    24.0898235968068, -0.849483002607343, 339.690126490488, -15.5772175232105, 
    -0.0921079350568732, -1.67444661025584, -15.5772175232105, 
    21.7035272256361), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202350813431313, 0.268034248076599
    ), logphi = c(0.459661077018389, -1.41904174880479)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_30 = structure(list(
    par = c(-0.170875246134792, -0.866592701654158, 0.48676043489576, 
    -1.65557211576311), value = 15.4286826752381, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.001805768629, -1.34750619684709, 
    29.7659921186799, -2.02069387067461, -1.34750619684709, 1.38352988532375, 
    -3.01168914074168, -0.639857745454719, 29.7659921186799, 
    -3.01168914074168, 712.589466761227, -37.0792297736955, -2.02069387067461, 
    -0.639857745454719, -37.0792297736955, 40.8988305515834), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170875246134792, -0.866592701654158
    ), logphi = c(0.48676043489576, -1.65557211576311)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_31 = structure(list(
    par = c(-0.30663061520192, 0.315975727474233, 0.440672672436922, 
    -1.45874188896505), value = 5.99193550952464, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.5367950263627, 2.78474998482992, 
    25.2609017576955, 0.108722929437199, 2.78474998482992, 11.3100059617732, 
    0.459773677352615, -1.82285913208347, 25.2609017576955, 0.459773677352615, 
    370.54459635244, -13.8633391872922, 0.108722929437199, -1.82285913208347, 
    -13.8633391872922, 22.5231227752865), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30663061520192, 0.315975727474233
    ), logphi = c(0.440672672436922, -1.45874188896505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_32 = structure(list(
    par = c(-0.911839421302884, -0.447219087777692, 0.549387180538422, 
    -1.69043500900314), value = 11.2769626665273, counts = structure(c(309L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.36779091220296, -1.22147107450843, 
    32.0980510339908, -6.48388051427418, -1.22147107450843, 2.32163745028657, 
    -10.3454300717232, -0.352781322821016, 32.0980510339908, 
    -10.3454300717232, 808.586444319914, -100.58048409789, -6.48388051427418, 
    -0.352781322821016, -100.58048409789, 55.6867760765911), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.911839421302884, -0.447219087777692
    ), logphi = c(0.549387180538422, -1.69043500900314)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_33 = structure(list(
    par = c(-0.245406738856174, 0.510105506241084, 0.463137374518726, 
    -1.59684605662161), value = 6.16373388029434, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.7034105244278, 2.36881912618614, 
    29.2742933436507, -0.120628686595126, 2.36881912618614, 11.2833009660029, 
    2.20051980148739, -2.14301779166703, 29.2742933436507, 2.20051980148739, 
    549.678622882466, -32.2827288652405, -0.120628686595126, 
    -2.14301779166703, -32.2827288652405, 31.9524723229048), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245406738856174, 0.510105506241084
    ), logphi = c(0.463137374518726, -1.59684605662161)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_34 = structure(list(
    par = c(-0.579904174231379, -0.519056526079302, 0.592819446848559, 
    -1.4225297562082), value = 19.0100271273884, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.01785126736121, -1.13195460649251, 
    25.8393450529582, -6.13590727116531, -1.13195460649251, 2.2602998974719, 
    -6.16286962351609, -0.148804741861852, 25.8393450529582, 
    -6.16286962351609, 390.079947677258, -69.691479977152, -6.13590727116531, 
    -0.148804741861852, -69.691479977152, 37.2246421944666), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.579904174231379, -0.519056526079302
    ), logphi = c(0.592819446848559, -1.4225297562082)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_35 = structure(list(
    par = c(-0.698362589206392, 0.334105044428206, 0.573234472402009, 
    -1.29850342600597), value = 6.85324978416693, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.1888183574347, 2.25358454386537, 
    24.8265402835735, -5.48206221706593, 2.25358454386537, 10.2386586395831, 
    -3.83865203801292, -1.93415837768107, 24.8265402835735, -3.83865203801292, 
    241.000304562977, -48.8519698222944, -5.48206221706593, -1.93415837768107, 
    -48.8519698222944, 25.8314628971412), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.698362589206392, 0.334105044428206
    ), logphi = c(0.573234472402009, -1.29850342600597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_36 = structure(list(
    par = c(0.130088319684062, 0.174873671401053, 0.453087698378353, 
    -1.53888995667327), value = 9.05870781300965, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.6268718049831, -1.31865941765952, 
    23.7461580745446, 1.01014467168703, -1.31865941765952, 7.61006240024287, 
    -1.11255644830166, -1.25938550676885, 23.7461580745446, -1.11255644830166, 
    496.175175087377, -12.2743039088213, 1.01014467168703, -1.25938550676885, 
    -12.2743039088213, 29.1658205191503), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.130088319684062, 0.174873671401053
    ), logphi = c(0.453087698378353, -1.53888995667327)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_37 = structure(list(
    par = c(0.214625235556515, -0.520332240905428, 0.476991940517821, 
    -1.5205711878699), value = 18.9618667388146, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0954782311151, -2.64623587487023, 
    22.9427371039037, 0.166318482541783, -2.64623587487023, 2.14447786373029, 
    -2.27023286036854, -0.712614302234016, 22.9427371039037, 
    -2.27023286036854, 496.874990493446, -14.5179700505871, 0.166318482541783, 
    -0.712614302234016, -14.5179700505871, 30.5161545934851), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.214625235556515, -0.520332240905428
    ), logphi = c(0.476991940517821, -1.5205711878699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_38 = structure(list(
    par = c(-0.584405278213216, 0.47197670265198, 0.526372226096754, 
    -1.14863428148237), value = 6.86341762763337, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.6611478813472, 4.74034445607785, 
    18.8201434037083, -2.60195230361582, 4.74034445607785, 13.6236564314274, 
    -1.02936686152688, -1.86550414937869, 18.8201434037083, -1.02936686152688, 
    140.20691401484, -21.7198310519251, -2.60195230361582, -1.86550414937869, 
    -21.7198310519251, 12.8938223800112), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.584405278213216, 0.47197670265198
    ), logphi = c(0.526372226096754, -1.14863428148237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_39 = structure(list(
    par = c(0.0466198741399531, 0.337218468301525, 0.503262901047338, 
    -1.35397738934127), value = 13.7294116138981, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.7842879294232, -0.683045521920889, 
    21.4937057032571, -0.330480030896751, -0.683045521920889, 
    8.79781026696946, -2.22963905072149, -1.39657313824593, 21.4937057032571, 
    -2.22963905072149, 291.329587970068, -21.8483018175064, -0.330480030896751, 
    -1.39657313824593, -21.8483018175064, 20.5470383352058), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0466198741399531, 0.337218468301525
    ), logphi = c(0.503262901047338, -1.35397738934127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_40 = structure(list(
    par = c(-0.0202357378703083, 0.272936484240458, 0.399085856208458, 
    -1.53221500633309), value = 8.08818434656976, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.0849603313458, 1.25683516571939, 
    22.3780454104983, 1.90681837852757, 1.25683516571939, 10.3517588865287, 
    1.05316065379668, -1.12667698526359, 22.3780454104983, 1.05316065379668, 
    457.934164666884, 3.94618469901076, 1.90681837852757, -1.12667698526359, 
    3.94618469901076, 25.2314428221823), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0202357378703083, 0.272936484240458
    ), logphi = c(0.399085856208458, -1.53221500633309)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_41 = structure(list(
    par = c(-0.211469717800516, -0.973311355884157, 0.447421226119415, 
    -1.66118711656436), value = 14.905731557583, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.9284552040355, -1.17910698360646, 
    29.6724973170015, -1.34372525995019, -1.17910698360646, 1.07558160422627, 
    -2.10420601964856, -0.644828678009191, 29.6724973170015, 
    -2.10420601964856, 706.049087858318, -23.460620888649, -1.34372525995019, 
    -0.644828678009191, -23.460620888649, 38.155781347804), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211469717800516, -0.973311355884157
    ), logphi = c(0.447421226119415, -1.66118711656436)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_42 = structure(list(
    par = c(-0.242752163432175, -0.0994664857261484, 0.498295753836183, 
    -1.42184433644344), value = 15.1502329578696, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.0390514480337, -1.05439975017774, 
    25.626571115378, -1.85607444480596, -1.05439975017774, 4.21002759409816, 
    -3.13877147029018, -1.31389751123479, 25.626571115378, -3.13877147029018, 
    361.792317050913, -28.0991203327474, -1.85607444480596, -1.31389751123479, 
    -28.0991203327474, 25.0583399563631), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242752163432175, -0.0994664857261484
    ), logphi = c(0.498295753836183, -1.42184433644344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_43 = structure(list(
    par = c(-0.128976954259718, 0.348721210444085, 0.441126163619133, 
    -1.5357452438021), value = 7.15837819531415, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.3763037369111, 1.29883150812304, 
    25.7230476352621, 0.701590997853607, 1.29883150812304, 9.8413583029533, 
    0.695370358183567, -1.6258419146542, 25.7230476352621, 0.695370358183567, 
    470.003664365892, -15.0739075555073, 0.701590997853607, -1.6258419146542, 
    -15.0739075555073, 27.1888046348145), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.128976954259718, 0.348721210444085
    ), logphi = c(0.441126163619133, -1.5357452438021)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_44 = structure(list(
    par = c(-0.433970818370307, -0.473128523120466, 0.4952056980001, 
    -1.54793795139203), value = 16.0247732776207, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.7381260692208, -1.14683896068613, 
    29.8165816827733, -3.20089993444128, -1.14683896068613, 2.3074762829367, 
    -4.03224862566276, -1.06066495764168, 29.8165816827733, -4.03224862566276, 
    529.021666541674, -41.3427859120574, -3.20089993444128, -1.06066495764168, 
    -41.3427859120574, 34.4225533588371), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.433970818370307, -0.473128523120466
    ), logphi = c(0.4952056980001, -1.54793795139203)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_45 = structure(list(
    par = c(0.155815747116277, 0.681506524385672, 0.481295452723553, 
    -1.74288908610793), value = 0.390229744870364, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.0554634659511, 1.00445633244295, 
    27.9875357687143, 1.23368217791464, 1.00445633244295, 14.5472087135223, 
    2.80538857266865, -1.49515015968049, 27.9875357687143, 2.80538857266865, 
    825.049218248997, -38.2494467655037, 1.23368217791464, -1.49515015968049, 
    -38.2494467655037, 41.7245099122443), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.155815747116277, 0.681506524385672
    ), logphi = c(0.481295452723553, -1.74288908610793)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_46 = structure(list(
    par = c(-0.35804926810414, 0.705330832486839, 0.509965051560927, 
    -1.22427760582906), value = 6.46277690765785, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.7137201024257, 5.98729363421313, 
    19.4090683383052, -1.22602180363529, 5.98729363421313, 17.958563353293, 
    0.38486116693548, -1.98082118663123, 19.4090683383052, 0.38486116693548, 
    178.096881999767, -21.7671694218158, -1.22602180363529, -1.98082118663123, 
    -21.7671694218158, 14.4787301654681), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35804926810414, 0.705330832486839
    ), logphi = c(0.509965051560927, -1.22427760582906)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_47 = structure(list(
    par = c(0.156003416353642, -0.256104893153139, 0.442819867200123, 
    -1.60504224583336), value = 14.4320069474809, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.3807344516774, -2.17867167995323, 
    24.5822960143194, 0.822757551421915, -2.17867167995323, 3.91033602387125, 
    -1.53516919398911, -0.929311409603173, 24.5822960143194, 
    -1.53516919398911, 603.14166952713, -9.00153519411973, 0.822757551421915, 
    -0.929311409603173, -9.00153519411973, 33.644431800095), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.156003416353642, -0.256104893153139
    ), logphi = c(0.442819867200123, -1.60504224583336)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_48 = structure(list(
    par = c(-0.563672232913751, 0.64627813852333, 0.45392325092936, 
    -1.77003218637398), value = -6.28775239222607, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5433883021482, 6.2328897822983, 
    37.1644692089834, -1.05581869047633, 6.2328897822983, 17.158356456326, 
    9.33692979998568, -3.09320789881884, 37.1644692089834, 9.33692979998568, 
    821.692822412956, -56.8027083535094, -1.05581869047633, -3.09320789881884, 
    -56.8027083535094, 40.6777078674203), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.563672232913751, 0.64627813852333
    ), logphi = c(0.45392325092936, -1.77003218637398)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_49 = structure(list(
    par = c(0.0225674403711758, 0.363979714743985, 0.425174317916697, 
    -1.50742747727524), value = 10.3677815800601, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.9196652892475, 0.500046207108085, 
    22.4751214248364, 1.58299183250499, 0.500046207108085, 9.4107232175844, 
    0.544517254397192, -1.2835673655065, 22.4751214248364, 0.544517254397192, 
    436.199807518634, -4.07375539457355, 1.58299183250499, -1.2835673655065, 
    -4.07375539457355, 25.0769585212751), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0225674403711758, 0.363979714743985
    ), logphi = c(0.425174317916697, -1.50742747727524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_50 = structure(list(
    par = c(-0.285659045852592, -0.372829439242017, 0.498722059651373, 
    -1.82343300070965), value = 10.0631869085662, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.7015783757648, -2.04260301739367, 
    35.9144611814521, -2.77938160975211, -2.04260301739367, 2.50259793599383, 
    -4.94135343442892, -1.11796058255287, 35.9144611814521, -4.94135343442892, 
    1050.85383383763, -61.4759289705447, -2.77938160975211, -1.11796058255287, 
    -61.4759289705447, 51.0101940820462), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285659045852592, -0.372829439242017
    ), logphi = c(0.498722059651373, -1.82343300070965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_51 = structure(list(
    par = c(-0.309468427168394, 0.217929935137496, 0.502365786096866, 
    -1.90055391014782), value = 0.648341615145862, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.5069200665729, -1.36422571639372, 
    40.9404565746563, -2.45852741520558, -1.36422571639372, 6.74157944491327, 
    -2.68523719659797, -2.21161497049316, 40.9404565746563, -2.68523719659797, 
    1201.90272490683, -72.0367380226961, -2.45852741520558, -2.21161497049316, 
    -72.0367380226961, 52.0238885166613), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309468427168394, 0.217929935137496
    ), logphi = c(0.502365786096866, -1.90055391014782)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_52 = structure(list(
    par = c(0.185045503249606, -0.103066592955321, 0.536251797564881, 
    -1.54067470674722), value = 14.767208539973, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.7975562057034, -3.09280597399209, 
    25.9013831933608, -1.1463175777493, -3.09280597399209, 4.38312361428217, 
    -3.97957590436704, -0.993594798881503, 25.9013831933608, 
    -3.97957590436704, 522.755138812947, -39.9898864347215, -1.1463175777493, 
    -0.993594798881503, -39.9898864347215, 34.5800674992347), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.185045503249606, -0.103066592955321
    ), logphi = c(0.536251797564881, -1.54067470674722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_53 = structure(list(
    par = c(-0.0537859356000483, -0.240632201181926, 0.457970922466128, 
    -1.37729877190731), value = 15.1147393727809, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0660726229445, -1.25290883445928, 
    21.9325793135994, 0.0152549453069639, -1.25290883445928, 
    3.84650931062325, -2.1376613039692, -1.02484988517837, 21.9325793135994, 
    -2.1376613039692, 315.01716089366, -7.97691984066873, 0.0152549453069639, 
    -1.02484988517837, -7.97691984066873, 20.2900914265669), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0537859356000483, -0.240632201181926
    ), logphi = c(0.457970922466128, -1.37729877190731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_54 = structure(list(
    par = c(-0.679191789899532, -0.916518898457899, 0.575803260356919, 
    -1.7470350542161), value = 14.1031345868349, counts = structure(c(315L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(4.2152925532335, -1.20703966732805, 
    28.5269171680369, -5.09109308399758, -1.20703966732805, 0.998751126246589, 
    -7.79880808998712, 0.13266595022543, 28.5269171680369, -7.79880808998712, 
    936.439172581238, -99.2161825505988, -5.09109308399758, 0.13266595022543, 
    -99.2161825505988, 57.8845225058799), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.679191789899532, -0.916518898457899
    ), logphi = c(0.575803260356919, -1.7470350542161)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_55 = structure(list(
    par = c(-0.249141756627782, 0.349524353372666, 0.478454445929189, 
    -1.56009749206194), value = 7.5474002334841, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.2141884052502, 0.853438222536695, 
    29.383865067123, -0.906641197229163, 0.853438222536695, 9.12124286234217, 
    -0.360224295947731, -2.10224356134159, 29.383865067123, -0.360224295947731, 
    508.973382824518, -34.1214482273422, -0.906641197229163, 
    -2.10224356134159, -34.1214482273422, 31.4428639185405), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249141756627782, 0.349524353372666
    ), logphi = c(0.478454445929189, -1.56009749206194)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_56 = structure(list(
    par = c(0.376441288712624, 0.573530728141865, 0.49860097563147, 
    -1.77414265853069), value = 3.92945852291162, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.1395972699858, -2.07227024096035, 
    26.6115486989849, 1.34739102053416, -2.07227024096035, 12.6326198542914, 
    0.257531483693896, -1.300976806895, 26.6115486989849, 0.257531483693896, 
    912.138059241285, -36.7382565437113, 1.34739102053416, -1.300976806895, 
    -36.7382565437113, 44.9495100101061), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.376441288712624, 0.573530728141865
    ), logphi = c(0.49860097563147, -1.77414265853069)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_57 = structure(list(
    par = c(0.0942738595953606, -0.336776272999037, 0.44147455344324, 
    -1.66316510131234), value = 14.5640474678726, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4787033449798, -2.15950851378821, 
    26.6667136608056, 0.48881323300165, -2.15950851378821, 3.06604763489204, 
    -1.48299048552403, -0.922993998120347, 26.6667136608056, 
    -1.48299048552403, 699.723926844253, -13.7153239152532, 0.48881323300165, 
    -0.922993998120347, -13.7153239152532, 37.1356570090242), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0942738595953606, -0.336776272999037
    ), logphi = c(0.44147455344324, -1.66316510131234)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_58 = structure(list(
    par = c(-0.788938681136347, 0.54578290428853, 0.582011852952468, 
    -1.48723519031573), value = 5.40989241165679, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.0177526197196, 2.91117146922204, 
    32.050514318982, -6.76055789750052, 2.91117146922204, 13.4377110443396, 
    -4.47614788701145, -3.18644935504153, 32.050514318982, -4.47614788701145, 
    415.55611133326, -79.4675138751089, -6.76055789750052, -3.18644935504153, 
    -79.4675138751089, 40.4833167575447), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.788938681136347, 0.54578290428853
    ), logphi = c(0.582011852952468, -1.48723519031573)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_59 = structure(list(
    par = c(-0.271496419484139, 0.184651030713949, 0.479308300045384, 
    -1.85754797962508), value = 4.68327572731967, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.0941638551985, -1.1912202420028, 
    38.7329868292152, -1.68367085429111, -1.1912202420028, 6.01128534127859, 
    -0.74739741062757, -2.08080663044452, 38.7329868292152, -0.74739741062757, 
    1085.76594437637, -59.9275739570082, -1.68367085429111, -2.08080663044452, 
    -59.9275739570082, 48.938455291303), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271496419484139, 0.184651030713949
    ), logphi = c(0.479308300045384, -1.85754797962508)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_60 = structure(list(
    par = c(-0.199007489672104, 0.293945607926478, 0.444045596889291, 
    -1.63755956713062), value = 6.23832275796762, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.1874643652981, 1.09099748279995, 
    29.6658590650534, 0.147763028812697, 1.09099748279995, 8.94957385311201, 
    1.20273627834955, -1.79871422456568, 29.6658590650534, 1.20273627834955, 
    619.173188351807, -25.609850075492, 0.147763028812697, -1.79871422456568, 
    -25.609850075492, 33.5786247911418), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199007489672104, 0.293945607926478
    ), logphi = c(0.444045596889291, -1.63755956713062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_61 = structure(list(
    par = c(-0.115115894160181, 0.11671236008784, 0.505469038181295, 
    -1.61692285524785), value = 8.56073236455132, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.2955718076543, -1.26772082920112, 
    30.8464922516016, -1.53283857318165, -1.26772082920112, 6.74782198384349, 
    -3.08492792999715, -1.69002343475277, 30.8464922516016, -3.08492792999715, 
    617.790959254183, -43.6590951511384, -1.53283857318165, -1.69002343475277, 
    -43.6590951511384, 37.7998146130487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.115115894160181, 0.11671236008784
    ), logphi = c(0.505469038181295, -1.61692285524785)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_62 = structure(list(
    par = c(-0.558211836407765, -0.0769193537973741, 0.454968560246043, 
    -1.51756573657048), value = 7.74265041209295, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.3509671527143, 0.417370559002705, 
    29.7976635548203, -2.15377983114884, 0.417370559002705, 4.81694620146911, 
    -1.9280581509129, -1.85797098284368, 29.7976635548203, -1.9280581509129, 
    452.594230871295, -27.5441888004657, -2.15377983114884, -1.85797098284368, 
    -27.5441888004657, 27.9440020243271), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.558211836407765, -0.0769193537973741
    ), logphi = c(0.454968560246043, -1.51756573657048)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_63 = structure(list(
    par = c(-0.506545219536801, -0.421778809562405, 0.477768931099449, 
    -1.7124245209061), value = 10.9059127687262, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.75819000181843, -0.930517443098466, 
    34.7359371026812, -3.40965215794853, -0.930517443098466, 
    2.9495340103658, -4.33336388061534, -1.27422246221087, 34.7359371026812, 
    -4.33336388061534, 800.901707447288, -54.4436033698137, -3.40965215794853, 
    -1.27422246221087, -54.4436033698137, 44.291706389199), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.506545219536801, -0.421778809562405
    ), logphi = c(0.477768931099449, -1.7124245209061)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_64 = structure(list(
    par = c(-0.441759403586743, 0.172722909227544, 0.44294947340994, 
    -1.39153540606858), value = 12.963013439496, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.3087215643287, 1.87827590281131, 
    24.5147065336404, -0.564153126436651, 1.87827590281131, 7.96135806835352, 
    -0.540686736272278, -1.8199560170018, 24.5147065336404, -0.540686736272278, 
    303.520279472114, -12.4893051964836, -0.564153126436651, 
    -1.8199560170018, -12.4893051964836, 19.2397972256231), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.441759403586743, 0.172722909227544
    ), logphi = c(0.44294947340994, -1.39153540606858)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_65 = structure(list(
    par = c(-0.607319252915088, -0.989691161204705, 0.529754156611312, 
    -1.63463164618724), value = 17.5849722416529, counts = structure(c(323L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.63566529901516, -1.10556995824851, 
    29.8203782049811, -4.82127702738921, -1.10556995824851, 0.841907338511305, 
    -5.0872147525638, -0.318961323131361, 29.8203782049811, -5.0872147525638, 
    700.922074774013, -69.1979065985393, -4.82127702738921, -0.318961323131361, 
    -69.1979065985393, 46.3139706941007), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.607319252915088, -0.989691161204705
    ), logphi = c(0.529754156611312, -1.63463164618724)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_66 = structure(list(
    par = c(-0.113747080946577, 0.301580685968269, 0.552036488847285, 
    -1.15862216620063), value = 14.2025213737174, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.536727947436, -0.263092911456653, 
    17.9257427030954, -2.05689965104838, -0.263092911456653, 
    7.99825584252289, -2.72679773560824, -1.05508840086976, 17.9257427030954, 
    -2.72679773560824, 156.622467428758, -23.8315880796147, -2.05689965104838, 
    -1.05508840086976, -23.8315880796147, 14.3457868646557), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.113747080946577, 0.301580685968269
    ), logphi = c(0.552036488847285, -1.15862216620063)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_67 = structure(list(
    par = c(0.0877345596278467, 0.121849104679365, 0.524720932791142, 
    -1.73370073695762), value = 9.02578147126539, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.2805569156579, -2.87356400319183, 
    32.255919608204, -1.0771852654301, -2.87356400319183, 5.90147049628342, 
    -3.81676337157799, -1.50074860094662, 32.255919608204, -3.81676337157799, 
    836.601291454908, -50.4169612922656, -1.0771852654301, -1.50074860094662, 
    -50.4169612922656, 45.3496998464864), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0877345596278467, 0.121849104679365
    ), logphi = c(0.524720932791142, -1.73370073695762)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_68 = structure(list(
    par = c(-0.452795801178956, 0.683372103090137, 0.543370890568408, 
    -1.76636522029857), value = -4.07020937936356, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.1638033651349, 2.22734571742045, 
    40.1206163176404, -3.53957387111414, 2.22734571742045, 14.5028944551484, 
    0.370100352142799, -3.73006015719213, 40.1206163176404, 0.370100352142799, 
    840.615719631455, -84.4949422031949, -3.53957387111414, -3.73006015719213, 
    -84.4949422031949, 48.1558529359383), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.452795801178956, 0.683372103090137
    ), logphi = c(0.543370890568408, -1.76636522029857)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_69 = structure(list(
    par = c(-0.784135686130595, -0.55761661741213, 0.51671228300247, 
    -1.69090738651943), value = 14.3719156746222, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.60829791421236, -1.04360448993646, 
    33.2049285072245, -5.50266495791263, -1.04360448993646, 2.08863571593554, 
    -7.43668393887731, -0.739167049346179, 33.2049285072245, 
    -7.43668393887731, 793.737488176127, -80.3062287921819, -5.50266495791263, 
    -0.739167049346179, -80.3062287921819, 50.1473104232986), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.784135686130595, -0.55761661741213
    ), logphi = c(0.51671228300247, -1.69090738651943)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_70 = structure(list(
    par = c(-0.511605963538016, 0.659690790096165, 0.55483685979356, 
    -1.45801956036093), value = 2.82416965078947, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.0930731273036, 3.72370111856313, 
    29.386775501905, -3.99858642707862, 3.72370111856313, 14.5887608158368, 
    -0.883032628795632, -3.10381483958899, 29.386775501905, -0.883032628795632, 
    373.140649714276, -58.8816151350091, -3.99858642707862, -3.10381483958899, 
    -58.8816151350091, 32.3702930011827), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.511605963538016, 0.659690790096165
    ), logphi = c(0.55483685979356, -1.45801956036093)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_71 = structure(list(
    par = c(-0.720995497272565, 0.613583230249285, 0.583635534451824, 
    -1.41868045924672), value = 2.80024369869028, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.4684573382948, 3.82998198578122, 
    29.3158574256047, -6.08310221084096, 3.82998198578122, 15.1175952298743, 
    -2.80204465408218, -3.15253799954007, 29.3158574256047, -2.80204465408218, 
    335.51188532055, -68.0880493897362, -6.08310221084096, -3.15253799954007, 
    -68.0880493897362, 34.9974477105164), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.720995497272565, 0.613583230249285
    ), logphi = c(0.583635534451824, -1.41868045924672)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_72 = structure(list(
    par = c(-0.378199528534401, 0.40176262246728, 0.524267360255571, 
    -1.43242833234487), value = 6.70414801529925, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.085715523, 1.52822886123616, 
    27.4407757490103, -2.72849473770265, 1.52822886123616, 10.2889949999962, 
    -2.14176937118893, -2.23689593292775, 27.4407757490103, -2.14176937118893, 
    357.267527266725, -42.4474232032512, -2.72849473770265, -2.23689593292775, 
    -42.4474232032512, 27.455311352842), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378199528534401, 0.40176262246728
    ), logphi = c(0.524267360255571, -1.43242833234487)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_73 = structure(list(
    par = c(0.167361903420258, 0.373719502587047, 0.520553077518106, 
    -1.49946213247078), value = 15.3281502083904, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.489358922429, -1.83911644713319, 
    24.913992525466, -0.330451372931861, -1.83911644713319, 9.21691096156252, 
    -2.69659946550149, -1.50119686903594, 24.913992525466, -2.69659946550149, 
    451.086785449917, -34.8377472532135, -0.330451372931861, 
    -1.50119686903594, -34.8377472532135, 30.3058744601792), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.167361903420258, 0.373719502587047
    ), logphi = c(0.520553077518106, -1.49946213247078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_74 = structure(list(
    par = c(0.299831324060314, 0.464731601897769, 0.483764927283219, 
    -1.44259190984225), value = 12.9562164356644, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.1176006786596, -1.99834862302239, 
    20.4239999934686, 1.08832970679984, -1.99834862302239, 10.1218437715822, 
    -1.58256475879526, -1.27262766413949, 20.4239999934686, -1.58256475879526, 
    382.989355278696, -16.6206861216267, 1.08832970679984, -1.27262766413949, 
    -16.6206861216267, 24.5447691571421), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.299831324060314, 0.464731601897769
    ), logphi = c(0.483764927283219, -1.44259190984225)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_75 = structure(list(
    par = c(-0.369714022621538, 0.146829174687387, 0.604830619312377, 
    -1.35128722505688), value = 11.8944794239929, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.8572019980334, -0.281838229643228, 
    25.3285486433441, -5.43112280593228, -0.281838229643228, 
    7.89338223050606, -5.82786584635286, -0.940744686150907, 
    25.3285486433441, -5.82786584635286, 296.738966408583, -59.7145206102656, 
    -5.43112280593228, -0.940744686150907, -59.7145206102656, 
    31.3587460407661), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369714022621538, 0.146829174687387
    ), logphi = c(0.604830619312377, -1.35128722505688)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_76 = structure(list(
    par = c(-0.0248548028790637, 0.135787893642781, 0.487427233861996, 
    -1.43774405552638), value = 14.7404626719752, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5964608784819, -1.42274285730437, 
    24.1707410930658, -0.412896706158961, -1.42274285730437, 
    6.04591983766056, -2.32011909861995, -1.40568046669287, 24.1707410930658, 
    -2.32011909861995, 375.236669755807, -22.0047278935986, -0.412896706158961, 
    -1.40568046669287, -22.0047278935986, 24.7822653625107), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0248548028790637, 0.135787893642781
    ), logphi = c(0.487427233861996, -1.43774405552638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_77 = structure(list(
    par = c(-0.756948876964045, 0.0890591142639788, 0.523014389224941, 
    -1.67887731878441), value = 7.16696083060967, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.20905190904264, -0.590781659592921, 
    36.7480940295373, -5.58518136983821, -0.590781659592921, 
    5.45157487508163, -6.80478686687636, -2.25375353646307, 36.7480940295373, 
    -6.80478686687636, 728.223440956466, -81.7628501281753, -5.58518136983821, 
    -2.25375353646307, -81.7628501281753, 47.5110746980256), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.756948876964045, 0.0890591142639788
    ), logphi = c(0.523014389224941, -1.67887731878441)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_78 = structure(list(
    par = c(-0.21689226325743, -1.92129683724521, 0.464875230205545, 
    -1.69278049621102), value = 17.2225860906256, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.82170878671695, -0.649541881614368, 
    28.8621195920769, -1.95195270569215, -0.649541881614368, 
    0.165425022125021, -1.31941977432604, -0.215087524235713, 
    28.8621195920769, -1.31941977432604, 788.56772596847, -30.9828471904972, 
    -1.95195270569215, -0.215087524235713, -30.9828471904972, 
    42.590637712614), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21689226325743, -1.92129683724521
    ), logphi = c(0.464875230205545, -1.69278049621102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_79 = structure(list(
    par = c(-0.0240664892506442, 0.997634134146971, 0.443262035767577, 
    -1.65589614776326), value = -3.87710512429484, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.8395764931832, 9.88991785466631, 
    22.8687844402442, 2.05255915702862, 9.88991785466631, 28.0091874961252, 
    7.66402217744488, -0.852503294679341, 22.8687844402442, 7.66402217744488, 
    637.984363682786, -25.2769798382846, 2.05255915702862, -0.852503294679341, 
    -25.2769798382846, 32.6451426722052), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0240664892506442, 0.997634134146971
    ), logphi = c(0.443262035767577, -1.65589614776326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_80 = structure(list(
    par = c(-0.702542963880672, 0.484557035189972, 0.519201442949552, 
    -1.39724783739958), value = 6.48941595733545, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8655649576668, 4.0685613971192, 
    27.5173625854386, -3.76148390124342, 4.0685613971192, 12.8889672179611, 
    -0.64490579454457, -2.93607540280405, 27.5173625854386, -0.64490579454457, 
    309.631633070406, -43.4108817399803, -3.76148390124342, -2.93607540280405, 
    -43.4108817399803, 25.5935302417853), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.702542963880672, 0.484557035189972
    ), logphi = c(0.519201442949552, -1.39724783739958)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_81 = structure(list(
    par = c(-0.284024076627539, 0.42684403212257, 0.46811816315342, 
    -1.47422127465158), value = 8.03565330704054, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.3219339050235, 1.99845262915943, 
    26.3560608098068, -0.473852637350447, 1.99845262915943, 10.1111259205311, 
    0.337999244592879, -2.05349361426244, 26.3560608098068, 0.337999244592879, 
    392.683108444647, -24.6534603014492, -0.473852637350447, 
    -2.05349361426244, -24.6534603014492, 25.0516806619139), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284024076627539, 0.42684403212257
    ), logphi = c(0.46811816315342, -1.47422127465158)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_82 = structure(list(
    par = c(-0.645880682474423, -0.0197284470971445, 0.502823305004716, 
    -1.64943518163765), value = 7.80962144163312, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.2699771122872, -0.601806629862978, 
    35.2264485679044, -4.46665334030705, -0.601806629862978, 
    4.75881103279008, -4.99654084995527, -2.04379568113922, 35.2264485679044, 
    -4.99654084995527, 672.474409661117, -64.6568264091041, -4.46665334030705, 
    -2.04379568113922, -64.6568264091041, 42.5113845352598), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.645880682474423, -0.0197284470971445
    ), logphi = c(0.502823305004716, -1.64943518163765)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_83 = structure(list(
    par = c(0.52353855063855, 0.244393484122206, 0.456396831373212, 
    -1.58088182251326), value = 13.8845046078266, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.5405477703712, -4.18473205687775, 
    18.8704521657534, 1.87346273650135, -4.18473205687775, 8.22158714353094, 
    -1.35186513450236, -0.905267164341694, 18.8704521657534, 
    -1.35186513450236, 576.614516452967, -6.36764488226582, 1.87346273650135, 
    -0.905267164341694, -6.36764488226582, 33.0448081498069), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.52353855063855, 0.244393484122206
    ), logphi = c(0.456396831373212, -1.58088182251326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_84 = structure(list(
    par = c(-0.641977654563201, 0.109506296622175, 0.507356420095741, 
    -1.74261387582422), value = 4.75749342361496, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.87326335533112, -0.383133730963436, 
    38.4147714598271, -4.56828375505758, -0.383133730963436, 
    6.39221980902605, -5.21986122103968, -2.38576117350675, 38.4147714598271, 
    -5.21986122103968, 841.933202369027, -77.4845582074413, -4.56828375505758, 
    -2.38576117350675, -77.4845582074413, 48.4214599674182), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.641977654563201, 0.109506296622175
    ), logphi = c(0.507356420095741, -1.74261387582422)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_85 = structure(list(
    par = c(0.189491495431357, 0.385347584730822, 0.519838372846707, 
    -1.55044609661884), value = 14.532399798949, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.5031488365285, -2.52303270587007, 
    26.0203044128993, -0.18931473677597, -2.52303270587007, 8.36292103256753, 
    -2.59208227593177, -1.54342991387502, 26.0203044128993, -2.59208227593177, 
    519.019120153619, -37.3293187700963, -0.18931473677597, -1.54342991387502, 
    -37.3293187700963, 33.4681861393626), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.189491495431357, 0.385347584730822
    ), logphi = c(0.519838372846707, -1.55044609661884)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_86 = structure(list(
    par = c(0.228949025919227, 0.858180790550962, 0.492499365108286, 
    -1.96189317429053), value = -7.45445034788441, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.0463823644425, 1.96979430011623, 
    30.2726679757281, 1.65675095487039, 1.96979430011623, 17.349927454946, 
    7.33088324644804, -1.03971530773794, 30.2726679757281, 7.33088324644804, 
    1359.63623452451, -47.5598220269768, 1.65675095487039, -1.03971530773794, 
    -47.5598220269768, 49.9139749232658), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.228949025919227, 0.858180790550962
    ), logphi = c(0.492499365108286, -1.96189317429053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_87 = structure(list(
    par = c(-1.03417476475503, 0.790594183365539, 0.508182840539426, 
    -1.77369665097417), value = -3.25740269412483, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.9453562571769, 6.54512801490092, 
    43.1011865460462, -5.21002630615719, 6.54512801490092, 18.9224635320784, 
    9.60155914331295, -6.09878874624492, 43.1011865460462, 9.60155914331295, 
    811.964906527685, -97.7768498005016, -5.21002630615719, -6.09878874624492, 
    -97.7768498005016, 48.5412015582831), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-1.03417476475503, 0.790594183365539
    ), logphi = c(0.508182840539426, -1.77369665097417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_88 = structure(list(
    par = c(-0.337855314580033, -0.0601458673745651, 0.504885725082699, 
    -1.29109481811523), value = 12.620434042433, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3470992903794, 0.267559389754979, 
    22.281424347792, -2.1034138297793, 0.267559389754979, 6.23531609633687, 
    -2.91427348653173, -1.22924237699884, 22.281424347792, -2.91427348653173, 
    240.895023365439, -22.6877666300584, -2.1034138297793, -1.22924237699884, 
    -22.6877666300584, 18.0458340497403), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337855314580033, -0.0601458673745651
    ), logphi = c(0.504885725082699, -1.29109481811523)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_89 = structure(list(
    par = c(-0.795336769982102, 0.539750746118194, 0.443163712047367, 
    -1.81741102389991), value = -6.55477842543652, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.5257866619453, 5.88691432268362, 
    41.36457333348, -2.35173869078675, 5.88691432268362, 16.2552631544077, 
    9.85421466359604, -3.79509742531869, 41.36457333348, 9.85421466359604, 
    914.352645956074, -67.5452947546118, -2.35173869078675, -3.79509742531869, 
    -67.5452947546118, 43.046227109711), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.795336769982102, 0.539750746118194
    ), logphi = c(0.443163712047367, -1.81741102389991)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_90 = structure(list(
    par = c(-0.196262630552989, 0.732951590363166, 0.500885903260196, 
    -1.51754441164257), value = 3.12663589499542, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.4156475513397, 3.98663734846316, 
    27.1931689217464, -0.552222870986441, 3.98663734846316, 16.2149813438539, 
    1.99136360312657, -2.35611715959649, 27.1931689217464, 1.99136360312657, 
    441.906249337709, -39.500033451767, -0.552222870986441, -2.35611715959649, 
    -39.500033451767, 29.5044111344733), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196262630552989, 0.732951590363166
    ), logphi = c(0.500885903260196, -1.51754441164257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_91 = structure(list(
    par = c(-0.519429306110727, -1.11923836756032, 0.473053585432387, 
    -1.78283931329392), value = 13.2200749274483, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.53851215451462, -1.1263070147649, 
    33.4061173168365, -3.50050022213111, -1.1263070147649, 0.628527792034816, 
    -3.70605877031416, -0.499598738823437, 33.4061173168365, 
    -3.70605877031416, 977.156917244315, -58.3628314758666, -3.50050022213111, 
    -0.499598738823437, -58.3628314758666, 49.7059010244882), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.519429306110727, -1.11923836756032
    ), logphi = c(0.473053585432387, -1.78283931329392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_92 = structure(list(
    par = c(-0.490842954147894, -0.431050847392081, 0.533975820712759, 
    -1.63383641890592), value = 12.3938820669767, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.43590999366484, -1.39197890991483, 
    32.0096184074359, -4.56404040094505, -1.39197890991483, 2.51450064414627, 
    -6.35956573136198, -0.875551805945562, 32.0096184074359, 
    -6.35956573136198, 679.291386102676, -67.6445826253147, -4.56404040094505, 
    -0.875551805945562, -67.6445826253147, 44.7375173640019), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.490842954147894, -0.431050847392081
    ), logphi = c(0.533975820712759, -1.63383641890592)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_93 = structure(list(
    par = c(-0.396948551267914, 0.458323270919498, 0.462816859697973, 
    -1.62946675860889), value = 5.06601871994155, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.3819344274341, 2.63993966953535, 
    32.0448051804867, -0.943788149410096, 2.63993966953535, 11.1279982843993, 
    2.52830600278031, -2.50425103942575, 32.0448051804867, 2.52830600278031, 
    594.30455049414, -39.2888389171286, -0.943788149410096, -2.50425103942575, 
    -39.2888389171286, 34.112639908157), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396948551267914, 0.458323270919498
    ), logphi = c(0.462816859697973, -1.62946675860889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_94 = structure(list(
    par = c(-0.87805436340603, -2.59657826466647, 0.529325649910946, 
    -1.66711753296732), value = 16.8695351476999, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(3.936694177753, -0.23621319122924, 
    25.7165865642506, -4.97880638583581, -0.23621319122924, 0.041320540766776, 
    -1.60036234486682, 0.0419205790080923, 25.7165865642506, 
    -1.60036234486682, 792.79978229696, -81.2997806383109, -4.97880638583581, 
    0.0419205790080923, -81.2997806383109, 52.5828583590737), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.87805436340603, -2.59657826466647
    ), logphi = c(0.529325649910946, -1.66711753296732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_95 = structure(list(
    par = c(-0.654443434060124, -0.324216945032311, 0.554050679293003, 
    -1.45161139623387), value = 18.4767249256849, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.13728870610697, -0.873858007288675, 
    28.0463603932191, -5.61719018543627, -0.873858007288675, 
    3.03561583514522, -6.12457681548051, -0.800340806073052, 
    28.0463603932191, -6.12457681548051, 414.188505462043, -61.0648734671315, 
    -5.61719018543627, -0.800340806073052, -61.0648734671315, 
    34.9539888269135), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.654443434060124, -0.324216945032311
    ), logphi = c(0.554050679293003, -1.45161139623387)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_96 = structure(list(
    par = c(-0.681261000935689, 0.187702748582287, 0.627317719795552, 
    -1.52629504862878), value = 9.31373300796321, counts = structure(c(299L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.12582393550088, -1.28948281208352, 
    30.9486009513193, -7.82181595537779, -1.28948281208352, 6.20576020438079, 
    -11.1510839415629, -0.675952649409339, 30.9486009513193, 
    -11.1510839415629, 498.574236365457, -100.615408696214, -7.82181595537779, 
    -0.675952649409339, -100.615408696214, 49.7300655464272), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.681261000935689, 0.187702748582287
    ), logphi = c(0.627317719795552, -1.52629504862878)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_97 = structure(list(
    par = c(-0.216879412045986, 0.240906919379961, 0.529652303444219, 
    -1.64784175305257), value = 8.7784155227221, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.0728212264231, -1.08196764525559, 
    33.4856879673495, -2.6449782464244, -1.08196764525559, 7.252457572271, 
    -4.03187244346626, -2.03217364735941, 33.4856879673495, -4.03187244346626, 
    664.47296164851, -59.1421948363813, -2.6449782464244, -2.03217364735941, 
    -59.1421948363813, 41.6290146167952), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216879412045986, 0.240906919379961
    ), logphi = c(0.529652303444219, -1.64784175305257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_98 = structure(list(
    par = c(-0.896163171710975, 0.763957932467103, 0.48200788825956, 
    -1.56814661940218), value = -5.15782995170884, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.312113235939, 10.2155444983154, 
    32.849011541769, -2.98224627237609, 10.2155444983154, 24.2176158431473, 
    8.3796880492315, -4.44991868797651, 32.849011541769, 8.3796880492315, 
    468.213557212049, -54.6529690702569, -2.98224627237609, -4.44991868797651, 
    -54.6529690702569, 31.9594888908981), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.896163171710975, 0.763957932467103
    ), logphi = c(0.48200788825956, -1.56814661940218)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_99 = structure(list(
    par = c(-0.281287997892547, 0.189482262472317, 0.479487015140733, 
    -1.74176660109774), value = 4.17564312968655, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.8564209599679, -0.111249223389009, 
    35.5363981898726, -1.63518530005291, -0.111249223389009, 
    8.10429438447002, -1.0585452194789, -2.10608443906857, 35.5363981898726, 
    -1.0585452194789, 825.197973220559, -50.9259109440219, -1.63518530005291, 
    -2.10608443906857, -50.9259109440219, 43.3512477697739), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281287997892547, 0.189482262472317
    ), logphi = c(0.479487015140733, -1.74176660109774)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_100 = structure(list(
    par = c(-0.0687444542801722, 0.268715653887133, 0.51531810365202, 
    -1.88510412373732), value = 3.113082605554, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.2437036102218, -2.33045690745115, 
    38.2356040982135, -1.41233927031248, -2.33045690745115, 6.83330708439733, 
    -2.52422015778464, -1.93093330036476, 38.2356040982135, -2.52422015778464, 
    1165.31608805115, -62.2688456914933, -1.41233927031248, -1.93093330036476, 
    -62.2688456914933, 51.0037884269288), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0687444542801722, 0.268715653887133
    ), logphi = c(0.51531810365202, -1.88510412373732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_101 = structure(list(
    par = c(-0.84253498737065, 0.442462648914972, 0.504666667137253, 
    -1.52877264932922), value = 1.19862124172229, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.4104896978293, 3.79184527954379, 
    32.8107575020553, -4.4964846555029, 3.79184527954379, 11.948944708351, 
    -0.178501100567274, -3.57177010612553, 32.8107575020553, 
    -0.178501100567274, 451.85715302809, -57.1445900876544, -4.4964846555029, 
    -3.57177010612553, -57.1445900876544, 33.4988691168547), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.84253498737065, 0.442462648914972
    ), logphi = c(0.504666667137253, -1.52877264932922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_102 = structure(list(
    par = c(0.55074583383844, 0.744792913863271, 0.415156354346885, 
    -1.79914686839966), value = 0.00533454841851355, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.5264479298578, -1.01331390800485, 
    14.8721076310976, 2.33399065710516, -1.01331390800485, 16.0706938687194, 
    2.6183537490676, -0.181415011735186, 14.8721076310976, 2.6183537490676, 
    977.080480820402, -4.00434049838139, 2.33399065710516, -0.181415011735186, 
    -4.00434049838139, 42.5499547723751), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.55074583383844, 0.744792913863271
    ), logphi = c(0.415156354346885, -1.79914686839966)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_103 = structure(list(
    par = c(-0.652417616249868, 0.175017513394383, 0.599295742246432, 
    -1.37452606891972), value = 10.8454039357677, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8567157939277, 0.0700711542123145, 
    27.0686119732133, -6.64345995637916, 0.0700711542123145, 
    7.07900674612461, -6.54899815621945, -1.22730261065129, 27.0686119732133, 
    -6.54899815621945, 317.825114576564, -66.9539123996366, -6.64345995637916, 
    -1.22730261065129, -66.9539123996366, 34.5931145320222), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.652417616249868, 0.175017513394383
    ), logphi = c(0.599295742246432, -1.37452606891972)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_104 = structure(list(
    par = c(-0.441276804619742, -0.709630082980856, 0.43015997250257, 
    -1.78143160367314), value = 12.1303278588694, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.7075885642516, -1.14686562069366, 
    35.0286119390475, -2.18946004437726, -1.14686562069366, 1.43350941339548, 
    -2.33208086619641, -0.984976576523522, 35.0286119390475, 
    -2.33208086619641, 927.767168389604, -39.23140685691, -2.18946004437726, 
    -0.984976576523522, -39.23140685691, 43.6165976358538), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.441276804619742, -0.709630082980856
    ), logphi = c(0.43015997250257, -1.78143160367314)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_105 = structure(list(
    par = c(-0.37867930250785, -0.0599281830857097, 0.437604434939572, 
    -1.32566775423556), value = 15.6557031879599, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.8499109015331, 0.444255791265391, 
    22.2202906443592, -0.307532978638392, 0.444255791265391, 
    4.96597279298072, -1.47797128047245, -1.40180525010081, 22.2202906443592, 
    -1.47797128047245, 253.453211348731, -5.79330222150176, -0.307532978638392, 
    -1.40180525010081, -5.79330222150176, 16.2767922953222), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37867930250785, -0.0599281830857097
    ), logphi = c(0.437604434939572, -1.32566775423556)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_106 = structure(list(
    par = c(-0.60509799053372, 0.273356530988258, 0.573087808213657, 
    -1.58119324087431), value = 5.45953242709836, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.1236463763144, -0.353434299604771, 
    33.8419090426534, -6.01538189526352, -0.353434299604771, 
    7.97459540002876, -7.61338405697032, -2.08114992172881, 33.8419090426534, 
    -7.61338405697032, 563.114042895219, -83.534645457739, -6.01538189526352, 
    -2.08114992172881, -83.534645457739, 44.7703820229961), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.60509799053372, 0.273356530988258
    ), logphi = c(0.573087808213657, -1.58119324087431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_107 = structure(list(
    par = c(-0.00791120809684211, -0.428590913843274, 0.44564036959144, 
    -1.70881393082116), value = 12.0436635915044, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.921035542681, -1.93374477186481, 
    29.2972509878808, -0.162736855990886, -1.93374477186481, 
    2.60884727243393, -1.71672432447423, -0.946515704924877, 
    29.2972509878808, -1.71672432447423, 785.129139371676, -21.7466986782711, 
    -0.162736855990886, -0.946515704924877, -21.7466986782711, 
    40.1862504739725), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00791120809684211, -0.428590913843274
    ), logphi = c(0.44564036959144, -1.70881393082116)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_108 = structure(list(
    par = c(-0.21973067229147, -0.00559612522655689, 0.544780270192624, 
    -1.56611052789989), value = 13.526778313559, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.865042774506, -1.4577394971127, 
    30.6118450414949, -3.31218681037804, -1.4577394971127, 5.55635764243334, 
    -5.34887186587341, -1.39412641875225, 30.6118450414949, -5.34887186587341, 
    551.338981661154, -56.9093338933513, -3.31218681037804, -1.39412641875225, 
    -56.9093338933513, 38.3106226702346), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21973067229147, -0.00559612522655689
    ), logphi = c(0.544780270192624, -1.56611052789989)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_109 = structure(list(
    par = c(-0.673617439125241, -0.363360550894236, 0.559631373248246, 
    -1.65635002354435), value = 10.1682642402971, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.6426319271784, -1.36112938875499, 
    32.1681563244525, -5.86750048547913, -1.36112938875499, 2.8194384391611, 
    -9.00835232986452, -0.596414898357267, 32.1681563244525, 
    -9.00835232986452, 729.958110524009, -88.6188638191676, -5.86750048547913, 
    -0.596414898357267, -88.6188638191676, 50.8039690414464), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.673617439125241, -0.363360550894236
    ), logphi = c(0.559631373248246, -1.65635002354435)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_110 = structure(list(
    par = c(-0.167403233022273, 0.203170442507967, 0.372965579337122, 
    -1.28522461918238), value = 10.3480257280444, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.7798553980277, 1.4827062115863, 
    17.643722828975, 2.16838819455667, 1.4827062115863, 7.77582923472409, 
    0.0403757369760172, -1.10652920182197, 17.643722828975, 0.0403757369760172, 
    210.558936040162, 13.4036052825692, 2.16838819455667, -1.10652920182197, 
    13.4036052825692, 13.9593423096329), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.167403233022273, 0.203170442507967
    ), logphi = c(0.372965579337122, -1.28522461918238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_111 = structure(list(
    par = c(-0.418493432794275, -0.200202830540708, 0.594834363590871, 
    -1.5093535716199), value = 15.1194504390716, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.87409845251597, -1.92386778152809, 
    28.8114183639721, -5.73087175625986, -1.92386778152809, 3.178646829749, 
    -7.52344070420463, -0.549294850493709, 28.8114183639721, 
    -7.52344070420463, 486.007679312728, -76.3836595349954, -5.73087175625986, 
    -0.549294850493709, -76.3836595349954, 41.534907961438), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418493432794275, -0.200202830540708
    ), logphi = c(0.594834363590871, -1.5093535716199)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_112 = structure(list(
    par = c(-0.0477221088161427, 0.739225276783428, 0.456101037406488, 
    -1.66358446780104), value = 1.87912666407694, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.4403258917685, 3.86897722082225, 
    26.8586207990973, 1.27184330334096, 3.86897722082225, 15.5161773295331, 
    4.81441402744309, -1.55344482366537, 26.8586207990973, 4.81441402744309, 
    657.317716585282, -30.5238224788118, 1.27184330334096, -1.55344482366537, 
    -30.5238224788118, 34.8893432196018), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0477221088161427, 0.739225276783428
    ), logphi = c(0.456101037406488, -1.66358446780104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_113 = structure(list(
    par = c(-0.526619425717478, 0.401236107123685, 0.592807300402928, 
    -1.53216490492915), value = 8.44971087088303, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.0921178548828, 0.223774649921182, 
    32.3949526035427, -6.05892960692245, 0.223774649921182, 10.0516689611752, 
    -7.06460996680036, -2.12904929886015, 32.3949526035427, -7.06460996680036, 
    485.879885378182, -82.2264356936664, -6.05892960692245, -2.12904929886015, 
    -82.2264356936664, 42.7478747369037), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.526619425717478, 0.401236107123685
    ), logphi = c(0.592807300402928, -1.53216490492915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_114 = structure(list(
    par = c(-0.805755638017895, 0.587066217670238, 0.557259331103316, 
    -1.53710411863517), value = 1.86486357838653, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.5916845883367, 3.56015432023682, 
    33.8056131106157, -6.0055891282218, 3.56015432023682, 13.9281615534337, 
    -2.24231958645404, -3.81311789077188, 33.8056131106157, -2.24231958645404, 
    468.978488188831, -77.5246027524545, -6.0055891282218, -3.81311789077188, 
    -77.5246027524545, 40.3743368186937), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.805755638017895, 0.587066217670238
    ), logphi = c(0.557259331103316, -1.53710411863517)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_115 = structure(list(
    par = c(-0.740358560884173, 0.346063720165687, 0.54044882469277, 
    -1.71513725841143), value = 0.0673112921849199, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.73448229624196, 0.431475489115485, 
    38.9060033523236, -5.7798463064529, 0.431475489115485, 9.13705773442075, 
    -6.33667630900447, -3.01473343156111, 38.9060033523236, -6.33667630900447, 
    778.595792493064, -92.2133964933458, -5.7798463064529, -3.01473343156111, 
    -92.2133964933458, 50.2755320650472), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.740358560884173, 0.346063720165687
    ), logphi = c(0.54044882469277, -1.71513725841143)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_116 = structure(list(
    par = c(-0.316679714918315, 0.282387060562142, 0.557917889075347, 
    -1.82354627444257), value = 6.54432866976834, counts = structure(c(287L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.86581560935562, -2.16786169504601, 
    39.4324571550975, -3.86905728433362, -2.16786169504601, 6.6607686735054, 
    -7.67582718008697, -2.13236290091956, 39.4324571550975, -7.67582718008697, 
    1018.88613091594, -85.2296413422771, -3.86905728433362, -2.13236290091956, 
    -85.2296413422771, 52.424683031127), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316679714918315, 0.282387060562142
    ), logphi = c(0.557917889075347, -1.82354627444257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_117 = structure(list(
    par = c(-0.780360742281573, 0.283118195757969, 0.46006699846103, 
    -1.90633452177014), value = -3.88076458201924, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8153906992481, 0.915492055941769, 
    44.9019697499331, -3.79701602715166, 0.915492055941769, 7.79316533017216, 
    1.65923290018632, -3.3407601528479, 44.9019697499331, 1.65923290018632, 
    1181.78042955441, -85.5480370003381, -3.79701602715166, -3.3407601528479, 
    -85.5480370003381, 51.0123562569298), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.780360742281573, 0.283118195757969
    ), logphi = c(0.46006699846103, -1.90633452177014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_118 = structure(list(
    par = c(-0.359465913321612, -0.1015099890728, 0.470286389174683, 
    -1.65883190259356), value = 8.27794539095772, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.7647463088465, -0.760869135252307, 
    33.1744659516353, -2.07467004309514, -0.760869135252307, 
    4.62153617242222, -2.55312639207972, -1.69863354648747, 33.1744659516353, 
    -2.55312639207972, 680.654949321013, -41.1867649052766, -2.07467004309514, 
    -1.69863354648747, -41.1867649052766, 38.5738407571168), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359465913321612, -0.1015099890728
    ), logphi = c(0.470286389174683, -1.65883190259356)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_119 = structure(list(
    par = c(-0.289789908813303, 0.658837842786638, 0.538471705920333, 
    -1.34151290947459), value = 4.8118374178039, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.2674955494223, 3.87206777130444, 
    23.6464814475923, -2.17418521630819, 3.87206777130444, 15.4688309614848, 
    -0.755882777259131, -2.22648286118954, 23.6464814475923, 
    -0.755882777259131, 265.918232961404, -37.5702710038173, 
    -2.17418521630819, -2.22648286118954, -37.5702710038173, 
    22.5835561726839), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289789908813303, 0.658837842786638
    ), logphi = c(0.538471705920333, -1.34151290947459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_120 = structure(list(
    par = c(-0.249896558856591, 0.119255111254486, 0.478810863734865, 
    -1.79682104796397), value = 2.15117762338288, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.3196809268821, -0.85139533911871, 
    36.6614883691163, -1.62657516367126, -0.85139533911871, 6.48818015180908, 
    -1.45185772804091, -1.94423980248715, 36.6614883691163, -1.45185772804091, 
    948.100863608081, -53.6714072451039, -1.62657516367126, -1.94423980248715, 
    -53.6714072451039, 46.3957543204163), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249896558856591, 0.119255111254486
    ), logphi = c(0.478810863734865, -1.79682104796397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_121 = structure(list(
    par = c(-0.135482695454941, -0.341186655520189, 0.502916525255002, 
    -1.6604851199699), value = 14.1427831943975, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.0262593177323, -2.04363134104213, 
    31.1775532844116, -2.02762987511207, -2.04363134104213, 2.74301718361514, 
    -3.93465593573339, -1.09369623491062, 31.1775532844116, -3.93465593573339, 
    711.099774213686, -44.2844231536288, -2.02762987511207, -1.09369623491062, 
    -44.2844231536288, 41.5114980052422), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135482695454941, -0.341186655520189
    ), logphi = c(0.502916525255002, -1.6604851199699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_122 = structure(list(
    par = c(-0.247248097282318, -1.26472487004699, 0.556197235571508, 
    -1.68513852642089), value = 15.6126645814215, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.22114037854382, -1.16375000880353, 
    28.3905218321223, -3.57239990922409, -1.16375000880353, 0.570344696360081, 
    -3.70935952442863, -0.174122145368827, 28.3905218321223, 
    -3.70935952442863, 792.584345018277, -65.8585773563036, -3.57239990922409, 
    -0.174122145368827, -65.8585773563036, 48.2100098975202), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247248097282318, -1.26472487004699
    ), logphi = c(0.556197235571508, -1.68513852642089)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_123 = structure(list(
    par = c(-0.507903879264529, 0.382393087045198, 0.482325657451585, 
    -1.67836701528579), value = 2.96679356298967, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.0671691655214, 1.83210101578624, 
    35.7597562259393, -2.4486388003897, 1.83210101578624, 10.3446639188043, 
    0.749895117113653, -2.88889585520202, 35.7597562259393, 0.749895117113653, 
    684.111052961622, -55.4330069943987, -2.4486388003897, -2.88889585520202, 
    -55.4330069943987, 39.6823877313324), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.507903879264529, 0.382393087045198
    ), logphi = c(0.482325657451585, -1.67836701528579)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_124 = structure(list(
    par = c(-0.276195650936126, 0.0274742904683614, 0.523409412439041, 
    -1.72532399284586), value = 7.44536401718189, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.1621392453465, -1.4421820044852, 
    35.4471462817862, -3.06040327302526, -1.4421820044852, 5.62689285343865, 
    -5.21335098513376, -1.72385017060961, 35.4471462817862, -5.21335098513376, 
    819.192821859271, -64.1711007345336, -3.06040327302526, -1.72385017060961, 
    -64.1711007345336, 46.6106094569874), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276195650936126, 0.0274742904683614
    ), logphi = c(0.523409412439041, -1.72532399284586)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_125 = structure(list(
    par = c(-0.303863705609879, 0.185042687294585, 0.453429890935309, 
    -1.62278516812062), value = 5.58184325355187, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.5715331937589, 0.960073258227112, 
    31.0880684553094, -0.774108253720485, 0.960073258227112, 
    8.70973026700916, -0.0248359988130886, -1.95849642703472, 
    31.0880684553094, -0.0248359988130886, 599.312321808654, 
    -30.6398103084859, -0.774108253720485, -1.95849642703472, 
    -30.6398103084859, 33.7342006289099), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303863705609879, 0.185042687294585
    ), logphi = c(0.453429890935309, -1.62278516812062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_126 = structure(list(
    par = c(-0.362864633771416, -1.07301660819584, 0.488617905310118, 
    -1.64539304464224), value = 17.7554399513322, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.19035791913103, -1.23921551775652, 
    30.181941522045, -2.9831483634446, -1.23921551775652, 0.667754084027194, 
    -3.17613637168535, -0.517272729094742, 30.181941522045, -3.17613637168535, 
    700.456729113341, -43.5412891275355, -2.9831483634446, -0.517272729094742, 
    -43.5412891275355, 41.3173934097344), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362864633771416, -1.07301660819584
    ), logphi = c(0.488617905310118, -1.64539304464224)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_127 = structure(list(
    par = c(-0.610928868639858, 0.0862265920777733, 0.51302872610453, 
    -1.56905327466605), value = 9.27013262373668, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.3891044066783, 0.116351541290527, 
    32.9575324298226, -4.31857154437054, 0.116351541290527, 6.29964440790332, 
    -4.40952914404491, -2.15833004357791, 32.9575324298226, -4.40952914404491, 
    539.91429600897, -58.2032552167711, -4.31857154437054, -2.15833004357791, 
    -58.2032552167711, 37.4429812834975), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.610928868639858, 0.0862265920777733
    ), logphi = c(0.51302872610453, -1.56905327466605)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_128 = structure(list(
    par = c(-0.42243065995708, -0.444574784773304, 0.467077363589827, 
    -1.72232261127914), value = 10.1385686821102, counts = structure(c(293L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.5807066046459, -1.35912664545046, 
    34.4241094780706, -2.73873313205719, -1.35912664545046, 2.21608701078679, 
    -3.54203431651712, -1.23655754480367, 34.4241094780706, -3.54203431651712, 
    815.377579843624, -47.4956228757595, -2.73873313205719, -1.23655754480367, 
    -47.4956228757595, 43.4624227101388), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42243065995708, -0.444574784773304
    ), logphi = c(0.467077363589827, -1.72232261127914)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_129 = structure(list(
    par = c(-0.026884438399395, 0.581449597466244, 0.530071099347408, 
    -1.84604509152378), value = -0.133736894212111, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.2074413239944, -0.260121941320079, 
    37.5723163554831, -0.975068327635498, -0.260121941320079, 
    12.6328399538966, -0.0267292341593617, -2.37631307664632, 
    37.5723163554831, -0.0267292341593617, 1042.30673485417, 
    -64.936484902467, -0.975068327635498, -2.37631307664632, 
    -64.936484902467, 48.8176496058479), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.026884438399395, 0.581449597466244
    ), logphi = c(0.530071099347408, -1.84604509152378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_130 = structure(list(
    par = c(-0.448061606257316, -1.24215021440837, 0.520281991749449, 
    -1.84536561650542), value = 11.7477328667864, counts = structure(c(321L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.81772675456449, -1.17206001082337, 
    31.4866893709187, -3.56918269250883, -1.17206001082337, 0.500121501989526, 
    -4.51545175028656, -0.216872822367264, 31.4866893709187, 
    -4.51545175028656, 1152.00537280957, -73.6563258507683, -3.56918269250883, 
    -0.216872822367264, -73.6563258507683, 56.2542891056061), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.448061606257316, -1.24215021440837
    ), logphi = c(0.520281991749449, -1.84536561650542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_131 = structure(list(
    par = c(0.374462089299946, 0.436705390494051, 0.46406489879108, 
    -1.57421594802677), value = 10.1241611411452, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.1100942508757, -2.40188384204032, 
    21.2727250028522, 1.69735882038502, -2.40188384204032, 10.3727897000638, 
    -0.647983196877533, -1.13150392477834, 21.2727250028522, 
    -0.647983196877533, 554.84265216732, -13.986282894507, 1.69735882038502, 
    -1.13150392477834, -13.986282894507, 32.0136546316796), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.374462089299946, 0.436705390494051
    ), logphi = c(0.46406489879108, -1.57421594802677)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_132 = structure(list(
    par = c(-0.126018771012034, 0.137003263731389, 0.520962627404393, 
    -1.81061148906871), value = 7.09450745796583, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.263248237776, -2.1051722358667, 
    36.727280929405, -2.0613417514026, -2.1051722358667, 6.14306925106334, 
    -4.20626143271541, -1.79540299016789, 36.727280929405, -4.20626143271541, 
    994.173880391358, -62.4035328954387, -2.0613417514026, -1.79540299016789, 
    -62.4035328954387, 49.3652438138259), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126018771012034, 0.137003263731389
    ), logphi = c(0.520962627404393, -1.81061148906871)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_133 = structure(list(
    par = c(-0.244086887134416, 0.260109713230685, 0.534853177748548, 
    -1.92520124309575), value = 0.845428912909099, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.4531693438936, -2.27752655179714, 
    41.3821600160347, -2.82529842055013, -2.27752655179714, 6.74092180652508, 
    -5.54357452386967, -2.10395004307529, 41.3821600160347, -5.54357452386967, 
    1277.0194021261, -78.9070238731426, -2.82529842055013, -2.10395004307529, 
    -78.9070238731426, 53.7706133054705), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.244086887134416, 0.260109713230685
    ), logphi = c(0.534853177748548, -1.92520124309575)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_134 = structure(list(
    par = c(0.49169021407442, 0.36814187633928, 0.520111475878396, 
    -1.43620273654251), value = 15.4441447816696, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.7156212364824, -4.28633380789023, 
    19.5138965763952, 0.663778153331407, -4.28633380789023, 9.48578289339252, 
    -2.8901915598567, -1.07770861301759, 19.5138965763952, -2.8901915598567, 
    387.764390666234, -24.7607809091832, 0.663778153331407, -1.07770861301759, 
    -24.7607809091832, 26.1854522465299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.49169021407442, 0.36814187633928
    ), logphi = c(0.520111475878396, -1.43620273654251)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_135 = structure(list(
    par = c(-0.51511606662601, -0.489405547133765, 0.476364713065683, 
    -1.69689641569203), value = 13.8093812161826, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.6579695365584, -1.13427764469876, 
    34.1341212850566, -3.42229338201605, -1.13427764469876, 2.24312576690977, 
    -4.25691859939903, -1.18225369116765, 34.1341212850566, -4.25691859939903, 
    772.849220495253, -52.2606653685642, -3.42229338201605, -1.18225369116765, 
    -52.2606653685642, 43.3523767360278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.51511606662601, -0.489405547133765
    ), logphi = c(0.476364713065683, -1.69689641569203)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_136 = structure(list(
    par = c(-0.221618172195656, 0.437540109654994, 0.493853880472906, 
    -1.51923122926097), value = 8.9910602393013, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5506832168205, 0.963191425285004, 
    28.2546821614993, -1.06263665378137, 0.963191425285004, 9.4624643409702, 
    -0.596789139883924, -2.15347258736287, 28.2546821614993, 
    -0.596789139883924, 455.288263797815, -36.1532363308825, 
    -1.06263665378137, -2.15347258736287, -36.1532363308825, 
    29.8572659449547), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221618172195656, 0.437540109654994
    ), logphi = c(0.493853880472906, -1.51923122926097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_137 = structure(list(
    par = c(-0.132867623157025, -0.115200623312103, 0.448846284536221, 
    -1.77726348589588), value = 6.89070889290283, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.5921349083977, -1.39224497042179, 
    33.2099795186114, -0.570362097773724, -1.39224497042179, 
    4.45945666349701, -1.00813295533797, -1.37931149368775, 33.2099795186114, 
    -1.00813295533797, 910.471026714932, -35.1597296996964, -0.570362097773724, 
    -1.37931149368775, -35.1597296996964, 43.5090086123857), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132867623157025, -0.115200623312103
    ), logphi = c(0.448846284536221, -1.77726348589588)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_138 = structure(list(
    par = c(-0.106144692208046, 0.421640952450171, 0.535045319435736, 
    -1.62423294968708), value = 6.17052916347133, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8059747828722, -0.520592467134762, 
    32.0338792982877, -1.93138581650043, -0.520592467134762, 
    10.477663194397, -2.90982593775801, -2.16176410861024, 32.0338792982877, 
    -2.90982593775801, 617.618447893653, -56.4180770313838, -1.93138581650043, 
    -2.16176410861024, -56.4180770313838, 39.6224141991919), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106144692208046, 0.421640952450171
    ), logphi = c(0.535045319435736, -1.62423294968708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_139 = structure(list(
    par = c(-0.667509924648234, -0.215252002946023, 0.551933541097443, 
    -1.54315095024087), value = 14.159054825723, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.61250156258819, -0.833064058181066, 
    30.9488036878136, -5.8079691818147, -0.833064058181066, 3.98639762710928, 
    -7.30786241653902, -1.03136677442883, 30.9488036878136, -7.30786241653902, 
    532.359477161126, -72.3550333825429, -5.8079691818147, -1.03136677442883, 
    -72.3550333825429, 41.5362452863555), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.667509924648234, -0.215252002946023
    ), logphi = c(0.551933541097443, -1.54315095024087)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_140 = structure(list(
    par = c(-0.389154381155002, 0.292105205160984, 0.588584148514829, 
    -1.21194418989098), value = 9.56129989454388, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.2816802055634, 0.820529309386586, 
    21.0799958852981, -4.34010772520921, 0.820529309386586, 8.92382047767981, 
    -3.69973649183564, -1.19355517691488, 21.0799958852981, -3.69973649183564, 
    186.247374202253, -39.1756630979678, -4.34010772520921, -1.19355517691488, 
    -39.1756630979678, 20.858092701026), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389154381155002, 0.292105205160984
    ), logphi = c(0.588584148514829, -1.21194418989098)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_141 = structure(list(
    par = c(-0.0453574518875331, 0.529677349706677, 0.519071951309468, 
    -1.57950170941883), value = 5.04615060077242, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.7992552053686, 0.478830513683803, 
    29.282218267479, -0.92402780316192, 0.478830513683803, 12.1026542372338, 
    -1.20567425709872, -2.10676340983706, 29.282218267479, -1.20567425709872, 
    544.062355790187, -46.1577480530551, -0.92402780316192, -2.10676340983706, 
    -46.1577480530551, 35.2282938760329), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0453574518875331, 0.529677349706677
    ), logphi = c(0.519071951309468, -1.57950170941883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_142 = structure(list(
    par = c(-0.0283286552759709, -2.1568094869971, 0.479111336050163, 
    -1.75821591753891), value = 16.3368941380108, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.5104202434703, -0.660564925425433, 
    28.1382519320417, -1.45787971517208, -0.660564925425433, 
    0.097824631950516, -1.02356332565279, -0.144977927885037, 
    28.1382519320417, -1.02356332565279, 930.981688998855, -33.0186254129394, 
    -1.45787971517208, -0.144977927885037, -33.0186254129394, 
    47.3435751411344), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0283286552759709, -2.1568094869971
    ), logphi = c(0.479111336050163, -1.75821591753891)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_143 = structure(list(
    par = c(-0.257945676870385, 0.576150163814505, 0.520490764944242, 
    -1.5477064008515), value = 4.79461241534911, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.1145732540113, 1.90005826317119, 
    30.1756654019769, -1.85816224740343, 1.90005826317119, 12.6438765826187, 
    -0.416502932143459, -2.55773294410844, 30.1756654019769, 
    -0.416502932143459, 489.036510522123, -49.9252131993533, 
    -1.85816224740343, -2.55773294410844, -49.9252131993533, 
    33.7113604680361), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257945676870385, 0.576150163814505
    ), logphi = c(0.520490764944242, -1.5477064008515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_144 = structure(list(
    par = c(-0.548498237748413, 0.213540293820935, 0.519828332083181, 
    -1.6614317769054), value = 4.6806141049796, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.2722007363786, 0.0462368916487321, 
    36.0039806803769, -4.21944430772925, 0.0462368916487321, 
    7.6666316513041, -4.41046948163049, -2.48115850931541, 36.0039806803769, 
    -4.41046948163049, 683.076530251014, -69.3902181814199, -4.21944430772925, 
    -2.48115850931541, -69.3902181814199, 43.629313643212), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.548498237748413, 0.213540293820935
    ), logphi = c(0.519828332083181, -1.6614317769054)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_145 = structure(list(
    par = c(-0.521484065584654, 0.0877580040707615, 0.412277331500183, 
    -1.68244760811669), value = 6.70713846465546, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.1080387336133, 1.12000352725516, 
    33.461676990143, -0.810359294001195, 1.12000352725516, 5.71532418192078, 
    1.996901204393, -2.03119026265242, 33.461676990143, 1.996901204393, 
    671.92152921236, -26.2681597921199, -0.810359294001195, -2.03119026265242, 
    -26.2681597921199, 33.3934292697791), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.521484065584654, 0.0877580040707615
    ), logphi = c(0.412277331500183, -1.68244760811669)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_146 = structure(list(
    par = c(0.0221631734683745, 0.0625979304554395, 0.468687421675039, 
    -1.87082891229855), value = 6.1869743708638, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.3964286160324, -2.32999258864552, 
    34.0563727208032, -0.173437812001076, -2.32999258864552, 
    5.24442823612858, -0.631953967600296, -1.37953414580672, 
    34.0563727208032, -0.631953967600296, 1137.64209570033, -42.8692613221315, 
    -0.173437812001076, -1.37953414580672, -42.8692613221315, 
    48.8920409478233), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0221631734683745, 0.0625979304554395
    ), logphi = c(0.468687421675039, -1.87082891229855)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_147 = structure(list(
    par = c(-0.392752458307802, 0.0994814129425391, 0.460707967544877, 
    -1.67088552829799), value = 7.75377672055349, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.9244927170878, -0.0266965005657482, 
    33.8089032663191, -1.68756737473075, -0.0266965005657482, 
    5.83676500776065, -0.846324904602014, -2.06945830172334, 
    33.8089032663191, -0.846324904602014, 684.780763371418, -40.7428692905665, 
    -1.68756737473075, -2.06945830172334, -40.7428692905665, 
    37.8073201394713), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392752458307802, 0.0994814129425391
    ), logphi = c(0.460707967544877, -1.67088552829799)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_148 = structure(list(
    par = c(-1.19218881926938, -0.780863253333238, 0.553746249864693, 
    -1.66172925834853), value = 13.7420240067338, counts = structure(c(289L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(3.88268907514089, -0.960137855887666, 
    28.2941166456219, -6.98745235805376, -0.960137855887666, 
    1.26804068223407, -10.1058867869597, 0.383603956599643, 28.2941166456219, 
    -10.1058867869597, 785.163388852261, -112.586671562553, -6.98745235805376, 
    0.383603956599643, -112.586671562553, 59.8707215653249), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-1.19218881926938, -0.780863253333238
    ), logphi = c(0.553746249864693, -1.66172925834853)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_149 = structure(list(
    par = c(-0.698822267814055, -0.525765812822166, 0.536456118214355, 
    -1.68510165500633), value = 13.4958087477044, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.51370396287376, -1.41630480232635, 
    32.5344806073602, -5.46585868121952, -1.41630480232635, 1.91650225822571, 
    -7.89007815793497, -0.613195902054997, 32.5344806073602, 
    -7.89007815793497, 786.100084638974, -83.2507467851684, -5.46585868121952, 
    -0.613195902054997, -83.2507467851684, 50.8957365861207), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.698822267814055, -0.525765812822166
    ), logphi = c(0.536456118214355, -1.68510165500633)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_150 = structure(list(
    par = c(-0.270034939015484, 0.738207864782657, 0.434398363866487, 
    -2.02695101865966), value = -10.6902323736821, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.3300353261705, 6.07628041215946, 
    37.0990766875856, 1.08266793130696, 6.07628041215946, 17.8837390309994, 
    15.6059064053693, -1.30407877074745, 37.0990766875856, 15.6059064053693, 
    1523.74487925533, -56.1427019905025, 1.08266793130696, -1.30407877074745, 
    -56.1427019905025, 49.005906044286), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270034939015484, 0.738207864782657
    ), logphi = c(0.434398363866487, -2.02695101865966)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_151 = structure(list(
    par = c(0.0221278916242746, 0.0442562595915861, 0.454789136332372, 
    -1.60096290652618), value = 11.2060626440888, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.0474951586286, -1.31617395826567, 
    26.8587003704468, 0.394564533490183, -1.31617395826567, 5.99529143840982, 
    -1.25016689356272, -1.32705681288314, 26.8587003704468, -1.25016689356272, 
    586.167108434843, -18.8227035440303, 0.394564533490183, -1.32705681288314, 
    -18.8227035440303, 33.2205953457176), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0221278916242746, 0.0442562595915861
    ), logphi = c(0.454789136332372, -1.60096290652618)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_152 = structure(list(
    par = c(-0.0420510277363248, -0.0367677570074542, 0.487882452878065, 
    -1.36494196967402), value = 19.1062165075366, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0471345456159, -1.63646940620765, 
    22.2753383400942, -0.588088010733401, -1.63646940620765, 
    4.58030160466194, -2.58653171592016, -1.1610236159143, 22.2753383400942, 
    -2.58653171592016, 305.555249859424, -17.5353574198844, -0.588088010733401, 
    -1.1610236159143, -17.5353574198844, 20.7604988053944), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0420510277363248, -0.0367677570074542
    ), logphi = c(0.487882452878065, -1.36494196967402)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_153 = structure(list(
    par = c(0.0610341162096833, -0.219306044471466, 0.411654511943647, 
    -1.73934195002118), value = 9.39647195133903, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.6965172484778, -1.85037949185229, 
    27.2275271262501, 0.991639527381238, -1.85037949185229, 3.67372620724282, 
    -0.115414745760489, -0.909674719107301, 27.2275271262501, 
    -0.115414745760489, 825.052043249119, -9.72041809510493, 
    0.991639527381238, -0.909674719107301, -9.72041809510493, 
    38.8568782003773), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0610341162096833, -0.219306044471466
    ), logphi = c(0.411654511943647, -1.73934195002118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_154 = structure(list(
    par = c(-0.394074929268365, -0.0580796839951217, 0.402003081322019, 
    -1.56941675730543), value = 10.076370284648, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0070886119357, 0.788621767000564, 
    28.3714052873307, 0.133184718587032, 0.788621767000564, 5.34965950294009, 
    0.386606006763657, -1.5375766593273, 28.3714052873307, 0.386606006763657, 
    499.291642027888, -6.98892124995076, 0.133184718587032, -1.5375766593273, 
    -6.98892124995076, 26.7457665699133), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394074929268365, -0.0580796839951217
    ), logphi = c(0.402003081322019, -1.56941675730543)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_155 = structure(list(
    par = c(-0.0981139984929427, -0.399942302298213, 0.484678200097867, 
    -1.56470839112064), value = 16.7841953073182, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.4433348719654, -1.90298074453921, 
    27.9076693239233, -1.28694243839433, -1.90298074453921, 2.45152311251218, 
    -3.01345498776584, -1.0104545742351, 27.9076693239233, -3.01345498776584, 
    551.402104374432, -28.7513610004453, -1.28694243839433, -1.0104545742351, 
    -28.7513610004453, 33.7470967215481), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0981139984929427, -0.399942302298213
    ), logphi = c(0.484678200097867, -1.56470839112064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_156 = structure(list(
    par = c(-0.240693851622077, -0.0354408834359682, 0.483606719689725, 
    -1.45123232414486), value = 16.1850221141232, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.6379981584843, -0.832565477004721, 
    26.2555323535807, -1.3957966875644, -0.832565477004721, 4.65407191985179, 
    -2.6384869151741, -1.46099345066375, 26.2555323535807, -2.6384869151741, 
    388.704591843592, -25.2412749102149, -1.3957966875644, -1.46099345066375, 
    -25.2412749102149, 25.7195135899835), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240693851622077, -0.0354408834359682
    ), logphi = c(0.483606719689725, -1.45123232414486)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_157 = structure(list(
    par = c(-0.480722879809939, 0.00615139581308619, 0.515541229276459, 
    -1.48758708991345), value = 15.0140435158577, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.2417819254927, -0.379155991048208, 
    29.5253436961573, -3.59566184959803, -0.379155991048208, 
    5.26314486570811, -4.11605261518844, -1.72198756720476, 29.5253436961573, 
    -4.11605261518844, 435.044578117161, -46.1186534899127, -3.59566184959803, 
    -1.72198756720476, -46.1186534899127, 31.4666944913888), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.480722879809939, 0.00615139581308619
    ), logphi = c(0.515541229276459, -1.48758708991345)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_158 = structure(list(
    par = c(-0.317457924923877, 0.631872762378922, 0.491648702936726, 
    -1.53785985349285), value = 2.53466721964557, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.3822674487401, 3.5467985937121, 
    28.9505690362901, -1.01067411506506, 3.5467985937121, 13.4328035235054, 
    1.97123590073289, -2.55693111195221, 28.9505690362901, 1.97123590073289, 
    465.275733854797, -40.2853397184488, -1.01067411506506, -2.55693111195221, 
    -40.2853397184488, 30.3922940054768), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317457924923877, 0.631872762378922
    ), logphi = c(0.491648702936726, -1.53785985349285)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_159 = structure(list(
    par = c(-0.0939017615478037, 0.0962385516216685, 0.497154937012042, 
    -1.49189321365194), value = 12.8247724044294, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.4006461885459, -1.13280192426402, 
    26.6724710882293, -1.08138555665604, -1.13280192426402, 6.2412149048896, 
    -2.73303007247705, -1.50677634769281, 26.6724710882293, -2.73303007247705, 
    439.696623189434, -30.3827283958391, -1.08138555665604, -1.50677634769281, 
    -30.3827283958391, 28.9537965167952), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0939017615478037, 0.0962385516216685
    ), logphi = c(0.497154937012042, -1.49189321365194)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_160 = structure(list(
    par = c(-0.867667610220645, -2.03276090627608, 0.462490801550194, 
    -2.02190792837611), value = 7.40470359357224, counts = structure(c(299L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(3.42942129627488, -0.458245512646727, 
    30.9806809832835, -3.60527013931744, -0.458245512646727, 
    0.119584835367448, -3.04147831986512, -0.0165661022677455, 
    30.9806809832835, -3.04147831986512, 1706.03693702898, -96.7872383581536, 
    -3.60527013931744, -0.0165661022677455, -96.7872383581536, 
    62.9228525275138), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.867667610220645, -2.03276090627608
    ), logphi = c(0.462490801550194, -2.02190792837611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_161 = structure(list(
    par = c(-0.312208957931945, -0.0477006178722503, 0.44429310353256, 
    -1.48914679651212), value = 14.6142254359978, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.3345197020371, -0.0338936900767806, 
    26.8642535488084, -0.593520789848867, -0.0338936900767806, 
    4.9516232651925, -1.39341734595178, -1.54954721875988, 26.8642535488084, 
    -1.39341734595178, 418.530705902143, -15.2974354481472, -0.593520789848867, 
    -1.54954721875988, -15.2974354481472, 25.3047888101321), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312208957931945, -0.0477006178722503
    ), logphi = c(0.44429310353256, -1.48914679651212)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_162 = structure(list(
    par = c(-0.208691622723812, -0.191435578768034, 0.461158326389422, 
    -1.4673646319886), value = 14.3508600314832, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8332615168556, -0.695545200546377, 
    25.8445411809305, -0.768469168743735, -0.695545200546377, 
    4.34230558132853, -2.25300062739464, -1.27639364766452, 25.8445411809305, 
    -2.25300062739464, 406.091106689654, -16.9280415032169, -0.768469168743735, 
    -1.27639364766452, -16.9280415032169, 25.4448093315318), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208691622723812, -0.191435578768034
    ), logphi = c(0.461158326389422, -1.4673646319886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_163 = structure(list(
    par = c(-0.10780901569625, -0.338056917087064, 0.443388313219069, 
    -1.65512980272731), value = 11.3066174720898, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.7331827573538, -1.24588707439699, 
    29.3394817241222, -0.357252032401334, -1.24588707439699, 
    3.60536617183271, -1.71200869214516, -1.11263245861082, 29.3394817241222, 
    -1.71200869214516, 678.281038633877, -20.3482557523671, -0.357252032401334, 
    -1.11263245861082, -20.3482557523671, 36.4045568472804), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.10780901569625, -0.338056917087064
    ), logphi = c(0.443388313219069, -1.65512980272731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_164 = structure(list(
    par = c(-0.18289878538399, -0.445192463191543, 0.432363130139582, 
    -1.69591926978241), value = 10.4529622542452, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.0149723968364, -1.27882344758135, 
    30.8031111067031, -0.596740559632991, -1.27882344758135, 
    2.61848852600721, -1.54002955410348, -1.06834286572877, 30.8031111067031, 
    -1.54002955410348, 747.425401997681, -21.6376475037361, -0.596740559632991, 
    -1.06834286572877, -21.6376475037361, 38.078796415153), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18289878538399, -0.445192463191543
    ), logphi = c(0.432363130139582, -1.69591926978241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_165 = structure(list(
    par = c(-0.0823417570641038, -0.443082344479657, 0.497106792191953, 
    -1.48185049125731), value = 18.8006416048708, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.4686817823138, -1.83854401125672, 
    25.662308603458, -1.45040297150345, -1.83854401125672, 2.42364656699579, 
    -3.10035901840422, -0.883852565802812, 25.662308603458, -3.10035901840422, 
    442.788515931269, -27.107679392735, -1.45040297150345, -0.883852565802812, 
    -27.107679392735, 29.0456141183171), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0823417570641038, -0.443082344479657
    ), logphi = c(0.497106792191953, -1.48185049125731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_166 = structure(list(
    par = c(-0.224181135251702, 0.0820920381506101, 0.474979185791755, 
    -1.52826172036595), value = 9.46270281286207, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.1629474376413, -0.492520984440858, 
    28.2793579500229, -1.06241269803853, -0.492520984440858, 
    5.87751596370367, -1.95411696868319, -1.68647936815702, 28.2793579500229, 
    -1.95411696868319, 477.216239858969, -28.0724434844615, -1.06241269803853, 
    -1.68647936815702, -28.0724434844615, 29.7676186242768), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224181135251702, 0.0820920381506101
    ), logphi = c(0.474979185791755, -1.52826172036595)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_167 = structure(list(
    par = c(-0.439137025852506, -0.566853112254355, 0.500876960534837, 
    -1.80168013799815), value = 13.8442508616875, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.08152092091063, -1.73580871498658, 
    35.1597601775389, -3.60667939292014, -1.73580871498658, 1.68703770819789, 
    -5.62408434756634, -0.875007068135147, 35.1597601775389, 
    -5.62408434756634, 1013.41256418364, -67.6734581646077, -3.60667939292014, 
    -0.875007068135147, -67.6734581646077, 51.7155574888406), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.439137025852506, -0.566853112254355
    ), logphi = c(0.500876960534837, -1.80168013799815)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_168 = structure(list(
    par = c(0.0272272593215027, -0.60899989990018, 0.539576926173271, 
    -1.73127745142429), value = 17.4231265024498, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.6811602318402, -2.32203255734476, 
    30.4301456699463, -2.12040184521811, -2.32203255734476, 1.94803976061309, 
    -4.51145925239871, -0.633480369938155, 30.4301456699463, 
    -4.51145925239871, 863.589701056711, -53.1066738838071, -2.12040184521811, 
    -0.633480369938155, -53.1066738838071, 47.4941576555921), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0272272593215027, -0.60899989990018
    ), logphi = c(0.539576926173271, -1.73127745142429)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_169 = structure(list(
    par = c(-0.335103156706466, -0.0652138200146112, 0.487317106726781, 
    -1.79335856211097), value = 8.20956026068698, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.3288110896725, -1.24573067639133, 
    37.0774705187316, -2.5645274077668, -1.24573067639133, 4.83715222943104, 
    -3.56867298689778, -1.72996549863136, 37.0774705187316, -3.56867298689778, 
    955.906522897454, -59.4170739516287, -2.5645274077668, -1.72996549863136, 
    -59.4170739516287, 47.9332180343128), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335103156706466, -0.0652138200146112
    ), logphi = c(0.487317106726781, -1.79335856211097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_170 = structure(list(
    par = c(-1.04775852107156, -4.60214714001851, 0.486806407696447, 
    -1.96467259624373), value = 7.56767604729338, counts = structure(c(345L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(2.23430999746199, -0.0324620228475681, 
    25.1436064977462, -3.58319585958, -0.0324620228475681, 0.000746697814690833, 
    -0.292849536620565, 0.0108673345877719, 25.1436064977462, 
    -0.292849536620565, 1547.98482241247, -103.894786764869, 
    -3.58319585958, 0.0108673345877719, -103.894786764869, 65.9321166898152
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-1.04775852107156, -4.60214714001851
    ), logphi = c(0.486806407696447, -1.96467259624373)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_171 = structure(list(
    par = c(0.244855113067341, -0.602504197264041, 0.478021214060364, 
    -1.84614798557324), value = 14.1255577999359, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.957880453359, -2.924539427962, 
    28.760935580685, -0.0574371199490997, -2.924539427962, 1.87310049071243, 
    -2.17541569602631, -0.636204737780588, 28.760935580685, -2.17541569602631, 
    1115.78460463768, -30.7345110877044, -0.0574371199490997, 
    -0.636204737780588, -30.7345110877044, 50.0297744823186), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.244855113067341, -0.602504197264041
    ), logphi = c(0.478021214060364, -1.84614798557324)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_172 = structure(list(
    par = c(-0.0949192489520614, 0.0326115335508265, 0.482529225902709, 
    -1.72880464485358), value = 7.78879157070653, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3132071321883, -1.65916814420797, 
    32.9195490054168, -1.00010973924647, -1.65916814420797, 5.38328236143748, 
    -2.16226785609841, -1.58603080635533, 32.9195490054168, -2.16226785609841, 
    816.806709646567, -42.5481230903468, -1.00010973924647, -1.58603080635533, 
    -42.5481230903468, 43.1082417406969), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0949192489520614, 0.0326115335508265
    ), logphi = c(0.482529225902709, -1.72880464485358)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_173 = structure(list(
    par = c(0.170444263345488, 0.355785344889236, 0.46756320386667, 
    -1.83177119986805), value = 5.9418492989911, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.5749365224641, -1.85059146073918, 
    29.941256513899, 0.950759621698438, -1.85059146073918, 8.33768695684967, 
    1.19793127439927, -1.30814184018391, 29.941256513899, 1.19793127439927, 
    1034.97411078091, -35.8284454793356, 0.950759621698438, -1.30814184018391, 
    -35.8284454793356, 46.4427737145723), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.170444263345488, 0.355785344889236
    ), logphi = c(0.46756320386667, -1.83177119986805)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_174 = structure(list(
    par = c(-0.137896086280403, -0.282839525742319, 0.567299904314857, 
    -1.70034738007656), value = 12.1025015735904, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.3718852380853, -2.27815220599226, 
    32.1175387076877, -3.48063564215018, -2.27815220599226, 3.47066422268227, 
    -6.90128120295341, -0.817303000832936, 32.1175387076877, 
    -6.90128120295341, 793.820151213431, -69.964582422255, -3.48063564215018, 
    -0.817303000832936, -69.964582422255, 47.6921892986759), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137896086280403, -0.282839525742319
    ), logphi = c(0.567299904314857, -1.70034738007656)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_175 = structure(list(
    par = c(-0.243174094991862, -0.0688891973038423, 0.459113455423455, 
    -1.63721804449842), value = 8.91515242122237, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3012715856372, -1.05534275585129, 
    31.1623315223386, -1.07676613714247, -1.05534275585129, 4.22639795250035, 
    -1.73980210016467, -1.58175992348575, 31.1623315223386, -1.73980210016467, 
    639.985389865316, -30.8400858979319, -1.07676613714247, -1.58175992348575, 
    -30.8400858979319, 35.9015420401398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243174094991862, -0.0688891973038423
    ), logphi = c(0.459113455423455, -1.63721804449842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_176 = structure(list(
    par = c(-0.227340634661054, 0.146700274274423, 0.478543629897653, 
    -1.50379424346823), value = 9.03976721032726, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.4838729882201, 0.0565636582017248, 
    27.6475886238359, -1.05731919242125, 0.0565636582017248, 
    7.29003775301607, -1.84130514169212, -1.74752988257865, 27.6475886238359, 
    -1.84130514169212, 444.025925206759, -27.8996161269252, -1.05731919242125, 
    -1.74752988257865, -27.8996161269252, 28.3301410655135), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227340634661054, 0.146700274274423
    ), logphi = c(0.478543629897653, -1.50379424346823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_177 = structure(list(
    par = c(-0.202393363612545, 0.494790025144343, 0.490571906844544, 
    -1.59721366864862), value = 3.0031224600275, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.7273525577549, 1.87839189447203, 
    30.287533374862, -0.822298071523342, 1.87839189447203, 12.8559341392442, 
    0.474999021893296, -2.27221200310712, 30.287533374862, 0.474999021893296, 
    560.340741596832, -41.3441252082869, -0.822298071523342, 
    -2.27221200310712, -41.3441252082869, 34.3634070902876), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202393363612545, 0.494790025144343
    ), logphi = c(0.490571906844544, -1.59721366864862)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_178 = structure(list(
    par = c(0.0123298535636394, 0.00527777986607393, 0.522985416469962, 
    -1.57774168893209), value = 14.1279801435042, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.2096267836678, -2.53951004758335, 
    28.6975453542837, -1.50768066142781, -2.53951004758335, 4.67773697110374, 
    -3.91530076893076, -1.32916868311739, 28.6975453542837, -3.91530076893076, 
    568.241102647526, -42.7619996492545, -1.50768066142781, -1.32916868311739, 
    -42.7619996492545, 36.4415393216966), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0123298535636394, 0.00527777986607393
    ), logphi = c(0.522985416469962, -1.57774168893209)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_179 = structure(list(
    par = c(-0.0263401572032353, 0.506686683690241, 0.587163474168906, 
    -1.38887066239845), value = 8.69704375452698, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.5609833059067, -0.413394989351445, 
    24.8669898668119, -3.00054388291393, -0.413394989351445, 
    11.5149094415123, -4.10055111510488, -1.54191986601049, 24.8669898668119, 
    -4.10055111510488, 321.366077101093, -52.4195243414294, -3.00054388291393, 
    -1.54191986601049, -52.4195243414294, 29.2826294430171), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0263401572032353, 0.506686683690241
    ), logphi = c(0.587163474168906, -1.38887066239845)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_180 = structure(list(
    par = c(0.24647158654978, 0.704583883564471, 0.451733968668784, 
    -1.61448556660958), value = 4.58217795518795, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0269108470728, 0.566792389911086, 
    21.7557008883595, 1.98705030740598, 0.566792389911086, 13.4310444053209, 
    1.94666325548098, -1.09013444138384, 21.7557008883595, 1.94666325548098, 
    598.831304813308, -16.7576184716411, 1.98705030740598, -1.09013444138384, 
    -16.7576184716411, 32.6592851138674), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.24647158654978, 0.704583883564471
    ), logphi = c(0.451733968668784, -1.61448556660958)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_181 = structure(list(
    par = c(-0.180473770779078, 0.0641276876307608, 0.499763120363051, 
    -1.91999360232949), value = 0.841781146824821, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.6623720747278, -1.81915379604547, 
    39.3021432987251, -1.91193516485555, -1.81915379604547, 6.05870068115522, 
    -3.32647807144149, -1.7106758211094, 39.3021432987251, -3.32647807144149, 
    1271.17953231082, -64.4121130090047, -1.91193516485555, -1.7106758211094, 
    -64.4121130090047, 52.561853572719), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180473770779078, 0.0641276876307608
    ), logphi = c(0.499763120363051, -1.91999360232949)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_182 = structure(list(
    par = c(-0.36047017232888, -0.104274293452295, 0.478839803497095, 
    -1.49586492692908), value = 10.3064153751958, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.5541126402572, -0.494070456102946, 
    28.3455836838087, -1.9630402263715, -0.494070456102946, 4.52331748501678, 
    -2.7859581588352, -1.54967049703636, 28.3455836838087, -2.7859581588352, 
    440.193393310029, -29.5283536315694, -1.9630402263715, -1.54967049703636, 
    -29.5283536315694, 28.4765351685756), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36047017232888, -0.104274293452295
    ), logphi = c(0.478839803497095, -1.49586492692908)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_183 = structure(list(
    par = c(0.0356847344671792, 0.118380176025594, 0.498092131594377, 
    -1.45548668587315), value = 17.6092349793061, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4413056067403, -1.96971584998096, 
    24.4225659660202, -0.510584921897816, -1.96971584998096, 
    5.70022081092247, -2.67972304879294, -1.34342410751387, 24.4225659660202, 
    -2.67972304879294, 399.365575035837, -25.5099908281764, -0.510584921897816, 
    -1.34342410751387, -25.5099908281764, 26.5597512925098), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0356847344671792, 0.118380176025594
    ), logphi = c(0.498092131594377, -1.45548668587315)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_184 = structure(list(
    par = c(-0.198870642517339, 0.402139500331305, 0.562419846228721, 
    -1.64343920505551), value = 5.12072772332531, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.8161091450529, -0.569462885735561, 
    34.0676950192353, -3.33696424115182, -0.569462885735561, 
    10.4108798808511, -5.11531172930901, -2.21394047406065, 34.0676950192353, 
    -5.11531172930901, 650.519114931303, -70.6651934136993, -3.33696424115182, 
    -2.21394047406065, -70.6651934136993, 43.2835276513721), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198870642517339, 0.402139500331305
    ), logphi = c(0.562419846228721, -1.64343920505551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_185 = structure(list(
    par = c(-0.28700724293079, 0.264633978494158, 0.533521069540112, 
    -1.63019536961574), value = 9.22162922608653, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.7642807874473, -0.601419835266626, 
    33.6143560981661, -3.10267702197109, -0.601419835266626, 
    7.95896104177629, -4.2038332352945, -2.14870870651751, 33.6143560981661, 
    -4.2038332352945, 633.077964284467, -61.7126093303, -3.10267702197109, 
    -2.14870870651751, -61.7126093303, 41.1667706181618), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28700724293079, 0.264633978494158
    ), logphi = c(0.533521069540112, -1.63019536961574)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_186 = structure(list(
    par = c(-0.0864222649643092, 0.103668909573487, 0.580335444510286, 
    -1.19344698172586), value = 16.9516299211557, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8498078811343, -1.12959857379025, 
    19.0441707719202, -2.99720092211686, -1.12959857379025, 6.453779955784, 
    -3.57368669856584, -0.729435842394821, 19.0441707719202, 
    -3.57368669856584, 180.726929375652, -32.3108971245212, -2.99720092211686, 
    -0.729435842394821, -32.3108971245212, 18.0933625015811), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0864222649643092, 0.103668909573487
    ), logphi = c(0.580335444510286, -1.19344698172586)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_187 = structure(list(
    par = c(0.0758358828269655, 0.236321646297755, 0.412149224454955, 
    -1.47221080410593), value = 10.5873595032782, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.0526662084144, -0.455882987360212, 
    20.8450417953365, 1.85303824573602, -0.455882987360212, 7.48661230520753, 
    -0.106197417082399, -1.12569149424147, 20.8450417953365, 
    -0.106197417082399, 395.834182095101, 4.00043706672015, 1.85303824573602, 
    -1.12569149424147, 4.00043706672015, 23.1887845476564), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0758358828269655, 0.236321646297755
    ), logphi = c(0.412149224454955, -1.47221080410593)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_188 = structure(list(
    par = c(-0.520496072188178, -0.563527932697715, 0.413517689867425, 
    -1.95886605611883), value = 4.51540050752269, counts = structure(c(297L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.0340505051477, -1.15007624712504, 
    40.3495738034998, -2.37678848513667, -1.15007624712504, 1.87436983667411, 
    -1.75446350159092, -1.16335008093493, 40.3495738034998, -1.75446350159092, 
    1382.22349884032, -58.2377687030622, -2.37678848513667, -1.16335008093493, 
    -58.2377687030622, 50.5364514777895), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.520496072188178, -0.563527932697715
    ), logphi = c(0.413517689867425, -1.95886605611883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_189 = structure(list(
    par = c(-0.23375366684759, -0.376141971930279, 0.508552072700583, 
    -1.41218980651152), value = 18.408791791344, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.7826950420129, -1.38949997374738, 
    25.0494635674059, -2.2840041320471, -1.38949997374738, 2.6902403114093, 
    -3.42500073546859, -0.932885172666431, 25.0494635674059, 
    -3.42500073546859, 360.840557336317, -29.8914717378196, -2.2840041320471, 
    -0.932885172666431, -29.8914717378196, 25.4924277998114), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.23375366684759, -0.376141971930279
    ), logphi = c(0.508552072700583, -1.41218980651152)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_190 = structure(list(
    par = c(-0.425512931087313, -0.0986029505445658, 0.474376163746008, 
    -1.78205888409453), value = 13.2281518496874, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.2067809023841, -1.3617101779495, 
    37.2989283796699, -2.74286212365027, -1.3617101779495, 3.7137509472096, 
    -3.12354144460514, -1.79696235780291, 37.2989283796699, -3.12354144460514, 
    925.674224831141, -58.0338887978815, -2.74286212365027, -1.79696235780291, 
    -58.0338887978815, 46.669298349844), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.425512931087313, -0.0986029505445658
    ), logphi = c(0.474376163746008, -1.78205888409453)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_191 = structure(list(
    par = c(-0.71659623094323, 0.536104294141141, 0.596780753295812, 
    -1.40955173133812), value = 6.95613651993517, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.5908884571757, 2.59021331849851, 
    29.0753564300417, -6.65600205218553, 2.59021331849851, 12.9988499084632, 
    -4.5206134915432, -2.64937042171454, 29.0753564300417, -4.5206134915432, 
    333.20877044396, -71.4860156270092, -6.65600205218553, -2.64937042171454, 
    -71.4860156270092, 36.477088373843), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.71659623094323, 0.536104294141141
    ), logphi = c(0.596780753295812, -1.40955173133812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_192 = structure(list(
    par = c(-0.775308934114671, -0.196993584632628, 0.633666198082548, 
    -1.4086690832852), value = 14.7567401739573, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.3766192016933, -0.777519268524429, 
    26.1239923249335, -8.02998846793912, -0.777519268524429, 
    4.40031248150063, -8.95067476047728, 0.260498752790994, 26.1239923249335, 
    -8.95067476047728, 373.017793756425, -88.5537817207904, -8.02998846793912, 
    0.260498752790994, -88.5537817207904, 44.6127759925474), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.775308934114671, -0.196993584632628
    ), logphi = c(0.633666198082548, -1.4086690832852)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_193 = structure(list(
    par = c(-0.773379737918187, 0.426237128660585, 0.578256895724739, 
    -1.6030524079924), value = 4.24245073319667, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.94951968813496, 0.650908589250321, 
    35.5852192432948, -6.95931970762231, 0.650908589250321, 9.96068717817877, 
    -7.73272910947753, -2.77881165988703, 35.5852192432948, -7.73272910947753, 
    586.398667810961, -94.6520835976017, -6.95931970762231, -2.77881165988703, 
    -94.6520835976017, 48.2225255069579), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.773379737918187, 0.426237128660585
    ), logphi = c(0.578256895724739, -1.6030524079924)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_194 = structure(list(
    par = c(0.203535120248502, 0.717919981215364, 0.597201857430164, 
    -1.22675755702452), value = 10.9346277212036, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.4822136559681, -0.444656913067831, 
    18.284329435847, -1.95143569858836, -0.444656913067831, 14.3240012970836, 
    -2.88496958100737, -1.12220466719215, 18.284329435847, -2.88496958100737, 
    193.713081105162, -37.3123441748113, -1.95143569858836, -1.12220466719215, 
    -37.3123441748113, 20.2760875218644), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.203535120248502, 0.717919981215364
    ), logphi = c(0.597201857430164, -1.22675755702452)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_195 = structure(list(
    par = c(-0.184812709114882, 0.510839712268403, 0.532582003905812, 
    -1.39608155109498), value = 7.84297466155995, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5670830427622, 1.83078798787761, 
    25.0312995948576, -1.90213599160494, 1.83078798787761, 13.7295260302928, 
    -1.94302188649687, -1.9848750074658, 25.0312995948576, -1.94302188649687, 
    322.080837403593, -38.5973857661703, -1.90213599160494, -1.9848750074658, 
    -38.5973857661703, 25.2225298287279), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.184812709114882, 0.510839712268403
    ), logphi = c(0.532582003905812, -1.39608155109498)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_196 = structure(list(
    par = c(0.238646342889186, 0.301979398479108, 0.549748200599023, 
    -1.63914798803924), value = 13.6455094146146, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.8046975062831, -3.16646905718088, 
    28.9120699066281, -0.845818219241679, -3.16646905718088, 
    8.28336082747683, -4.18346100827804, -1.48192217386267, 28.9120699066281, 
    -4.18346100827804, 659.91500901541, -50.7201910011634, -0.845818219241679, 
    -1.48192217386267, -50.7201910011634, 40.5497971627256), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.238646342889186, 0.301979398479108
    ), logphi = c(0.549748200599023, -1.63914798803924)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_197 = structure(list(
    par = c(-0.0167062049625006, -0.615390679998674, 0.489878418507906, 
    -1.42454544437085), value = 20.114952827994, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.0107230546249, -1.80058985677078, 
    23.1855444798867, -0.973495225764509, -1.80058985677078, 
    1.81341478722175, -2.56360504291564, -0.693505853188725, 
    23.1855444798867, -2.56360504291564, 377.867254798048, -18.9646589219272, 
    -0.973495225764509, -0.693505853188725, -18.9646589219272, 
    24.9726892862512), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0167062049625006, -0.615390679998674
    ), logphi = c(0.489878418507906, -1.42454544437085)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_198 = structure(list(
    par = c(-0.400875105355652, -0.634223436947262, 0.455595480401014, 
    -1.65862042990293), value = 12.9487159109156, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.0598545330909, -1.06040847569489, 
    31.9929899998961, -2.30148334789959, -1.06040847569489, 1.83159873667904, 
    -2.92831746984135, -1.01381105777065, 31.9929899998961, -2.92831746984135, 
    694.8057833851, -34.6002876121521, -2.30148334789959, -1.01381105777065, 
    -34.6002876121521, 38.454650304498), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400875105355652, -0.634223436947262
    ), logphi = c(0.455595480401014, -1.65862042990293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_199 = structure(list(
    par = c(-0.190049085390225, 0.162613831098059, 0.518956395786509, 
    -1.32933922112194), value = 14.9331574619347, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.4330783566081, -0.282675810758803, 
    22.9250319683239, -1.84204752673445, -0.282675810758803, 
    7.12537632763244, -2.93597204725771, -1.40011571492238, 22.9250319683239, 
    -2.93597204725771, 270.851663338068, -27.9449022466682, -1.84204752673445, 
    -1.40011571492238, -27.9449022466682, 20.6578286703341), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190049085390225, 0.162613831098059
    ), logphi = c(0.518956395786509, -1.32933922112194)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_200 = structure(list(
    par = c(-0.305958986274288, -0.0432963745825855, 0.433124313814428, 
    -1.86759957937537), value = 3.74514507869067, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.7846899361804, -0.949749697332081, 
    37.4364115196535, -1.02514828537181, -0.949749697332081, 
    4.37513635742626, 0.58329314578387, -1.64691609416678, 37.4364115196535, 
    0.58329314578387, 1105.27964510676, -45.8156214379057, -1.02514828537181, 
    -1.64691609416678, -45.8156214379057, 46.373680787859), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305958986274288, -0.0432963745825855
    ), logphi = c(0.433124313814428, -1.86759957937537)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_1 = structure(list(
    par = c(0.0512622225210099, -0.0679879158713104, 0.483256359625537, 
    -1.80009626161135), value = 19.5782274749132, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.3246183655782, -5.1523835349343, 
    64.99738088106, -1.00022894411467, -5.1523835349343, 8.90455343505181, 
    -4.52027298258884, -2.55505200685846, 64.99738088106, -4.52027298258884, 
    1958.75169357329, -82.0028683765628, -1.00022894411467, -2.55505200685846, 
    -82.0028683765628, 94.1518059116575), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0512622225210099, -0.0679879158713104
    ), logphi = c(0.483256359625537, -1.80009626161135)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_2 = structure(list(
    par = c(-0.264451780032362, -0.129514895664579, 0.450164560973182, 
    -1.84200148474264), value = 6.83268752176878, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.9590813080912, -2.0262616411415, 
    73.3603418314743, -2.72462059602852, -2.0262616411415, 9.96852511248036, 
    -2.36416135956929, -3.06722984677599, 73.3603418314743, -2.36416135956929, 
    2115.0499425131, -94.4113918865952, -2.72462059602852, -3.06722984677599, 
    -94.4113918865952, 94.0816686969548), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264451780032362, -0.129514895664579
    ), logphi = c(0.450164560973182, -1.84200148474264)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_3 = structure(list(
    par = c(0.0359336328559308, 0.613958005549474, 0.49009077676285, 
    -1.30807575209111), value = 18.6552320465399, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.3968525722599, 2.9523960902722, 
    38.7760655859992, 0.639059818841048, 2.9523960902722, 26.6066412724086, 
    -1.62674782178129, -2.977082403266, 38.7760655859992, -1.62674782178129, 
    490.420823989091, -33.8343482271242, 0.639059818841048, -2.977082403266, 
    -33.8343482271242, 34.1949346847059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0359336328559308, 0.613958005549474
    ), logphi = c(0.49009077676285, -1.30807575209111)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_4 = structure(list(
    par = c(-0.535814772168939, -0.0346228593536283, 0.492717482994145, 
    -1.57030302276988), value = 20.3314219939215, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.7585853337663, -0.110001248110336, 
    64.3069746679714, -6.80574782752075, -0.110001248110336, 
    10.9882248091608, -7.28959577767085, -3.80677563960319, 64.3069746679714, 
    -7.28959577767085, 1082.53888630916, -94.7606736900752, -6.80574782752075, 
    -3.80677563960319, -94.7606736900752, 70.43817378527), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.535814772168939, -0.0346228593536283
    ), logphi = c(0.492717482994145, -1.57030302276988)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_5 = structure(list(
    par = c(-0.0620454107185546, 0.172717881225249, 0.458415927619572, 
    -1.74867293142738), value = 11.6820139148619, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.6641818002571, -1.85645105110765, 
    63.7603710642587, -0.0224241381019397, -1.85645105110765, 
    13.9671997314572, 0.146139527146261, -3.18125035692063, 63.7603710642587, 
    0.146139527146261, 1685.21137462152, -70.1315889899412, -0.0224241381019397, 
    -3.18125035692063, -70.1315889899412, 83.8233215492146), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0620454107185546, 0.172717881225249
    ), logphi = c(0.458415927619572, -1.74867293142738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_6 = structure(list(
    par = c(-0.540234749205221, -0.149303924462418, 0.519580198399605, 
    -1.6165811812287), value = 20.937148714565, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.775386184584, -2.03264067177855, 
    66.5116847580194, -8.82511106059525, -2.03264067177855, 8.15619624905395, 
    -11.6005302350786, -3.03779828580986, 66.5116847580194, -11.6005302350786, 
    1263.07814312554, -126.110868769569, -8.82511106059525, -3.03779828580986, 
    -126.110868769569, 83.5948262336572), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.540234749205221, -0.149303924462418
    ), logphi = c(0.519580198399605, -1.6165811812287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_7 = structure(list(
    par = c(-0.336665721185654, 0.304363661065742, 0.45652915474412, 
    -1.66367375231329), value = 10.4089562325946, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.5027464123929, 1.96738438118516, 
    65.3260140865974, -1.72427755007476, 1.96738438118516, 16.2156944525371, 
    2.42431081254324, -4.40768252074619, 65.3260140865974, 2.42431081254324, 
    1320.59430612097, -74.8200964471035, -1.72427755007476, -4.40768252074619, 
    -74.8200964471035, 72.354275433284), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336665721185654, 0.304363661065742
    ), logphi = c(0.45652915474412, -1.66367375231329)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_8 = structure(list(
    par = c(-0.281455211172926, 0.019494830161444, 0.4983706036642, 
    -1.49498632722182), value = 27.6614522529084, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.764854542589, -1.9175485492795, 
    56.5807690602327, -4.14663187742192, -1.9175485492795, 9.59571957093175, 
    -6.22021376450732, -3.23190979045762, 56.5807690602327, -6.22021376450732, 
    884.164162169299, -70.5346477296587, -4.14663187742192, -3.23190979045762, 
    -70.5346477296587, 59.3728001829774), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281455211172926, 0.019494830161444
    ), logphi = c(0.4983706036642, -1.49498632722182)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_9 = structure(list(
    par = c(-0.0852985062755976, 0.154902581621448, 0.447559663646026, 
    -1.72409128506401), value = 11.8075424724593, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.326240221232, -1.14384599747552, 
    61.9957134686544, 0.332102825684188, -1.14384599747552, 14.5546857548418, 
    0.725770292753225, -3.09578325752291, 61.9957134686544, 0.725770292753225, 
    1577.6311227671, -59.5243168319826, 0.332102825684188, -3.09578325752291, 
    -59.5243168319826, 79.3178875877487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0852985062755976, 0.154902581621448
    ), logphi = c(0.447559663646026, -1.72409128506401)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_10 = structure(list(
    par = c(-0.20568499774595, 0.152718123134966, 0.505840980959372, 
    -1.56977099221717), value = 17.6648011983489, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.4058733415193, -1.5309278884601, 
    60.6341426196977, -3.7977158511282, -1.5309278884601, 13.5216704792995, 
    -5.97870900698183, -3.63405987435783, 60.6341426196977, -5.97870900698183, 
    1082.83324674385, -85.9682112293036, -3.7977158511282, -3.63405987435783, 
    -85.9682112293036, 69.7324062004512), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.20568499774595, 0.152718123134966
    ), logphi = c(0.505840980959372, -1.56977099221717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_11 = structure(list(
    par = c(-0.142991056751952, 0.377082043246001, 0.48002430127115, 
    -1.60125631289572), value = 10.9572579060949, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.4352345294775, 1.75237385446891, 
    59.1831945273569, -0.939907758734648, 1.75237385446891, 21.3415386340898, 
    -0.417673126751339, -3.97029191234743, 59.1831945273569, 
    -0.417673126751339, 1145.47636562712, -70.6054290411373, 
    -0.939907758734648, -3.97029191234743, -70.6054290411373, 
    68.1690681001434), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142991056751952, 0.377082043246001
    ), logphi = c(0.48002430127115, -1.60125631289572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_12 = structure(list(
    par = c(-0.0579380144657075, 0.0308011237157227, 0.478235710503073, 
    -1.75113599466827), value = 17.6059104789037, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.3474274357663, -3.93781616558897, 
    65.6989574263633, -1.45991912603449, -3.93781616558897, 9.91107392156465, 
    -3.69602123928559, -3.05109035725337, 65.6989574263633, -3.69602123928559, 
    1724.37602414099, -82.4519297664139, -1.45991912603449, -3.05109035725337, 
    -82.4519297664139, 88.0143660770827), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0579380144657075, 0.0308011237157227
    ), logphi = c(0.478235710503073, -1.75113599466827)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_13 = structure(list(
    par = c(-0.61807086081531, -0.378390585254613, 0.500050837427268, 
    -1.55030634458118), value = 28.3908995418405, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.7913363395585, -1.64779976863372, 
    61.8787432742351, -8.41651177641012, -1.64779976863372, 5.45514181915507, 
    -9.62283365257832, -2.47650924478648, 61.8787432742351, -9.62283365257832, 
    1062.11253110366, -99.7598529068888, -8.41651177641012, -2.47650924478648, 
    -99.7598529068888, 71.6028098342036), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.61807086081531, -0.378390585254613
    ), logphi = c(0.500050837427268, -1.55030634458118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_14 = structure(list(
    par = c(-0.354489487468164, 0.100527789152167, 0.495856274607515, 
    -1.52985941919959), value = 17.2265880363638, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4792487902076, -0.0384976646117252, 
    59.8936928630778, -4.64568803826282, -0.0384976646117252, 
    13.5045320348581, -5.6332174827034, -3.77761824132961, 59.8936928630778, 
    -5.6332174827034, 963.203181287398, -79.3131362240018, -4.64568803826282, 
    -3.77761824132961, -79.3131362240018, 63.6158166260614), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354489487468164, 0.100527789152167
    ), logphi = c(0.495856274607515, -1.52985941919959)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_15 = structure(list(
    par = c(-0.122468673021805, 0.240371637186853, 0.494215241336933, 
    -1.56639638384295), value = 18.0535198031751, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.3246968968173, -1.39947575217292, 
    58.1639324606087, -2.01715563985516, -1.39947575217292, 14.9401764906187, 
    -3.96249709311292, -3.62888544147566, 58.1639324606087, -3.96249709311292, 
    1064.20318945233, -72.889558970779, -2.01715563985516, -3.62888544147566, 
    -72.889558970779, 66.664806316119), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122468673021805, 0.240371637186853
    ), logphi = c(0.494215241336933, -1.56639638384295)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_16 = structure(list(
    par = c(-0.0553953609733761, -0.225221929996481, 0.494346650477392, 
    -1.61303986815132), value = 31.6163131404578, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4066340040235, -4.09424236735845, 
    58.5963446848581, -2.56080647975665, -4.09424236735845, 7.05383345511734, 
    -6.54762415841503, -2.35888423638642, 58.5963446848581, -6.54762415841503, 
    1249.40471879498, -70.9463037620317, -2.56080647975665, -2.35888423638642, 
    -70.9463037620317, 74.7298366912119), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0553953609733761, -0.225221929996481
    ), logphi = c(0.494346650477392, -1.61303986815132)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_17 = structure(list(
    par = c(-0.383908662116219, 0.284286466736139, 0.490478177973392, 
    -1.62092714325703), value = 10.0608090380698, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.3679734662812, 2.3906717503408, 
    66.1814553657436, -4.3571162047229, 2.3906717503408, 19.9749992759735, 
    -2.49381639605417, -4.78158655736749, 66.1814553657436, -2.49381639605417, 
    1204.55754320137, -95.9674635661045, -4.3571162047229, -4.78158655736749, 
    -95.9674635661045, 73.8053255968651), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383908662116219, 0.284286466736139
    ), logphi = c(0.490478177973392, -1.62092714325703)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_18 = structure(list(
    par = c(-0.290753838355305, 0.430995932258796, 0.535282811503929, 
    -1.46239039870191), value = 19.0968112914599, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.1181948687557, 1.85484223180765, 
    56.3149564403176, -5.4137579788005, 1.85484223180765, 20.5514072391111, 
    -5.12569129806906, -4.389201702093, 56.3149564403176, -5.12569129806906, 
    785.20967814466, -94.8144760495317, -5.4137579788005, -4.389201702093, 
    -94.8144760495317, 60.1849381416386), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290753838355305, 0.430995932258796
    ), logphi = c(0.535282811503929, -1.46239039870191)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_19 = structure(list(
    par = c(-0.45377789025188, -0.0498435251905425, 0.466095787254159, 
    -1.65196738711753), value = 19.0563617020761, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.3027286234442, -0.976070908542681, 
    67.4677179768324, -4.71649305522348, -0.976070908542681, 
    9.28520605025795, -4.47911156342684, -3.80514899234186, 67.4677179768324, 
    -4.47911156342684, 1323.29603606607, -84.9315285349483, -4.71649305522348, 
    -3.80514899234186, -84.9315285349483, 75.4957992672445), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.45377789025188, -0.0498435251905425
    ), logphi = c(0.466095787254159, -1.65196738711753)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_20 = structure(list(
    par = c(-0.425334347400015, -0.346928501925434, 0.532496869466146, 
    -1.39444045801076), value = 32.0286679396323, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.5271391371962, -1.94719481960703, 
    51.4356954415263, -7.58862167415941, -1.94719481960703, 6.03700097556725, 
    -8.58849266194284, -1.79654023391151, 51.4356954415263, -8.58849266194284, 
    689.793798446914, -81.7925528107111, -7.58862167415941, -1.79654023391151, 
    -81.7925528107111, 54.0083261348911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.425334347400015, -0.346928501925434
    ), logphi = c(0.532496869466146, -1.39444045801076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_21 = structure(list(
    par = c(-0.372097582111469, -0.566204272892086, 0.498352732120512, 
    -1.77388954100787), value = 21.9079829395105, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.7507469265592, -3.28422320272637, 
    68.9751795475146, -6.51226055259357, -3.28422320272637, 3.78233978093334, 
    -9.99650871502666, -1.80745251343595, 68.9751795475146, -9.99650871502666, 
    1893.74834810874, -121.964130002983, -6.51226055259357, -1.80745251343595, 
    -121.964130002983, 99.1137175549994), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372097582111469, -0.566204272892086
    ), logphi = c(0.498352732120512, -1.77388954100787)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_22 = structure(list(
    par = c(-0.455437516654457, 0.127045325730448, 0.479815957837062, 
    -1.65629428691241), value = 9.86336903325838, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.4955644722065, 0.562446209606549, 
    68.9019023294435, -5.10094480032919, 0.562446209606549, 14.1819847581104, 
    -3.84531222596962, -4.48378297868146, 68.9019023294435, -3.84531222596962, 
    1330.35205423582, -98.4430105894774, -5.10094480032919, -4.48378297868146, 
    -98.4430105894774, 78.2833788290915), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.455437516654457, 0.127045325730448
    ), logphi = c(0.479815957837062, -1.65629428691241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_23 = structure(list(
    par = c(-0.209319521312637, 0.212196544542829, 0.479252749147972, 
    -1.61987859183951), value = 20.0540216774836, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.516963134275, -0.638105422723356, 
    62.1151109578832, -2.13848417063289, -0.638105422723356, 
    14.4673775679394, -2.49420963704949, -3.87018665604089, 62.1151109578832, 
    -2.49420963704949, 1214.1334813025, -75.1588437659656, -2.13848417063289, 
    -3.87018665604089, -75.1588437659656, 71.4731648701061), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209319521312637, 0.212196544542829
    ), logphi = c(0.479252749147972, -1.61987859183951)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_24 = structure(list(
    par = c(-0.119403723852982, -0.176617667309986, 0.479490327114997, 
    -1.59876668562541), value = 25.9666499219048, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.1921794869078, -3.37272278283507, 
    58.5820054439523, -2.23926553122311, -3.37272278283507, 7.5180043346279, 
    -5.53672069436573, -2.60176955002578, 58.5820054439523, -5.53672069436573, 
    1187.89242274264, -62.0632296746138, -2.23926553122311, -2.60176955002578, 
    -62.0632296746138, 70.5664449585086), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.119403723852982, -0.176617667309986
    ), logphi = c(0.479490327114997, -1.59876668562541)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_25 = structure(list(
    par = c(-0.2352210928468, 0.113703408318387, 0.512015778983822, 
    -1.38745081037564), value = 24.6911641589301, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.666791079741, -0.823944282579703, 
    49.7857418757519, -3.95455173896053, -0.823944282579703, 
    12.9363450369624, -6.06607087938471, -3.01009773551186, 49.7857418757519, 
    -6.06607087938471, 646.238854359105, -61.4396494920122, -3.95455173896053, 
    -3.01009773551186, -61.4396494920122, 47.3278665689136), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2352210928468, 0.113703408318387
    ), logphi = c(0.512015778983822, -1.38745081037564)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_26 = structure(list(
    par = c(-0.237495235043306, 0.397422513012097, 0.497531010550876, 
    -1.77053009819038), value = 7.85880604714014, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.9129882271588, -0.431696743241616, 
    73.2790225415059, -3.09180512414464, -0.431696743241616, 
    17.7313117104561, -0.0802140860400868, -4.84554992574715, 
    73.2790225415059, -0.0802140860400868, 1751.56884634875, 
    -117.713527590269, -3.09180512414464, -4.84554992574715, 
    -117.713527590269, 90.7320280378876), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237495235043306, 0.397422513012097
    ), logphi = c(0.497531010550876, -1.77053009819038)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_27 = structure(list(
    par = c(0.105432686330426, 0.289671687842967, 0.510740575095261, 
    -1.70518818342799), value = 17.9836860356819, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.16242256876, -4.42656447763312, 
    61.8447967095648, -0.807228039967356, -4.42656447763312, 
    15.6879858792536, -4.54451643960851, -3.3269451957807, 61.8447967095648, 
    -4.54451643960851, 1542.71212103207, -89.9636138544935, -0.807228039967356, 
    -3.3269451957807, -89.9636138544935, 85.2552394503547), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.105432686330426, 0.289671687842967
    ), logphi = c(0.510740575095261, -1.70518818342799)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_28 = structure(list(
    par = c(0.269925122302994, 0.0330209490049731, 0.463746924023961, 
    -1.6581475110546), value = 24.0177617396453, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.8421301697452, -6.17587456641644, 
    49.8527384609204, 1.97056615114377, -6.17587456641644, 10.6869228195805, 
    -2.98027832101866, -2.13329920484284, 49.8527384609204, -2.98027832101866, 
    1393.10769628143, -36.9446807728657, 1.97056615114377, -2.13329920484284, 
    -36.9446807728657, 75.9035296473698), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.269925122302994, 0.0330209490049731
    ), logphi = c(0.463746924023961, -1.6581475110546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_29 = structure(list(
    par = c(-0.0255508667075139, -0.185483349043156, 0.476964777480721, 
    -1.78676418483151), value = 20.1858955811192, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.6769150344691, -4.42285226842642, 
    65.7243765918025, -1.67492081182274, -4.42285226842642, 7.55328105483954, 
    -4.93170486759453, -2.45369461682188, 65.7243765918025, -4.93170486759453, 
    1901.11580467001, -81.4177235595182, -1.67492081182274, -2.45369461682188, 
    -81.4177235595182, 92.7794544578475), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0255508667075139, -0.185483349043156
    ), logphi = c(0.476964777480721, -1.78676418483151)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_30 = structure(list(
    par = c(-0.24312464032414, -1.57777547765817, 0.545930400465893, 
    -1.55660046817563), value = 44.3661541060135, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4665756461346, -1.81529623510812, 
    51.8692214477312, -6.97866718901707, -1.81529623510812, 0.56944498538769, 
    -4.68601285241732, -0.280973962318853, 51.8692214477312, 
    -4.68601285241732, 1146.65637799582, -105.870008653142, -6.97866718901707, 
    -0.280973962318853, -105.870008653142, 78.5112300984991), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24312464032414, -1.57777547765817
    ), logphi = c(0.545930400465893, -1.55660046817563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_31 = structure(list(
    par = c(-0.159930787886974, -0.349762574724129, 0.540824049553397, 
    -1.51360113362406), value = 30.0318571236935, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.0300572940934, -3.82312925317763, 
    55.4357977575748, -6.03214095029614, -3.82312925317763, 5.71674026073055, 
    -9.21208327131495, -1.70644273422838, 55.4357977575748, -9.21208327131495, 
    978.383652388004, -96.2378817810361, -6.03214095029614, -1.70644273422838, 
    -96.2378817810361, 69.2403548256948), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159930787886974, -0.349762574724129
    ), logphi = c(0.540824049553397, -1.51360113362406)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_32 = structure(list(
    par = c(-0.102255639169462, 0.0677724327702972, 0.515222817238012, 
    -1.41362508601611), value = 27.4682966758035, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.1011787700034, -2.25229933370485, 
    49.6151878639495, -3.18910900176661, -2.25229933370485, 12.1519730367226, 
    -6.49578351374913, -2.68590525287493, 49.6151878639495, -6.49578351374913, 
    708.276163040367, -62.1658359429844, -3.18910900176661, -2.68590525287493, 
    -62.1658359429844, 50.6331742613497), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.102255639169462, 0.0677724327702972
    ), logphi = c(0.515222817238012, -1.41362508601611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_33 = structure(list(
    par = c(-0.309803312166417, -0.389130551398177, 0.546797279294651, 
    -1.46063105592699), value = 34.0493953870936, counts = structure(c(417L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.4510720581984, -3.09876928561437, 
    53.9946552748916, -7.67943225188361, -3.09876928561437, 5.26647996146323, 
    -9.57482322050396, -1.53960980675549, 53.9946552748916, -9.57482322050396, 
    846.395236699493, -99.2916282722689, -7.67943225188361, -1.53960980675549, 
    -99.2916282722689, 64.7252465455495), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309803312166417, -0.389130551398177
    ), logphi = c(0.546797279294651, -1.46063105592699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_34 = structure(list(
    par = c(-0.204780015398289, -0.523899327261475, 0.485824624051882, 
    -1.74609146777101), value = 24.6039683061233, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.9769348364096, -3.68346741996817, 
    66.1793275122946, -4.28784504524771, -3.68346741996817, 4.07071846630913, 
    -7.38018739543378, -1.9266983266597, 66.1793275122946, -7.38018739543378, 
    1756.02334878455, -93.3639865028368, -4.28784504524771, -1.9266983266597, 
    -93.3639865028368, 92.0642443977826), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204780015398289, -0.523899327261475
    ), logphi = c(0.485824624051882, -1.74609146777101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_35 = structure(list(
    par = c(-0.416720270522347, 0.186414934141458, 0.514460880420861, 
    -1.76409926732245), value = 7.89848263320538, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.2828042533152, -1.42244269429881, 
    76.2467658859123, -6.86159150653509, -1.42244269429881, 14.2042319382085, 
    -8.56613671640361, -4.59837080146741, 76.2467658859123, -8.56613671640361, 
    1764.79422400444, -142.775054211342, -6.86159150653509, -4.59837080146741, 
    -142.775054211342, 96.3803655951168), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416720270522347, 0.186414934141458
    ), logphi = c(0.514460880420861, -1.76409926732245)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_36 = structure(list(
    par = c(-0.357330727020018, -0.263721587477697, 0.457372941664834, 
    -1.60318362020316), value = 23.7379293463915, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.9368377930613, -1.6510411020576, 
    61.873550980529, -3.44740346269745, -1.6510411020576, 6.74608372630559, 
    -4.866288288774, -2.86232530255504, 61.873550980529, -4.866288288774, 
    1178.06233719087, -59.6453333003844, -3.44740346269745, -2.86232530255504, 
    -59.6453333003844, 68.1208258113131), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357330727020018, -0.263721587477697
    ), logphi = c(0.457372941664834, -1.60318362020316)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_37 = structure(list(
    par = c(-0.240622091588885, -0.298705596877219, 0.461175205958668, 
    -1.80343383653742), value = 19.3850534659996, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.3200606870886, -3.29493309170203, 
    70.5128860527537, -3.32263149704914, -3.29493309170203, 6.22003182559894, 
    -5.03078976876736, -2.59193549867476, 70.5128860527537, -5.03078976876736, 
    1963.63709892822, -91.3530209398772, -3.32263149704914, -2.59193549867476, 
    -91.3530209398772, 93.2112870835056), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240622091588885, -0.298705596877219
    ), logphi = c(0.461175205958668, -1.80343383653742)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_38 = structure(list(
    par = c(-0.299974710771656, -0.520229428046176, 0.535957614434306, 
    -1.74880930679853), value = 28.916682097744, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5847718944789, -3.93642970308861, 
    66.2563821371975, -7.18195069104866, -3.93642970308861, 3.93993195224596, 
    -12.3971785628285, -1.47634688119069, 66.2563821371975, -12.3971785628285, 
    1803.39198428126, -136.553560908581, -7.18195069104866, -1.47634688119069, 
    -136.553560908581, 100.601736525263), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299974710771656, -0.520229428046176
    ), logphi = c(0.535957614434306, -1.74880930679853)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_39 = structure(list(
    par = c(-0.444488512256885, 0.118334755069423, 0.517940105890199, 
    -1.63076422294523), value = 19.1837841806815, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.3051177920274, -1.5676605604753, 
    68.3258605542747, -7.3321740705623, -1.5676605604753, 11.4148431231698, 
    -8.94026156128547, -4.16915915568694, 68.3258605542747, -8.94026156128547, 
    1275.63154460475, -122.140380124147, -7.3321740705623, -4.16915915568694, 
    -122.140380124147, 82.2403816158612), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.444488512256885, 0.118334755069423
    ), logphi = c(0.517940105890199, -1.63076422294523)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_40 = structure(list(
    par = c(-0.109486088538233, 0.278317521750322, 0.510663039950683, 
    -1.65188328406462), value = 16.0972755097412, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.529688786667, -2.55577565244636, 
    64.2073138115151, -2.8940734631, -2.55577565244636, 14.5594977389862, 
    -4.96660289961426, -3.9152904780515, 64.2073138115151, -4.96660289961426, 
    1336.19484349623, -97.9772455638184, -2.8940734631, -3.9152904780515, 
    -97.9772455638184, 79.8593849138385), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.109486088538233, 0.278317521750322
    ), logphi = c(0.510663039950683, -1.65188328406462)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_41 = structure(list(
    par = c(-0.126711839288997, -0.075927216244212, 0.540606880888423, 
    -1.70246469319755), value = 24.3016639030554, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.4614111914434, -4.49610525699029, 
    66.6612133422007, -5.54398583663129, -4.49610525699029, 9.06640662101665, 
    -11.4848427950065, -2.64255376780653, 66.6612133422007, -11.4848427950065, 
    1570.2196433951, -123.208625424809, -5.54398583663129, -2.64255376780653, 
    -123.208625424809, 91.8236095843739), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126711839288997, -0.075927216244212
    ), logphi = c(0.540606880888423, -1.70246469319755)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_42 = structure(list(
    par = c(-0.77591846499975, 0.607646408747901, 0.56325419403148, 
    -1.60495221887728), value = 4.81328737372521, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.7031703624879, 6.19999406481497, 
    72.5754093942044, -12.3734027548394, 6.19999406481497, 29.4771235305191, 
    -6.21452225324504, -7.8578452882283, 72.5754093942044, -6.21452225324504, 
    1130.91987337732, -176.316070160887, -12.3734027548394, -7.8578452882283, 
    -176.316070160887, 90.6141926018122), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.77591846499975, 0.607646408747901
    ), logphi = c(0.56325419403148, -1.60495221887728)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_43 = structure(list(
    par = c(-0.174877924168931, 0.377999782409355, 0.481219915446034, 
    -1.3943262642325), value = 22.8508691488309, counts = structure(c(337L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.9031218842555, 1.17494217910519, 
    47.3199160939686, -0.899652156327591, 1.17494217910519, 16.9331603245837, 
    -2.10925424326547, -3.51110976470892, 47.3199160939686, -2.10925424326547, 
    635.259143332512, -42.3902646486951, -0.899652156327591, 
    -3.51110976470892, -42.3902646486951, 42.876092494204), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174877924168931, 0.377999782409355
    ), logphi = c(0.481219915446034, -1.3943262642325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_44 = structure(list(
    par = c(-0.0564919157224878, 0.0981207762820426, 0.530144881569622, 
    -1.48111071076284), value = 26.1600639078367, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.0498724497823, -2.69272916586516, 
    53.6113412499262, -3.78177943494151, -2.69272916586516, 13.7892973981479, 
    -7.6741474543951, -2.77948289095775, 53.6113412499262, -7.6741474543951, 
    865.509810008547, -81.2442949169601, -3.78177943494151, -2.77948289095775, 
    -81.2442949169601, 61.2927771763694), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0564919157224878, 0.0981207762820426
    ), logphi = c(0.530144881569622, -1.48111071076284)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_45 = structure(list(
    par = c(-0.135125152138387, -0.255824281312362, 0.462558061929234, 
    -1.73724160392448), value = 21.8348038764549, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.1135779286169, -3.237706716952, 
    65.0395787529234, -2.06927333135098, -3.237706716952, 7.19749153255123, 
    -4.46212745419672, -2.50685443869969, 65.0395787529234, -4.46212745419672, 
    1677.97504990119, -72.0838364589582, -2.06927333135098, -2.50685443869969, 
    -72.0838364589582, 85.6706306571198), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135125152138387, -0.255824281312362
    ), logphi = c(0.462558061929234, -1.73724160392448)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_46 = structure(list(
    par = c(-0.0998098438342776, -0.290235014083078, 0.526242691768585, 
    -1.65222681950215), value = 28.2603809883216, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.1996232136211, -4.23386327597086, 
    62.0092401417693, -4.78774101475565, -4.23386327597086, 6.72724384997991, 
    -9.43382723317399, -2.09988799326766, 62.0092401417693, -9.43382723317399, 
    1400.73076348113, -102.265514949629, -4.78774101475565, -2.09988799326766, 
    -102.265514949629, 84.7424401086982), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0998098438342776, -0.290235014083078
    ), logphi = c(0.526242691768585, -1.65222681950215)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_47 = structure(list(
    par = c(0.0783057122394719, 0.715111317861774, 0.514553540560279, 
    -1.26594718774333), value = 17.4487233749809, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.7964063454381, 3.63681918624792, 
    36.7904316078693, -0.182750118149499, 3.63681918624792, 30.7222385522721, 
    -2.03158915290658, -2.90977428907269, 36.7904316078693, -2.03158915290658, 
    430.894459785947, -42.2242908948434, -0.182750118149499, 
    -2.90977428907269, -42.2242908948434, 32.593536162473), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0783057122394719, 0.715111317861774
    ), logphi = c(0.514553540560279, -1.26594718774333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_48 = structure(list(
    par = c(-0.108861537515557, -0.107936994174635, 0.492956969551182, 
    -1.58282822182176), value = 27.2706765626354, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.034788556397, -3.30797135372762, 
    58.3648744276744, -2.71596025891441, -3.30797135372762, 8.90326299884947, 
    -6.26617404630991, -2.71115892980234, 58.3648744276744, -6.26617404630991, 
    1142.3920266429, -69.8921877355652, -2.71596025891441, -2.71115892980234, 
    -69.8921877355652, 70.1648527243748), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.108861537515557, -0.107936994174635
    ), logphi = c(0.492956969551182, -1.58282822182176)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_49 = structure(list(
    par = c(-0.134079070707015, -0.0631404018878587, 0.441685766304845, 
    -1.52272617376329), value = 28.6290617844217, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.5661602538219, -0.926176635829279, 
    52.2365928414814, 0.235854885843878, -0.926176635829279, 
    11.3723394230547, -2.67045386870279, -2.69200428260064, 52.2365928414814, 
    -2.67045386870279, 932.787723508355, -24.3277985854107, 0.235854885843878, 
    -2.69200428260064, -24.3277985854107, 54.8700714277928), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.134079070707015, -0.0631404018878587
    ), logphi = c(0.441685766304845, -1.52272617376329)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_50 = structure(list(
    par = c(-0.205200166392608, 0.166150617110271, 0.50409388262982, 
    -1.65151455954745), value = 20.6912896873257, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.5551075947789, -2.1262585230275, 
    65.5755809102487, -3.83088448296931, -2.1262585230275, 12.8404783934499, 
    -5.75998455421001, -3.84489384774866, 65.5755809102487, -5.75998455421001, 
    1339.23125885804, -98.444327778946, -3.83088448296931, -3.84489384774866, 
    -98.444327778946, 79.9663732733435), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205200166392608, 0.166150617110271
    ), logphi = c(0.50409388262982, -1.65151455954745)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_51 = structure(list(
    par = c(-0.588108808250303, 0.43304880560341, 0.467336092002304, 
    -1.60464431324418), value = -0.513410806905597, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.421474464859, 8.3331444384882, 
    66.2163038835928, -4.1016587082332, 8.3331444384882, 28.0686925187013, 
    4.53143052592253, -5.92688163791877, 66.2163038835928, 4.53143052592253, 
    1101.56065425038, -88.4095127933193, -4.1016587082332, -5.92688163791877, 
    -88.4095127933193, 66.6194386109709), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.588108808250303, 0.43304880560341
    ), logphi = c(0.467336092002304, -1.60464431324418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_52 = structure(list(
    par = c(-0.292226036303036, -1.64199011222833, 0.496557497315471, 
    -1.64017675026493), value = 36.7509968728376, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.4677977398119, -1.59552896406012, 
    56.7904641144423, -5.61704196133661, -1.59552896406012, 0.531691414451529, 
    -4.09711209492514, -0.486909479846531, 56.7904641144423, 
    -4.09711209492514, 1404.33783492355, -84.0836313571458, -5.61704196133661, 
    -0.486909479846531, -84.0836313571458, 83.5400682355214), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292226036303036, -1.64199011222833
    ), logphi = c(0.496557497315471, -1.64017675026493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_53 = structure(list(
    par = c(0.136301936820444, -0.820149430186727, 0.505232214164356, 
    -1.70270390420719), value = 33.3532529952491, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.666763944443, -4.46036654189186, 
    55.8587880501449, -2.02086435141524, -4.46036654189186, 2.59212429476463, 
    -5.62205809906402, -1.10069226444409, 55.8587880501449, -5.62205809906402, 
    1615.24736440555, -70.8230603203575, -2.02086435141524, -1.10069226444409, 
    -70.8230603203575, 88.6376405322409), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.136301936820444, -0.820149430186727
    ), logphi = c(0.505232214164356, -1.70270390420719)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_54 = structure(list(
    par = c(-0.264482971349889, -0.244382525226857, 0.460536445047293, 
    -1.63856680969178), value = 24.3362821153987, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.6187775350701, -2.04759845079394, 
    62.5009741028748, -2.85096047614175, -2.04759845079394, 7.51367813123238, 
    -4.7586456100035, -2.76173868662966, 62.5009741028748, -4.7586456100035, 
    1299.83253857002, -62.8021216058094, -2.85096047614175, -2.76173868662966, 
    -62.8021216058094, 73.1418894170943), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264482971349889, -0.244382525226857
    ), logphi = c(0.460536445047293, -1.63856680969178)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_55 = structure(list(
    par = c(-0.339897007554287, -0.0202438632212021, 0.470381232626695, 
    -1.74676410817758), value = 15.5940745410817, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.3051991632169, -2.05265457742243, 
    71.4379404076482, -4.05041105300263, -2.05265457742243, 9.35388239398094, 
    -4.21917139137307, -3.67357053043804, 71.4379404076482, -4.21917139137307, 
    1687.99832046318, -98.9857652222703, -4.05041105300263, -3.67357053043804, 
    -98.9857652222703, 87.4240064292486), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339897007554287, -0.0202438632212021
    ), logphi = c(0.470381232626695, -1.74676410817758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_56 = structure(list(
    par = c(-0.320518017412645, -0.726569278117285, 0.466879293499934, 
    -1.59826337644469), value = 31.1366192169362, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.6968635539393, -2.42090490587543, 
    59.424383700879, -4.20195416994673, -2.42090490587543, 2.99235877943005, 
    -5.79948058554436, -1.6981505792657, 59.424383700879, -5.79948058554436, 
    1203.88149088058, -60.3613473884046, -4.20195416994673, -1.6981505792657, 
    -60.3613473884046, 70.835164510008), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320518017412645, -0.726569278117285
    ), logphi = c(0.466879293499934, -1.59826337644469)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_57 = structure(list(
    par = c(-0.273632285660982, 0.0186435445643781, 0.515682820394954, 
    -1.4194924699725), value = 25.1454766319078, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.7086512117108, -1.14545842500036, 
    52.3300619859057, -4.85412224549009, -1.14545842500036, 11.5474383139968, 
    -6.99660718250783, -2.89231605998808, 52.3300619859057, -6.99660718250783, 
    717.541259485088, -69.9847065526171, -4.85412224549009, -2.89231605998808, 
    -69.9847065526171, 52.3488400014926), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273632285660982, 0.0186435445643781
    ), logphi = c(0.515682820394954, -1.4194924699725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_58 = structure(list(
    par = c(-0.684006280244025, -0.322522361520684, 0.55358361006743, 
    -1.60019275794548), value = 22.7923933271589, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.9950847969649, -2.58453490786792, 
    63.3084516277194, -11.8139431171116, -2.58453490786792, 5.72221783023963, 
    -16.1964811358217, -1.56471195111862, 63.3084516277194, -16.1964811358217, 
    1255.80669446457, -160.925462189709, -11.8139431171116, -1.56471195111862, 
    -160.925462189709, 92.6692980662835), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.684006280244025, -0.322522361520684
    ), logphi = c(0.55358361006743, -1.60019275794548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_59 = structure(list(
    par = c(0.0255752842772612, 0.0213795473643176, 0.501823973526067, 
    -1.618354100298), value = 22.6628093363157, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9675020940526, -3.97073099644984, 
    58.2510485154231, -1.73361971533836, -3.97073099644984, 11.3482578703028, 
    -6.13853772257755, -2.79047474993632, 58.2510485154231, -6.13853772257755, 
    1255.63334035572, -74.7920124011259, -1.73361971533836, -2.79047474993632, 
    -74.7920124011259, 75.238952991441), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0255752842772612, 0.0213795473643176
    ), logphi = c(0.501823973526067, -1.618354100298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_60 = structure(list(
    par = c(-0.503815369682313, 0.146474945168434, 0.456566781833356, 
    -1.80738289137454), value = 6.88597168220589, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.3535554195494, 0.514941097762289, 
    78.1576957207264, -4.63078306545128, 0.514941097762289, 13.4398897886356, 
    0.538849247000428, -4.80787243573033, 78.1576957207264, 0.538849247000428, 
    1902.30390674273, -116.979942023754, -4.63078306545128, -4.80787243573033, 
    -116.979942023754, 90.8000307315859), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.503815369682313, 0.146474945168434
    ), logphi = c(0.456566781833356, -1.80738289137454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_61 = structure(list(
    par = c(0.143878072472713, 0.471429806106404, 0.492310986463299, 
    -1.86425027380635), value = 4.3792711691074, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4242324127618, -2.89901771166612, 
    65.5739571577829, 1.08729509229466, -2.89901771166612, 20.4204712572764, 
    2.61611993557231, -3.18499724705212, 65.5739571577829, 2.61611993557231, 
    2213.508103309, -93.1002341502118, 1.08729509229466, -3.18499724705212, 
    -93.1002341502118, 96.8403997252398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.143878072472713, 0.471429806106404
    ), logphi = c(0.492310986463299, -1.86425027380635)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_62 = structure(list(
    par = c(-0.0354605221750334, 0.185196063559934, 0.526725886032762, 
    -1.44229550589059), value = 25.9147424954703, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.8488759737102, -2.78495008565471, 
    50.8751175747335, -3.13200170731776, -2.78495008565471, 13.9933360223665, 
    -6.79906909795136, -2.87593755299298, 50.8751175747335, -6.79906909795136, 
    769.007413881084, -72.709382625824, -3.13200170731776, -2.87593755299298, 
    -72.709382625824, 55.4165468180656), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0354605221750334, 0.185196063559934
    ), logphi = c(0.526725886032762, -1.44229550589059)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_63 = structure(list(
    par = c(-0.209874807648014, -0.156009058180168, 0.532748342887349, 
    -1.7010839519141), value = 21.2855913835741, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.2692927226144, -4.27626454069241, 
    67.1371024951739, -6.12279949230299, -4.27626454069241, 7.54227641941441, 
    -11.4487990350298, -2.55284074279771, 67.1371024951739, -11.4487990350298, 
    1570.76823113922, -123.66361159355, -6.12279949230299, -2.55284074279771, 
    -123.66361159355, 92.0993002155868), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209874807648014, -0.156009058180168
    ), logphi = c(0.532748342887349, -1.7010839519141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_64 = structure(list(
    par = c(-0.359755205719079, 0.320563261457771, 0.517308409933335, 
    -1.58423923212039), value = 15.6411180492587, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4780289775123, 0.832619794444156, 
    64.8142316226341, -5.65130001284331, 0.832619794444156, 17.8603108924591, 
    -5.29853992325968, -4.74123422611328, 64.8142316226341, -5.29853992325968, 
    1104.87828768679, -108.086965541432, -5.65130001284331, -4.74123422611328, 
    -108.086965541432, 73.8216329105867), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359755205719079, 0.320563261457771
    ), logphi = c(0.517308409933335, -1.58423923212039)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_65 = structure(list(
    par = c(-0.378093397661131, 0.0522505600788285, 0.486737192188177, 
    -1.67474955114242), value = 18.7037054834642, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.2140081880015, -1.3809810237575, 
    68.8953600516129, -5.00007584625095, -1.3809810237575, 10.7947204019965, 
    -5.56692240216705, -3.98099485998671, 68.8953600516129, -5.56692240216705, 
    1414.36779090398, -101.187864098407, -5.00007584625095, -3.98099485998671, 
    -101.187864098407, 81.5810628393976), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378093397661131, 0.0522505600788285
    ), logphi = c(0.486737192188177, -1.67474955114242)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_66 = structure(list(
    par = c(0.0132772275975991, -0.0364206247510708, 0.576055413016921, 
    -1.38985589456674), value = 34.8365995871473, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.9914858783693, -4.68335238146267, 
    47.8240246337691, -5.87470089286057, -4.68335238146267, 9.80020543828175, 
    -9.2756687788409, -1.599761537463, 47.8240246337691, -9.2756687788409, 
    677.588569656606, -93.9329129252542, -5.87470089286057, -1.599761537463, 
    -93.9329129252542, 56.8992933267509), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0132772275975991, -0.0364206247510708
    ), logphi = c(0.576055413016921, -1.38985589456674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_67 = structure(list(
    par = c(-0.0826841941085736, 0.417574609405233, 0.522300136604704, 
    -1.6779249542879), value = 11.8517342314542, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.225697285946, -1.05698384267328, 
    66.038233604182, -2.85136468169966, -1.05698384267328, 20.3225533157436, 
    -4.14314541563598, -4.32560903518286, 66.038233604182, -4.14314541563598, 
    1414.54222102011, -109.826899761689, -2.85136468169966, -4.32560903518286, 
    -109.826899761689, 83.5316570593214), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0826841941085736, 0.417574609405233
    ), logphi = c(0.522300136604704, -1.6779249542879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_68 = structure(list(
    par = c(-0.371395629154866, -0.634839961001879, 0.563536194362172, 
    -1.29633163985186), value = 40.0867067761944, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.2043041543097, -2.07261330587016, 
    44.168459135463, -8.34613755795743, -2.07261330587016, 4.00674873546336, 
    -7.34352251008374, -0.705363369490897, 44.168459135463, -7.34352251008374, 
    525.564173635473, -80.4365818680708, -8.34613755795743, -0.705363369490897, 
    -80.4365818680708, 47.1964051467211), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371395629154866, -0.634839961001879
    ), logphi = c(0.563536194362172, -1.29633163985186)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_69 = structure(list(
    par = c(-0.0606640052593009, 0.253539591894958, 0.473839852311618, 
    -1.58782924537967), value = 19.3859252497912, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.6419542890098, -1.30455617863845, 
    56.4066323569534, -0.274591628102172, -1.30455617863845, 
    14.8943149529401, -2.00350838586161, -3.37979530762311, 56.4066323569534, 
    -2.00350838586161, 1120.45687282158, -57.5802240438961, -0.274591628102172, 
    -3.37979530762311, -57.5802240438961, 66.2312974739621), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0606640052593009, 0.253539591894958
    ), logphi = c(0.473839852311618, -1.58782924537967)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_70 = structure(list(
    par = c(-0.35359725289977, 0.0556446515151154, 0.469434886669229, 
    -1.60969635794596), value = 16.3768035955409, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.9459716860941, 0.0522127381330506, 
    63.5615951125601, -3.40894185058005, 0.0522127381330506, 
    12.3634772659642, -3.49387346254559, -3.81553393768996, 63.5615951125601, 
    -3.49387346254559, 1180.73030552246, -73.2639614540176, -3.40894185058005, 
    -3.81553393768996, -73.2639614540176, 69.5852178882461), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35359725289977, 0.0556446515151154
    ), logphi = c(0.469434886669229, -1.60969635794596)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_71 = structure(list(
    par = c(-0.517418080845873, -0.181055309776495, 0.471006066878408, 
    -1.70440230520888), value = 15.6192329755395, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0076213874876, -1.31004971759552, 
    71.0001302097751, -6.21959706714748, -1.31004971759552, 8.20090912867499, 
    -6.81169774630064, -3.48137969519158, 71.0001302097751, -6.81169774630064, 
    1534.78219163716, -104.385665033124, -6.21959706714748, -3.48137969519158, 
    -104.385665033124, 84.707546599283), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.517418080845873, -0.181055309776495
    ), logphi = c(0.471006066878408, -1.70440230520888)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_72 = structure(list(
    par = c(-0.0992829420932101, 0.249908257584987, 0.532227269344259, 
    -1.36548583319106), value = 26.7771648197713, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.3804473481838, -1.57619251162089, 
    47.3819960156163, -3.69898968965998, -1.57619251162089, 15.1104627041931, 
    -6.36607290793734, -2.88808890447356, 47.3819960156163, -6.36607290793734, 
    607.32251366602, -67.2771810714679, -3.69898968965998, -2.88808890447356, 
    -67.2771810714679, 46.9622556664717), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0992829420932101, 0.249908257584987
    ), logphi = c(0.532227269344259, -1.36548583319106)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_73 = structure(list(
    par = c(-0.260956103888898, 0.223660500918596, 0.488526369733066, 
    -1.68505105720466), value = 14.664116524666, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.3607714197665, -0.636293105316099, 
    67.8681317736185, -3.35100058368454, -0.636293105316099, 
    15.5064667430871, -3.02935175211516, -4.23850523678659, 67.8681317736185, 
    -3.02935175211516, 1437.02043069771, -97.2487658390531, -3.35100058368454, 
    -4.23850523678659, -97.2487658390531, 81.3533610974915), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260956103888898, 0.223660500918596
    ), logphi = c(0.488526369733066, -1.68505105720466)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_74 = structure(list(
    par = c(-0.748783507578437, 0.285673795454268, 0.515406776770298, 
    -1.66701046907169), value = 13.7836634941526, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.7271395781538, 0.878023052486299, 
    74.6723470594901, -10.1921746940015, 0.878023052486299, 14.5841839858107, 
    -7.83061041786937, -6.08793538070529, 74.6723470594901, -7.83061041786937, 
    1367.44816104262, -153.294106771007, -10.1921746940015, -6.08793538070529, 
    -153.294106771007, 89.3833298798441), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.748783507578437, 0.285673795454268
    ), logphi = c(0.515406776770298, -1.66701046907169)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_75 = structure(list(
    par = c(-0.098441440443609, -0.279096607807355, 0.46663302266186, 
    -1.61143899520376), value = 26.836771891065, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.5884453941065, -3.4919554225965, 
    57.8268397521953, -1.57669344202915, -3.4919554225965, 6.31035008513692, 
    -4.86377525987791, -2.34552173949965, 57.8268397521953, -4.86377525987791, 
    1227.21926313041, -51.7686895626923, -1.57669344202915, -2.34552173949965, 
    -51.7686895626923, 70.6665673444462), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.098441440443609, -0.279096607807355
    ), logphi = c(0.46663302266186, -1.61143899520376)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_76 = structure(list(
    par = c(-0.300941649730922, 0.232771003135534, 0.506680085192056, 
    -1.51557521355409), value = 21.2682761490085, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.9093539018737, -0.462493741082426, 
    58.8008674808904, -4.40060797846087, -0.462493741082426, 
    13.7187498996383, -5.18438270979971, -4.01381067405282, 58.8008674808904, 
    -5.18438270979971, 921.585061264274, -83.1366220332974, -4.40060797846087, 
    -4.01381067405282, -83.1366220332974, 62.7699643915847), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300941649730922, 0.232771003135534
    ), logphi = c(0.506680085192056, -1.51557521355409)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_77 = structure(list(
    par = c(-0.404647919951542, -0.261331645667605, 0.521386873335597, 
    -1.84334434839225), value = 17.8000020060808, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.2371852505672, -3.89415515211766, 
    74.0353995141163, -7.45868409168793, -3.89415515211766, 6.36813422172366, 
    -14.4069695311444, -2.32669987587641, 74.0353995141163, -14.4069695311444, 
    2209.75169017912, -153.792440578115, -7.45868409168793, -2.32669987587641, 
    -153.792440578115, 107.934823289746), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404647919951542, -0.261331645667605
    ), logphi = c(0.521386873335597, -1.84334434839225)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_78 = structure(list(
    par = c(-0.0923427600439283, 0.635018674125398, 0.459292008930282, 
    -1.56562026755395), value = 7.69121315627061, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.1722274364348, 6.20473065948701, 
    51.7671397957109, 1.66749051855319, 6.20473065948701, 28.6369470647863, 
    5.12022061105455, -3.51862162695227, 51.7671397957109, 5.12022061105455, 
    1014.74936962997, -49.9205428274863, 1.66749051855319, -3.51862162695227, 
    -49.9205428274863, 59.0116827776654), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0923427600439283, 0.635018674125398
    ), logphi = c(0.459292008930282, -1.56562026755395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_79 = structure(list(
    par = c(-0.391440647802824, -0.106151833342677, 0.512897642866647, 
    -1.51105775939114), value = 27.3507113795892, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.124557167049, -2.06700867533272, 
    59.0786071628102, -6.44399924976113, -2.06700867533272, 8.24498544460539, 
    -8.43999928346051, -2.9582477303336, 59.0786071628102, -8.43999928346051, 
    940.433672307783, -89.3322709729638, -6.44399924976113, -2.9582477303336, 
    -89.3322709729638, 65.353876226304), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.391440647802824, -0.106151833342677
    ), logphi = c(0.512897642866647, -1.51105775939114)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_80 = structure(list(
    par = c(-0.532256367420589, -0.683063280972343, 0.505752588826022, 
    -1.65553473572101), value = 28.9500080214205, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.543789470802, -2.75200378574425, 
    64.0844441344157, -8.29614665320833, -2.75200378574425, 2.77649432689486, 
    -10.2019151979604, -1.5291429584785, 64.0844441344157, -10.2019151979604, 
    1436.59087990322, -119.102465478083, -8.29614665320833, -1.5291429584785, 
    -119.102465478083, 88.4003508110354), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.532256367420589, -0.683063280972343
    ), logphi = c(0.505752588826022, -1.65553473572101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_81 = structure(list(
    par = c(-0.139492491074395, 0.488172568447951, 0.520402624047493, 
    -1.48464409763458), value = 15.5143739592797, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.0343362886509, 1.17678212463446, 
    54.5545448091822, -2.86795870385603, 1.17678212463446, 20.9550801275604, 
    -3.31273483666905, -4.14130708858984, 54.5545448091822, -3.31273483666905, 
    835.951923175759, -82.2286531418914, -2.86795870385603, -4.14130708858984, 
    -82.2286531418914, 59.223044226453), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.139492491074395, 0.488172568447951
    ), logphi = c(0.520402624047493, -1.48464409763458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_82 = structure(list(
    par = c(-0.0904705753913771, 0.466948231740102, 0.492205092822002, 
    -1.70740330382718), value = 12.6983199656785, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.1428376494358, 1.09517530955117, 
    65.0294424167086, -0.931821515948172, 1.09517530955117, 22.9360766406117, 
    1.10492272131779, -4.222241102525, 65.0294424167086, 1.10492272131779, 
    1504.68152193062, -93.9233142494, -0.931821515948172, -4.222241102525, 
    -93.9233142494, 82.2647237450624), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0904705753913771, 0.466948231740102
    ), logphi = c(0.492205092822002, -1.70740330382718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_83 = structure(list(
    par = c(-0.220733317545599, -0.0683407207269336, 0.468383983988065, 
    -1.55691882170133), value = 21.9751669335464, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.1029723751279, -1.17575028468764, 
    57.7402308064023, -2.1735517741206, -1.17575028468764, 10.8499823125996, 
    -4.41340833656767, -3.0253384126766, 57.7402308064023, -4.41340833656767, 
    1040.72909680397, -53.9263819203661, -2.1735517741206, -3.0253384126766, 
    -53.9263819203661, 62.8831939639696), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220733317545599, -0.0683407207269336
    ), logphi = c(0.468383983988065, -1.55691882170133)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_84 = structure(list(
    par = c(-0.169274343114853, 0.204806881476613, 0.530319734026565, 
    -1.50480139176125), value = 22.1652069501879, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.4885644736832, -1.6467503751727, 
    57.1382499394701, -4.68783620988233, -1.6467503751727, 14.9211613065248, 
    -7.45700641058278, -3.42212826165422, 57.1382499394701, -7.45700641058278, 
    911.914714378348, -91.4567905989649, -4.68783620988233, -3.42212826165422, 
    -91.4567905989649, 64.7872902934665), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.169274343114853, 0.204806881476613
    ), logphi = c(0.530319734026565, -1.50480139176125)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_85 = structure(list(
    par = c(-0.190255631218234, -0.444838954983207, 0.476458967801228, 
    -1.60240706477738), value = 28.9258513795229, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.4110207489333, -3.09878692750232, 
    59.0620678524445, -3.18932218368317, -3.09878692750232, 4.90869094971202, 
    -6.01594064519873, -2.10355572116683, 59.0620678524445, -6.01594064519873, 
    1212.52169834385, -62.2074492744318, -3.18932218368317, -2.10355572116683, 
    -62.2074492744318, 71.7445653517501), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190255631218234, -0.444838954983207
    ), logphi = c(0.476458967801228, -1.60240706477738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_86 = structure(list(
    par = c(-0.465982405093716, 0.329948008230024, 0.524643441854993, 
    -1.5858852049417), value = 12.6095289054145, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.888371767202, 2.22610349798202, 
    66.6795012715937, -7.25826408576324, 2.22610349798202, 20.8879772616299, 
    -6.2740736792577, -5.120286542315, 66.6795012715937, -6.2740736792577, 
    1108.17180331235, -120.862932438737, -7.25826408576324, -5.120286542315, 
    -120.862932438737, 76.4895391798248), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.465982405093716, 0.329948008230024
    ), logphi = c(0.524643441854993, -1.5858852049417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_87 = structure(list(
    par = c(-0.130127050336872, 0.137347418188652, 0.483965144449836, 
    -1.53298870458644), value = 22.1849848281539, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.2902029158124, -1.59820114831177, 
    55.6691318225333, -1.69101035707442, -1.59820114831177, 13.2908198189341, 
    -4.17633592775246, -3.29109319752163, 55.6691318225333, -4.17633592775246, 
    974.169042740058, -59.3621504116904, -1.69101035707442, -3.29109319752163, 
    -59.3621504116904, 61.2136281228359), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130127050336872, 0.137347418188652
    ), logphi = c(0.483965144449836, -1.53298870458644)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_88 = structure(list(
    par = c(-0.509485990138993, -0.0656763751525457, 0.520051929280223, 
    -1.64007207572499), value = 15.0250760255028, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.3775954465968, -1.85863333612701, 
    68.2407023546716, -8.50022052123478, -1.85863333612701, 9.41221952110993, 
    -11.4160917528139, -3.38582719239255, 68.2407023546716, -11.4160917528139, 
    1332.72777490578, -129.664959127584, -8.50022052123478, -3.38582719239255, 
    -129.664959127584, 85.9742487948623), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.509485990138993, -0.0656763751525457
    ), logphi = c(0.520051929280223, -1.64007207572499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_89 = structure(list(
    par = c(-0.397486690284878, -0.209120883962286, 0.503626591939074, 
    -1.64918956284308), value = 23.0479636503783, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.5397052967248, -2.5798905820551, 
    66.5275584976754, -6.61653626909953, -2.5798905820551, 7.17482459489105, 
    -9.38821758200703, -2.88955556593251, 66.5275584976754, -9.38821758200703, 
    1367.67819196848, -108.594251556848, -6.61653626909953, -2.88955556593251, 
    -108.594251556848, 83.2816133744529), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397486690284878, -0.209120883962286
    ), logphi = c(0.503626591939074, -1.64918956284308)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_90 = structure(list(
    par = c(-0.67758571370279, 0.423647269398929, 0.493069879662138, 
    -1.70496942908189), value = 4.32772636082588, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.5398375834659, 4.25782158952615, 
    76.5425586974899, -7.43332850161593, 4.25782158952615, 21.0813412033772, 
    1.14247166571602, -6.9572404242102, 76.5425586974899, 1.14247166571602, 
    1456.5964479365, -138.7078043118, -7.43332850161593, -6.9572404242102, 
    -138.7078043118, 86.121858221766), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.67758571370279, 0.423647269398929
    ), logphi = c(0.493069879662138, -1.70496942908189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_91 = structure(list(
    par = c(-0.196676423310531, 0.435457242573864, 0.531435938277431, 
    -1.56075961719524), value = 15.1547966046077, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9434911683605, 0.426757133631384, 
    61.3684287005256, -4.44808870980751, 0.426757133631384, 20.1913062980452, 
    -5.04423317426728, -4.4967502019766, 61.3684287005256, -5.04423317426728, 
    1037.41512555811, -105.531182874152, -4.44808870980751, -4.4967502019766, 
    -105.531182874152, 71.4314594469911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196676423310531, 0.435457242573864
    ), logphi = c(0.531435938277431, -1.56075961719524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_92 = structure(list(
    par = c(-0.239538554270084, 0.203014828455148, 0.488976988605369, 
    -1.81865662175392), value = 7.76326430360986, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.4942575971538, -1.81728546655435, 
    75.2317264653968, -3.44930072260219, -1.81728546655435, 14.06995868658, 
    -2.82722746725028, -4.17042365530307, 75.2317264653968, -2.82722746725028, 
    1990.7282914966, -117.427513546486, -3.44930072260219, -4.17042365530307, 
    -117.427513546486, 95.6736915997958), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239538554270084, 0.203014828455148
    ), logphi = c(0.488976988605369, -1.81865662175392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_93 = structure(list(
    par = c(0.112629603123386, -0.0657872907592127, 0.493197141793655, 
    -1.46148910950222), value = 28.0511532741176, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.6555894023528, -3.76928692791267, 
    47.2058400102782, -0.514408608598416, -3.76928692791267, 
    11.3562962908986, -5.54229267724082, -2.19949904156636, 47.2058400102782, 
    -5.54229267724082, 825.284157572881, -43.2862101780174, -0.514408608598416, 
    -2.19949904156636, -43.2862101780174, 53.7922533085933), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.112629603123386, -0.0657872907592127
    ), logphi = c(0.493197141793655, -1.46148910950222)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_94 = structure(list(
    par = c(-0.703798366739751, -0.172656346072416, 0.498156871409864, 
    -1.45607119422425), value = 24.7957585650886, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.5027350788665, 0.813797567111862, 
    57.8154860306768, -8.27156353588876, 0.813797567111862, 10.005616140063, 
    -8.22381956666618, -3.19987557784174, 57.8154860306768, -8.22381956666618, 
    793.668305044015, -82.9390589265344, -8.27156353588876, -3.19987557784174, 
    -82.9390589265344, 57.4430604736165), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.703798366739751, -0.172656346072416
    ), logphi = c(0.498156871409864, -1.45607119422425)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_95 = structure(list(
    par = c(-0.148423431218763, -0.290008779396111, 0.453748599063718, 
    -1.58116300094606), value = 26.6610556443103, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.0990532567648, -2.81157257386866, 
    56.4625230321525, -1.23665962004083, -2.81157257386866, 6.34860121628833, 
    -4.19209134161491, -2.37931216329201, 56.4625230321525, -4.19209134161491, 
    1119.92760289059, -40.1279690018796, -1.23665962004083, -2.37931216329201, 
    -40.1279690018796, 64.7395377306736), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148423431218763, -0.290008779396111
    ), logphi = c(0.453748599063718, -1.58116300094606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_96 = structure(list(
    par = c(-0.205999446239349, 0.383746317553795, 0.499496695151631, 
    -1.3809881669384), value = 18.9866776524822, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.6815933286161, 2.16526035501374, 
    48.0276412861969, -2.21130504662881, 2.16526035501374, 19.4720095425538, 
    -3.11555067522562, -3.63181566864768, 48.0276412861969, -3.11555067522562, 
    614.181510309564, -53.3520635737084, -2.21130504662881, -3.63181566864768, 
    -53.3520635737084, 43.8474087287588), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205999446239349, 0.383746317553795
    ), logphi = c(0.499496695151631, -1.3809881669384)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_97 = structure(list(
    par = c(-0.262801621346871, -0.197176369435076, 0.528210016427282, 
    -1.46600201305126), value = 29.5029665160664, counts = structure(c(319L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.4600208505474, -2.53121346549534, 
    54.6843742608161, -6.04323869435319, -2.53121346549534, 8.16984715878988, 
    -8.63884360580158, -2.24588493047406, 54.6843742608161, -8.63884360580158, 
    842.223976794898, -85.1866158093628, -6.04323869435319, -2.24588493047406, 
    -85.1866158093628, 61.175970534677), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262801621346871, -0.197176369435076
    ), logphi = c(0.528210016427282, -1.46600201305126)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_98 = structure(list(
    par = c(-0.166161317394726, 0.260791300162333, 0.533655671465471, 
    -1.67535537616684), value = 16.7986108570019, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.2456182635873, -2.80894080351146, 
    67.9746573624129, -4.94481467105956, -2.80894080351146, 14.8845154646082, 
    -8.30940358298449, -4.02905601504244, 67.9746573624129, -8.30940358298449, 
    1425.24745876305, -121.640495311048, -4.94481467105956, -4.02905601504244, 
    -121.640495311048, 86.4389507988506), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.166161317394726, 0.260791300162333
    ), logphi = c(0.533655671465471, -1.67535537616684)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_99 = structure(list(
    par = c(-0.371900275256844, 0.0190803656180883, 0.512619696911545, 
    -1.69257806986157), value = 19.1234839827124, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.4567471720505, -2.62742836731888, 
    70.3120646239341, -6.56844138902102, -2.62742836731888, 10.0850459636703, 
    -9.42694844940917, -3.68588980625972, 70.3120646239341, -9.42694844940917, 
    1505.11750746229, -123.40591593496, -6.56844138902102, -3.68588980625972, 
    -123.40591593496, 88.8636607268012), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371900275256844, 0.0190803656180883
    ), logphi = c(0.512619696911545, -1.69257806986157)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_100 = structure(list(
    par = c(-0.0308684898907896, -0.158564884880371, 0.451600928935876, 
    -1.45404394925947), value = 30.3685177462504, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.9096348128388, -3.03845870242014, 
    47.1868672917708, 0.4757791138843, -3.03845870242014, 8.04170036516894, 
    -3.83877535181654, -2.26577264772487, 47.1868672917708, -3.83877535181654, 
    784.363859757775, -18.1905932015169, 0.4757791138843, -2.26577264772487, 
    -18.1905932015169, 48.5235039615617), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0308684898907896, -0.158564884880371
    ), logphi = c(0.451600928935876, -1.45404394925947)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_101 = structure(list(
    par = c(-0.272130778875647, -0.29088760925894, 0.569851349271047, 
    -1.18397719384839), value = 42.8556789373977, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.6334604973318, -1.98289451880385, 
    38.3538521546711, -7.05288035796059, -1.98289451880385, 7.13625755111025, 
    -6.78988758018306, -0.976362986015999, 38.3538521546711, 
    -6.78988758018306, 358.149421073151, -61.2308934950789, -7.05288035796059, 
    -0.976362986015999, -61.2308934950789, 34.8076037006706), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.272130778875647, -0.29088760925894
    ), logphi = c(0.569851349271047, -1.18397719384839)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_102 = structure(list(
    par = c(0.0799136652090001, 0.165722120979388, 0.456416860249519, 
    -1.69175409254503), value = 17.4690173153401, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.407540988075, -3.19607424792423, 
    56.3640212973837, 1.29954387517728, -3.19607424792423, 13.5596938068971, 
    -0.835393706211107, -2.70155998105537, 56.3640212973837, 
    -0.835393706211107, 1479.20924120015, -49.8141510312244, 
    1.29954387517728, -2.70155998105537, -49.8141510312244, 77.4637053240212
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0799136652090001, 0.165722120979388
    ), logphi = c(0.456416860249519, -1.69175409254503)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_103 = structure(list(
    par = c(-0.0699142982532295, 0.446694541864008, 0.536090546049352, 
    -1.71605029618608), value = 13.1674925948927, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.0172038237557, -2.66902452139561, 
    69.094045893614, -3.44080352365772, -2.66902452139561, 18.5661197802389, 
    -5.44317376238723, -4.47902666844691, 69.094045893614, -5.44317376238723, 
    1553.3090238331, -123.403239910891, -3.44080352365772, -4.47902666844691, 
    -123.403239910891, 88.9739696017244), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0699142982532295, 0.446694541864008
    ), logphi = c(0.536090546049352, -1.71605029618608)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_104 = structure(list(
    par = c(0.0522924155678606, 0.164721512198663, 0.485894195040093, 
    -1.72671973353477), value = 15.9926209061847, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.0375106297455, -3.73034777778614, 
    62.1178990027893, -0.402628800522109, -3.73034777778614, 
    13.7442137169153, -3.16319831750178, -3.07022428125414, 62.1178990027893, 
    -3.16319831750178, 1625.71053849048, -77.7314421851472, -0.402628800522109, 
    -3.07022428125414, -77.7314421851472, 85.5320308654761), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0522924155678606, 0.164721512198663
    ), logphi = c(0.485894195040093, -1.72671973353477)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_105 = structure(list(
    par = c(0.0730874329032223, 0.0600870638981589, 0.435995299571911, 
    -1.80973751813894), value = 11.6073617537132, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4567046976229, -3.40720245395332, 
    59.4236359874323, 1.58758802992764, -3.40720245395332, 11.544244167272, 
    1.21791726215292, -2.27568871169481, 59.4236359874323, 1.21791726215292, 
    1963.14135069553, -51.7973468721067, 1.58758802992764, -2.27568871169481, 
    -51.7973468721067, 87.9225491150493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0730874329032223, 0.0600870638981589
    ), logphi = c(0.435995299571911, -1.80973751813894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_106 = structure(list(
    par = c(-0.511335698892316, 0.489255958540082, 0.535953484630723, 
    -1.55716915979774), value = 8.56660765708196, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.2665116334281, 4.53572060532537, 
    65.7496233138488, -7.82601355275858, 4.53572060532537, 25.6182352886825, 
    -4.20504297782287, -5.95471172104567, 65.7496233138488, -4.20504297782287, 
    1006.643974935, -126.644228219064, -7.82601355275858, -5.95471172104567, 
    -126.644228219064, 74.5351090776225), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.511335698892316, 0.489255958540082
    ), logphi = c(0.535953484630723, -1.55716915979774)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_107 = structure(list(
    par = c(-0.238588474678431, 0.560557955133438, 0.465944224253969, 
    -1.75413786721193), value = 1.99710026460449, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.5467579059289, 5.00073422005087, 
    67.7727603282108, -0.316648956832921, 5.00073422005087, 24.6908784018451, 
    9.13168396010633, -4.50813805374928, 67.7727603282108, 9.13168396010633, 
    1643.47049951274, -94.3541411850823, -0.316648956832921, 
    -4.50813805374928, -94.3541411850823, 82.5031663640452), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238588474678431, 0.560557955133438
    ), logphi = c(0.465944224253969, -1.75413786721193)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_108 = structure(list(
    par = c(-0.715217494097281, -0.0682925317535207, 0.531244860402666, 
    -1.84115218785927), value = 7.00684115636791, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.2783832098582, -2.56304818524455, 
    76.8273065467895, -10.6951966190039, -2.56304818524455, 9.76407075015118, 
    -20.9187230924002, -2.84469354028261, 76.8273065467895, -20.9187230924002, 
    2203.22354011415, -199.74217305041, -10.6951966190039, -2.84469354028261, 
    -199.74217305041, 114.869602649392), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.715217494097281, -0.0682925317535207
    ), logphi = c(0.531244860402666, -1.84115218785927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_109 = structure(list(
    par = c(-0.304180868148644, -0.238046056948609, 0.448071096041904, 
    -1.7391902714635), value = 21.0230740510131, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.8719853629685, -2.22484730105776, 
    68.2838991430401, -2.95853637677368, -2.22484730105776, 7.18043069980467, 
    -3.60729072834687, -2.89355611027275, 68.2838991430401, -3.60729072834687, 
    1659.53767275973, -75.3380137608062, -2.95853637677368, -2.89355611027275, 
    -75.3380137608062, 83.3772988730885), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304180868148644, -0.238046056948609
    ), logphi = c(0.448071096041904, -1.7391902714635)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_110 = structure(list(
    par = c(-0.389300218630361, -0.0881551419465114, 0.51544393654305, 
    -1.47571833210333), value = 27.7516269598854, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.7104403925391, -1.50916026608883, 
    56.9691623848456, -6.38450399881307, -1.50916026608883, 9.15820611435691, 
    -8.20477330609748, -2.90907561595333, 56.9691623848456, -8.20477330609748, 
    850.389819625263, -84.5040867640812, -6.38450399881307, -2.90907561595333, 
    -84.5040867640812, 60.8544009663703), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389300218630361, -0.0881551419465114
    ), logphi = c(0.51544393654305, -1.47571833210333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_111 = structure(list(
    par = c(-0.0732629155556757, -0.496887944277186, 0.519383562861331, 
    -1.54779815664275), value = 41.6211225275471, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.3534350481411, -4.1490825708479, 
    54.9971794239212, -4.22378809084023, -4.1490825708479, 4.24329109094401, 
    -7.53290313326715, -1.59121580090016, 54.9971794239212, -7.53290313326715, 
    1076.19900434486, -79.212987976085, -4.22378809084023, -1.59121580090016, 
    -79.212987976085, 70.2953504347903), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0732629155556757, -0.496887944277186
    ), logphi = c(0.519383562861331, -1.54779815664275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_112 = structure(list(
    par = c(-0.387722791511188, 0.0531054634590765, 0.51101997444308, 
    -1.37834772992299), value = 23.8243814603079, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.8179634962683, 0.379225604696387, 
    50.9038713660814, -5.30092658745929, 0.379225604696387, 12.7584419233884, 
    -6.39848466743587, -3.11824019849638, 50.9038713660814, -6.39848466743587, 
    626.626010617137, -64.5230383287121, -5.30092658745929, -3.11824019849638, 
    -64.5230383287121, 46.8915475480003), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.387722791511188, 0.0531054634590765
    ), logphi = c(0.51101997444308, -1.37834772992299)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_113 = structure(list(
    par = c(-0.28184564084861, -0.457925712325292, 0.474629724790213, 
    -1.55409602553706), value = 28.0608318216022, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.8292963345165, -2.55500678658649, 
    57.7926759346425, -3.77844841459307, -2.55500678658649, 4.73003329126698, 
    -6.08773901422666, -2.15489861910001, 57.7926759346425, -6.08773901422666, 
    1061.50367323732, -58.3783223042644, -3.77844841459307, -2.15489861910001, 
    -58.3783223042644, 65.1469660502002), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28184564084861, -0.457925712325292
    ), logphi = c(0.474629724790213, -1.55409602553706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_114 = structure(list(
    par = c(-0.249999271506524, -0.643697996974206, 0.507567776898724, 
    -1.6401368759739), value = 31.4285573364138, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.5054936328608, -3.34211709951404, 
    61.2204051284593, -5.62088525013493, -3.34211709951404, 3.24788602590331, 
    -8.20011508562146, -1.55663840128994, 61.2204051284593, -8.20011508562146, 
    1373.13688384566, -94.9270176175965, -5.62088525013493, -1.55663840128994, 
    -94.9270176175965, 82.99490371666), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249999271506524, -0.643697996974206
    ), logphi = c(0.507567776898724, -1.6401368759739)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_115 = structure(list(
    par = c(0.0231068445040813, 0.376167402273463, 0.534558045525823, 
    -1.59052210033048), value = 21.1702706222631, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.1794510325925, -2.63725962401651, 
    59.2762613997877, -2.69162954280588, -2.63725962401651, 19.0063494649451, 
    -6.38197409053021, -3.66571065990584, 59.2762613997877, -6.38197409053021, 
    1144.34416341513, -99.2551849630097, -2.69162954280588, -3.66571065990584, 
    -99.2551849630097, 74.5119828398089), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0231068445040813, 0.376167402273463
    ), logphi = c(0.534558045525823, -1.59052210033048)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_116 = structure(list(
    par = c(-0.428432910169672, -0.125596133723262, 0.530141182348118, 
    -1.4273560745256), value = 28.8288029815297, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.8205936406999, -1.54446520816975, 
    54.4154616308745, -7.4762111408333, -1.54446520816975, 8.62470982454511, 
    -8.92773168015282, -2.5415960012154, 54.4154616308745, -8.92773168015282, 
    746.598442781021, -87.6096691255768, -7.4762111408333, -2.5415960012154, 
    -87.6096691255768, 57.5321108939875), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.428432910169672, -0.125596133723262
    ), logphi = c(0.530141182348118, -1.4273560745256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_117 = structure(list(
    par = c(-0.557080057687786, -0.114728737527804, 0.47494171740481, 
    -1.74859077427873), value = 16.8319688038335, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.0423203492738, -1.47911873149553, 
    74.4830992740475, -6.89120505859009, -1.47911873149553, 8.59171938927261, 
    -7.33098635308238, -3.80821141732213, 74.4830992740475, -7.33098635308238, 
    1708.67207415082, -121.632913890668, -6.89120505859009, -3.80821141732213, 
    -121.632913890668, 91.0139899135132), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.557080057687786, -0.114728737527804
    ), logphi = c(0.47494171740481, -1.74859077427873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_118 = structure(list(
    par = c(-0.264036762995221, 0.388831070374882, 0.506622549030987, 
    -1.35205646620139), value = 19.8221998083963, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.1145051157833, 3.5698351252833, 
    47.3055705390024, -3.0164956492662, 3.5698351252833, 22.4180439314381, 
    -3.35388170924489, -3.69764267427186, 47.3055705390024, -3.35388170924489, 
    560.989175901305, -55.4922702589167, -3.0164956492662, -3.69764267427186, 
    -55.4922702589167, 41.7416394977721), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264036762995221, 0.388831070374882
    ), logphi = c(0.506622549030987, -1.35205646620139)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_119 = structure(list(
    par = c(-0.444734389640082, -0.019231936166368, 0.500215143743362, 
    -1.77898532686792), value = 14.8348894608601, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.6705470287005, -2.7466396721465, 
    75.5060809662922, -6.87315786018772, -2.7466396721465, 9.25445543131787, 
    -9.48193113181617, -3.77870042633788, 75.5060809662922, -9.48193113181617, 
    1852.3040981977, -136.454668780761, -6.87315786018772, -3.77870042633788, 
    -136.454668780761, 97.5336511093161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.444734389640082, -0.019231936166368
    ), logphi = c(0.500215143743362, -1.77898532686792)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_120 = structure(list(
    par = c(-0.801246064937338, -0.368659487285596, 0.593649426656113, 
    -1.51429354821125), value = 29.0584397769525, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.1825284928055, -2.53743213640689, 
    56.8997435568264, -14.3392316189761, -2.53743213640689, 5.13344535058025, 
    -18.024667888028, -0.141860111213532, 56.8997435568264, -18.024667888028, 
    1019.45389641322, -180.931537611784, -14.3392316189761, -0.141860111213532, 
    -180.931537611784, 93.9450288139909), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.801246064937338, -0.368659487285596
    ), logphi = c(0.593649426656113, -1.51429354821125)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_121 = structure(list(
    par = c(-0.969718209720166, 0.164846528541204, 0.539515074328636, 
    -1.54519398125968), value = 14.4159116114106, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.3687677416676, 1.89651494686416, 
    66.9124403458454, -13.731512016335, 1.89651494686416, 15.2797471724142, 
    -13.4975312562347, -4.82808623392117, 66.9124403458454, -13.4975312562347, 
    1021.82066680179, -156.809575658556, -13.731512016335, -4.82808623392117, 
    -156.809575658556, 83.9417648172969), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.969718209720166, 0.164846528541204
    ), logphi = c(0.539515074328636, -1.54519398125968)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_122 = structure(list(
    par = c(0.174582148592061, 0.387789139899143, 0.487922778083599, 
    -1.40160322007616), value = 21.6909083723473, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.0240405446486, -1.95762007404454, 
    42.1298010264692, 1.08630321449255, -1.95762007404454, 20.6530544746286, 
    -3.64631511118318, -2.68474053211065, 42.1298010264692, -3.64631511118318, 
    674.626355328556, -35.5755502936539, 1.08630321449255, -2.68474053211065, 
    -35.5755502936539, 44.7012797142321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.174582148592061, 0.387789139899143
    ), logphi = c(0.487922778083599, -1.40160322007616)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_123 = structure(list(
    par = c(-0.159108126347564, 0.0358254052166302, 0.445733331025925, 
    -1.6748838703546), value = 19.3067019153874, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.5563330532953, -1.90533556398975, 
    61.4614896248256, -0.452891337765493, -1.90533556398975, 
    10.1992973977616, -1.00168918937271, -3.10367229472419, 61.4614896248256, 
    -1.00168918937271, 1395.16296415909, -53.3970363778558, -0.452891337765493, 
    -3.10367229472419, -53.3970363778558, 73.6719490950222), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159108126347564, 0.0358254052166302
    ), logphi = c(0.445733331025925, -1.6748838703546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_124 = structure(list(
    par = c(-0.158734639097822, 0.00424604641149999, 0.438431903705733, 
    -1.63693068614128), value = 19.8521531732231, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.2030144852548, -1.34076233493374, 
    58.7187934257827, -0.0108669722109767, -1.34076233493374, 
    10.6664265544509, -1.06523962628557, -2.95509540348959, 58.7187934257827, 
    -1.06523962628557, 1260.36967470533, -40.7377316058444, -0.0108669722109767, 
    -2.95509540348959, -40.7377316058444, 67.9494258708502), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.158734639097822, 0.00424604641149999
    ), logphi = c(0.438431903705733, -1.63693068614128)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_125 = structure(list(
    par = c(-0.353408880716805, -0.276898313782604, 0.487234055022829, 
    -1.74629085755143), value = 22.3551600923952, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.3005541231936, -2.76517673292176, 
    70.3943819315711, -5.6091203477493, -2.76517673292176, 6.83168365522846, 
    -8.36612427423944, -2.75771641389255, 70.3943819315711, -8.36612427423944, 
    1734.10417934328, -110.162242615619, -5.6091203477493, -2.75771641389255, 
    -110.162242615619, 92.309073567165), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353408880716805, -0.276898313782604
    ), logphi = c(0.487234055022829, -1.74629085755143)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_126 = structure(list(
    par = c(-0.15663158278526, -0.0651224613377462, 0.490521253425251, 
    -1.67906298547432), value = 20.2236591109458, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.6842027398795, -3.35766182146813, 
    64.7311748798174, -3.19565765405372, -3.35766182146813, 9.09361144341148, 
    -6.18456464529515, -3.03578998606113, 64.7311748798174, -6.18456464529515, 
    1456.11813040958, -86.7780742441759, -3.19565765405372, -3.03578998606113, 
    -86.7780742441759, 82.2807873053222), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.15663158278526, -0.0651224613377462
    ), logphi = c(0.490521253425251, -1.67906298547432)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_127 = structure(list(
    par = c(-0.0853463269214795, 0.0297494921398302, 0.427652940872902, 
    -1.89088832358214), value = 13.5917095082227, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.5849877782503, -2.74309300252185, 
    68.0019940437759, 0.457477467241674, -2.74309300252185, 9.89685441155075, 
    3.22122096418909, -2.56403828569063, 68.0019940437759, 3.22122096418909, 
    2343.29072747963, -71.9305024099448, 0.457477467241674, -2.56403828569063, 
    -71.9305024099448, 93.6148879970844), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0853463269214795, 0.0297494921398302
    ), logphi = c(0.427652940872902, -1.89088832358214)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_128 = structure(list(
    par = c(-0.586827338842152, -0.156651312169644, 0.48014202684584, 
    -1.61068361931569), value = 18.0860332831569, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.3088049216003, -0.661762050491177, 
    66.5266708761436, -7.00091831795646, -0.661762050491177, 
    8.61346669722707, -7.44843083033686, -3.56819355040727, 66.5266708761436, 
    -7.44843083033686, 1208.30064094157, -96.1912816426214, -7.00091831795646, 
    -3.56819355040727, -96.1912816426214, 74.4863755297587), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.586827338842152, -0.156651312169644
    ), logphi = c(0.48014202684584, -1.61068361931569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_129 = structure(list(
    par = c(-0.348897687196208, 0.196861933704992, 0.583924595556926, 
    -1.47141108845755), value = 22.0223379644348, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.3086330903021, -2.09376716853171, 
    58.2632346262102, -9.85681635556901, -2.09376716853171, 13.8334938881712, 
    -12.5528586822909, -2.85268322119947, 58.2632346262102, -12.5528586822909, 
    838.935624200232, -133.036738202197, -9.85681635556901, -2.85268322119947, 
    -133.036738202197, 73.0705915925611), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348897687196208, 0.196861933704992
    ), logphi = c(0.583924595556926, -1.47141108845755)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_130 = structure(list(
    par = c(-0.135523478906377, 0.0908190801083623, 0.479210272602661, 
    -1.64315904830951), value = 17.9566107757098, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9135246537574, -1.95415542414423, 
    61.9143385680587, -1.86430197413046, -1.95415542414423, 12.6322996250039, 
    -3.80390854637369, -3.36116214239013, 61.9143385680587, -3.80390854637369, 
    1308.32443656637, -72.8498821054302, -1.86430197413046, -3.36116214239013, 
    -72.8498821054302, 75.0431146112618), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135523478906377, 0.0908190801083623
    ), logphi = c(0.479210272602661, -1.64315904830951)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_131 = structure(list(
    par = c(-0.280673070315885, 0.00162051499116563, 0.549148880719881, 
    -1.70238588513426), value = 20.177785737608, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.2869286773932, -4.03532654669192, 
    69.3972804457488, -7.52260041414488, -4.03532654669192, 9.68914218724137, 
    -13.7616258557571, -2.97388381209629, 69.3972804457488, -13.7616258557571, 
    1564.71156005011, -143.369660636772, -7.52260041414488, -2.97388381209629, 
    -143.369660636772, 94.6659963929619), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280673070315885, 0.00162051499116563
    ), logphi = c(0.549148880719881, -1.70238588513426)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_132 = structure(list(
    par = c(-0.0387069110232898, -0.0368409170035555, 0.511630433307588, 
    -1.58961031560005), value = 27.8544550616391, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.073991718891, -3.95867883895562, 
    58.4498872191475, -2.96668557764335, -3.95867883895562, 10.054437780127, 
    -7.28943313355046, -2.71344207058988, 58.4498872191475, -7.28943313355046, 
    1169.87540267655, -81.3675976418793, -2.96668557764335, -2.71344207058988, 
    -81.3675976418793, 73.2879366092121), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0387069110232898, -0.0368409170035555
    ), logphi = c(0.511630433307588, -1.58961031560005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_133 = structure(list(
    par = c(-0.30793888824155, 0.295622186895757, 0.514780233863322, 
    -1.63361820039849), value = 16.4085880529806, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.1591232285928, -0.721745786691486, 
    67.1122509974253, -5.14340408619418, -0.721745786691486, 
    15.5802756163226, -5.45194482626243, -4.60387205603041, 67.1122509974253, 
    -5.45194482626243, 1263.37562738943, -111.799959407577, -5.14340408619418, 
    -4.60387205603041, -111.799959407577, 79.4408813193925), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30793888824155, 0.295622186895757
    ), logphi = c(0.514780233863322, -1.63361820039849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_134 = structure(list(
    par = c(-0.453572799145725, 0.268727016318621, 0.50103158470168, 
    -1.57893309129738), value = 13.2305845155814, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.2230332232226, 1.95100563527006, 
    64.9833663324273, -5.69661900362561, 1.95100563527006, 17.6179879520788, 
    -4.18943888735868, -4.86695748547206, 64.9833663324273, -4.18943888735868, 
    1081.58145233439, -100.003314141617, -5.69661900362561, -4.86695748547206, 
    -100.003314141617, 70.9155067566414), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.453572799145725, 0.268727016318621
    ), logphi = c(0.50103158470168, -1.57893309129738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_135 = structure(list(
    par = c(-0.510147932697798, -0.0508716938554152, 0.537481839153306, 
    -1.49257510226188), value = 26.9880341504273, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0618939223982, -1.2344361559613, 
    59.6140199924378, -8.99204619342342, -1.2344361559613, 10.3491419549684, 
    -10.7147738503954, -2.94912076403975, 59.6140199924378, -10.7147738503954, 
    899.426005353199, -111.435142109872, -8.99204619342342, -2.94912076403975, 
    -111.435142109872, 68.8963073880444), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.510147932697798, -0.0508716938554152
    ), logphi = c(0.537481839153306, -1.49257510226188)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_136 = structure(list(
    par = c(-0.339634126508326, 0.381196813399397, 0.503965506929434, 
    -1.69748323449093), value = 13.7439372731484, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.8343874740017, 1.0548921940412, 
    71.287271297571, -4.58060024532969, 1.0548921940412, 19.3708320113117, 
    -2.04027005157315, -5.19392071440805, 71.287271297571, -2.04027005157315, 
    1464.11098771715, -118.37095727607, -4.58060024532969, -5.19392071440805, 
    -118.37095727607, 84.8042617436207), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339634126508326, 0.381196813399397
    ), logphi = c(0.503965506929434, -1.69748323449093)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_137 = structure(list(
    par = c(-0.284572276045887, 0.358590576901592, 0.566788134364614, 
    -1.3964814578738), value = 18.2929748009819, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.2343940494201, 0.201497377005921, 
    52.904249004726, -7.45995348649942, 0.201497377005921, 18.2274756861389, 
    -8.20483765640034, -3.49446047165358, 52.904249004726, -8.20483765640034, 
    659.434583784702, -102.26099340116, -7.45995348649942, -3.49446047165358, 
    -102.26099340116, 58.2418475225666), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284572276045887, 0.358590576901592
    ), logphi = c(0.566788134364614, -1.3964814578738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_138 = structure(list(
    par = c(-0.257297642078939, -0.0425311780396317, 0.496498030844147, 
    -1.67021457050627), value = 16.764218899098, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.0837730613185, -2.30079521568172, 
    66.5239462049882, -4.50541435625951, -2.30079521568172, 10.4187591176697, 
    -7.08684611883115, -3.30495309963652, 66.5239462049882, -7.08684611883115, 
    1421.61309101052, -97.6097089724348, -4.50541435625951, -3.30495309963652, 
    -97.6097089724348, 82.5932212684677), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257297642078939, -0.0425311780396317
    ), logphi = c(0.496498030844147, -1.67021457050627)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_139 = structure(list(
    par = c(-0.476245941084735, -2.13179134045621, 0.531001373736738, 
    -1.62781644611214), value = 38.2806650664795, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.5218099444879, -0.909231538059885, 
    53.8074299800684, -8.03051517195286, -0.909231538059885, 
    0.21441953457213, -3.5386862933251, -0.115029331837491, 53.8074299800684, 
    -3.5386862933251, 1398.11425365366, -121.424490609812, -8.03051517195286, 
    -0.115029331837491, -121.424490609812, 90.4432579549308), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476245941084735, -2.13179134045621
    ), logphi = c(0.531001373736738, -1.62781644611214)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_140 = structure(list(
    par = c(-0.335042708978516, -0.0292904191363344, 0.468693553582275, 
    -1.78335978886235), value = 11.9585132975056, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.8945063021644, -1.71204341903319, 
    73.2740209281602, -4.0286072624518, -1.71204341903319, 10.6233293482028, 
    -4.05418999616103, -3.63092170552193, 73.2740209281602, -4.05418999616103, 
    1843.92659523125, -104.211372824681, -4.0286072624518, -3.63092170552193, 
    -104.211372824681, 91.2020292127558), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335042708978516, -0.0292904191363344
    ), logphi = c(0.468693553582275, -1.78335978886235)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_141 = structure(list(
    par = c(-0.482518774324987, -0.269398288186182, 0.517232246640056, 
    -1.58639620269726), value = 19.761073442152, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.1560941253121, -1.64940696656402, 
    63.4764842821767, -8.11075710505094, -1.64940696656402, 8.33987514781143, 
    -10.6416979450685, -2.54205027072629, 63.4764842821767, -10.6416979450685, 
    1175.10084782069, -112.801557108355, -8.11075710505094, -2.54205027072629, 
    -112.801557108355, 78.5864018642002), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.482518774324987, -0.269398288186182
    ), logphi = c(0.517232246640056, -1.58639620269726)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_142 = structure(list(
    par = c(-0.332536364052297, -0.238259247381362, 0.514225901523244, 
    -1.52986387054804), value = 26.8922260672769, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.2862866464956, -2.43368781926989, 
    58.9129876136241, -6.19157039860596, -2.43368781926989, 7.16714245196926, 
    -8.72492359604848, -2.47257491459152, 58.9129876136241, -8.72492359604848, 
    1003.49104004316, -89.610545690455, -6.19157039860596, -2.47257491459152, 
    -89.610545690455, 68.2112233780785), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332536364052297, -0.238259247381362
    ), logphi = c(0.514225901523244, -1.52986387054804)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_143 = structure(list(
    par = c(-0.505594193841831, 0.0710805822253722, 0.513462963657215, 
    -1.54124186519392), value = 20.8754062918657, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.1154331233062, 0.0998964244658396, 
    63.014643438386, -7.45910837451902, 0.0998964244658396, 13.0070530000026, 
    -8.20365568898751, -3.94020782445992, 63.014643438386, -8.20365568898751, 
    1003.68139250229, -103.684273948357, -7.45910837451902, -3.94020782445992, 
    -103.684273948357, 69.9579568443909), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.505594193841831, 0.0710805822253722
    ), logphi = c(0.513462963657215, -1.54124186519392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_144 = structure(list(
    par = c(-0.175491061397788, 0.247802108590762, 0.510821478344441, 
    -1.53364640410218), value = 18.7156248706342, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8990800731147, -1.01887064563044, 
    58.172797316125, -3.45926060862922, -1.01887064563044, 15.515473355876, 
    -5.42668708725103, -3.74251949519788, 58.172797316125, -5.42668708725103, 
    976.384657590756, -82.8855530468076, -3.45926060862922, -3.74251949519788, 
    -82.8855530468076, 65.1906344426578), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175491061397788, 0.247802108590762
    ), logphi = c(0.510821478344441, -1.53364640410218)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_145 = structure(list(
    par = c(-0.0682173064906717, -0.513197331003656, 0.491748980531722, 
    -1.54837689271884), value = 33.6516026489026, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.3231439863176, -3.49001116006775, 
    54.2154095555247, -2.75488525325329, -3.49001116006775, 4.73945210366367, 
    -6.11314021981002, -1.72314828272846, 54.2154095555247, -6.11314021981002, 
    1066.13226186703, -57.9395576858488, -2.75488525325329, -1.72314828272846, 
    -57.9395576858488, 66.5283657745874), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0682173064906717, -0.513197331003656
    ), logphi = c(0.491748980531722, -1.54837689271884)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_146 = structure(list(
    par = c(-0.540963827228605, -0.373026410421912, 0.514733984536042, 
    -1.76025915698985), value = 16.4998522824417, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.7114792491697, -2.78014580956665, 
    70.8349317983803, -8.74436027586967, -2.78014580956665, 5.75112977241332, 
    -13.796201730365, -2.16472603931095, 70.8349317983803, -13.796201730365, 
    1837.29910886399, -150.201626410329, -8.74436027586967, -2.16472603931095, 
    -150.201626410329, 102.284876914105), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.540963827228605, -0.373026410421912
    ), logphi = c(0.514733984536042, -1.76025915698985)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_147 = structure(list(
    par = c(0.208078796769047, 0.436558783162222, 0.486440347047928, 
    -1.7870710532727), value = 14.3428976554709, counts = structure(c(301L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.1069098927812, -3.48672311778486, 
    59.0662166533029, 1.68755013896238, -3.48672311778486, 19.8447427428583, 
    0.834982442743382, -2.90442535400004, 59.0662166533029, 0.834982442743382, 
    1867.01693074864, -77.1303069464491, 1.68755013896238, -2.90442535400004, 
    -77.1303069464491, 90.3445503457334), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.208078796769047, 0.436558783162222
    ), logphi = c(0.486440347047928, -1.7870710532727)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_148 = structure(list(
    par = c(-0.558613325648246, 0.406378581660827, 0.481657069808205, 
    -1.67175671526412), value = 5.15548851042145, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.1022196446656, 4.5506784482896, 
    71.7858273020511, -5.25624705538519, 4.5506784482896, 21.1239357721382, 
    2.35895567257671, -6.098488830375, 71.7858273020511, 2.35895567257671, 
    1337.09730280707, -112.708367823178, -5.25624705538519, -6.098488830375, 
    -112.708367823178, 78.5011786970102), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.558613325648246, 0.406378581660827
    ), logphi = c(0.481657069808205, -1.67175671526412)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_149 = structure(list(
    par = c(-0.166915407225745, 0.0508942598372433, 0.521293010100868, 
    -1.53684324382824), value = 28.1083627243658, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.1465926182657, -2.994753240948, 
    58.385642364378, -4.52229923597613, -2.994753240948, 10.7667754720708, 
    -7.8641877818697, -3.06521399018322, 58.385642364378, -7.8641877818697, 
    1007.16609139884, -88.8740085907003, -4.52229923597613, -3.06521399018322, 
    -88.8740085907003, 68.1134955646812), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.166915407225745, 0.0508942598372433
    ), logphi = c(0.521293010100868, -1.53684324382824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_150 = structure(list(
    par = c(-0.238236680582981, -0.0482810457915114, 0.48276215501799, 
    -1.59305109726723), value = 19.9078708959778, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4932569475084, -1.71128984582936, 
    61.050750209013, -3.28671318872154, -1.71128984582936, 10.3542805076628, 
    -5.50006434618666, -3.18080634409412, 61.050750209013, -5.50006434618666, 
    1155.78611854872, -72.2683004648061, -3.28671318872154, -3.18080634409412, 
    -72.2683004648061, 70.0150111487829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238236680582981, -0.0482810457915114
    ), logphi = c(0.48276215501799, -1.59305109726723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_151 = structure(list(
    par = c(-0.102831275097057, -0.768295424186347, 0.481172614844779, 
    -1.73183865175568), value = 24.0463216615305, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.0010735338126, -3.41652467028553, 
    62.0982108214818, -3.26109336779012, -3.41652467028553, 2.94444390647186, 
    -5.96210968772937, -1.40603267118067, 62.0982108214818, -5.96210968772937, 
    1710.39574218756, -77.0934793643541, -3.26109336779012, -1.40603267118067, 
    -77.0934793643541, 89.9687483641998), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.102831275097057, -0.768295424186347
    ), logphi = c(0.481172614844779, -1.73183865175568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_152 = structure(list(
    par = c(-0.183415229959123, -0.215975224860394, 0.430222766154114, 
    -1.7689319292893), value = 14.2403583972977, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.2727069535204, -2.08191825201709, 
    65.6768543390029, -0.898210752664497, -2.08191825201709, 
    8.13997916759845, -1.26767828767527, -2.56668725362452, 65.6768543390029, 
    -1.26767828767527, 1769.84898687493, -57.6990816119061, -0.898210752664497, 
    -2.56668725362452, -57.6990816119061, 83.133916621847), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183415229959123, -0.215975224860394
    ), logphi = c(0.430222766154114, -1.7689319292893)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_153 = structure(list(
    par = c(-0.374699551455041, 0.0364406763221717, 0.552690602545932, 
    -1.76487567049584), value = 17.9742722340002, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.9473684607245, -4.20396115696775, 
    73.4509990270027, -8.52126610295656, -4.20396115696775, 9.55097543986483, 
    -16.5043998023862, -3.11006517295098, 73.4509990270027, -16.5043998023862, 
    1818.65649983859, -163.577217116906, -8.52126610295656, -3.11006517295098, 
    -163.577217116906, 102.759823467302), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374699551455041, 0.0364406763221717
    ), logphi = c(0.552690602545932, -1.76487567049584)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_154 = structure(list(
    par = c(-0.579653326342775, -0.325825059308218, 0.49520815002797, 
    -1.55558856467389), value = 20.8059482045124, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.8161053905087, -1.18066325871524, 
    62.2552134190713, -7.74934000968841, -1.18066325871524, 6.74982167581106, 
    -8.99085671068889, -2.69478299985693, 62.2552134190713, -8.99085671068889, 
    1068.89784497977, -94.6697685066944, -7.74934000968841, -2.69478299985693, 
    -94.6697685066944, 70.693614000028), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.579653326342775, -0.325825059308218
    ), logphi = c(0.49520815002797, -1.55558856467389)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_155 = structure(list(
    par = c(-0.592660646911471, 0.436605765521798, 0.498977388523162, 
    -1.57858926660919), value = 9.46784203582125, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.2980064874039, 5.64621333953852, 
    66.5529027461531, -6.31849779164639, 5.64621333953852, 22.7647131660902, 
    -0.0579535708311596, -6.17773757571882, 66.5529027461531, 
    -0.0579535708311596, 1048.97818661787, -107.85265597324, 
    -6.31849779164639, -6.17773757571882, -107.85265597324, 70.2701569794684
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.592660646911471, 0.436605765521798
    ), logphi = c(0.498977388523162, -1.57858926660919)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_156 = structure(list(
    par = c(-0.344251335088, 0.113606451413395, 0.511676455746421, 
    -1.70634680483687), value = 14.2641008592311, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.6476441584088, -1.79803427080572, 
    71.3295744239062, -6.02387502368629, -1.79803427080572, 12.7681737120966, 
    -8.20985530403107, -4.05959934779432, 71.3295744239062, -8.20985530403107, 
    1543.65514359345, -123.674606934632, -6.02387502368629, -4.05959934779432, 
    -123.674606934632, 89.3698642459029), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344251335088, 0.113606451413395
    ), logphi = c(0.511676455746421, -1.70634680483687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_157 = structure(list(
    par = c(-0.286727062036449, 0.120967529171088, 0.50573795148731, 
    -1.38749378028796), value = 23.786811342309, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.6309959919583, 0.0242009363660145, 
    50.1944595105996, -3.98265232881556, 0.0242009363660145, 
    13.652279702292, -5.65466676150095, -3.17446902187157, 50.1944595105996, 
    -5.65466676150095, 641.546780046909, -59.1821819480032, -3.98265232881556, 
    -3.17446902187157, -59.1821819480032, 46.526128920199), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286727062036449, 0.120967529171088
    ), logphi = c(0.50573795148731, -1.38749378028796)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_158 = structure(list(
    par = c(-0.226060478919075, -0.231753226570624, 0.524687794163532, 
    -1.67331319780298), value = 25.139296429439, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.5630473334727, -4.08401722928886, 
    65.4048737569468, -5.96947872733011, -4.08401722928886, 6.39321577811103, 
    -10.4821345656703, -2.40931297446068, 65.4048737569468, -10.4821345656703, 
    1470.34934238288, -114.594712254501, -5.96947872733011, -2.40931297446068, 
    -114.594712254501, 88.2099120369517), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226060478919075, -0.231753226570624
    ), logphi = c(0.524687794163532, -1.67331319780298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_159 = structure(list(
    par = c(-0.142508352710787, 0.270086909044704, 0.440979561202333, 
    -1.6503965892141), value = 12.0904058624964, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.9735890701197, 1.43270874852774, 
    58.4115519770556, 0.801454673959867, 1.43270874852774, 17.6645218097349, 
    2.18369200366553, -3.32088704357858, 58.4115519770556, 2.18369200366553, 
    1286.98861234477, -47.1656422453837, 0.801454673959867, -3.32088704357858, 
    -47.1656422453837, 68.5421771309258), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142508352710787, 0.270086909044704
    ), logphi = c(0.440979561202333, -1.6503965892141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_160 = structure(list(
    par = c(-0.163489844487608, -0.444454044720485, 0.500544277687358, 
    -1.72762068826203), value = 23.1254254601547, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.1681595276024, -4.01059477894705, 
    65.3177531528826, -4.42824003776821, -4.01059477894705, 4.73295917924332, 
    -8.22904036290595, -1.98995588363005, 65.3177531528826, -8.22904036290595, 
    1684.7624798535, -97.8583695867563, -4.42824003776821, -1.98995588363005, 
    -97.8583695867563, 91.5021534080296), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.163489844487608, -0.444454044720485
    ), logphi = c(0.500544277687358, -1.72762068826203)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_161 = structure(list(
    par = c(-0.445970740478625, -0.445917183994488, 0.472198250852885, 
    -1.97299423559937), value = 6.29887473295672, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4005382812249, -3.40986495572793, 
    78.9358702242282, -6.03048407432638, -3.40986495572793, 4.80658598611683, 
    -10.096469627463, -2.12661267395831, 78.9358702242282, -10.096469627463, 
    2921.23692368307, -147.910819518149, -6.03048407432638, -2.12661267395831, 
    -147.910819518149, 111.388538366342), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.445970740478625, -0.445917183994488
    ), logphi = c(0.472198250852885, -1.97299423559937)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_162 = structure(list(
    par = c(-0.424053387836821, -0.196357917391998, 0.532463425271815, 
    -1.54373285992845), value = 27.2050959860388, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.064278291405, -2.61349859531634, 
    60.9926085211043, -8.17378317119477, -2.61349859531634, 7.30778533863941, 
    -10.878784204138, -2.47775965567243, 60.9926085211043, -10.878784204138, 
    1048.8655192038, -112.448999878723, -8.17378317119477, -2.47775965567243, 
    -112.448999878723, 74.5537308137756), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.424053387836821, -0.196357917391998
    ), logphi = c(0.532463425271815, -1.54373285992845)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_163 = structure(list(
    par = c(-0.239063646026671, -0.421427334120851, 0.551886425524975, 
    -1.51193117117966), value = 32.9477477313338, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.8681448903292, -3.35156944153425, 
    55.7991754117637, -7.41658106306886, -3.35156944153425, 5.42822763272, 
    -10.0470239541295, -1.4335302793711, 55.7991754117637, -10.0470239541295, 
    981.014237634525, -108.453830805821, -7.41658106306886, -1.4335302793711, 
    -108.453830805821, 71.9572048826222), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239063646026671, -0.421427334120851
    ), logphi = c(0.551886425524975, -1.51193117117966)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_164 = structure(list(
    par = c(-0.233525091287169, 0.536522208735457, 0.530124752942845, 
    -1.77830699171778), value = 2.47980294063131, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.7119392113612, 0.603551071343134, 
    76.1887157718633, -4.4444446363201, 0.603551071343134, 23.2411694427448, 
    -1.97246124722383, -5.569334540656, 76.1887157718633, -1.97246124722383, 
    1772.44750811045, -141.444243032307, -4.4444446363201, -5.569334540656, 
    -141.444243032307, 94.5549261563983), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233525091287169, 0.536522208735457
    ), logphi = c(0.530124752942845, -1.77830699171778)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_165 = structure(list(
    par = c(-0.122157074467388, -0.244689892482822, 0.500461968404676, 
    -1.77018071810064), value = 20.2287180862792, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.6111139768624, -4.23337107680055, 
    67.9452209730869, -3.81084056977343, -4.23337107680055, 6.95263947925184, 
    -8.05563819294974, -2.44557038797666, 67.9452209730869, -8.05563819294974, 
    1845.64373389939, -102.210166566863, -3.81084056977343, -2.44557038797666, 
    -102.210166566863, 94.9310838826989), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122157074467388, -0.244689892482822
    ), logphi = c(0.500461968404676, -1.77018071810064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_166 = structure(list(
    par = c(-0.539482252806875, -0.459925348676666, 0.522327189063877, 
    -1.57778502367754), value = 28.0096286955564, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.0107776799332, -2.35180668273216, 
    61.8581181592859, -8.98039954844165, -2.35180668273216, 4.73606999396026, 
    -11.1380288077001, -1.86875044017043, 61.8581181592859, -11.1380288077001, 
    1168.66976422525, -118.063530943679, -8.98039954844165, -1.86875044017043, 
    -118.063530943679, 79.9673656786126), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.539482252806875, -0.459925348676666
    ), logphi = c(0.522327189063877, -1.57778502367754)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_167 = structure(list(
    par = c(-0.148353538556033, -0.108435689786445, 0.515852027663691, 
    -1.523768837155), value = 26.3221966070969, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.5562376000616, -3.26315514787012, 
    56.5745934899553, -4.26826629951194, -3.26315514787012, 8.90466622482933, 
    -7.80779194453629, -2.57004497505875, 56.5745934899553, -7.80779194453629, 
    982.177166070741, -80.30643264334, -4.26826629951194, -2.57004497505875, 
    -80.30643264334, 65.8966442212972), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148353538556033, -0.108435689786445
    ), logphi = c(0.515852027663691, -1.523768837155)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_168 = structure(list(
    par = c(-0.528781012696775, 0.316266794041868, 0.505739179014329, 
    -1.46349278343317), value = 15.0972149241098, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.6073121920083, 3.44798135554214, 
    58.040872945142, -6.03161550483122, 3.44798135554214, 18.2662735790373, 
    -3.70394542237307, -4.85544565220764, 58.040872945142, -3.70394542237307, 
    775.468636913246, -83.9850981271262, -6.03161550483122, -4.85544565220764, 
    -83.9850981271262, 56.5934557652525), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.528781012696775, 0.316266794041868
    ), logphi = c(0.505739179014329, -1.46349278343317)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_169 = structure(list(
    par = c(-0.37347514940324, -0.176899454413432, 0.521595616672988, 
    -1.63798890141175), value = 21.3272017831217, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.9024198545293, -2.60920228623007, 
    65.864000353244, -7.26562898023531, -2.60920228623007, 8.38785346957138, 
    -10.8584927192013, -2.75509363367732, 65.864000353244, -10.8584927192013, 
    1338.18989903034, -118.732266524368, -7.26562898023531, -2.75509363367732, 
    -118.732266524368, 84.7274288666711), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37347514940324, -0.176899454413432
    ), logphi = c(0.521595616672988, -1.63798890141175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_170 = structure(list(
    par = c(-0.00403593064634165, 0.0946384184980017, 0.497568351742211, 
    -1.7117503389214), value = 19.9707132495298, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.5158731997702, -3.9234955480083, 
    63.8442668261519, -1.71245930813413, -3.9234955480083, 12.1916133926092, 
    -5.2134975225826, -3.12474913233274, 63.8442668261519, -5.2134975225826, 
    1575.24871625192, -87.0076560386401, -1.71245930813413, -3.12474913233274, 
    -87.0076560386401, 85.8216041921267), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00403593064634165, 0.0946384184980017
    ), logphi = c(0.497568351742211, -1.7117503389214)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_171 = structure(list(
    par = c(-0.421209474204797, -0.129084225621162, 0.502396365995732, 
    -1.55495078293763), value = 28.1022313582155, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.6329092873078, -1.7095707036674, 
    61.820214656727, -6.33401415317536, -1.7095707036674, 8.36769523182568, 
    -8.18460928542208, -3.11317332002403, 61.820214656727, -8.18460928542208, 
    1056.88199394116, -91.2941405468715, -6.33401415317536, -3.11317332002403, 
    -91.2941405468715, 69.8017445461829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421209474204797, -0.129084225621162
    ), logphi = c(0.502396365995732, -1.55495078293763)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_172 = structure(list(
    par = c(-0.0911262269633987, 0.471757648985298, 0.521315278944139, 
    -1.51400917395047), value = 16.9544215061264, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.9188700893823, 0.757816996710403, 
    55.7220289714166, -2.5871042645953, 0.757816996710403, 22.4580006396025, 
    -3.72331404552284, -4.04421719846226, 55.7220289714166, -3.72331404552284, 
    913.020458279235, -85.3386054915362, -2.5871042645953, -4.04421719846226, 
    -85.3386054915362, 62.9900174420328), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0911262269633987, 0.471757648985298
    ), logphi = c(0.521315278944139, -1.51400917395047)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_173 = structure(list(
    par = c(-0.404690128296858, 0.0484788828077816, 0.450511178814684, 
    -1.73953900725191), value = 9.93559205058269, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.0798700374719, 0.129837418150203, 
    71.3773731284562, -3.32096001764981, 0.129837418150203, 12.0784058754708, 
    -0.798933807555358, -4.02502435736807, 71.3773731284562, 
    -0.798933807555358, 1624.22921213601, -88.1299686104065, 
    -3.32096001764981, -4.02502435736807, -88.1299686104065, 
    82.2832771043558), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404690128296858, 0.0484788828077816
    ), logphi = c(0.450511178814684, -1.73953900725191)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_174 = structure(list(
    par = c(-0.349066271434418, -0.151466975189311, 0.517764349002119, 
    -1.62559565654948), value = 22.2074305081083, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.9241223957667, -2.83765624597976, 
    65.1119764487618, -6.75067080413427, -2.83765624597976, 7.97497493287835, 
    -10.0672830924964, -2.86009952565891, 65.1119764487618, -10.0672830924964, 
    1290.99943649713, -111.742735212417, -6.75067080413427, -2.86009952565891, 
    -111.742735212417, 81.9382847687677), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349066271434418, -0.151466975189311
    ), logphi = c(0.517764349002119, -1.62559565654948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_175 = structure(list(
    par = c(-0.841326293552701, 0.272550570780039, 0.528127960322317, 
    -1.32583916899127), value = 15.0227100390392, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.8014994482257, 6.60673876495821, 
    51.3427402575317, -9.44753188392156, 6.60673876495821, 22.1912536089164, 
    -5.33783343747984, -4.71972459248349, 51.3427402575317, -5.33783343747984, 
    511.451220257086, -81.226737543183, -9.44753188392156, -4.71972459248349, 
    -81.226737543183, 46.0747759323255), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.841326293552701, 0.272550570780039
    ), logphi = c(0.528127960322317, -1.32583916899127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_176 = structure(list(
    par = c(-0.12892851382243, 0.301718175362765, 0.485211976956162, 
    -1.57904474617539), value = 16.6743711528375, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.5116195334374, -0.373628158634176, 
    58.2615091131444, -1.35787390220798, -0.373628158634176, 
    16.7485206068463, -2.30124118605346, -3.77364692694115, 58.2615091131444, 
    -2.30124118605346, 1090.29152994289, -69.2210593307152, -1.35787390220798, 
    -3.77364692694115, -69.2210593307152, 66.5800569779051), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.12892851382243, 0.301718175362765
    ), logphi = c(0.485211976956162, -1.57904474617539)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_177 = structure(list(
    par = c(-0.233779105478683, 0.112414023365154, 0.475850653087646, 
    -1.82747049584026), value = 9.48015695710323, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.6802887503026, -2.50520374445173, 
    74.4002688013445, -2.99270525672135, -2.50520374445173, 11.3680782809489, 
    -2.3803955411239, -3.79218113799595, 74.4002688013445, -2.3803955411239, 
    2037.03375853381, -108.702579072473, -2.99270525672135, -3.79218113799595, 
    -108.702579072473, 95.1965127149457), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233779105478683, 0.112414023365154
    ), logphi = c(0.475850653087646, -1.82747049584026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_178 = structure(list(
    par = c(0.0414042758192566, -0.0215004724257583, 0.490733055505895, 
    -1.66889368815239), value = 21.6926360837875, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.2303535839599, -4.22746690098563, 
    59.6608304057611, -1.1659257328489, -4.22746690098563, 10.8184996543415, 
    -5.34327988344074, -2.69291144849859, 59.6608304057611, -5.34327988344074, 
    1427.55316324905, -71.9008246505837, -1.1659257328489, -2.69291144849859, 
    -71.9008246505837, 80.355162129564), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0414042758192566, -0.0215004724257583
    ), logphi = c(0.490733055505895, -1.66889368815239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_179 = structure(list(
    par = c(-0.464319598862684, 0.571405631801753, 0.556990596481782, 
    -1.36438852356591), value = 17.5764639904439, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.71444837488, 5.59712739089946, 
    51.8814412249213, -7.56472553842258, 5.59712739089946, 25.1459635363105, 
    -3.74320875717871, -4.94293016339853, 51.8814412249213, -3.74320875717871, 
    573.674030727389, -95.8560457635649, -7.56472553842258, -4.94293016339853, 
    -95.8560457635649, 53.1317583485347), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.464319598862684, 0.571405631801753
    ), logphi = c(0.556990596481782, -1.36438852356591)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_180 = structure(list(
    par = c(-0.407187070732697, -0.366130875251239, 0.493480273140863, 
    -1.67185988883875), value = 20.126641565357, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.6191245961662, -2.42695461771802, 
    66.6794739681009, -6.41647616461682, -2.42695461771802, 5.99394694944522, 
    -8.9739732658245, -2.48701901384152, 66.6794739681009, -8.9739732658245, 
    1456.19144560705, -104.544524390349, -6.41647616461682, -2.48701901384152, 
    -104.544524390349, 85.2254113361539), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407187070732697, -0.366130875251239
    ), logphi = c(0.493480273140863, -1.67185988883875)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_181 = structure(list(
    par = c(-0.165262266995565, 0.0349869544839953, 0.490134945731486, 
    -1.75847225511205), value = 15.8598919691423, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.4786573440645, -3.44077718583691, 
    69.6151479142593, -3.16718057558063, -3.44077718583691, 10.3400633744144, 
    -5.37293461100319, -3.39304121799167, 69.6151479142593, -5.37293461100319, 
    1755.02124858573, -100.635123393866, -3.16718057558063, -3.39304121799167, 
    -100.635123393866, 90.8687443326173), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165262266995565, 0.0349869544839953
    ), logphi = c(0.490134945731486, -1.75847225511205)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_182 = structure(list(
    par = c(-0.126706225978716, 0.221319241317753, 0.508582211419027, 
    -1.56593392846195), value = 18.1832991273087, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9432088652907, -1.65458677425789, 
    59.1670620364582, -2.99121676494707, -1.65458677425789, 15.8346551026867, 
    -5.49927138404627, -3.61197647258393, 59.1670620364582, -5.49927138404627, 
    1070.7518582187, -83.5374844765369, -2.99121676494707, -3.61197647258393, 
    -83.5374844765369, 68.9789206296254), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126706225978716, 0.221319241317753
    ), logphi = c(0.508582211419027, -1.56593392846195)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_183 = structure(list(
    par = c(-0.491145007511628, 0.0266814744848427, 0.513056448261336, 
    -1.45740828534218), value = 22.5507089957665, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.2677184722216, 0.479715719592377, 
    57.1813590752868, -6.91465178848105, 0.479715719592377, 12.9404857975857, 
    -7.59437264719054, -3.48249432091663, 57.1813590752868, -7.59437264719054, 
    793.836885511823, -84.824813547435, -6.91465178848105, -3.48249432091663, 
    -84.824813547435, 58.2667663184822), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.491145007511628, 0.0266814744848427
    ), logphi = c(0.513056448261336, -1.45740828534218)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_184 = structure(list(
    par = c(-0.302952111001276, -0.0661447441821064, 0.476487648874176, 
    -1.46890565566144), value = 23.6018295570057, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.592262932392, -0.590162125391203, 
    54.1468659944755, -3.04132108386312, -0.590162125391203, 
    10.2904719581076, -5.06038835101918, -3.02862408263493, 54.1468659944755, 
    -5.06038835101918, 813.175120256027, -50.585019678806, -3.04132108386312, 
    -3.02862408263493, -50.585019678806, 52.8108894766177), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302952111001276, -0.0661447441821064
    ), logphi = c(0.476487648874176, -1.46890565566144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_185 = structure(list(
    par = c(-0.242435044961385, -0.159042440055278, 0.493390130347533, 
    -1.5984332957879), value = 25.530746839738, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.5491459784096, -2.69264883723253, 
    61.5245673545317, -4.19836664322659, -2.69264883723253, 8.05551179450248, 
    -7.00406502218698, -2.84005225514861, 61.5245673545317, -7.00406502218698, 
    1189.46941277009, -80.6243068458556, -4.19836664322659, -2.84005225514861, 
    -80.6243068458556, 73.0954462060396), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242435044961385, -0.159042440055278
    ), logphi = c(0.493390130347533, -1.5984332957879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_186 = structure(list(
    par = c(-0.25110872176688, -0.0693954709161456, 0.502908154303668, 
    -1.64872880603698), value = 23.7377506252519, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.7142364662167, -2.7004996914215, 
    65.2709136588214, -4.80803853974976, -2.7004996914215, 9.63483644333962, 
    -7.80619530971194, -3.14838499537728, 65.2709136588214, -7.80619530971194, 
    1353.32215582551, -98.0274676551929, -4.80803853974976, -3.14838499537728, 
    -98.0274676551929, 81.0445984500419), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25110872176688, -0.0693954709161456
    ), logphi = c(0.502908154303668, -1.64872880603698)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_187 = structure(list(
    par = c(-0.510957755186565, -0.397257080248073, 0.53855613317965, 
    -1.67564851950614), value = 25.996803300182, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.7551396648969, -3.15847959964088, 
    65.9102070654782, -9.47827045916227, -3.15847959964088, 5.0771727755361, 
    -14.278463490669, -1.73331541075683, 65.9102070654782, -14.278463490669, 
    1511.61295211644, -148.810624915896, -9.47827045916227, -1.73331541075683, 
    -148.810624915896, 96.1041651068584), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.510957755186565, -0.397257080248073
    ), logphi = c(0.53855613317965, -1.67564851950614)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_188 = structure(list(
    par = c(-0.0723449997024675, 0.345325015966808, 0.489189600158908, 
    -1.55353718989256), value = 15.3845312826561, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.6328143255571, 0.391357904305778, 
    55.7488048449351, -0.915579002169764, 0.391357904305778, 
    20.274914706242, -2.44109169589279, -3.64889480186648, 55.7488048449351, 
    -2.44109169589279, 1020.1283044271, -65.7302068240995, -0.915579002169764, 
    -3.64889480186648, -65.7302068240995, 63.6362755939146), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0723449997024675, 0.345325015966808
    ), logphi = c(0.489189600158908, -1.55353718989256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_189 = structure(list(
    par = c(-0.34465227712223, 0.291510245064371, 0.555382172846361, 
    -1.62310078936234), value = 18.7464382746471, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.5408452944341, -2.04330014330623, 
    68.1571324285812, -8.13266417809544, -2.04330014330623, 14.865829710331, 
    -11.3262911920486, -4.2912147013574, 68.1571324285812, -11.3262911920486, 
    1246.35485228008, -142.867254302015, -8.13266417809544, -4.2912147013574, 
    -142.867254302015, 85.9195631726095), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34465227712223, 0.291510245064371
    ), logphi = c(0.555382172846361, -1.62310078936234)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_190 = structure(list(
    par = c(-0.420499704849108, 0.230013130925313, 0.515542580710029, 
    -1.83264529470917), value = 2.24350122187541, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.4239020213114, -1.72649854590645, 
    80.4491195349755, -6.84239410642107, -1.72649854590645, 14.7258555056595, 
    -8.59966312738436, -4.80404289326941, 80.4491195349755, -8.59966312738436, 
    2065.47288880454, -155.224149746669, -6.84239410642107, -4.80404289326941, 
    -155.224149746669, 102.3265239537), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.420499704849108, 0.230013130925313
    ), logphi = c(0.515542580710029, -1.83264529470917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_191 = structure(list(
    par = c(-0.392453631942779, 0.126945805325143, 0.486059992146997, 
    -1.34004354150149), value = 29.0895206780262, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.4987252235378, 1.51053808838952, 
    47.5449404868655, -3.3567635195908, 1.51053808838952, 13.7710057082074, 
    -4.25099501999426, -3.3179294454122, 47.5449404868655, -4.25099501999426, 
    542.665515298246, -43.4830343709613, -3.3567635195908, -3.3179294454122, 
    -43.4830343709613, 38.5144912469215), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392453631942779, 0.126945805325143
    ), logphi = c(0.486059992146997, -1.34004354150149)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_192 = structure(list(
    par = c(-0.413480068055372, 0.0653387575592827, 0.469888278391075, 
    -1.82808973958505), value = 10.1509202497075, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.9962823398443, -1.5833466147086, 
    77.8773241911779, -4.76290352358077, -1.5833466147086, 10.6827205126336, 
    -3.11550676546091, -4.20278489521309, 77.8773241911779, -3.11550676546091, 
    2032.65911471373, -121.819911778065, -4.76290352358077, -4.20278489521309, 
    -121.819911778065, 95.6933767186641), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.413480068055372, 0.0653387575592827
    ), logphi = c(0.469888278391075, -1.82808973958505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_193 = structure(list(
    par = c(-0.577717734083463, 0.134606886454846, 0.526563603569383, 
    -1.54761327290172), value = 20.0193575766866, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.0356270858323, 0.951042133934266, 
    64.6300291347046, -8.96036973152547, 0.951042133934266, 15.4107607990284, 
    -9.48261494215785, -4.25464916453677, 64.6300291347046, -9.48261494215785, 
    1021.60392340345, -120.232641688922, -8.96036973152547, -4.25464916453677, 
    -120.232641688922, 74.2619655182963), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.577717734083463, 0.134606886454846
    ), logphi = c(0.526563603569383, -1.54761327290172)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_194 = structure(list(
    par = c(-0.361826500436146, 0.530946660726473, 0.477754019549528, 
    -1.59399065898369), value = 5.68686925389017, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.3440105650951, 7.36810621360107, 
    61.9847797871387, -2.10289869295721, 7.36810621360107, 29.1118160054005, 
    4.2582287238524, -5.13525303036388, 61.9847797871387, 4.2582287238524, 
    1085.3515565401, -81.9421006306165, -2.10289869295721, -5.13525303036388, 
    -81.9421006306165, 66.0685642288605), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361826500436146, 0.530946660726473
    ), logphi = c(0.477754019549528, -1.59399065898369)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_195 = structure(list(
    par = c(-0.285367784380575, 0.202909242642662, 0.471670907142259, 
    -1.71210955851665), value = 9.5713705477575, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.9382736857746, -0.272761370379015, 
    68.7954743141539, -2.71754717218187, -0.272761370379015, 
    14.4035746347804, -1.01537747498881, -4.18856547179658, 68.7954743141539, 
    -1.01537747498881, 1525.77250718711, -91.0609724464884, -2.71754717218187, 
    -4.18856547179658, -91.0609724464884, 81.7688835854646), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285367784380575, 0.202909242642662
    ), logphi = c(0.471670907142259, -1.71210955851665)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_196 = structure(list(
    par = c(-0.214554001894125, -0.0257167482725168, 0.470750797261638, 
    -1.68109297145184), value = 18.4567774583668, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.8945915308526, -2.29551578545539, 
    65.0883068251673, -2.58472391312381, -2.29551578545539, 9.80363705593845, 
    -4.04399672060407, -3.27852674253393, 65.0883068251673, -4.04399672060407, 
    1441.21791347995, -77.0256120281587, -2.58472391312381, -3.27852674253393, 
    -77.0256120281587, 79.1835156910281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214554001894125, -0.0257167482725168
    ), logphi = c(0.470750797261638, -1.68109297145184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_197 = structure(list(
    par = c(-0.371068602291274, -0.122079969994473, 0.498836450595589, 
    -1.72514821844323), value = 14.0815233534984, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.7301221114852, -2.61093435227622, 
    70.8655486212351, -6.11821838392146, -2.61093435227622, 8.82026398318914, 
    -8.98143859728862, -3.24494605052905, 70.8655486212351, -8.98143859728862, 
    1639.24880931621, -117.761096232627, -6.11821838392146, -3.24494605052905, 
    -117.761096232627, 91.1926522109141), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371068602291274, -0.122079969994473
    ), logphi = c(0.498836450595589, -1.72514821844323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_198 = structure(list(
    par = c(-0.473191454759596, 0.074608917595115, 0.464506486153646, 
    -1.80526289626512), value = 10.079607857633, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.1496291799592, -0.478222451860688, 
    77.5362841975991, -5.03172227617199, -0.478222451860688, 
    12.2580109884751, -2.36037936396372, -4.4371745770988, 77.5362841975991, 
    -2.36037936396372, 1915.97485347295, -119.230073379217, -5.03172227617199, 
    -4.4371745770988, -119.230073379217, 92.7203978626778), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.473191454759596, 0.074608917595115
    ), logphi = c(0.464506486153646, -1.80526289626512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_199 = structure(list(
    par = c(-0.514622128773157, -0.661483722794356, 0.528787364112092, 
    -1.54476788780668), value = 32.5124064141877, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.3019999429869, -2.3836574154501, 
    58.4187232881561, -8.94587866184793, -2.3836574154501, 3.30898995137829, 
    -10.0704260308504, -1.27506026537105, 58.4187232881561, -10.0704260308504, 
    1084.33647103112, -113.238726449083, -8.94587866184793, -1.27506026537105, 
    -113.238726449083, 76.640797304961), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.514622128773157, -0.661483722794356
    ), logphi = c(0.528787364112092, -1.54476788780668)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_200 = structure(list(
    par = c(-0.262687659812134, 0.368912109836151, 0.537399771326626, 
    -1.56822187878177), value = 13.2905056128124, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.8011772154585, 0.0813026952428686, 
    63.2339552080197, -5.77120362610373, 0.0813026952428686, 
    18.9872783264988, -6.85346486761773, -4.47312637286146, 63.2339552080197, 
    -6.85346486761773, 1064.94276325986, -114.545777123887, -5.77120362610373, 
    -4.47312637286146, -114.545777123887, 74.363138965694), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262687659812134, 0.368912109836151
    ), logphi = c(0.537399771326626, -1.56822187878177)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_1 = structure(list(
    par = c(-0.494207558215613, -0.290809141414111, 0.479675483566532, 
    -1.74268603117214), value = 30.9146527176694, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9659907305738, -3.65875613805855, 
    107.886090195741, -10.092395737793, -3.65875613805855, 9.16408155848814, 
    -13.0338844854805, -4.43201929023473, 107.886090195741, -13.0338844854805, 
    2569.58731458656, -175.051551252636, -10.092395737793, -4.43201929023473, 
    -175.051551252636, 137.861888089397), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.494207558215613, -0.290809141414111
    ), logphi = c(0.479675483566532, -1.74268603117214)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_2 = structure(list(
    par = c(-0.262909664273604, 0.0829829431358683, 0.544312358014934, 
    -1.66268397375171), value = 30.7991459073097, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.5965712920938, -5.14998352052487, 
    101.838180201597, -10.5036790847279, -5.14998352052487, 16.8638368647223, 
    -17.8822052232519, -5.03305330390447, 101.838180201597, -17.8822052232519, 
    2108.58359598287, -199.930772335044, -10.5036790847279, -5.03305330390447, 
    -199.930772335044, 133.155336145663), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262909664273604, 0.0829829431358683
    ), logphi = c(0.544312358014934, -1.66268397375171)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_3 = structure(list(
    par = c(-0.173886177404482, 0.00665822615209825, 0.443540990774087, 
    -1.57206956576666), value = 31.8379747865577, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.2417572973404, -1.12875171520699, 
    83.8593048664293, -0.276878197702501, -1.12875171520699, 
    17.3297372230152, -2.93517318450398, -4.48164248245675, 83.8593048664293, 
    -2.93517318450398, 1593.43218910823, -53.0757292529493, -0.276878197702501, 
    -4.48164248245675, -53.0757292529493, 91.0455039893066), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173886177404482, 0.00665822615209825
    ), logphi = c(0.443540990774087, -1.57206956576666)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_4 = structure(list(
    par = c(0.0229785980739356, 0.204027952843475, 0.483259812661854, 
    -1.71903750082509), value = 28.6058480189815, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.4472491200094, -4.50636478621647, 
    93.4703303903106, -0.599170233428481, -4.50636478621647, 
    23.1912824046887, -3.73464244951549, -4.82368012066914, 93.4703303903106, 
    -3.73464244951549, 2381.25383120824, -116.224328714054, -0.599170233428481, 
    -4.82368012066914, -116.224328714054, 126.087882401649), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0229785980739356, 0.204027952843475
    ), logphi = c(0.483259812661854, -1.71903750082509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_5 = structure(list(
    par = c(-0.759649208699945, 0.176511791561767, 0.528487998223435, 
    -1.46448603678492), value = 22.6760567522164, counts = structure(c(295L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.2776955256928, 3.84121254271008, 
    90.8907065202413, -15.4672173575676, 3.84121254271008, 23.9224418550066, 
    -12.9000889046438, -6.90496356181569, 90.8907065202413, -12.9000889046438, 
    1199.2965691352, -167.780499266357, -15.4672173575676, -6.90496356181569, 
    -167.780499266357, 97.2198065234409), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.759649208699945, 0.176511791561767
    ), logphi = c(0.528487998223435, -1.46448603678492)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_6 = structure(list(
    par = c(-0.43038898190955, -0.0483572208619663, 0.488725004330244, 
    -1.67375509056488), value = 28.4051978597417, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.0615158941636, -2.80705084598765, 
    103.809080380657, -8.89044495977487, -2.80705084598765, 13.6211094616812, 
    -10.7240371018946, -5.55556626213871, 103.809080380657, -10.7240371018946, 
    2135.50199563795, -158.630655846093, -8.89044495977487, -5.55556626213871, 
    -158.630655846093, 124.385347042733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.43038898190955, -0.0483572208619663
    ), logphi = c(0.488725004330244, -1.67375509056488)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_7 = structure(list(
    par = c(-0.755909202931933, 0.192104884070918, 0.534439781344013, 
    -1.50255885226569), value = 24.1907964241506, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.8106379569325, 2.8554791118296, 
    94.9770888141188, -16.4015674197771, 2.8554791118296, 23.1882251817694, 
    -14.7118667754853, -7.06267992800491, 94.9770888141188, -14.7118667754853, 
    1343.767394685, -189.415011337069, -16.4015674197771, -7.06267992800491, 
    -189.415011337069, 107.758929384971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.755909202931933, 0.192104884070918
    ), logphi = c(0.534439781344013, -1.50255885226569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_8 = structure(list(
    par = c(-0.422032037286517, 0.20632711441094, 0.520373292733502, 
    -1.5141737252139), value = 29.8442985246043, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.5891956328498, 0.638016810050601, 
    91.3166064959725, -9.8970337631954, 0.638016810050601, 23.2486577420588, 
    -10.4938112652775, -6.28196010321602, 91.3166064959725, -10.4938112652775, 
    1383.73271840742, -148.940465083847, -9.8970337631954, -6.28196010321602, 
    -148.940465083847, 99.2693064345573), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.422032037286517, 0.20632711441094
    ), logphi = c(0.520373292733502, -1.5141737252139)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_9 = structure(list(
    par = c(-0.283696118770497, 0.302059685733291, 0.467761487656465, 
    -1.60681255242148), value = 19.9014035108554, counts = structure(c(313L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.6848334534097, 2.89464581104681, 
    92.5011759775884, -2.64870566812903, 2.89464581104681, 26.4323576368852, 
    0.253945904304942, -6.34627408047095, 92.5011759775884, 0.253945904304942, 
    1724.59866578745, -104.401698791889, -2.64870566812903, -6.34627408047095, 
    -104.401698791889, 100.959860396266), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283696118770497, 0.302059685733291
    ), logphi = c(0.467761487656465, -1.60681255242148)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_10 = structure(list(
    par = c(-0.312494893986881, -0.319691523684616, 0.531271566428904, 
    -1.60278570941337), value = 37.7308488292577, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.7151959511032, -4.78834988015819, 
    93.2830739781565, -10.7845366290604, -4.78834988015819, 9.27875356460106, 
    -16.1532990006208, -3.1292690021445, 93.2830739781565, -16.1532990006208, 
    1857.4849694506, -171.188407535716, -10.7845366290604, -3.1292690021445, 
    -171.188407535716, 122.293844338373), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312494893986881, -0.319691523684616
    ), logphi = c(0.531271566428904, -1.60278570941337)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_11 = structure(list(
    par = c(-0.511816594553772, -0.0640500966919265, 0.508302509678937, 
    -1.5628829498171), value = 32.8674045019143, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.0190872059054, -1.78563217545502, 
    95.5770878565687, -11.3371701875309, -1.78563217545502, 14.0822927097162, 
    -13.4652523158252, -5.19990302905171, 95.5770878565687, -13.4652523158252, 
    1614.9017509246, -155.649080268105, -11.3371701875309, -5.19990302905171, 
    -155.649080268105, 109.014242006822), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.511816594553772, -0.0640500966919265
    ), logphi = c(0.508302509678937, -1.5628829498171)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_12 = structure(list(
    par = c(-0.299546885797162, 0.437333295736384, 0.510522939776132, 
    -1.59973886409909), value = 21.4192457412698, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.9365445280847, 2.9993525707539, 
    96.6391646315401, -6.23474140848401, 2.9993525707539, 30.9704118723886, 
    -3.32048833762144, -7.50676755423285, 96.6391646315401, -3.32048833762144, 
    1704.54518741181, -154.804872145142, -6.23474140848401, -7.50676755423285, 
    -154.804872145142, 110.024111572571), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299546885797162, 0.437333295736384
    ), logphi = c(0.510522939776132, -1.59973886409909)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_13 = structure(list(
    par = c(-0.108185816258599, -0.00083694268533738, 0.473077513923697, 
    -1.70881512341008), value = 30.5982968003012, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.7749349027072, -4.28554652565083, 
    96.5085925583864, -2.51122071226462, -4.28554652565083, 16.0393661703395, 
    -5.61504443563621, -4.62050958116578, 96.5085925583864, -5.61504443563621, 
    2327.33256923723, -113.766600316811, -2.51122071226462, -4.62050958116578, 
    -113.766600316811, 123.9680087739), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.108185816258599, -0.00083694268533738
    ), logphi = c(0.473077513923697, -1.70881512341008)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_14 = structure(list(
    par = c(-0.361230715413015, 0.377953886179742, 0.55686058593334, 
    -1.4994902148076), value = 25.295771022044, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.966181800466, 1.02955425873574, 
    90.8553022078706, -11.8645081359503, 1.02955425873574, 29.0449760456113, 
    -12.7227250104056, -6.55334398480534, 90.8553022078706, -12.7227250104056, 
    1323.75279123309, -181.232948126109, -11.8645081359503, -6.55334398480534, 
    -181.232948126109, 105.492273165808), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361230715413015, 0.377953886179742
    ), logphi = c(0.55686058593334, -1.4994902148076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_15 = structure(list(
    par = c(-0.074254182021135, -0.0871218589089864, 0.487770837932542, 
    -1.62020049114105), value = 38.561110506036, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.0110162099595, -5.31999429931318, 
    89.2623149244542, -3.21760060550957, -5.31999429931318, 13.6026603136941, 
    -8.59715314227572, -4.12056554832674, 89.2623149244542, -8.59715314227572, 
    1886.14281303323, -104.562960427046, -3.21760060550957, -4.12056554832674, 
    -104.562960427046, 111.288686463595), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.074254182021135, -0.0871218589089864
    ), logphi = c(0.487770837932542, -1.62020049114105)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_16 = structure(list(
    par = c(-0.532574485304163, -0.0439948315587336, 0.537791758048733, 
    -1.5426600115484), value = 37.8473471715095, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.3781969989435, -2.37489565790838, 
    94.300666649616, -14.170799085278, -2.37489565790838, 14.3640892034114, 
    -17.681068609221, -4.62997457262304, 94.300666649616, -17.681068609221, 
    1552.40457880268, -186.502791780896, -14.170799085278, -4.62997457262304, 
    -186.502791780896, 114.648682984608), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.532574485304163, -0.0439948315587336
    ), logphi = c(0.537791758048733, -1.5426600115484)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_17 = structure(list(
    par = c(-0.189428713922703, -0.125601301518956, 0.48020265537411, 
    -1.66547493816296), value = 37.829057906873, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.0873257468959, -4.74597479005467, 
    95.8793720151618, -4.5856192558702, -4.74597479005467, 11.7902629117594, 
    -8.47023641270539, -4.40513537647291, 95.8793720151618, -8.47023641270539, 
    2105.83511533002, -117.901148603217, -4.5856192558702, -4.40513537647291, 
    -117.901148603217, 118.9888851858), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189428713922703, -0.125601301518956
    ), logphi = c(0.48020265537411, -1.66547493816296)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_18 = structure(list(
    par = c(-0.0223197117932184, 0.259268828053374, 0.520023607862575, 
    -1.64594277090575), value = 29.8877252707158, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.668816334692, -5.03529633189004, 
    93.8016029818911, -3.94183871410547, -5.03529633189004, 22.5248155958369, 
    -9.27636187242342, -5.38405197980651, 93.8016029818911, -9.27636187242342, 
    1990.91504305571, -146.4644684952, -3.94183871410547, -5.38405197980651, 
    -146.4644684952, 120.210201690618), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0223197117932184, 0.259268828053374
    ), logphi = c(0.520023607862575, -1.64594277090575)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_19 = structure(list(
    par = c(-0.221130879189791, -0.206120388458741, 0.496731038082563, 
    -1.67019055925298), value = 36.111226783041, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.2154968218675, -5.49555987561234, 
    97.5298353314002, -6.66819006944763, -5.49555987561234, 10.1393233329361, 
    -11.5802521154507, -4.07105134581087, 97.5298353314002, -11.5802521154507, 
    2159.33080800745, -140.042314891176, -6.66819006944763, -4.07105134581087, 
    -140.042314891176, 124.865594953505), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221130879189791, -0.206120388458741
    ), logphi = c(0.496731038082563, -1.67019055925298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_20 = structure(list(
    par = c(-0.253312504291572, -0.22394496532002, 0.497782044499666, 
    -1.58909387787525), value = 34.9185289763802, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.0115453627307, -3.89462281802366, 
    91.513454501424, -6.95412379769778, -3.89462281802366, 11.4217139852713, 
    -11.3144664712905, -3.94880678999954, 91.513454501424, -11.3144664712905, 
    1752.33115824014, -123.84892911399, -6.95412379769778, -3.94880678999954, 
    -123.84892911399, 109.383529981244), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253312504291572, -0.22394496532002
    ), logphi = c(0.497782044499666, -1.58909387787525)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_21 = structure(list(
    par = c(-0.506542863064633, 0.330835995891346, 0.517812834250278, 
    -1.45611531002322), value = 21.490619734619, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.4031875905229, 5.21584312629386, 
    86.690376249976, -9.87240581729054, 5.21584312629386, 29.7248099876413, 
    -7.02176435041224, -7.14794033562782, 86.690376249976, -7.02176435041224, 
    1146.8174289142, -135.362467232447, -9.87240581729054, -7.14794033562782, 
    -135.362467232447, 86.8404990139737), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.506542863064633, 0.330835995891346
    ), logphi = c(0.517812834250278, -1.45611531002322)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_22 = structure(list(
    par = c(-0.477707023835807, 0.153600797572472, 0.479758430544842, 
    -1.56508485707989), value = 21.0237936516448, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.1963309492336, 2.63056888538671, 
    94.8534882745378, -7.23352418985357, 2.63056888538671, 23.7093852550885, 
    -5.28317553794011, -6.67210019678066, 94.8534882745378, -5.28317553794011, 
    1556.91631695909, -121.645532965786, -7.23352418985357, -6.67210019678066, 
    -121.645532965786, 98.3053256931044), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.477707023835807, 0.153600797572472
    ), logphi = c(0.479758430544842, -1.56508485707989)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_23 = structure(list(
    par = c(-0.0923451868168693, -0.0713226268209705, 0.499437435863381, 
    -1.58888283956144), value = 37.9907330981824, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9855367681521, -4.97995471704371, 
    88.2072077867946, -4.29924301137419, -4.97995471704371, 14.2181999471802, 
    -9.91155906149288, -4.14934880677009, 88.2072077867946, -9.91155906149288, 
    1743.5312046743, -112.586132836157, -4.29924301137419, -4.14934880677009, 
    -112.586132836157, 107.658424218116), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0923451868168693, -0.0713226268209705
    ), logphi = c(0.499437435863381, -1.58888283956144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_24 = structure(list(
    par = c(-0.0846741993940911, 0.290495398373638, 0.479756224951816, 
    -1.5010367620255), value = 27.6062906895576, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0852644133308, 0.0438797060908769, 
    78.4868041723286, -0.837840480105712, 0.0438797060908769, 
    26.0466569397266, -3.96760750476233, -5.09615657806606, 78.4868041723286, 
    -3.96760750476233, 1321.53335580742, -76.6864686951862, -0.837840480105712, 
    -5.09615657806606, -76.6864686951862, 83.7351653046881), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0846741993940911, 0.290495398373638
    ), logphi = c(0.479756224951816, -1.5010367620255)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_25 = structure(list(
    par = c(-0.473067825771794, 0.248191903252276, 0.49389982166947, 
    -1.62128867460883), value = 20.0863795163229, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.971594929078, 2.40281288910182, 
    101.656223381319, -8.4982644068532, 2.40281288910182, 25.0590880970236, 
    -5.50377607666519, -7.46687898400822, 101.656223381319, -5.50377607666519, 
    1812.1801418669, -156.553071534837, -8.4982644068532, -7.46687898400822, 
    -156.553071534837, 113.044698887954), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.473067825771794, 0.248191903252276
    ), logphi = c(0.49389982166947, -1.62128867460883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_26 = structure(list(
    par = c(-0.151011818148713, -0.00567296343227732, 0.502080386619005, 
    -1.64119362283119), value = 30.7071024508556, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.2823112590767, -4.42880397599765, 
    94.9198390269856, -5.35859329442445, -4.42880397599765, 16.1387422377146, 
    -10.3053880877724, -4.70872876778827, 94.9198390269856, -10.3053880877724, 
    1986.44407538318, -134.45541056134, -5.35859329442445, -4.70872876778827, 
    -134.45541056134, 118.488241347414), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.151011818148713, -0.00567296343227732
    ), logphi = c(0.502080386619005, -1.64119362283119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_27 = structure(list(
    par = c(-0.373458211778278, -0.00725477998831761, 0.489561378105011, 
    -1.723822664005), value = 31.3440391866508, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4317913151547, -3.43227184984585, 
    107.248551999284, -8.11183169568963, -3.43227184984585, 14.2746911180325, 
    -10.164764529641, -5.64734431041103, 107.248551999284, -10.164764529641, 
    2415.76948097233, -167.830473106534, -8.11183169568963, -5.64734431041103, 
    -167.830473106534, 132.835098429318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.373458211778278, -0.00725477998831761
    ), logphi = c(0.489561378105011, -1.723822664005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_28 = structure(list(
    par = c(-0.532210376362208, -0.1600072093697, 0.528862195790546, 
    -1.59231424121129), value = 32.5864103182199, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.3357474312472, -3.29943155641388, 
    97.3394981897968, -13.7861441498188, -3.29943155641388, 11.5387927301924, 
    -18.218209095977, -4.20719203209075, 97.3394981897968, -18.218209095977, 
    1787.65678775861, -191.467863920991, -13.7861441498188, -4.20719203209075, 
    -191.467863920991, 123.154783263857), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.532210376362208, -0.1600072093697
    ), logphi = c(0.528862195790546, -1.59231424121129)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_29 = structure(list(
    par = c(-0.348591990976698, -0.437200263264676, 0.544409533360941, 
    -1.68367970675722), value = 42.2522185291634, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.3459500818565, -5.44165882665482, 
    97.028378872821, -12.1932601722108, -5.44165882665482, 7.21516473589645, 
    -19.546895615008, -2.35864171038713, 97.028378872821, -19.546895615008, 
    2310.0800712772, -208.676684525955, -12.1932601722108, -2.35864171038713, 
    -208.676684525955, 142.563352854452), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348591990976698, -0.437200263264676
    ), logphi = c(0.544409533360941, -1.68367970675722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_30 = structure(list(
    par = c(0.148888482819507, 0.284533602701834, 0.465430012419365, 
    -1.64824339216236), value = 30.7548008645678, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.674640333514, -4.39585052625091, 
    79.3588728420502, 2.65243938102344, -4.39585052625091, 26.2734768563533, 
    -1.59095744312054, -4.11239020614573, 79.3588728420502, -1.59095744312054, 
    1992.79931974772, -71.6789436410181, 2.65243938102344, -4.11239020614573, 
    -71.6789436410181, 109.58725166077), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.148888482819507, 0.284533602701834
    ), logphi = c(0.465430012419365, -1.64824339216236)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_31 = structure(list(
    par = c(-0.260340420665259, -0.253641911235843, 0.530013445281242, 
    -1.52559740596529), value = 43.7486134671023, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.4766296933585, -4.70347977632457, 
    86.7960631598663, -9.57258982747788, -4.70347977632457, 10.3882410016354, 
    -14.1263875548248, -3.25472469331345, 86.7960631598663, -14.1263875548248, 
    1501.58641387677, -144.821683437435, -9.57258982747788, -3.25472469331345, 
    -144.821683437435, 104.767766615055), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260340420665259, -0.253641911235843
    ), logphi = c(0.530013445281242, -1.52559740596529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_32 = structure(list(
    par = c(-0.396265145085846, -0.00176412749097187, 0.5700183219062, 
    -1.51653917774495), value = 38.2506983817376, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.4021794665109, -3.57798657368846, 
    90.3248895891551, -14.7302325181897, -3.57798657368846, 16.1866829557766, 
    -19.9639003497509, -3.65337556118561, 90.3248895891551, -19.9639003497509, 
    1454.76692761015, -202.329058073047, -14.7302325181897, -3.65337556118561, 
    -202.329058073047, 116.211401154587), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396265145085846, -0.00176412749097187
    ), logphi = c(0.5700183219062, -1.51653917774495)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_33 = structure(list(
    par = c(-0.365899550960862, 0.0163213860019458, 0.499739746897817, 
    -1.44783918108076), value = 36.9480548438036, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.1185667719138, -0.57537290132359, 
    82.1053346484746, -7.23027356475114, -0.57537290132359, 17.0862055757226, 
    -9.38518060955573, -4.89204547093891, 82.1053346484746, -9.38518060955573, 
    1154.17636974335, -101.254417268493, -7.23027356475114, -4.89204547093891, 
    -101.254417268493, 80.6586747916782), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.365899550960862, 0.0163213860019458
    ), logphi = c(0.499739746897817, -1.44783918108076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_34 = structure(list(
    par = c(-0.052382234124826, 0.292701116848675, 0.485090912527075, 
    -1.61373531895509), value = 23.1231277604725, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.5566642717549, -0.859511164463811, 
    87.8961084547214, -1.13081356589717, -0.859511164463811, 
    27.4877849557598, -3.49668933363745, -5.34079834046963, 87.8961084547214, 
    -3.49668933363745, 1804.75868772323, -104.891730474677, -1.13081356589717, 
    -5.34079834046963, -104.891730474677, 106.51831246733), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.052382234124826, 0.292701116848675
    ), logphi = c(0.485090912527075, -1.61373531895509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_35 = structure(list(
    par = c(-0.391884373224165, -0.566914920056112, 0.520961430062031, 
    -1.68886415654965), value = 36.637841278344, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.807332598049, -4.65101141955415, 
    97.4551750001496, -11.4062458775877, -4.65101141955415, 5.94856485669482, 
    -16.5707639290247, -2.39195751028376, 97.4551750001496, -16.5707639290247, 
    2339.09497874052, -188.298835807288, -11.4062458775877, -2.39195751028376, 
    -188.298835807288, 139.732915725332), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.391884373224165, -0.566914920056112
    ), logphi = c(0.520961430062031, -1.68886415654965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_36 = structure(list(
    par = c(-0.431972575792794, 0.215853558657002, 0.490372189493633, 
    -1.54897500485713), value = 23.7459593445106, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.1413832984996, 2.76550627198446, 
    93.1285439520479, -7.19696377693424, 2.76550627198446, 24.670571273866, 
    -5.66099278476173, -6.73345945845227, 93.1285439520479, -5.66099278476173, 
    1494.28081567393, -126.148627266787, -7.19696377693424, -6.73345945845227, 
    -126.148627266787, 97.384550691082), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431972575792794, 0.215853558657002
    ), logphi = c(0.490372189493633, -1.54897500485713)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_37 = structure(list(
    par = c(-0.0197185437947931, 0.337133011671417, 0.510746057889089, 
    -1.52850281632402), value = 33.958012141157, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.1678739891199, -3.11223608484568, 
    82.2624966261287, -2.61715333671475, -3.11223608484568, 24.8404261746771, 
    -6.92270003277429, -5.25927305261575, 82.2624966261287, -6.92270003277429, 
    1446.90591014829, -112.492644787743, -2.61715333671475, -5.25927305261575, 
    -112.492644787743, 95.3230725002641), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0197185437947931, 0.337133011671417
    ), logphi = c(0.510746057889089, -1.52850281632402)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_38 = structure(list(
    par = c(-0.0658698961845505, 0.00478871554673677, 0.520109904341203, 
    -1.62842683051936), value = 34.1611316747786, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.2780403039316, -5.79300823488893, 
    92.5407301739511, -5.51729972286807, -5.79300823488893, 16.3218099746842, 
    -12.2259364321309, -4.35359796036039, 92.5407301739511, -12.2259364321309, 
    1938.64641216912, -142.908826987309, -5.51729972286807, -4.35359796036039, 
    -142.908826987309, 119.21855354835), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0658698961845505, 0.00478871554673677
    ), logphi = c(0.520109904341203, -1.62842683051936)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_39 = structure(list(
    par = c(-0.33332361932596, 0.0422210136504037, 0.497459399384663, 
    -1.54452947422922), value = 30.672883304663, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.1659386266573, -1.32965217858327, 
    90.7325338070919, -7.11879746972954, -1.32965217858327, 17.7563430039385, 
    -9.45051362410965, -5.33319117757003, 90.7325338070919, -9.45051362410965, 
    1516.11162881959, -122.390909143455, -7.11879746972954, -5.33319117757003, 
    -122.390909143455, 99.0866923293865), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33332361932596, 0.0422210136504037
    ), logphi = c(0.497459399384663, -1.54452947422922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_40 = structure(list(
    par = c(-0.475320520594113, 0.206557564602605, 0.54636009264506, 
    -1.38913559021967), value = 33.9224781457525, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.4726241417231, 2.27699322685737, 
    80.4667305587259, -12.2923944321229, 2.27699322685737, 25.1227049758995, 
    -12.1642013723999, -5.32286194676601, 80.4667305587259, -12.1642013723999, 
    971.056715295404, -141.232308045858, -12.2923944321229, -5.32286194676601, 
    -141.232308045858, 82.9096906667104), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475320520594113, 0.206557564602605
    ), logphi = c(0.54636009264506, -1.38913559021967)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_41 = structure(list(
    par = c(-0.444798511252773, 0.323162298950526, 0.525699111385249, 
    -1.58675178820272), value = 19.1170488280159, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.8759937273164, 2.01530808041639, 
    99.742677040382, -10.691107014793, 2.01530808041639, 28.0355814687994, 
    -9.76793928586517, -7.51334854065533, 99.742677040382, -9.76793928586517, 
    1669.54769078487, -180.661433655693, -10.691107014793, -7.51334854065533, 
    -180.661433655693, 114.955742622769), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.444798511252773, 0.323162298950526
    ), logphi = c(0.525699111385249, -1.58675178820272)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_42 = structure(list(
    par = c(-0.304401966135325, 0.0857030885772712, 0.522983531898786, 
    -1.50642441788291), value = 36.6280609372001, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.3579941349032, -1.85944179342812, 
    88.0033937029623, -8.75856706361589, -1.85944179342812, 18.9479483516664, 
    -11.9804287059821, -5.06438057001901, 88.0033937029623, -11.9804287059821, 
    1378.63195404364, -138.945648275879, -8.75856706361589, -5.06438057001901, 
    -138.945648275879, 97.7659294321143), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304401966135325, 0.0857030885772712
    ), logphi = c(0.522983531898786, -1.50642441788291)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_43 = structure(list(
    par = c(-0.301679557268997, 0.00994663501774855, 0.484184975192508, 
    -1.57474544665062), value = 27.4925282305331, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.1027227107397, -1.31365002875583, 
    91.8450432125795, -5.69184877674545, -1.31365002875583, 17.4048962433559, 
    -7.99661884176572, -5.21201738568067, 91.8450432125795, -7.99661884176572, 
    1639.5452511313, -111.99409142959, -5.69184877674545, -5.21201738568067, 
    -111.99409142959, 101.627166468887), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301679557268997, 0.00994663501774855
    ), logphi = c(0.484184975192508, -1.57474544665062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_44 = structure(list(
    par = c(-0.314996708648814, -0.125402722922275, 0.493476331635457, 
    -1.54842927662856), value = 30.3870125861071, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.4717517416533, -2.16891644377881, 
    89.7199468097298, -7.02518788120443, -2.16891644377881, 14.6106365797039, 
    -10.3590588951263, -4.49184002704328, 89.7199468097298, -10.3590588951263, 
    1551.73630228322, -115.158157890427, -7.02518788120443, -4.49184002704328, 
    -115.158157890427, 99.7733281646873), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314996708648814, -0.125402722922275
    ), logphi = c(0.493476331635457, -1.54842927662856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_45 = structure(list(
    par = c(-0.135737483851581, -0.17443797935054, 0.50823966839882, 
    -1.55850841972309), value = 41.5799339073067, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.4055859835873, -5.24383972333453, 
    86.8071486141986, -5.84594597796695, -5.24383972333453, 11.7175374025891, 
    -11.325732479861, -3.72490550137883, 86.8071486141986, -11.325732479861, 
    1622.580910972, -118.104038620004, -5.84594597796695, -3.72490550137883, 
    -118.104038620004, 104.396120971018), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135737483851581, -0.17443797935054
    ), logphi = c(0.50823966839882, -1.55850841972309)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_46 = structure(list(
    par = c(-0.0137778930832038, 0.166483610009351, 0.444307880628645, 
    -1.57155377845644), value = 30.1933872874455, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.6501149852597, -2.06662230084476, 
    77.7786591932283, 2.15333790354322, -2.06662230084476, 20.9705910307889, 
    -1.48648494757708, -4.21069459299872, 77.7786591932283, -1.48648494757708, 
    1597.51511994344, -43.732592176049, 2.15333790354322, -4.21069459299872, 
    -43.732592176049, 90.9091207965673), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0137778930832038, 0.166483610009351
    ), logphi = c(0.444307880628645, -1.57155377845644)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_47 = structure(list(
    par = c(-0.241968821633836, -0.0385826345356458, 0.516717116220886, 
    -1.4925441938497), value = 38.6795521246763, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.6081911020474, -3.42666144526049, 
    84.5628834404977, -7.52712903295816, -3.42666144526049, 14.7556278413674, 
    -11.6620211034757, -4.28222951853741, 84.5628834404977, -11.6620211034757, 
    1339.24472948266, -121.889529990149, -7.52712903295816, -4.28222951853741, 
    -121.889529990149, 93.254531879694), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241968821633836, -0.0385826345356458
    ), logphi = c(0.516717116220886, -1.4925441938497)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_48 = structure(list(
    par = c(-0.612021461497788, 0.0972315487158386, 0.530613416135381, 
    -1.61311247426416), value = 21.4056610877709, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.0218183727784, -0.944554663817598, 
    103.172635679272, -14.856306825628, -0.944554663817598, 18.8122139537228, 
    -17.7783263382025, -6.24033623530806, 103.172635679272, -17.7783263382025, 
    1843.44105644563, -211.65635298015, -14.856306825628, -6.24033623530806, 
    -211.65635298015, 127.753438940559), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.612021461497788, 0.0972315487158386
    ), logphi = c(0.530613416135381, -1.61311247426416)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_49 = structure(list(
    par = c(-0.126337085903797, -0.110558427903785, 0.462305005043443, 
    -1.57472554087952), value = 40.0640522603396, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.3742501314025, -3.64815209508151, 
    84.6940783567618, -1.694526635454, -3.64815209508151, 13.5720795455541, 
    -6.08685502712092, -4.0893478869819, 84.6940783567618, -6.08685502712092, 
    1645.53848916071, -69.4953887432348, -1.694526635454, -4.0893478869819, 
    -69.4953887432348, 96.7339748836338), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126337085903797, -0.110558427903785
    ), logphi = c(0.462305005043443, -1.57472554087952)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_50 = structure(list(
    par = c(-0.137496096455584, -0.250419442213547, 0.462363269358519, 
    -1.66632691211922), value = 34.272145222677, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9373910762744, -4.65537043048414, 
    92.1651226661879, -2.76689645950512, -4.65537043048414, 10.4186048019983, 
    -6.79153187022052, -3.76570188276304, 92.1651226661879, -6.79153187022052, 
    2108.62810612866, -90.2424168458538, -2.76689645950512, -3.76570188276304, 
    -90.2424168458538, 115.430298643915), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137496096455584, -0.250419442213547
    ), logphi = c(0.462363269358519, -1.66632691211922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_51 = structure(list(
    par = c(-0.101174481072304, 0.198081296323563, 0.493214737930499, 
    -1.69212225899183), value = 20.8009004575816, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.6295208327285, -2.56909359652724, 
    97.5650348635781, -3.14801649015095, -2.56909359652724, 24.1192222096842, 
    -5.75977156103136, -5.47837303432885, 97.5650348635781, -5.75977156103136, 
    2220.68756524596, -134.583559078472, -3.14801649015095, -5.47837303432885, 
    -134.583559078472, 123.82906593178), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.101174481072304, 0.198081296323563
    ), logphi = c(0.493214737930499, -1.69212225899183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_52 = structure(list(
    par = c(-0.615868678808219, -0.0566212696665724, 0.512507681313767, 
    -1.69106068203493), value = 20.3126013825306, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.352675121468, -2.12660651932595, 
    108.055972752652, -13.9628754842747, -2.12660651932595, 15.2913938507027, 
    -18.3011990610993, -5.54040952138735, 108.055972752652, -18.3011990610993, 
    2268.11037621566, -216.07165104065, -13.9628754842747, -5.54040952138735, 
    -216.07165104065, 139.053793150268), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.615868678808219, -0.0566212696665724
    ), logphi = c(0.512507681313767, -1.69106068203493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_53 = structure(list(
    par = c(-0.347833076434018, -0.237840584736874, 0.479267915573464, 
    -1.65955112949176), value = 31.2865039818591, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.5794478625882, -3.58609413542155, 
    98.8376764707866, -7.24220112413576, -3.58609413542155, 10.4930256927815, 
    -10.2158408363806, -4.36567128492271, 98.8376764707866, -10.2158408363806, 
    2080.08978937357, -131.168575280949, -7.24220112413576, -4.36567128492271, 
    -131.168575280949, 119.549672886521), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347833076434018, -0.237840584736874
    ), logphi = c(0.479267915573464, -1.65955112949176)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_54 = structure(list(
    par = c(-0.2037138514122, 0.0942698101458927, 0.487584333604507, 
    -1.70110449093411), value = 22.8060342471844, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.3077053362798, -3.42892832527752, 
    101.010075360008, -4.73119067745387, -3.42892832527752, 17.9639783901564, 
    -6.89873740977731, -5.48337837358304, 101.010075360008, -6.89873740977731, 
    2273.40258508679, -140.309420919138, -4.73119067745387, -5.48337837358304, 
    -140.309420919138, 125.632398924047), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2037138514122, 0.0942698101458927
    ), logphi = c(0.487584333604507, -1.70110449093411)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_55 = structure(list(
    par = c(-0.0916819105023411, 0.478064585901346, 0.485428173989556, 
    -1.55806645565911), value = 22.3952245353669, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.8659178042901, 3.64222774518197, 
    83.2301154973791, -0.589435967146557, 3.64222774518197, 36.2402444125109, 
    -0.0438771134980698, -5.86598831509022, 83.2301154973791, 
    -0.0438771134980698, 1526.69381932125, -99.3712999739493, 
    -0.589435967146557, -5.86598831509022, -99.3712999739493, 
    94.4096719610599), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0916819105023411, 0.478064585901346
    ), logphi = c(0.485428173989556, -1.55806645565911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_56 = structure(list(
    par = c(-0.0817955724009601, 0.341074779178444, 0.507828979431072, 
    -1.56574427085963), value = 31.0415941558975, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.8383279762795, -1.01962381648946, 
    87.22048800891, -3.22792338502964, -1.01962381648946, 28.1654433447187, 
    -6.15027921657685, -5.70199857463649, 87.22048800891, -6.15027921657685, 
    1592.21596347425, -122.592660150911, -3.22792338502964, -5.70199857463649, 
    -122.592660150911, 102.116603942548), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0817955724009601, 0.341074779178444
    ), logphi = c(0.507828979431072, -1.56574427085963)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_57 = structure(list(
    par = c(-0.216362673225556, 0.00800087636587472, 0.490242638061869, 
    -1.54857168774385), value = 36.3486182093493, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.4586896059509, -2.80774060179567, 
    87.7197539566055, -4.86257659559897, -2.80774060179567, 16.1475992968008, 
    -8.51574820615042, -4.80263416502424, 87.7197539566055, -8.51574820615042, 
    1538.94379742958, -104.713554268443, -4.86257659559897, -4.80263416502424, 
    -104.713554268443, 97.5011290016425), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216362673225556, 0.00800087636587472
    ), logphi = c(0.490242638061869, -1.54857168774385)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_58 = structure(list(
    par = c(-0.309023392092201, -0.169949451376068, 0.484790692399052, 
    -1.59836159928974), value = 35.9748681928138, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.9006511614932, -3.01827339832528, 
    93.3759333516804, -6.58387593599485, -3.01827339832528, 12.4904593725716, 
    -9.86431503946505, -4.45059924381042, 93.3759333516804, -9.86431503946505, 
    1772.3312983442, -117.273677174623, -6.58387593599485, -4.45059924381042, 
    -117.273677174623, 107.932965589086), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309023392092201, -0.169949451376068
    ), logphi = c(0.484790692399052, -1.59836159928974)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_59 = structure(list(
    par = c(0.118435669953329, 0.0554606187392179, 0.564834703613572, 
    -1.47857308523568), value = 49.2420616396315, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7741556876526, -8.35653947639514, 
    77.0167754833295, -6.38454075385653, -8.35653947639514, 17.3867982944387, 
    -14.1648968234875, -3.08670980864179, 77.0167754833295, -14.1648968234875, 
    1307.41199963857, -145.422266612627, -6.38454075385653, -3.08670980864179, 
    -145.422266612627, 97.5458375283011), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.118435669953329, 0.0554606187392179
    ), logphi = c(0.564834703613572, -1.47857308523568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_60 = structure(list(
    par = c(-0.138530830048365, 0.196312548738603, 0.479110166059559, 
    -1.54605082444131), value = 29.1321078277458, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.0566209759559, -0.947823778574275, 
    84.3206795737572, -2.01134979072037, -0.947823778574275, 
    22.1826077178022, -4.78162334527354, -5.19308036306398, 84.3206795737572, 
    -4.78162334527354, 1502.61502243065, -88.2168269922268, -2.01134979072037, 
    -5.19308036306398, -88.2168269922268, 92.8564916335972), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138530830048365, 0.196312548738603
    ), logphi = c(0.479110166059559, -1.54605082444131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_61 = structure(list(
    par = c(-0.170858851094191, 0.072213136950635, 0.463184561381314, 
    -1.55097262532138), value = 28.9947655301438, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.2889825378076, -1.40259738401483, 
    84.1628560328544, -1.56655050798093, -1.40259738401483, 18.7842403835958, 
    -4.51738661766399, -4.80957731419096, 84.1628560328544, -4.51738661766399, 
    1519.21501515151, -71.8195923670173, -1.56655050798093, -4.80957731419096, 
    -71.8195923670173, 91.0439964281196), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170858851094191, 0.072213136950635
    ), logphi = c(0.463184561381314, -1.55097262532138)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_62 = structure(list(
    par = c(-0.0859258651984539, -0.295867681942903, 0.482685093414018, 
    -1.72833524425838), value = 34.6650638269088, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.9239990035151, -5.91914601777432, 
    96.4175661692934, -3.94287623439737, -5.91914601777432, 9.98030916576909, 
    -9.22250818291559, -3.48023246399265, 96.4175661692934, -9.22250818291559, 
    2496.73388214688, -121.078818300369, -3.94287623439737, -3.48023246399265, 
    -121.078818300369, 131.890993534611), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0859258651984539, -0.295867681942903
    ), logphi = c(0.482685093414018, -1.72833524425838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_63 = structure(list(
    par = c(0.0589774874235323, -0.112803550642964, 0.425725056433818, 
    -1.6327959345469), value = 33.8561875088045, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.2014080771859, -4.57071758575012, 
    77.2472450538686, 2.94982233928209, -4.57071758575012, 14.2956283255558, 
    -2.12986318537389, -3.18168126955953, 77.2472450538686, -2.12986318537389, 
    1896.86357959751, -23.267293133955, 2.94982233928209, -3.18168126955953, 
    -23.267293133955, 100.863240039217), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0589774874235323, -0.112803550642964
    ), logphi = c(0.425725056433818, -1.6327959345469)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_64 = structure(list(
    par = c(-0.384573717664108, 0.163399025084414, 0.498551282232565, 
    -1.60045158322972), value = 23.1996404091999, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.8383432802518, -0.0106423936330202, 
    97.7437735247833, -7.85221841725914, -0.0106423936330202, 
    21.1334341901903, -8.18022325610457, -6.41165264836374, 97.7437735247833, 
    -8.18022325610457, 1741.44181991931, -145.760361632163, -7.85221841725914, 
    -6.41165264836374, -145.760361632163, 110.224836031847), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.384573717664108, 0.163399025084414
    ), logphi = c(0.498551282232565, -1.60045158322972)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_65 = structure(list(
    par = c(-0.294721834764463, 0.0592998273041533, 0.4867135581076, 
    -1.76219735014492), value = 18.1051211759271, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.5895604873833, -3.86792722739671, 
    108.785315621418, -6.44814897832191, -3.86792722739671, 15.5480228096749, 
    -7.83354165356798, -5.74825695842662, 108.785315621418, -7.83354165356798, 
    2637.74074464695, -165.696506477353, -6.44814897832191, -5.74825695842662, 
    -165.696506477353, 136.91090871859), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294721834764463, 0.0592998273041533
    ), logphi = c(0.4867135581076, -1.76219735014492)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_66 = structure(list(
    par = c(-0.088373603905424, -0.194966219977755, 0.479657384951879, 
    -1.70372433806102), value = 29.7377272638744, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.8760606340763, -5.78919641469611, 
    95.1454462976287, -3.39957820827408, -5.78919641469611, 11.1885310118964, 
    -8.33502512254114, -3.84962623023455, 95.1454462976287, -8.33502512254114, 
    2334.88171877383, -114.205496582365, -3.39957820827408, -3.84962623023455, 
    -114.205496582365, 126.10014715797), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.088373603905424, -0.194966219977755
    ), logphi = c(0.479657384951879, -1.70372433806102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_67 = structure(list(
    par = c(0.144086127726576, 0.576367165928208, 0.499404399619445, 
    -1.69171358817875), value = 13.0494505232462, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.8441370812623, -0.709281488209257, 
    86.5809843526577, 1.64833640425854, -0.709281488209257, 38.876513794861, 
    1.15195179484218, -5.21509749873417, 86.5809843526577, 1.15195179484218, 
    2197.4719794815, -123.563868207111, 1.64833640425854, -5.21509749873417, 
    -123.563868207111, 121.026069038521), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.144086127726576, 0.576367165928208
    ), logphi = c(0.499404399619445, -1.69171358817875)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_68 = structure(list(
    par = c(-0.514090463091753, 0.0826375164679311, 0.546024011017877, 
    -1.52280673838736), value = 28.5286659472186, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.2348061853338, -0.804625795325364, 
    93.4743030835961, -14.2872392707716, -0.804625795325364, 
    20.1481898791656, -17.1827325168294, -5.20292291383839, 93.4743030835961, 
    -17.1827325168294, 1455.28378694237, -188.220082356416, -14.2872392707716, 
    -5.20292291383839, -188.220082356416, 111.806735141329), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.514090463091753, 0.0826375164679311
    ), logphi = c(0.546024011017877, -1.52280673838736)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_69 = structure(list(
    par = c(-0.331409431293823, -0.057451727349737, 0.499549258758919, 
    -1.7323840217123), value = 24.7052091750213, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.0254599402456, -4.04515616558854, 
    106.756998891733, -8.43655296201007, -4.04515616558854, 14.1534149014078, 
    -12.5472697432016, -5.12964458687648, 106.756998891733, -12.5472697432016, 
    2491.48971117918, -174.976501562174, -8.43655296201007, -5.12964458687648, 
    -174.976501562174, 136.98954902619), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331409431293823, -0.057451727349737
    ), logphi = c(0.499549258758919, -1.7323840217123)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_70 = structure(list(
    par = c(-0.170754973318033, 0.478452929963529, 0.527282162456559, 
    -1.43985019496481), value = 26.2241617017885, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.0025567563279, 3.47707150538668, 
    78.8545706607024, -5.32098927674696, 3.47707150538668, 35.0342850357066, 
    -5.98538535268034, -6.06284837534332, 78.8545706607024, -5.98538535268034, 
    1103.10644329559, -120.761344739151, -5.32098927674696, -6.06284837534332, 
    -120.761344739151, 82.3694448213175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170754973318033, 0.478452929963529
    ), logphi = c(0.527282162456559, -1.43985019496481)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_71 = structure(list(
    par = c(0.0349613562017342, 0.0407465010180598, 0.510065321443775, 
    -1.6818547836026), value = 38.3384619924754, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.2672475376705, -7.78395934375453, 
    92.9538085188142, -3.14567122927656, -7.78395934375453, 15.2931831038927, 
    -10.1669914371882, -4.32070119948946, 92.9538085188142, -10.1669914371882, 
    2214.64155422701, -131.716268622739, -3.14567122927656, -4.32070119948946, 
    -131.716268622739, 126.023335077718), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0349613562017342, 0.0407465010180598
    ), logphi = c(0.510065321443775, -1.6818547836026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_72 = structure(list(
    par = c(-0.371219085651277, -0.0306792015901209, 0.544432179482983, 
    -1.66202133796037), value = 28.8104558374926, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9698940882109, -4.81716184097536, 
    102.117735666596, -12.465921007454, -4.81716184097536, 14.3937964605101, 
    -20.1704869908781, -4.476132751563, 102.117735666596, -20.1704869908781, 
    2128.07566784612, -211.879029866857, -12.465921007454, -4.476132751563, 
    -211.879029866857, 136.52804409503), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371219085651277, -0.0306792015901209
    ), logphi = c(0.544432179482983, -1.66202133796037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_73 = structure(list(
    par = c(-0.317739964112477, 0.0179003383785365, 0.467802706784567, 
    -1.61912411876895), value = 28.5183861562106, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9939319922236, -0.897080908224268, 
    95.0495902101167, -4.64696539825837, -0.897080908224268, 
    17.3299200287858, -5.50535955223808, -5.41307929813328, 95.0495902101167, 
    -5.50535955223808, 1822.99755764426, -106.571479019379, -4.64696539825837, 
    -5.41307929813328, -106.571479019379, 105.98253922911), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317739964112477, 0.0179003383785365
    ), logphi = c(0.467802706784567, -1.61912411876895)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_74 = structure(list(
    par = c(-0.102084751230379, 0.141186678487366, 0.482624747731757, 
    -1.58430071321922), value = 25.7984263390541, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.8701525520032, -1.93063299924745, 
    87.0419948633128, -2.20394043459748, -1.93063299924745, 21.9701402537353, 
    -5.8152511250853, -4.97793675524605, 87.0419948633128, -5.8152511250853, 
    1681.50235074194, -97.0143055751826, -2.20394043459748, -4.97793675524605, 
    -97.0143055751826, 101.515531760299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.102084751230379, 0.141186678487366
    ), logphi = c(0.482624747731757, -1.58430071321922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_75 = structure(list(
    par = c(-0.287212890509886, 0.142979719600145, 0.491498436063762, 
    -1.53981374365579), value = 29.9641239763684, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.2900704865347, 0.018621015840381, 
    89.0100991499665, -5.44142805924963, 0.018621015840381, 22.0508702239997, 
    -7.13394845863746, -5.65243078209932, 89.0100991499665, -7.13394845863746, 
    1480.31722512965, -111.804649845393, -5.44142805924963, -5.65243078209932, 
    -111.804649845393, 95.4982319392172), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287212890509886, 0.142979719600145
    ), logphi = c(0.491498436063762, -1.53981374365579)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_76 = structure(list(
    par = c(-0.440128060841582, -0.394634928594158, 0.520805335314203, 
    -1.57778894880721), value = 39.439115698031, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.4428708116357, -3.96609316766217, 
    92.5347213129868, -11.8770035690829, -3.96609316766217, 7.89822459879019, 
    -15.6159677597856, -3.08921854141886, 92.5347213129868, -15.6159677597856, 
    1740.80889912531, -164.930629626525, -11.8770035690829, -3.08921854141886, 
    -164.930629626525, 117.007002360836), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.440128060841582, -0.394634928594158
    ), logphi = c(0.520805335314203, -1.57778894880721)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_77 = structure(list(
    par = c(-0.00937266225177701, 0.0123007096433763, 0.496849717914972, 
    -1.78785438480617), value = 21.4810476688543, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.7134356567317, -6.89985059310061, 
    101.264023591341, -3.01889469822569, -6.89985059310061, 15.6071145944736, 
    -8.52058366884734, -4.40159933434714, 101.264023591341, -8.52058366884734, 
    2846.42710544158, -142.859591580446, -3.01889469822569, -4.40159933434714, 
    -142.859591580446, 141.337994045365), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00937266225177701, 0.0123007096433763
    ), logphi = c(0.496849717914972, -1.78785438480617)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_78 = structure(list(
    par = c(-0.52618235273395, -0.0928884351720801, 0.514039279173193, 
    -1.39618844678381), value = 36.9092552128883, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.11902940573, 0.56853497198972, 
    79.7155389733462, -10.6603042606679, 0.56853497198972, 16.4103398656579, 
    -11.5765018708913, -4.3505201432481, 79.7155389733462, -11.5765018708913, 
    1003.73106028862, -111.703754752668, -10.6603042606679, -4.3505201432481, 
    -111.703754752668, 76.3794878189117), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.52618235273395, -0.0928884351720801
    ), logphi = c(0.514039279173193, -1.39618844678381)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_79 = structure(list(
    par = c(-0.353307052944177, -0.0781469215415214, 0.544971550400465, 
    -1.48897760727138), value = 39.8773638849316, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.5422075014312, -3.16362466357134, 
    86.8745268185478, -11.8428706930018, -3.16362466357134, 14.614547394487, 
    -15.7308236889975, -3.94874847664539, 86.8745268185478, -15.7308236889975, 
    1344.42576588611, -161.117275780498, -11.8428706930018, -3.94874847664539, 
    -161.117275780498, 102.27755473835), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353307052944177, -0.0781469215415214
    ), logphi = c(0.544971550400465, -1.48897760727138)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_80 = structure(list(
    par = c(-0.309267413332937, 0.269095791681468, 0.494373669412358, 
    -1.664862852032), value = 15.6978049033123, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.1265621719513, 0.379272719008839, 
    101.951592153426, -6.01856356396979, 0.379272719008839, 24.4551465380383, 
    -4.689143120018, -6.8375606829818, 101.951592153426, -4.689143120018, 
    2040.19541678324, -152.917481621273, -6.01856356396979, -6.8375606829818, 
    -152.917481621273, 119.681383690562), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309267413332937, 0.269095791681468
    ), logphi = c(0.494373669412358, -1.664862852032)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_81 = structure(list(
    par = c(-0.122319998666637, 0.0644656662665013, 0.471795137997189, 
    -1.64609122587147), value = 28.5429845433978, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.6325155049342, -3.19496312517487, 
    91.8000164009669, -2.10012721213459, -3.19496312517487, 17.9088046579068, 
    -4.99586712265909, -4.84136322720374, 91.8000164009669, -4.99586712265909, 
    1975.01193950256, -99.8234443221335, -2.10012721213459, -4.84136322720374, 
    -99.8234443221335, 111.513675206787), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122319998666637, 0.0644656662665013
    ), logphi = c(0.471795137997189, -1.64609122587147)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_82 = structure(list(
    par = c(-0.153380980111896, 0.10240481409227, 0.507576459648154, 
    -1.56245561913103), value = 37.0010257384868, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7464872228001, -3.77120924710539, 
    88.8818427355886, -5.24708998650425, -3.77120924710539, 18.1753294228315, 
    -9.67478621305418, -4.98192483355808, 88.8818427355886, -9.67478621305418, 
    1604.67681607557, -123.802716557542, -5.24708998650425, -4.98192483355808, 
    -123.802716557542, 103.542181811633), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153380980111896, 0.10240481409227
    ), logphi = c(0.507576459648154, -1.56245561913103)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_83 = structure(list(
    par = c(-0.352148088047948, 0.0204030806576992, 0.487021520581653, 
    -1.49203408110769), value = 37.6560484347425, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.7813506530251, -0.084216667417536, 
    85.3525325190674, -6.11708396114352, -0.084216667417536, 
    18.2114710156611, -8.13023322443485, -5.13951179748062, 85.3525325190674, 
    -8.13023322443485, 1300.53919510331, -97.7121171343853, -6.11708396114352, 
    -5.13951179748062, -97.7121171343853, 85.9760040832214), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.352148088047948, 0.0204030806576992
    ), logphi = c(0.487021520581653, -1.49203408110769)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_84 = structure(list(
    par = c(-0.165636594975309, 0.451557653598037, 0.504139274181701, 
    -1.6571410701699), value = 17.9324153019494, counts = structure(c(309L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.2029504612337, 0.462621462027357, 
    97.5486122403169, -3.61805383608527, 0.462621462027357, 29.2312970735509, 
    -1.58682466899762, -6.88242378954484, 97.5486122403169, -1.58682466899762, 
    1988.36662393997, -149.815532473951, -3.61805383608527, -6.88242378954484, 
    -149.815532473951, 117.859581558299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165636594975309, 0.451557653598037
    ), logphi = c(0.504139274181701, -1.6571410701699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_85 = structure(list(
    par = c(-0.273959170481969, 0.0515266391893692, 0.445939291140383, 
    -1.41952825819126), value = 34.6007277153523, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.7987236503784, 1.21277502351802, 
    73.4255559518004, -0.694708271353761, 1.21277502351802, 18.6846848233557, 
    -3.81592344567139, -4.59944466602025, 73.4255559518004, -3.81592344567139, 
    1020.96471055901, -33.9413182004478, -0.694708271353761, 
    -4.59944466602025, -33.9413182004478, 63.8837497852762), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273959170481969, 0.0515266391893692
    ), logphi = c(0.445939291140383, -1.41952825819126)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_86 = structure(list(
    par = c(-0.441298204429039, 0.0989566970057869, 0.475935563857256, 
    -1.5878146690046), value = 27.6512751689255, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.7919737490658, 1.55611558394497, 
    95.9685068657734, -6.72520342615002, 1.55611558394497, 21.3060147666866, 
    -5.6952934430754, -6.28510215117117, 95.9685068657734, -5.6952934430754, 
    1664.1081126707, -120.128956432985, -6.72520342615002, -6.28510215117117, 
    -120.128956432985, 101.988737212011), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.441298204429039, 0.0989566970057869
    ), logphi = c(0.475935563857256, -1.5878146690046)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_87 = structure(list(
    par = c(-0.354095233897846, -0.021716469168273, 0.490242015867216, 
    -1.53553742726948), value = 35.7299904895469, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.8668021084347, -1.81533697052316, 
    89.6519585058542, -6.90445945839002, -1.81533697052316, 15.0480579783618, 
    -9.19345465533183, -5.09349565103179, 89.6519585058542, -9.19345465533183, 
    1479.10620794356, -112.585843184299, -6.90445945839002, -5.09349565103179, 
    -112.585843184299, 95.8634211425391), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354095233897846, -0.021716469168273
    ), logphi = c(0.490242015867216, -1.53553742726948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_88 = structure(list(
    par = c(-0.24494429330111, 0.0402635406378974, 0.523082518262209, 
    -1.47588101712237), value = 34.4069150326277, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.3539510909212, -2.04804801740011, 
    83.7047239095057, -7.85898093180748, -2.04804801740011, 19.0915375988254, 
    -11.7184171823936, -4.51864045114547, 83.7047239095057, -11.7184171823936, 
    1272.24576960572, -125.706675217607, -7.85898093180748, -4.51864045114547, 
    -125.706675217607, 91.1799759055754), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24494429330111, 0.0402635406378974
    ), logphi = c(0.523082518262209, -1.47588101712237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_89 = structure(list(
    par = c(-0.534050771731197, -0.248170749027355, 0.498889724299847, 
    -1.81377804444962), value = 24.8926990630265, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.4412658264869, -4.36697368222383, 
    112.941116723775, -11.9956469273319, -4.36697368222383, 10.1468333664201, 
    -18.6686045946516, -4.24867158876907, 112.941116723775, -18.6686045946516, 
    3073.5496205736, -224.427437202301, -11.9956469273319, -4.24867158876907, 
    -224.427437202301, 155.885197933969), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.534050771731197, -0.248170749027355
    ), logphi = c(0.498889724299847, -1.81377804444962)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_90 = structure(list(
    par = c(-0.0896331795762084, 0.0499504807842953, 0.510927174846295, 
    -1.65991154274409), value = 36.3819463947234, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.889352691309, -5.89975331344306, 
    95.5749601416755, -5.02060430385143, -5.89975331344306, 15.6216548568011, 
    -10.8443514363898, -4.75096885743653, 95.5749601416755, -10.8443514363898, 
    2085.81494556626, -142.815096330295, -5.02060430385143, -4.75096885743653, 
    -142.815096330295, 123.068065354559), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0896331795762084, 0.0499504807842953
    ), logphi = c(0.510927174846295, -1.65991154274409)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_91 = structure(list(
    par = c(-0.176826798538267, 0.374308135434226, 0.512755809425739, 
    -1.48987199090391), value = 27.9535610186215, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.6306201431242, 1.27996704435418, 
    83.0423984021778, -4.65914549652169, 1.27996704435418, 29.3203858259261, 
    -6.17477164066571, -5.95584558160667, 83.0423984021778, -6.17477164066571, 
    1280.68646380353, -117.46365601617, -4.65914549652169, -5.95584558160667, 
    -117.46365601617, 88.8878403850768), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.176826798538267, 0.374308135434226
    ), logphi = c(0.512755809425739, -1.48987199090391)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_92 = structure(list(
    par = c(-0.130080703773783, 0.149346750403888, 0.515468431563336, 
    -1.48412233982295), value = 37.6843396373707, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.5197366989447, -3.50896728562589, 
    81.7234235324094, -5.19450209779393, -3.50896728562589, 18.8088046773061, 
    -9.72361514683939, -4.75775385222477, 81.7234235324094, -9.72361514683939, 
    1292.4251148192, -112.582819721041, -5.19450209779393, -4.75775385222477, 
    -112.582819721041, 89.417664121072), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130080703773783, 0.149346750403888
    ), logphi = c(0.515468431563336, -1.48412233982295)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_93 = structure(list(
    par = c(-0.319759685827525, 0.327580101061069, 0.480885300603455, 
    -1.71026891252133), value = 11.974920129794, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.8950572752006, 1.58018687823613, 
    105.091961829729, -4.7055289198461, 1.58018687823613, 26.2541044486753, 
    0.441698322362072, -7.16063529893063, 105.091961829729, 0.441698322362072, 
    2258.86136901199, -152.241277886489, -4.7055289198461, -7.16063529893063, 
    -152.241277886489, 123.590804376406), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319759685827525, 0.327580101061069
    ), logphi = c(0.480885300603455, -1.71026891252133)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_94 = structure(list(
    par = c(-0.267872755134917, -0.0525892314435666, 0.491568562538976, 
    -1.52553899473697), value = 40.334762477015, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.9808956618463, -2.87066241000389, 
    86.7696379103222, -5.80257318993915, -2.87066241000389, 14.1951003218566, 
    -9.26174477022812, -4.62870825401751, 86.7696379103222, -9.26174477022812, 
    1448.85839630327, -103.88726665056, -5.80257318993915, -4.62870825401751, 
    -103.88726665056, 93.8341846214996), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267872755134917, -0.0525892314435666
    ), logphi = c(0.491568562538976, -1.52553899473697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_95 = structure(list(
    par = c(-0.0231887105417157, 0.00870806209895743, 0.418832649118734, 
    -1.5786040046798), value = 29.8912594253093, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.100666414314, -2.10198544969842, 
    75.4974215775306, 3.28607904354072, -2.10198544969842, 17.675732117084, 
    -0.908355098694358, -3.57707768472437, 75.4974215775306, 
    -0.908355098694358, 1610.76954754957, -13.5476213980468, 
    3.28607904354072, -3.57707768472437, -13.5476213980468, 88.3451905124844
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0231887105417157, 0.00870806209895743
    ), logphi = c(0.418832649118734, -1.5786040046798)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_96 = structure(list(
    par = c(-0.438969590812922, -0.0382068548174031, 0.52180276808743, 
    -1.71485345888932), value = 23.4679237154887, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8506885236804, -3.86283629616457, 
    107.629638964823, -11.8460311178126, -3.86283629616457, 14.8337326670855, 
    -18.0562792504446, -5.12800642304967, 107.629638964823, -18.0562792504446, 
    2408.925342122, -209.508376332934, -11.8460311178126, -5.12800642304967, 
    -209.508376332934, 141.691995256821), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438969590812922, -0.0382068548174031
    ), logphi = c(0.52180276808743, -1.71485345888932)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_97 = structure(list(
    par = c(-0.372939750180686, 0.0505448051074206, 0.55658735968223, 
    -1.4519460084768), value = 35.9111380285543, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.7137114352923, -2.56535351539355, 
    84.6802199472307, -12.7553787816481, -2.56535351539355, 17.387629940302, 
    -15.8437751185403, -4.14026049622152, 84.6802199472307, -15.8437751185403, 
    1199.26050253127, -164.736485503525, -12.7553787816481, -4.14026049622152, 
    -164.736485503525, 97.8645099074527), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372939750180686, 0.0505448051074206
    ), logphi = c(0.55658735968223, -1.4519460084768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_98 = structure(list(
    par = c(-0.508188688923308, 0.132862582517711, 0.47331081894326, 
    -1.81854912701856), value = 8.95376556336123, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.9767178704496, -0.431928627975253, 
    119.342972035419, -8.65256932636171, -0.431928627975253, 
    19.8037350118696, -4.30966570696967, -7.21662785618804, 119.342972035419, 
    -4.30966570696967, 2963.90211173936, -198.465700687933, -8.65256932636171, 
    -7.21662785618804, -198.465700687933, 143.457215871834), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508188688923308, 0.132862582517711
    ), logphi = c(0.47331081894326, -1.81854912701856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_99 = structure(list(
    par = c(-0.222218624859145, -0.294230193601674, 0.489453700668464, 
    -1.27425503829415), value = 50.5384131959361, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.4363040184849, -2.23705073487679, 
    62.4352020519581, -3.97930727835671, -2.23705073487679, 11.1716154442831, 
    -7.83352969335738, -2.78430380795669, 62.4352020519581, -7.83352969335738, 
    695.456498919, -45.7085138148017, -3.97930727835671, -2.78430380795669, 
    -45.7085138148017, 49.1332112684262), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222218624859145, -0.294230193601674
    ), logphi = c(0.489453700668464, -1.27425503829415)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_100 = structure(list(
    par = c(-0.565410803019461, 0.174485003365549, 0.541935680050006, 
    -1.48561416470972), value = 28.0731013668854, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.8900870313382, 1.02750621344683, 
    91.1891769543871, -14.1707669953917, 1.02750621344683, 23.7201336101833, 
    -14.6264211675629, -6.01898450103278, 91.1891769543871, -14.6264211675629, 
    1293.03289509863, -175.529515821893, -14.1707669953917, -6.01898450103278, 
    -175.529515821893, 104.320239628919), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.565410803019461, 0.174485003365549
    ), logphi = c(0.541935680050006, -1.48561416470972)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_101 = structure(list(
    par = c(-0.288110846887758, 0.147654352827036, 0.500868637423875, 
    -1.53293794601253), value = 32.1913889217991, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.4294145027204, -0.525272854545733, 
    89.1013745007996, -6.30131970780212, -0.525272854545733, 
    21.2334872102815, -8.36214056221252, -5.63355131255605, 89.1013745007996, 
    -8.36214056221252, 1459.68660383211, -120.765076580653, -6.30131970780212, 
    -5.63355131255605, -120.765076580653, 96.5343624219628), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288110846887758, 0.147654352827036
    ), logphi = c(0.500868637423875, -1.53293794601253)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_102 = structure(list(
    par = c(-0.521963491575684, 0.244973724353452, 0.501281141617403, 
    -1.50899064802251), value = 22.291560968215, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.0719390533387, 4.08379634464495, 
    91.5054165737672, -9.22844543893575, 4.08379634464495, 26.2735665401692, 
    -6.73797498507156, -7.1140070829756, 91.5054165737672, -6.73797498507156, 
    1335.06285242291, -134.00033042732, -9.22844543893575, -7.1140070829756, 
    -134.00033042732, 93.1404845427863), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.521963491575684, 0.244973724353452
    ), logphi = c(0.501281141617403, -1.50899064802251)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_103 = structure(list(
    par = c(-0.286354921696011, -0.276966362403774, 0.471231434510627, 
    -1.75042128743981), value = 28.0754609930296, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4074295838558, -4.37202055891817, 
    103.89274870537, -6.17561018589896, -4.37202055891817, 9.92014803546937, 
    -9.24757188158765, -4.1032309558986, 103.89274870537, -9.24757188158765, 
    2604.67101320305, -139.838869555931, -6.17561018589896, -4.1032309558986, 
    -139.838869555931, 134.027378758006), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286354921696011, -0.276966362403774
    ), logphi = c(0.471231434510627, -1.75042128743981)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_104 = structure(list(
    par = c(-0.432209301293841, 0.0148271078855509, 0.501374847042244, 
    -1.66668521090431), value = 26.1991183818026, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.5895534810126, -2.22453832154912, 
    104.166627757252, -9.79752053087424, -2.22453832154912, 16.1805794336445, 
    -12.1866575426566, -5.81199998173076, 104.166627757252, -12.1866575426566, 
    2101.76057226885, -172.282287683068, -9.79752053087424, -5.81199998173076, 
    -172.282287683068, 126.242623923467), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432209301293841, 0.0148271078855509
    ), logphi = c(0.501374847042244, -1.66668521090431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_105 = structure(list(
    par = c(-0.351898955754634, -0.292987925195604, 0.519276884480009, 
    -1.40741206960183), value = 44.7686491816645, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.3800431877337, -2.53854008036569, 
    77.4551445825722, -9.24493607623589, -2.53854008036569, 10.9126874416887, 
    -11.7282805902619, -3.09265769260492, 77.4551445825722, -11.7282805902619, 
    1064.61151335857, -107.956621178573, -9.24493607623589, -3.09265769260492, 
    -107.956621178573, 78.9094106128374), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351898955754634, -0.292987925195604
    ), logphi = c(0.519276884480009, -1.40741206960183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_106 = structure(list(
    par = c(-0.400694949337287, -0.0235908222423806, 0.518600448966042, 
    -1.75732049875948), value = 25.0899381992381, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.0273128699402, -4.49928404844258, 
    110.485844284192, -10.9630833007301, -4.49928404844258, 14.8322959994118, 
    -17.5478907848969, -5.20822188931902, 110.485844284192, -17.5478907848969, 
    2661.97240668742, -212.026423177747, -10.9630833007301, -5.20822188931902, 
    -212.026423177747, 146.858526905547), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400694949337287, -0.0235908222423806
    ), logphi = c(0.518600448966042, -1.75732049875948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_107 = structure(list(
    par = c(-0.0535932059195609, 0.0894357332020869, 0.47598469385715, 
    -1.54613223288698), value = 33.2137029111306, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3930640271524, -3.2185285281372, 
    81.4903352797103, -1.08011934418784, -3.2185285281372, 19.0416530951865, 
    -5.89591059885208, -4.47768651845593, 81.4903352797103, -5.89591059885208, 
    1522.149690107, -76.1661276564851, -1.08011934418784, -4.47768651845593, 
    -76.1661276564851, 92.9568342851184), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0535932059195609, 0.0894357332020869
    ), logphi = c(0.47598469385715, -1.54613223288698)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_108 = structure(list(
    par = c(-0.416239832929308, 0.192635840317832, 0.498539417585653, 
    -1.67777518887809), value = 17.1268430501291, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.9138774828647, -0.166897456743698, 
    106.034442943326, -8.60397926150114, -0.166897456743698, 
    22.2359788324411, -7.93607730997792, -6.97682424277701, 106.034442943326, 
    -7.93607730997792, 2121.12782760698, -172.420240743598, -8.60397926150114, 
    -6.97682424277701, -172.420240743598, 125.333077789946), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416239832929308, 0.192635840317832
    ), logphi = c(0.498539417585653, -1.67777518887809)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_109 = structure(list(
    par = c(-0.238187133355082, -0.356189198679235, 0.488531294928702, 
    -1.8221895824281), value = 25.0789837718442, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.7666059048705, -5.90967349456406, 
    107.032047581335, -6.97736810817418, -5.90967349456406, 8.06411619436176, 
    -12.3988570761568, -3.4794757510781, 107.032047581335, -12.3988570761568, 
    3126.82244914786, -167.542410248966, -6.97736810817418, -3.4794757510781, 
    -167.542410248966, 149.77420437301), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238187133355082, -0.356189198679235
    ), logphi = c(0.488531294928702, -1.8221895824281)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_110 = structure(list(
    par = c(-0.293101203340955, 0.0189360927701558, 0.482096810297853, 
    -1.47673134955676), value = 39.0261669472969, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.5233831677095, -0.662222472413987, 
    82.2729114293708, -4.72723977118505, -0.662222472413987, 
    17.7443283657652, -7.44934228613658, -4.87731125797808, 82.2729114293708, 
    -7.44934228613658, 1244.54444563682, -84.1949995447067, -4.72723977118505, 
    -4.87731125797808, -84.1949995447067, 81.5296254792486), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293101203340955, 0.0189360927701558
    ), logphi = c(0.482096810297853, -1.47673134955676)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_111 = structure(list(
    par = c(-0.312761185519107, 0.142757965128285, 0.501276481631164, 
    -1.57189327568923), value = 26.0708255886902, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.05088945483, 0.319526301417739, 
    93.454391480563, -6.93701878606845, 0.319526301417739, 24.1121979822623, 
    -8.69249525425886, -5.86618043119103, 93.454391480563, -8.69249525425886, 
    1623.41611092298, -133.73190080479, -6.93701878606845, -5.86618043119103, 
    -133.73190080479, 104.750514283047), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312761185519107, 0.142757965128285
    ), logphi = c(0.501276481631164, -1.57189327568923)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_112 = structure(list(
    par = c(0.163835664795882, -0.0107704117389374, 0.494926465043975, 
    -1.6075719216754), value = 40.4876009951514, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.7531311392786, -7.13044999400836, 
    80.4694464253686, -0.343017063642037, -7.13044999400836, 
    18.1989389549386, -8.22133282163406, -3.61500607137799, 80.4694464253686, 
    -8.22133282163406, 1845.39961932906, -89.4748475532836, -0.343017063642037, 
    -3.61500607137799, -89.4748475532836, 109.471086222612), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.163835664795882, -0.0107704117389374
    ), logphi = c(0.494926465043975, -1.6075719216754)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_113 = structure(list(
    par = c(-0.0440172994484569, -0.386234901311724, 0.489945316635137, 
    -1.52444204813486), value = 55.9245312950985, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.7541126225274, -5.87743457280965, 
    79.3149404891835, -3.34656334022299, -5.87743457280965, 8.08800644058749, 
    -8.98167002283401, -2.87718889957489, 79.3149404891835, -8.98167002283401, 
    1488.61850406234, -79.5938763538118, -3.34656334022299, -2.87718889957489, 
    -79.5938763538118, 93.9623029161396), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0440172994484569, -0.386234901311724
    ), logphi = c(0.489945316635137, -1.52444204813486)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_114 = structure(list(
    par = c(-0.385798489028788, -0.114815767319188, 0.503472576385083, 
    -1.48251232397282), value = 34.6818913738169, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.8281784882972, -1.87742727142393, 
    85.471295781403, -8.51018045899821, -1.87742727142393, 13.8073576163578, 
    -11.1638985558216, -4.41446136711932, 85.471295781403, -11.1638985558216, 
    1293.99084761772, -114.653470411952, -8.51018045899821, -4.41446136711932, 
    -114.653470411952, 89.4377860181095), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385798489028788, -0.114815767319188
    ), logphi = c(0.503472576385083, -1.48251232397282)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_115 = structure(list(
    par = c(-0.27966514846991, 0.125424465568337, 0.489831073647145, 
    -1.56269828239812), value = 25.6248817674575, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.8726298418169, 0.0765372050182123, 
    90.8569465902787, -5.36874826284617, 0.0765372050182123, 
    22.7796198517538, -7.15918993066111, -5.62551176042092, 90.8569465902787, 
    -7.15918993066111, 1577.95763048085, -115.00865777947, -5.36874826284617, 
    -5.62551176042092, -115.00865777947, 99.7174844972193), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.27966514846991, 0.125424465568337
    ), logphi = c(0.489831073647145, -1.56269828239812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_116 = structure(list(
    par = c(-0.42984417376699, -0.429786631808992, 0.471258308117143, 
    -1.54405485979533), value = 37.4013736265907, counts = structure(c(283L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.3645938346858, -2.56554949196186, 
    88.8419378597405, -7.37002905815132, -2.56554949196186, 7.91494898777501, 
    -9.61371870822347, -3.61676312365944, 88.8419378597405, -9.61371870822347, 
    1536.00694898337, -94.3704843106019, -7.37002905815132, -3.61676312365944, 
    -94.3704843106019, 95.3670358718739), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42984417376699, -0.429786631808992
    ), logphi = c(0.471258308117143, -1.54405485979533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_117 = structure(list(
    par = c(-0.0617338492557152, -0.359464257067523, 0.512944281014018, 
    -1.58671773324242), value = 51.0127601516019, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.923138071605, -6.50834604165595, 
    86.0652340985979, -5.59230012520118, -6.50834604165595, 8.08696243481677, 
    -11.5315321647103, -2.9182767873337, 86.0652340985979, -11.5315321647103, 
    1775.18663990206, -120.490446521515, -5.59230012520118, -2.9182767873337, 
    -120.490446521515, 111.467519190001), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0617338492557152, -0.359464257067523
    ), logphi = c(0.512944281014018, -1.58671773324242)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_118 = structure(list(
    par = c(-0.344440344806528, -0.0588773310845266, 0.450868548580457, 
    -1.58135442753345), value = 30.8805830716178, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.081838305703, 0.206595784923991, 
    90.5590460353878, -3.52248267354582, 0.206595784923991, 17.5358337966003, 
    -4.47404412540209, -5.02529111301442, 90.5590460353878, -4.47404412540209, 
    1632.76772580723, -77.558548326806, -3.52248267354582, -5.02529111301442, 
    -77.558548326806, 94.6257031539943), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344440344806528, -0.0588773310845266
    ), logphi = c(0.450868548580457, -1.58135442753345)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_119 = structure(list(
    par = c(0.0815120716373455, -0.441714745407519, 0.518720970172297, 
    -1.63452778198697), value = 48.832310904382, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.0771416629576, -7.58066112105382, 
    84.8682508305387, -4.16512489742615, -7.58066112105382, 7.56935777346257, 
    -11.1102949826858, -2.46279426185936, 84.8682508305387, -11.1102949826858, 
    2025.49001842023, -120.667340588021, -4.16512489742615, -2.46279426185936, 
    -120.667340588021, 121.189169686176), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0815120716373455, -0.441714745407519
    ), logphi = c(0.518720970172297, -1.63452778198697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_120 = structure(list(
    par = c(-0.304400629205644, -0.205626437094045, 0.499850316999887, 
    -1.4773514373131), value = 45.6921994987236, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.5010287899945, -3.26916776316466, 
    82.8793112290782, -7.18128545074137, -3.26916776316466, 11.0119496881111, 
    -10.6606526024677, -3.84080013482446, 82.8793112290782, -10.6606526024677, 
    1284.60413344378, -102.175311679886, -7.18128545074137, -3.84080013482446, 
    -102.175311679886, 87.2050246627509), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304400629205644, -0.205626437094045
    ), logphi = c(0.499850316999887, -1.4773514373131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_121 = structure(list(
    par = c(-0.203038331787449, -0.103215235335419, 0.485940417630183, 
    -1.39085514280642), value = 46.4113795219443, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.4391305265412, -2.585182928172, 
    72.5024298695587, -3.75812778941054, -2.585182928172, 13.7701128970491, 
    -8.14277811755915, -3.78887233765113, 72.5024298695587, -8.14277811755915, 
    984.075048329203, -62.9229206960957, -3.75812778941054, -3.78887233765113, 
    -62.9229206960957, 66.8081936723297), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203038331787449, -0.103215235335419
    ), logphi = c(0.485940417630183, -1.39085514280642)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_122 = structure(list(
    par = c(-0.568038609781382, 0.142377002045675, 0.494951181730607, 
    -1.61792066598655), value = 24.3174123303366, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.5052542825595, 0.759999242205822, 
    102.844278524472, -10.6358908373849, 0.759999242205822, 19.5767046040629, 
    -8.855639149985, -7.17946123618418, 102.844278524472, -8.855639149985, 
    1813.76849733716, -165.566546712625, -10.6358908373849, -7.17946123618418, 
    -165.566546712625, 115.087321127305), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.568038609781382, 0.142377002045675
    ), logphi = c(0.494951181730607, -1.61792066598655)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_123 = structure(list(
    par = c(-0.334850004962633, -0.215628257671401, 0.474846060319274, 
    -1.71442164495904), value = 26.1766094398871, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4352524940538, -2.91446431344156, 
    103.058628743824, -6.89605244774683, -2.91446431344156, 12.7688519881985, 
    -9.60553259332642, -4.4972545096833, 103.058628743824, -9.60553259332642, 
    2378.71320395211, -140.706381378308, -6.89605244774683, -4.4972545096833, 
    -140.706381378308, 128.467099283824), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334850004962633, -0.215628257671401
    ), logphi = c(0.474846060319274, -1.71442164495904)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_124 = structure(list(
    par = c(-0.348344460850354, -0.066779170897233, 0.520211292010296, 
    -1.6301548461204), value = 33.3744198880735, counts = structure(c(325L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.6119260975209, -3.91783289188652, 
    98.9380795193284, -10.1615328356175, -3.91783289188652, 14.3263788423553, 
    -15.1081683839038, -4.7288101319154, 98.9380795193284, -15.1081683839038, 
    1948.32514512733, -172.79495854261, -10.1615328356175, -4.7288101319154, 
    -172.79495854261, 123.856423448032), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348344460850354, -0.066779170897233
    ), logphi = c(0.520211292010296, -1.6301548461204)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_125 = structure(list(
    par = c(-0.591131032071176, 0.165601773149247, 0.522522546727905, 
    -1.65291276533899), value = 17.6058872990461, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.2217221544463, -0.213010537208902, 
    107.367419987625, -13.7562770756716, -0.213010537208902, 
    21.2165475321768, -15.3769942308202, -7.09127495923667, 107.367419987625, 
    -15.3769942308202, 2019.37305411448, -213.445579740679, -13.7562770756716, 
    -7.09127495923667, -213.445579740679, 131.706942255505), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.591131032071176, 0.165601773149247
    ), logphi = c(0.522522546727905, -1.65291276533899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_126 = structure(list(
    par = c(-0.343813576529948, 0.195580774705831, 0.506746600934376, 
    -1.62353090890878), value = 23.2947033723263, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.5508742832007, -0.680088240834209, 
    99.688926987973, -7.96355261023507, -0.680088240834209, 22.1288032333788, 
    -8.99153657485385, -6.46437260698463, 99.688926987973, -8.99153657485385, 
    1856.01378556033, -158.226946334494, -7.96355261023507, -6.46437260698463, 
    -158.226946334494, 116.410878930218), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343813576529948, 0.195580774705831
    ), logphi = c(0.506746600934376, -1.62353090890878)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_127 = structure(list(
    par = c(-0.381660903750554, -0.416955234619085, 0.524870402272699, 
    -1.56074911377914), value = 42.5484119246726, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.2660324607018, -4.39399629037496, 
    90.1173572547265, -11.2694012361914, -4.39399629037496, 7.51729208481322, 
    -15.0145370252375, -2.85949968770183, 90.1173572547265, -15.0145370252375, 
    1667.4538815824, -158.485570302958, -11.2694012361914, -2.85949968770183, 
    -158.485570302958, 113.515979291989), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381660903750554, -0.416955234619085
    ), logphi = c(0.524870402272699, -1.56074911377914)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_128 = structure(list(
    par = c(-0.389597208874948, -0.179502745332607, 0.520394982085425, 
    -1.5433413643061), value = 41.5543989347772, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.664090254959, -3.32153071269659, 
    91.0947948415952, -10.66704807684, -3.32153071269659, 12.010825724218, 
    -14.4215514037427, -4.01294756535719, 91.0947948415952, -14.4215514037427, 
    1559.63621041089, -151.283301541127, -10.66704807684, -4.01294756535719, 
    -151.283301541127, 107.432442732147), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389597208874948, -0.179502745332607
    ), logphi = c(0.520394982085425, -1.5433413643061)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_129 = structure(list(
    par = c(-0.358899404001755, 0.160907703065602, 0.54574459738721, 
    -1.47756147331887), value = 28.2901644632835, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.0065988050404, 0.321441783412979, 
    87.3827640308633, -11.3885922052859, 0.321441783412979, 25.8109556483532, 
    -14.05785590336, -5.15388139099571, 87.3827640308633, -14.05785590336, 
    1271.27043497133, -160.632796188942, -11.3885922052859, -5.15388139099571, 
    -160.632796188942, 98.9196165832595), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358899404001755, 0.160907703065602
    ), logphi = c(0.54574459738721, -1.47756147331887)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_130 = structure(list(
    par = c(-0.469702701792256, 0.075737164177111, 0.495286332348465, 
    -1.48848405248437), value = 42.0193280824973, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.0446996629, 0.728372555158785, 
    87.8705209998998, -8.39341927871828, 0.728372555158785, 18.3663033084258, 
    -8.7471592404853, -5.78856555755181, 87.8705209998998, -8.7471592404853, 
    1280.90412550819, -115.363257278567, -8.39341927871828, -5.78856555755181, 
    -115.363257278567, 87.9345596018766), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.469702701792256, 0.075737164177111
    ), logphi = c(0.495286332348465, -1.48848405248437)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_131 = structure(list(
    par = c(-0.298371375607787, 0.198765628309402, 0.485979732374634, 
    -1.593838875975), value = 20.6245015130677, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.5977709809521, 0.58569098015937, 
    94.015777924561, -5.10235133921455, 0.58569098015937, 23.5834823962833, 
    -5.1942323855414, -6.16030371869414, 94.015777924561, -5.1942323855414, 
    1699.11229212261, -121.718405174942, -5.10235133921455, -6.16030371869414, 
    -121.718405174942, 104.37193984103), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298371375607787, 0.198765628309402
    ), logphi = c(0.485979732374634, -1.593838875975)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_132 = structure(list(
    par = c(-0.148213079391318, -0.123747022551083, 0.483362488304512, 
    -1.64863724738223), value = 32.8602591482425, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.9206641585058, -4.13089096973351, 
    93.4571564048525, -4.15351606442016, -4.13089096973351, 14.0319810579825, 
    -8.65067191568869, -4.25752953514547, 93.4571564048525, -8.65067191568869, 
    2023.65639090196, -112.997047050811, -4.15351606442016, -4.25752953514547, 
    -112.997047050811, 116.341789402341), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148213079391318, -0.123747022551083
    ), logphi = c(0.483362488304512, -1.64863724738223)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_133 = structure(list(
    par = c(-0.0687699529126431, -0.596623383923119, 0.489025929943274, 
    -1.69577675268431), value = 42.2106083392345, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.3679600887679, -5.99598189943151, 
    91.4453991445185, -4.6004600005034, -5.99598189943151, 5.58773411007962, 
    -9.65331903124422, -2.47126425012567, 91.4453991445185, -9.65331903124422, 
    2345.08272534661, -114.152353725139, -4.6004600005034, -2.47126425012567, 
    -114.152353725139, 129.04373617495), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0687699529126431, -0.596623383923119
    ), logphi = c(0.489025929943274, -1.69577675268431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_134 = structure(list(
    par = c(-0.178592674272503, 0.158091638485676, 0.522056211825371, 
    -1.50960295324836), value = 30.45263551354, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.5959291314726, -1.94438207046232, 
    85.7583690123676, -6.57024662498173, -1.94438207046232, 22.0602148859328, 
    -10.7081124527397, -5.03537578966373, 85.7583690123676, -10.7081124527397, 
    1387.70064324767, -129.757003914044, -6.57024662498173, -5.03537578966373, 
    -129.757003914044, 96.4136652150671), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178592674272503, 0.158091638485676
    ), logphi = c(0.522056211825371, -1.50960295324836)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_135 = structure(list(
    par = c(0.0747380551559016, 0.431307115355437, 0.522199924784335, 
    -1.44822740258586), value = 31.3669219322467, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.2776881854981, -2.63414814760665, 
    73.1862570422237, -2.008453014124, -2.63414814760665, 30.5656240193741, 
    -7.3109754232803, -4.81526061291149, 73.1862570422237, -7.3109754232803, 
    1156.52231297414, -102.579827186311, -2.008453014124, -4.81526061291149, 
    -102.579827186311, 81.6160229968332), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0747380551559016, 0.431307115355437
    ), logphi = c(0.522199924784335, -1.44822740258586)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_136 = structure(list(
    par = c(-0.376108193946288, 0.0423189333123978, 0.487888705777034, 
    -1.69501364154278), value = 27.185476957315, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.0710017820741, -2.69962675591984, 
    105.123502362581, -7.70610757472312, -2.69962675591984, 15.683556421564, 
    -8.82203664609449, -5.93266711756968, 105.123502362581, -8.82203664609449, 
    2236.7657049065, -158.654876726505, -7.70610757472312, -5.93266711756968, 
    -158.654876726505, 126.60914937257), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376108193946288, 0.0423189333123978
    ), logphi = c(0.487888705777034, -1.69501364154278)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_137 = structure(list(
    par = c(-0.135032702213767, -0.722150739593887, 0.482937596192253, 
    -1.68590356789852), value = 46.8463182212568, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.6861135760435, -5.06107225817232, 
    91.5048559679832, -5.27014716311669, -5.06107225817232, 4.75271509259301, 
    -9.23567385413548, -2.25810756226963, 91.5048559679832, -9.23567385413548, 
    2290.91209273236, -111.503566133209, -5.27014716311669, -2.25810756226963, 
    -111.503566133209, 126.883708295722), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135032702213767, -0.722150739593887
    ), logphi = c(0.482937596192253, -1.68590356789852)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_138 = structure(list(
    par = c(-0.371851543495606, -0.183647464814908, 0.470160612240876, 
    -1.66913179491598), value = 34.7508940657536, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.7085074266527, -2.87204699134236, 
    100.218506815963, -6.7425503802454, -2.87204699134236, 11.7740515932496, 
    -8.64896400543103, -4.75176724279436, 100.218506815963, -8.64896400543103, 
    2108.89959661031, -126.772342705195, -6.7425503802454, -4.75176724279436, 
    -126.772342705195, 118.499326156041), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371851543495606, -0.183647464814908
    ), logphi = c(0.470160612240876, -1.66913179491598)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_139 = structure(list(
    par = c(-0.191994455201721, 0.0735285151927764, 0.47011073891429, 
    -1.61769401027812), value = 29.6298575783792, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.0234819799888, -2.22246924419522, 
    91.4871052923871, -2.77672670367934, -2.22246924419522, 17.5023292037224, 
    -4.8657562574661, -5.11106639988768, 91.4871052923871, -4.8657562574661, 
    1823.5406029774, -97.7346470660834, -2.77672670367934, -5.11106639988768, 
    -97.7346470660834, 105.629056470491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191994455201721, 0.0735285151927764
    ), logphi = c(0.47011073891429, -1.61769401027812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_140 = structure(list(
    par = c(-0.351701427941405, 0.0163313514744936, 0.481768095244462, 
    -1.54569258601821), value = 36.2953292982024, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.1937136863827, -1.15910167330924, 
    90.1243304678445, -5.99542202639469, -1.15910167330924, 15.991303786933, 
    -7.66908550531298, -5.34024527443222, 90.1243304678445, -7.66908550531298, 
    1507.29469274324, -105.802064346072, -5.99542202639469, -5.34024527443222, 
    -105.802064346072, 95.346365180049), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351701427941405, 0.0163313514744936
    ), logphi = c(0.481768095244462, -1.54569258601821)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_141 = structure(list(
    par = c(-0.0959917060929095, 0.0541065945316556, 0.486539885714564, 
    -1.78742908448894), value = 19.3019969773228, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.6151554514244, -5.66148821068424, 
    103.921949993868, -3.38057225723887, -5.66148821068424, 16.1689840174617, 
    -6.5642404507571, -4.87584187514045, 103.921949993868, -6.5642404507571, 
    2818.65609225829, -144.962705918239, -3.38057225723887, -4.87584187514045, 
    -144.962705918239, 139.358035428749), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0959917060929095, 0.0541065945316556
    ), logphi = c(0.486539885714564, -1.78742908448894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_142 = structure(list(
    par = c(-0.316298407220985, 0.435373204120433, 0.469115006575474, 
    -1.72391051165908), value = 9.23929509637101, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.5769776215884, 5.25067274192992, 
    103.993129995317, -2.80591130419339, 5.25067274192992, 32.4725124158931, 
    7.40310815672274, -7.28775792424585, 103.993129995317, 7.40310815672274, 
    2301.20305880099, -144.035690653688, -2.80591130419339, -7.28775792424585, 
    -144.035690653688, 121.339870040593), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316298407220985, 0.435373204120433
    ), logphi = c(0.469115006575474, -1.72391051165908)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_143 = structure(list(
    par = c(-0.24772656338841, -0.347991921564747, 0.514645943602075, 
    -1.65363037541722), value = 38.9822255886799, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.2944136446068, -5.02647988120941, 
    95.7885422252502, -8.67226269285482, -5.02647988120941, 9.34904624827482, 
    -14.2417402848594, -3.28046662190218, 95.7885422252502, -14.2417402848594, 
    2106.16641624917, -156.931732536947, -8.67226269285482, -3.28046662190218, 
    -156.931732536947, 127.297701491003), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24772656338841, -0.347991921564747
    ), logphi = c(0.514645943602075, -1.65363037541722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_144 = structure(list(
    par = c(-0.3638995890973, 0.498603469037723, 0.509328897685329, 
    -1.59062369039196), value = 10.7987243563221, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.5377932944145, 5.98128389750485, 
    96.9118895550736, -6.66207820199105, 5.98128389750485, 35.2335031870155, 
    -0.763063305875278, -8.18562357229879, 96.9118895550736, 
    -0.763063305875278, 1644.26063317968, -157.473271827691, 
    -6.66207820199105, -8.18562357229879, -157.473271827691, 
    107.9073114294), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3638995890973, 0.498603469037723
    ), logphi = c(0.509328897685329, -1.59062369039196)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_145 = structure(list(
    par = c(-0.00942213682924373, 0.186598549331781, 0.45799138600146, 
    -1.41066037588002), value = 35.4758827058449, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.9094496687653, -1.23217119973873, 
    66.8461881616622, 1.56745438761874, -1.23217119973873, 23.2780393822907, 
    -4.33593159954171, -4.08133624230089, 66.8461881616622, -4.33593159954171, 
    1019.3232969371, -31.7081895611082, 1.56745438761874, -4.08133624230089, 
    -31.7081895611082, 64.6413209945962), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00942213682924373, 0.186598549331781
    ), logphi = c(0.45799138600146, -1.41066037588002)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_146 = structure(list(
    par = c(-0.17592473305292, 0.193306306277302, 0.486283465541832, 
    -1.75289526682527), value = 22.931496711008, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7285156554547, -2.8525800477297, 
    104.664915915542, -3.85538670855112, -2.8525800477297, 21.2033467441586, 
    -4.17972579924708, -5.83996677505638, 104.664915915542, -4.17972579924708, 
    2561.61530163457, -149.787642060417, -3.85538670855112, -5.83996677505638, 
    -149.787642060417, 132.911388909029), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17592473305292, 0.193306306277302
    ), logphi = c(0.486283465541832, -1.75289526682527)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_147 = structure(list(
    par = c(-0.437270696401396, -0.0178325788616247, 0.505178615768119, 
    -1.44718130969819), value = 32.0957339582909, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.0343503511303, -0.464626019436309, 
    83.4332992489806, -8.86200231686729, -0.464626019436309, 
    16.3184662049787, -10.4975142480868, -4.87810943816669, 83.4332992489806, 
    -10.4975142480868, 1156.57421362947, -111.416469620096, -8.86200231686729, 
    -4.87810943816669, -111.416469620096, 82.7240683136665), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.437270696401396, -0.0178325788616247
    ), logphi = c(0.505178615768119, -1.44718130969819)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_148 = structure(list(
    par = c(-0.127542200774142, -0.0355255251929121, 0.477654040861624, 
    -1.73836356961626), value = 26.9110374725898, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.674577364148, -5.29012966410392, 
    99.948111580872, -3.40041892865628, -5.29012966410392, 13.846972950482, 
    -6.71488654724328, -4.60076471497928, 99.948111580872, -6.71488654724328, 
    2510.66098495834, -127.32413064942, -3.40041892865628, -4.60076471497928, 
    -127.32413064942, 130.586945614297), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.127542200774142, -0.0355255251929121
    ), logphi = c(0.477654040861624, -1.73836356961626)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_149 = structure(list(
    par = c(-0.360563772920463, -0.337894817824337, 0.471184781168858, 
    -1.63805433711956), value = 33.7527409010162, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.594195491484, -3.12722515971586, 
    96.2256134293682, -6.86965862506383, -3.12722515971586, 9.61843319480238, 
    -9.58687462215835, -3.98289183500822, 96.2256134293682, -9.58687462215835, 
    1968.9878656024, -115.501532483187, -6.86965862506383, -3.98289183500822, 
    -115.501532483187, 113.704503135637), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360563772920463, -0.337894817824337
    ), logphi = c(0.471184781168858, -1.63805433711956)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_150 = structure(list(
    par = c(-0.29232477352228, -0.250961937403263, 0.485987990560766, 
    -1.6923079559164), value = 32.6829995817003, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.9890117110618, -4.08893428271995, 
    100.310522727298, -7.11452733881401, -4.08893428271995, 10.9589826209344, 
    -11.0499822838506, -4.1392656191519, 100.310522727298, -11.0499822838506, 
    2273.48892249069, -141.542579267906, -7.11452733881401, -4.1392656191519, 
    -141.542579267906, 127.367045315907), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29232477352228, -0.250961937403263
    ), logphi = c(0.485987990560766, -1.6923079559164)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_151 = structure(list(
    par = c(-0.35422439011347, -0.155039730481963, 0.477073497843226, 
    -1.72496588763079), value = 30.0949106263527, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.3399131860499, -3.76089444031891, 
    105.029259678702, -7.30281352057105, -3.76089444031891, 11.5725185256821, 
    -9.62858317254955, -4.89198005970692, 105.029259678702, -9.62858317254955, 
    2433.7902089524, -149.613078983535, -7.30281352057105, -4.89198005970692, 
    -149.613078983535, 130.759425199578), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35422439011347, -0.155039730481963
    ), logphi = c(0.477073497843226, -1.72496588763079)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_152 = structure(list(
    par = c(-0.206525471537075, 0.121342008617099, 0.534153884687786, 
    -1.64702002243725), value = 33.9357665169129, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.9187136559646, -5.01311980904973, 
    99.4648658956265, -8.60560047399872, -5.01311980904973, 18.0562974474441, 
    -14.7022034777677, -5.2731854314203, 99.4648658956265, -14.7022034777677, 
    2014.99097012814, -179.197793110042, -8.60560047399872, -5.2731854314203, 
    -179.197793110042, 126.69119431763), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206525471537075, 0.121342008617099
    ), logphi = c(0.534153884687786, -1.64702002243725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_153 = structure(list(
    par = c(-0.568537510459808, -0.202128881479923, 0.546222352756539, 
    -1.69328540665465), value = 26.2062397004728, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.3743225876992, -4.32686215923184, 
    102.961677880486, -15.5644068051686, -4.32686215923184, 11.0565826254572, 
    -25.2213348090891, -3.32233652500236, 102.961677880486, -25.2213348090891, 
    2349.47043431077, -247.695267741932, -15.5644068051686, -3.32233652500236, 
    -247.695267741932, 150.0371570895), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.568537510459808, -0.202128881479923
    ), logphi = c(0.546222352756539, -1.69328540665465)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_154 = structure(list(
    par = c(-0.165500002251773, -0.00165558748591355, 0.466834729999799, 
    -1.49945635570533), value = 38.5565328967357, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.6464066608552, -1.71427455875062, 
    79.8930755649963, -1.84933109181884, -1.71427455875062, 17.1491227991538, 
    -5.97346498665274, -4.42220579710551, 79.8930755649963, -5.97346498665274, 
    1327.01214077358, -63.1649399496226, -1.84933109181884, -4.42220579710551, 
    -63.1649399496226, 82.4992262966617), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165500002251773, -0.00165558748591355
    ), logphi = c(0.466834729999799, -1.49945635570533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_155 = structure(list(
    par = c(-0.661293197506123, 0.060401785395171, 0.507722211134624, 
    -1.62513530479818), value = 17.8985530648598, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.9901755787555, 0.484631861752405, 
    104.569071865512, -13.726888855814, 0.484631861752405, 19.5721078437572, 
    -14.2800880329474, -6.68619040045115, 104.569071865512, -14.2800880329474, 
    1882.40772342674, -193.571519383262, -13.726888855814, -6.68619040045115, 
    -193.571519383262, 123.646571973168), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.661293197506123, 0.060401785395171
    ), logphi = c(0.507722211134624, -1.62513530479818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_156 = structure(list(
    par = c(-0.297322434290975, -0.514631084081901, 0.508100822943966, 
    -1.5568499838654), value = 44.248089493261, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.7542780897971, -4.45081061073438, 
    87.6634802473575, -8.75519078391562, -4.45081061073438, 6.5087000962194, 
    -12.1954658691692, -2.71595414247372, 87.6634802473575, -12.1954658691692, 
    1644.45069036745, -128.191896406449, -8.75519078391562, -2.71595414247372, 
    -128.191896406449, 107.22847706468), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297322434290975, -0.514631084081901
    ), logphi = c(0.508100822943966, -1.5568499838654)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_157 = structure(list(
    par = c(-0.24249080144354, 0.513108170282574, 0.507068395692887, 
    -1.59817021397165), value = 15.8238544983384, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.8702273145615, 5.01959417587017, 
    94.1535496368218, -4.53010099521478, 5.01959417587017, 37.3844894676623, 
    -0.492453099631973, -7.43068206698894, 94.1535496368218, 
    -0.492453099631973, 1687.39542859075, -146.448430694335, 
    -4.53010099521478, -7.43068206698894, -146.448430694335, 
    107.574423998003), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24249080144354, 0.513108170282574
    ), logphi = c(0.507068395692887, -1.59817021397165)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_158 = structure(list(
    par = c(-0.241259042874588, 0.0414068066796728, 0.468031622513118, 
    -1.50987470858238), value = 31.2578074067631, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.6513153741511, -1.06174692149352, 
    82.9484387816493, -2.83685532842526, -1.06174692149352, 17.0562304546706, 
    -5.61670109355816, -4.88551071775589, 82.9484387816493, -5.61670109355816, 
    1355.9949115729, -72.8913553844635, -2.83685532842526, -4.88551071775589, 
    -72.8913553844635, 84.4272684936698), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241259042874588, 0.0414068066796728
    ), logphi = c(0.468031622513118, -1.50987470858238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_159 = structure(list(
    par = c(-0.152871234201022, 0.331410044834854, 0.518742622819276, 
    -1.58869264864877), value = 24.2371200223737, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.6570630563414, -1.53850875950212, 
    92.5751721796431, -5.37256134069963, -1.53850875950212, 25.4416841833915, 
    -7.86556107090775, -6.13435040808241, 92.5751721796431, -7.86556107090775, 
    1692.9760586013, -146.111508225744, -5.37256134069963, -6.13435040808241, 
    -146.111508225744, 109.695596769654), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.152871234201022, 0.331410044834854
    ), logphi = c(0.518742622819276, -1.58869264864877)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_160 = structure(list(
    par = c(-0.438304943805693, -0.102959361203426, 0.51610124554024, 
    -1.54730340015444), value = 36.0998530628784, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.2080351778407, -2.6975603759638, 
    92.8227038752283, -10.9052114982688, -2.6975603759638, 13.2630229749964, 
    -14.0270434787482, -4.61175944721504, 92.8227038752283, -14.0270434787482, 
    1561.9688132702, -152.66398486169, -10.9052114982688, -4.61175944721504, 
    -152.66398486169, 107.274646001798), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438304943805693, -0.102959361203426
    ), logphi = c(0.51610124554024, -1.54730340015444)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_161 = structure(list(
    par = c(-0.420923336901465, -0.312373440238571, 0.466968264199456, 
    -1.59522122841039), value = 33.9119266603155, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.1766762893012, -2.28641457589163, 
    93.805003443137, -7.03815916747175, -2.28641457589163, 9.87421433862323, 
    -9.08877441219147, -4.20778717469261, 93.805003443137, -9.08877441219147, 
    1746.3342827515, -104.375731535988, -7.03815916747175, -4.20778717469261, 
    -104.375731535988, 103.950496857408), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.420923336901465, -0.312373440238571
    ), logphi = c(0.466968264199456, -1.59522122841039)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_162 = structure(list(
    par = c(-0.429202204998245, -0.148032645616824, 0.462079492655029, 
    -1.63065847687563), value = 22.6052697924085, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.9364694378381, -0.831213426977229, 
    97.8940848410659, -6.5235911677064, -0.831213426977229, 14.475948805881, 
    -7.27868025940381, -5.07893205980992, 97.8940848410659, -7.27868025940381, 
    1887.57757001046, -111.992931226546, -6.5235911677064, -5.07893205980992, 
    -111.992931226546, 108.438735306748), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.429202204998245, -0.148032645616824
    ), logphi = c(0.462079492655029, -1.63065847687563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_163 = structure(list(
    par = c(0.0882724286169931, 0.293833895191964, 0.452949627241787, 
    -1.71446402370328), value = 20.7562470555555, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.6072159563215, -2.46806135173472, 
    84.2133365646092, 2.81623198805647, -2.46806135173472, 27.1038078523134, 
    1.89625435886853, -4.10357066549238, 84.2133365646092, 1.89625435886853, 
    2330.19305263404, -77.5210178955987, 2.81623198805647, -4.10357066549238, 
    -77.5210178955987, 118.361131781874), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0882724286169931, 0.293833895191964
    ), logphi = c(0.452949627241787, -1.71446402370328)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_164 = structure(list(
    par = c(-0.178371748085685, 0.121149313792052, 0.506599538671576, 
    -1.63693241409032), value = 23.6336667940111, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.1370134933975, -2.67144274879172, 
    96.2991344541919, -5.69991674304049, -2.67144274879172, 21.1748429981284, 
    -9.6525556001481, -5.38781529524357, 96.2991344541919, -9.6525556001481, 
    1946.76537483396, -143.353698442539, -5.69991674304049, -5.38781529524357, 
    -143.353698442539, 117.960781105708), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178371748085685, 0.121149313792052
    ), logphi = c(0.506599538671576, -1.63693241409032)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_165 = structure(list(
    par = c(-0.481114583525052, 0.101020850929654, 0.50883491717612, 
    -1.58417503351109), value = 27.594155153278, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.4144650930598, -0.49811849756054, 
    98.3239604952502, -10.544345942165, -0.49811849756054, 19.1258525568117, 
    -11.5227463286516, -6.25892307670739, 98.3239604952502, -11.5227463286516, 
    1683.85219126499, -161.791080207863, -10.544345942165, -6.25892307670739, 
    -161.791080207863, 111.825123118692), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.481114583525052, 0.101020850929654
    ), logphi = c(0.50883491717612, -1.58417503351109)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_166 = structure(list(
    par = c(0.0346357177922312, 0.469233509255786, 0.493485344463354, 
    -1.48664125652153), value = 27.3424070108485, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.7446259258066, -0.406001459118954, 
    74.291126988868, 0.175877213237641, -0.406001459118954, 30.7442351008547, 
    -3.29253874831181, -5.07572739394391, 74.291126988868, -3.29253874831181, 
    1271.72631935135, -83.6428005204226, 0.175877213237641, -5.07572739394391, 
    -83.6428005204226, 82.74492991589), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0346357177922312, 0.469233509255786
    ), logphi = c(0.493485344463354, -1.48664125652153)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_167 = structure(list(
    par = c(-0.186586593425626, -0.693676527648626, 0.482635735010953, 
    -1.60647978130699), value = 48.3170587893165, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.2842030935108, -4.74368007452597, 
    87.3876383842287, -5.6110587474123, -4.74368007452597, 4.58235451361588, 
    -9.15071938756284, -2.37276687897747, 87.3876383842287, -9.15071938756284, 
    1867.21146927482, -98.1475935439846, -5.6110587474123, -2.37276687897747, 
    -98.1475935439846, 111.106277207895), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186586593425626, -0.693676527648626
    ), logphi = c(0.482635735010953, -1.60647978130699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_168 = structure(list(
    par = c(-0.382431434679002, 0.0166883076911601, 0.467998208450494, 
    -1.72109027715145), value = 19.1687009767168, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.5580931077101, -1.59294603818694, 
    106.173040346214, -6.2651460130958, -1.59294603818694, 16.5894187409421, 
    -5.42950465209913, -5.86398918400732, 106.173040346214, -5.42950465209913, 
    2362.9647728427, -143.945287944813, -6.2651460130958, -5.86398918400732, 
    -143.945287944813, 125.807826075963), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382431434679002, 0.0166883076911601
    ), logphi = c(0.467998208450494, -1.72109027715145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_169 = structure(list(
    par = c(-0.409153078079005, 0.0454808760705302, 0.534558714408495, 
    -1.5066814028858), value = 36.3722941949216, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.8622395424391, -2.12209776861982, 
    90.0449635370393, -11.5753389424711, -2.12209776861982, 16.8812029333054, 
    -14.5433289162611, -4.93139788027008, 90.0449635370393, -14.5433289162611, 
    1389.57784525751, -160.222021684753, -11.5753389424711, -4.93139788027008, 
    -160.222021684753, 102.986130148253), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.409153078079005, 0.0454808760705302
    ), logphi = c(0.534558714408495, -1.5066814028858)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_170 = structure(list(
    par = c(-0.0387615880897717, 0.302486159465388, 0.506041743383837, 
    -1.48253490239439), value = 35.0538465540671, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.4950650864467, -2.12974630819929, 
    78.2869288453725, -2.51745826940208, -2.12974630819929, 25.3951798061536, 
    -6.94731656203373, -5.01162796062715, 78.2869288453725, -6.94731656203373, 
    1272.48721863715, -98.0778384960246, -2.51745826940208, -5.01162796062715, 
    -98.0778384960246, 85.6923370697871), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0387615880897717, 0.302486159465388
    ), logphi = c(0.506041743383837, -1.48253490239439)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_171 = structure(list(
    par = c(-0.445718255773271, -0.40787181173114, 0.503674470529657, 
    -1.63775521496725), value = 41.0484683318066, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.478528409399, -4.13490012718398, 
    97.418735965249, -10.9004472630403, -4.13490012718398, 7.35665531337304, 
    -14.7315111309609, -3.40805986276393, 97.418735965249, -14.7315111309609, 
    2020.41155582577, -162.897541725826, -10.9004472630403, -3.40805986276393, 
    -162.897541725826, 124.817148138945), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.445718255773271, -0.40787181173114
    ), logphi = c(0.503674470529657, -1.63775521496725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_172 = structure(list(
    par = c(-0.549825296465685, 0.0515610634634452, 0.548161430833027, 
    -1.57694101337223), value = 32.0721643748237, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.3673911563607, -1.74381931650203, 
    98.4221808888464, -15.3586582420928, -1.74381931650203, 19.0407986870866, 
    -19.9999373453608, -5.09817848026728, 98.4221808888464, -19.9999373453608, 
    1697.01075418516, -212.919212773777, -15.3586582420928, -5.09817848026728, 
    -212.919212773777, 125.117381523765), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.549825296465685, 0.0515610634634452
    ), logphi = c(0.548161430833027, -1.57694101337223)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_173 = structure(list(
    par = c(-0.293916502015368, -0.219042522043714, 0.483951977212413, 
    -1.59129780254787), value = 33.533629813242, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.8242477729884, -3.07847772518244, 
    92.0580299741403, -6.37127820546368, -3.07847772518244, 12.1921930755775, 
    -9.89786249583346, -4.18343043762093, 92.0580299741403, -9.89786249583346, 
    1745.22838830882, -112.225866518045, -6.37127820546368, -4.18343043762093, 
    -112.225866518045, 106.482743065683), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293916502015368, -0.219042522043714
    ), logphi = c(0.483951977212413, -1.59129780254787)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_174 = structure(list(
    par = c(-0.594245075916139, -0.0447032972317613, 0.485972214928127, 
    -1.72944979109418), value = 16.9134179229423, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.0481500385151, -1.16114818382584, 
    111.628014380472, -11.5694925870713, -1.16114818382584, 16.1846352479955, 
    -12.5103655932435, -6.16442481415902, 111.628014380472, -12.5103655932435, 
    2448.47586661656, -194.735855729711, -11.5694925870713, -6.16442481415902, 
    -194.735855729711, 136.629710635106), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.594245075916139, -0.0447032972317613
    ), logphi = c(0.485972214928127, -1.72944979109418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_175 = structure(list(
    par = c(-0.00988906566619968, 0.422907418663995, 0.498971453719626, 
    -1.69157848982555), value = 16.0822565686021, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.819932407047, -0.760454939019439, 
    94.3566116227146, -1.12924365014422, -0.760454939019439, 
    32.3923440550544, -1.73938223824166, -5.83449464475194, 94.3566116227146, 
    -1.73938223824166, 2194.32641149808, -135.261341604576, -1.12924365014422, 
    -5.83449464475194, -135.261341604576, 122.415937453546), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00988906566619968, 0.422907418663995
    ), logphi = c(0.498971453719626, -1.69157848982555)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_176 = structure(list(
    par = c(-0.230614493572621, -0.0189280863767471, 0.543266525395427, 
    -1.72719478235255), value = 28.1090804163747, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.2256628980379, -6.77827197126391, 
    104.820583184839, -10.0362572323931, -6.77827197126391, 13.4682263830399, 
    -19.4301362181903, -4.41003071172119, 104.820583184839, -19.4301362181903, 
    2492.53482956835, -206.596065224662, -10.0362572323931, -4.41003071172119, 
    -206.596065224662, 143.749840264107), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230614493572621, -0.0189280863767471
    ), logphi = c(0.543266525395427, -1.72719478235255)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_177 = structure(list(
    par = c(-0.535229721280992, 0.0485355923129186, 0.497900713215835, 
    -1.55099942588379), value = 35.0799084677451, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.8473115717194, -0.21483163870073, 
    95.260316332002, -10.2687323746409, -0.21483163870073, 16.6672079426888, 
    -10.3754719003035, -6.11554454454932, 95.260316332002, -10.3754719003035, 
    1532.49841901903, -142.835285872778, -10.2687323746409, -6.11554454454932, 
    -142.835285872778, 102.545032410362), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.535229721280992, 0.0485355923129186
    ), logphi = c(0.497900713215835, -1.55099942588379)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_178 = structure(list(
    par = c(0.0451154492946404, -0.0749465999127631, 0.456154015577935, 
    -1.67730157741139), value = 33.6553027961999, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.1081735418675, -6.11469635991568, 
    85.509976837983, 0.65119549574888, -6.11469635991568, 13.7360584915314, 
    -4.26433847700025, -3.65381761646688, 85.509976837983, -4.26433847700025, 
    2161.53828813148, -70.109317855227, 0.65119549574888, -3.65381761646688, 
    -70.109317855227, 115.216117508865), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0451154492946404, -0.0749465999127631
    ), logphi = c(0.456154015577935, -1.67730157741139)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_179 = structure(list(
    par = c(0.0390878908987287, 0.412432607191331, 0.501315440377047, 
    -1.52245875837322), value = 31.0789960736313, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.601973568045, -2.05969174604803, 
    78.5199992554553, -0.702445942746266, -2.05969174604803, 
    28.4378854180645, -4.81021293374795, -5.13942690050229, 78.5199992554553, 
    -4.81021293374795, 1416.60614536132, -98.067116740097, -0.702445942746266, 
    -5.13942690050229, -98.067116740097, 91.4983141395709), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0390878908987287, 0.412432607191331
    ), logphi = c(0.501315440377047, -1.52245875837322)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_180 = structure(list(
    par = c(-0.232541552831122, 0.0162073930251082, 0.481910002201245, 
    -1.62385356587639), value = 28.1072341095509, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.7864234592003, -2.45325591841095, 
    94.3242123794263, -4.68697457822742, -2.45325591841095, 16.8968788072377, 
    -7.40146589706114, -5.10399595743394, 94.3242123794263, -7.40146589706114, 
    1870.75908301715, -115.865142914728, -4.68697457822742, -5.10399595743394, 
    -115.865142914728, 110.420093395014), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232541552831122, 0.0162073930251082
    ), logphi = c(0.481910002201245, -1.62385356587639)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_181 = structure(list(
    par = c(-0.0520464562172376, 0.12367167814121, 0.465904121241088, 
    -1.61663581083436), value = 34.3155066084289, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.1682712837616, -2.67258106845247, 
    86.0112773803934, -0.311439851685691, -2.67258106845247, 
    20.4474079907868, -3.72339930976295, -4.62751531227212, 86.0112773803934, 
    -3.72339930976295, 1824.63115413434, -80.6234934431771, -0.311439851685691, 
    -4.62751531227212, -80.6234934431771, 104.141947623759), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0520464562172376, 0.12367167814121
    ), logphi = c(0.465904121241088, -1.61663581083436)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_182 = structure(list(
    par = c(-0.245277817625535, -0.0277104886999924, 0.502703212559544, 
    -1.60722087750066), value = 31.2920318529847, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.730207833737, -3.33907667915412, 
    94.4267637628116, -6.81644514166635, -3.33907667915412, 16.003535241893, 
    -10.9422232466017, -4.83390127214989, 94.4267637628116, -10.9422232466017, 
    1816.90458851946, -136.095880854725, -6.81644514166635, -4.83390127214989, 
    -136.095880854725, 112.946496935606), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245277817625535, -0.0277104886999924
    ), logphi = c(0.502703212559544, -1.60722087750066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_183 = structure(list(
    par = c(-0.265809144079512, -0.0783423101595251, 0.496222990755323, 
    -1.63327771000662), value = 33.3495608194068, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.821975624297, -3.2652527188759, 
    96.5624446376268, -6.83406050505653, -3.2652527188759, 15.1424819954116, 
    -10.744679167729, -4.74851003762211, 96.5624446376268, -10.744679167729, 
    1944.81406966318, -136.816481377977, -6.83406050505653, -4.74851003762211, 
    -136.816481377977, 117.019270994945), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265809144079512, -0.0783423101595251
    ), logphi = c(0.496222990755323, -1.63327771000662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_184 = structure(list(
    par = c(-0.0559092130582601, 0.0411802475508583, 0.530061761167542, 
    -1.57371238182629), value = 37.0020381100302, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.9359905226836, -5.75372314592926, 
    88.3867023837581, -6.0257450407164, -5.75372314592926, 16.9599751380645, 
    -12.777512665707, -4.25590716979229, 88.3867023837581, -12.777512665707, 
    1680.9999634404, -141.907251322237, -6.0257450407164, -4.25590716979229, 
    -141.907251322237, 110.453076937134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0559092130582601, 0.0411802475508583
    ), logphi = c(0.530061761167542, -1.57371238182629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_185 = structure(list(
    par = c(-0.245912289699987, 0.162124106952276, 0.523483595319631, 
    -1.57290647326927), value = 38.1674493129134, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.9072992163241, -3.65112203049023, 
    93.4403046315424, -7.94633370659881, -3.65112203049023, 18.1460724419935, 
    -11.6877488416378, -5.5527886981821, 93.4403046315424, -11.6877488416378, 
    1646.29945160044, -153.42509635019, -7.94633370659881, -5.5527886981821, 
    -153.42509635019, 110.114726329158), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245912289699987, 0.162124106952276
    ), logphi = c(0.523483595319631, -1.57290647326927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_186 = structure(list(
    par = c(-0.331902756697905, -0.0292754950171154, 0.491068687484358, 
    -1.753698015816), value = 23.4019325544134, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.0259939345676, -3.39557351392017, 
    108.536618150801, -7.72754409794629, -3.39557351392017, 16.4614351181314, 
    -10.6339931047472, -5.37199546979394, 108.536618150801, -10.6339931047472, 
    2606.60490771158, -171.903100152804, -7.72754409794629, -5.37199546979394, 
    -171.903100152804, 138.052364571983), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331902756697905, -0.0292754950171154
    ), logphi = c(0.491068687484358, -1.753698015816)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_187 = structure(list(
    par = c(0.102438642531782, 0.21355472236706, 0.473255687088558, 
    -1.64218919717342), value = 28.5721916916382, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.6450267308576, -4.77783266461529, 
    82.632806725158, 1.30684955390592, -4.77783266461529, 22.9374206170974, 
    -3.4469664980108, -4.307890060673, 82.632806725158, -3.4469664980108, 
    1968.25168815007, -81.9701404628503, 1.30684955390592, -4.307890060673, 
    -81.9701404628503, 110.338404480714), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.102438642531782, 0.21355472236706
    ), logphi = c(0.473255687088558, -1.64218919717342)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_188 = structure(list(
    par = c(-0.114594935739503, 0.248262700335309, 0.515168845364351, 
    -1.76159072137738), value = 20.4286291675381, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.8186489693207, -5.02987585893067, 
    106.394938571341, -5.06659358334716, -5.02987585893067, 21.1002579302288, 
    -8.76273065486544, -5.94918680141276, 106.394938571341, -8.76273065486544, 
    2632.7640645194, -174.041332806851, -5.06659358334716, -5.94918680141276, 
    -174.041332806851, 139.167445808219), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.114594935739503, 0.248262700335309
    ), logphi = c(0.515168845364351, -1.76159072137738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_189 = structure(list(
    par = c(-0.568368824228524, -0.00924924430032427, 0.512080916887813, 
    -1.55153803610114), value = 31.2154704078017, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.8754270412522, -0.409225442865591, 
    95.8307875755793, -12.3442495620907, -0.409225442865591, 
    17.3026319618685, -13.7526101280372, -5.60373948221837, 95.8307875755793, 
    -13.7526101280372, 1559.6731627312, -162.512607330356, -12.3442495620907, 
    -5.60373948221837, -162.512607330356, 108.321050857896), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.568368824228524, -0.00924924430032427
    ), logphi = c(0.512080916887813, -1.55153803610114)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_190 = structure(list(
    par = c(-0.188873752598043, -0.420608769995569, 0.536750527708588, 
    -1.51459723658547), value = 47.9730924217186, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.7089653257294, -5.20984283092218, 
    83.1821939399902, -9.20522203173846, -5.20984283092218, 7.95347479964903, 
    -13.4362583636971, -2.42271504014013, 83.1821939399902, -13.4362583636971, 
    1475.65335224265, -141.758519600188, -9.20522203173846, -2.42271504014013, 
    -141.758519600188, 103.740810631692), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188873752598043, -0.420608769995569
    ), logphi = c(0.536750527708588, -1.51459723658547)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_191 = structure(list(
    par = c(-0.0815912869310385, -0.0628143105908382, 0.493200666153767, 
    -1.62580791852617), value = 35.5799698761175, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.3847551864753, -5.33996953677729, 
    90.5256005481192, -3.71297051682262, -5.33996953677729, 14.0009552414, 
    -9.14810041763303, -4.23947582728346, 90.5256005481192, -9.14810041763303, 
    1914.84314797385, -113.043167318416, -3.71297051682262, -4.23947582728346, 
    -113.043167318416, 113.470546146743), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0815912869310385, -0.0628143105908382
    ), logphi = c(0.493200666153767, -1.62580791852617)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_192 = structure(list(
    par = c(-0.31391686210888, 0.16723488626471, 0.483321070013769, 
    -1.61131185575664), value = 29.5512830444468, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7473449144955, -0.655718553232987, 
    95.8458920976568, -5.32540781339463, -0.655718553232987, 
    19.8069444019566, -5.32889614390797, -6.13256650305871, 95.8458920976568, 
    -5.32889614390797, 1781.02799747126, -124.452049377943, -5.32540781339463, 
    -6.13256650305871, -124.452049377943, 107.459759019157), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31391686210888, 0.16723488626471
    ), logphi = c(0.483321070013769, -1.61131185575664)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_193 = structure(list(
    par = c(-0.184978689865221, -0.473722500184216, 0.49652558850843, 
    -1.56636369069872), value = 48.3582479330314, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.4141134916451, -4.7995679608448, 
    86.2060703745726, -6.18300301891139, -4.7995679608448, 7.37275184548025, 
    -10.5273003470074, -2.8630639263838, 86.2060703745726, -10.5273003470074, 
    1675.01776122414, -107.142032010898, -6.18300301891139, -2.8630639263838, 
    -107.142032010898, 105.077112577234), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.184978689865221, -0.473722500184216
    ), logphi = c(0.49652558850843, -1.56636369069872)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_194 = structure(list(
    par = c(-0.361343710758951, -0.20286493674355, 0.478514012907059, 
    -1.53595050460758), value = 40.6458418018048, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.5576807637733, -2.63491084240286, 
    88.3892821530452, -6.45965156564898, -2.63491084240286, 11.152915353918, 
    -9.18375645220237, -4.34146523975443, 88.3892821530452, -9.18375645220237, 
    1489.76703442116, -97.4752019669012, -6.45965156564898, -4.34146523975443, 
    -97.4752019669012, 93.9665330985662), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361343710758951, -0.20286493674355
    ), logphi = c(0.478514012907059, -1.53595050460758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_195 = structure(list(
    par = c(-0.300242539728033, -0.210903571016909, 0.526252940689766, 
    -1.53395799326984), value = 42.3302224878438, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.4351029593071, -4.69311804884853, 
    88.5535931089976, -9.82566772655957, -4.69311804884853, 10.3534493636204, 
    -14.2249903198888, -3.58601912608947, 88.5535931089976, -14.2249903198888, 
    1529.00638103581, -146.789937721437, -9.82566772655957, -3.58601912608947, 
    -146.789937721437, 105.900954121552), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300242539728033, -0.210903571016909
    ), logphi = c(0.526252940689766, -1.53395799326984)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_196 = structure(list(
    par = c(-0.458131651406406, -0.0794348707140928, 0.469199020957931, 
    -1.62785480974922), value = 25.5876839506577, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.5980954929744, -0.439853020672842, 
    99.0843673314146, -7.36717622196181, -0.439853020672842, 
    15.5964131698383, -7.66247904859796, -5.51054602571099, 99.0843673314146, 
    -7.66247904859796, 1872.24954089693, -123.709617768863, -7.36717622196181, 
    -5.51054602571099, -123.709617768863, 109.697164458744), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.458131651406406, -0.0794348707140928
    ), logphi = c(0.469199020957931, -1.62785480974922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_197 = structure(list(
    par = c(-0.289537265198268, -0.156257950447396, 0.558473649562181, 
    -1.58881463236832), value = 39.8463014114141, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.3494778464142, -5.48374583431155, 
    93.2025754547539, -12.3846473449873, -5.48374583431155, 11.8191350271246, 
    -19.3712810432345, -3.20122216912466, 93.2025754547539, -19.3712810432345, 
    1784.54539090644, -197.954111706977, -12.3846473449873, -3.20122216912466, 
    -197.954111706977, 125.191565576444), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289537265198268, -0.156257950447396
    ), logphi = c(0.558473649562181, -1.58881463236832)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_198 = structure(list(
    par = c(-0.358527303096491, -0.031243355736115, 0.525733868653082, 
    -1.62202271310253), value = 28.5704287233947, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.4815485798501, -3.84431842270772, 
    98.8506684276302, -10.6902479108939, -3.84431842270772, 14.7527370009115, 
    -15.7277463213035, -4.84659214450289, 98.8506684276302, -15.7277463213035, 
    1906.48802915216, -178.433935583922, -10.6902479108939, -4.84659214450289, 
    -178.433935583922, 123.661576323819), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358527303096491, -0.031243355736115
    ), logphi = c(0.525733868653082, -1.62202271310253)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_199 = structure(list(
    par = c(-0.372562829753382, 0.111440879040621, 0.470700800984238, 
    -1.70470562537687), value = 24.5533078857886, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.3352794382528, -1.5778926494292, 
    105.005957162341, -5.815052390723, -1.5778926494292, 16.6581691045664, 
    -3.8697205617666, -6.30076852958794, 105.005957162341, -3.8697205617666, 
    2254.25694371406, -142.203979541122, -5.815052390723, -6.30076852958794, 
    -142.203979541122, 122.536226481174), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372562829753382, 0.111440879040621
    ), logphi = c(0.470700800984238, -1.70470562537687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_200 = structure(list(
    par = c(-0.0756796885118661, 0.304920079475286, 0.471732191282846, 
    -1.54769898678731), value = 22.6721907030431, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.5389071617255, 1.25214927315653, 
    81.9259992841381, -0.0790511602843935, 1.25214927315653, 
    28.8964029646621, -1.56376002546921, -5.14520456196266, 81.9259992841381, 
    -1.56376002546921, 1498.76706198082, -77.2555914783091, -0.0790511602843935, 
    -5.14520456196266, -77.2555914783091, 91.5348434862295), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0756796885118661, 0.304920079475286
    ), logphi = c(0.471732191282846, -1.54769898678731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_1 = structure(list(
    par = c(-0.361360126753182, -0.252787561987504, 0.508031130579718, 
    -1.56637189648828), value = 53.7607238296461, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.3676513405554, -4.64770827868222, 
    122.442783798249, -12.5538130024694, -4.64770827868222, 14.3374538073004, 
    -17.582268908356, -5.15390899646917, 122.442783798249, -17.582268908356, 
    2211.88978959219, -186.341889955699, -12.5538130024694, -5.15390899646917, 
    -186.341889955699, 145.016511051921), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361360126753182, -0.252787561987504
    ), logphi = c(0.508031130579718, -1.56637189648828)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_2 = structure(list(
    par = c(-0.151688535500669, 0.157639412480705, 0.489294948750019, 
    -1.61262533475637), value = 38.6174414059309, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.8276611896154, -3.0934355628176, 
    122.459049990198, -4.68808564768608, -3.0934355628176, 27.5671348575202, 
    -8.45892049028407, -7.15245419868893, 122.459049990198, -8.45892049028407, 
    2414.07016366679, -154.723006255075, -4.68808564768608, -7.15245419868893, 
    -154.723006255075, 144.792865022225), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.151688535500669, 0.157639412480705
    ), logphi = c(0.489294948750019, -1.61262533475637)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_3 = structure(list(
    par = c(-0.4468662101208, 0.308045424713827, 0.469024891236371, 
    -1.52710861785602), value = 21.0925667671909, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.9453553802884, 8.16238942924485, 
    118.642296490279, -6.10643836385094, 8.16238942924485, 38.7163876176544, 
    -0.211241450998045, -9.33341621855988, 118.642296490279, 
    -0.211241450998045, 1824.2636232273, -130.252181523183, -6.10643836385094, 
    -9.33341621855988, -130.252181523183, 114.966474511036), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4468662101208, 0.308045424713827
    ), logphi = c(0.469024891236371, -1.52710861785602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_4 = structure(list(
    par = c(-0.108516036066003, -0.0375532207834052, 0.47315398452689, 
    -1.59619331067546), value = 47.7966490285213, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.1317769941545, -5.73325498365307, 
    116.197650937622, -2.95689019580436, -5.73325498365307, 19.0385044760433, 
    -8.79563649291981, -5.80381306747313, 116.197650937622, -8.79563649291981, 
    2331.17751397494, -115.251487021517, -2.95689019580436, -5.80381306747313, 
    -115.251487021517, 137.252678815258), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.108516036066003, -0.0375532207834052
    ), logphi = c(0.47315398452689, -1.59619331067546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_5 = structure(list(
    par = c(-0.216648776315826, -0.391545620939221, 0.470545447986537, 
    -1.76504118043897), value = 43.2479901797869, counts = structure(c(341L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.3710369561786, -6.85411500178645, 
    135.796309805869, -7.17997473920207, -6.85411500178645, 10.6813615978751, 
    -12.231933080642, -4.62553350644157, 135.796309805869, -12.231933080642, 
    3622.67634101165, -176.170571495327, -7.17997473920207, -4.62553350644157, 
    -176.170571495327, 182.267505810074), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216648776315826, -0.391545620939221
    ), logphi = c(0.470545447986537, -1.76504118043897)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_6 = structure(list(
    par = c(-0.492808564881025, -0.010754146384615, 0.522131044865762, 
    -1.47799127746813), value = 43.7601298345932, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.8303269630942, -0.507583933995193, 
    117.201977182901, -15.4290905260979, -0.507583933995193, 
    23.5824738989976, -17.7001823189471, -6.58192306524086, 117.201977182901, 
    -17.7001823189471, 1702.54429918515, -191.440069885473, -15.4290905260979, 
    -6.58192306524086, -191.440069885473, 126.26212560285), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.492808564881025, -0.010754146384615
    ), logphi = c(0.522131044865762, -1.47799127746813)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_7 = structure(list(
    par = c(-0.283857651720777, -0.252385200310977, 0.510389748632837, 
    -1.69705423064293), value = 44.920096242927, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7307384249787, -7.22281099463373, 
    134.44656834416, -11.8204155636903, -7.22281099463373, 12.9881294217427, 
    -19.6044584956923, -5.11691549309745, 134.44656834416, -19.6044584956923, 
    3106.06135305846, -224.80501114952, -11.8204155636903, -5.11691549309745, 
    -224.80501114952, 179.247584682685), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283857651720777, -0.252385200310977
    ), logphi = c(0.510389748632837, -1.69705423064293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_8 = structure(list(
    par = c(-0.17031612012729, -0.0287050655933022, 0.487133654155847, 
    -1.48473309508263), value = 50.2484041187944, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.0514792868646, -3.18264909360266, 
    107.229613165671, -4.98667405324227, -3.18264909360266, 22.236653917318, 
    -10.9301133548456, -5.73527258396211, 107.229613165671, -10.9301133548456, 
    1722.69050950469, -109.657074343517, -4.98667405324227, -5.73527258396211, 
    -109.657074343517, 112.214291222656), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17031612012729, -0.0287050655933022
    ), logphi = c(0.487133654155847, -1.48473309508263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_9 = structure(list(
    par = c(-0.493623430555682, -0.0116507837118251, 0.50962153532865, 
    -1.65411451160602), value = 32.5473694027383, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.2577327789119, -3.05824665680632, 
    138.693505590481, -15.3923930090727, -3.05824665680632, 20.6162588902714, 
    -19.5035822123657, -7.55408373365185, 138.693505590481, -19.5035822123657, 
    2732.62752620163, -246.876247532057, -15.3923930090727, -7.55408373365185, 
    -246.876247532057, 170.177521413351), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.493623430555682, -0.0116507837118251
    ), logphi = c(0.50962153532865, -1.65411451160602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_10 = structure(list(
    par = c(-0.111733787447135, -0.0512426748322826, 0.462139159789497, 
    -1.70873092926658), value = 41.3345420514048, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.2508528765023, -6.066039061281, 
    126.987766018161, -2.52041165094141, -6.066039061281, 18.5551166058673, 
    -6.2287184494636, -5.83887807614758, 126.987766018161, -6.2287184494636, 
    3094.66285407467, -134.782525471167, -2.52041165094141, -5.83887807614758, 
    -134.782525471167, 162.252754027037), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.111733787447135, -0.0512426748322826
    ), logphi = c(0.462139159789497, -1.70873092926658)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_11 = structure(list(
    par = c(-0.226483205828954, 0.27668510269529, 0.49214544091498, 
    -1.61400242175754), value = 25.6914449469529, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.1355129861147, 0.165094827586643, 
    125.984352235875, -5.73869860565068, 0.165094827586643, 33.2619078315943, 
    -5.93931053582963, -8.33663396537787, 125.984352235875, -5.93931053582963, 
    2390.43262009631, -171.498254512681, -5.73869860565068, -8.33663396537787, 
    -171.498254512681, 145.169171557491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226483205828954, 0.27668510269529
    ), logphi = c(0.49214544091498, -1.61400242175754)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_12 = structure(list(
    par = c(-0.473535973684309, -0.139132340600504, 0.504489598770114, 
    -1.59531444358271), value = 41.4530783826402, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.2272928733445, -3.01442790906492, 
    129.61393116484, -14.3764919435796, -3.01442790906492, 18.0022303624128, 
    -18.2678281550608, -6.39181301220759, 129.61393116484, -18.2678281550608, 
    2361.96011710632, -209.213645042894, -14.3764919435796, -6.39181301220759, 
    -209.213645042894, 152.927207885512), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.473535973684309, -0.139132340600504
    ), logphi = c(0.504489598770114, -1.59531444358271)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_13 = structure(list(
    par = c(-0.119895401984026, -0.102546772278121, 0.473544501821758, 
    -1.68166860379934), value = 42.0474092832576, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.6601903084774, -5.81730737891917, 
    125.936339472332, -3.99963130792713, -5.81730737891917, 19.3181896985806, 
    -9.32646234019785, -5.69540615291686, 125.936339472332, -9.32646234019785, 
    2918.20860204517, -143.01768884728, -3.99963130792713, -5.69540615291686, 
    -143.01768884728, 159.966885901142), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.119895401984026, -0.102546772278121
    ), logphi = c(0.473544501821758, -1.68166860379934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_14 = structure(list(
    par = c(0.0238317385159908, -0.242551493883911, 0.513008660878291, 
    -1.57174544720532), value = 56.1170755643324, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.0889631849572, -8.61316470412987, 
    110.923835080712, -5.50147880673535, -8.61316470412987, 15.6507860680222, 
    -14.6324631682404, -4.16465305885794, 110.923835080712, -14.6324631682404, 
    2266.11892590967, -148.548479685928, -5.50147880673535, -4.16465305885794, 
    -148.548479685928, 143.083271904487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0238317385159908, -0.242551493883911
    ), logphi = c(0.513008660878291, -1.57174544720532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_15 = structure(list(
    par = c(-0.152943817604034, -0.193858874133713, 0.502458433432419, 
    -1.50382730892574), value = 61.6822437869986, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.0864153411036, -6.06070328501573, 
    109.489445598854, -7.20493302530656, -6.06070328501573, 15.4029034327152, 
    -13.8584186348822, -4.8027961359054, 109.489445598854, -13.8584186348822, 
    1857.44610169536, -133.475644084058, -7.20493302530656, -4.8027961359054, 
    -133.475644084058, 122.823176978315), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.152943817604034, -0.193858874133713
    ), logphi = c(0.502458433432419, -1.50382730892574)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_16 = structure(list(
    par = c(-0.368662271463469, -0.0873008450935429, 0.502757795964043, 
    -1.44454145742481), value = 54.0662113003882, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.5175443648607, -0.949976517006235, 
    108.873949683286, -10.4419340907214, -0.949976517006235, 
    21.7549522503191, -13.8877427602324, -5.82014525019048, 108.873949683286, 
    -13.8877427602324, 1541.60399420356, -137.082920785403, -10.4419340907214, 
    -5.82014525019048, -137.082920785403, 108.432191391117), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368662271463469, -0.0873008450935429
    ), logphi = c(0.502757795964043, -1.44454145742481)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_17 = structure(list(
    par = c(-0.513386747846, 0.00284270693545519, 0.546737095987515, 
    -1.54299179115702), value = 48.3581548490249, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.8194787208392, -3.21938327552118, 
    126.001075207327, -19.4651575560201, -3.21938327552118, 21.4306557033694, 
    -24.8077520428325, -6.20734668821399, 126.001075207327, -24.8077520428325, 
    2070.95064321372, -260.733768453925, -19.4651575560201, -6.20734668821399, 
    -260.733768453925, 155.971962294998), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.513386747846, 0.00284270693545519
    ), logphi = c(0.546737095987515, -1.54299179115702)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_18 = structure(list(
    par = c(-0.544592526949223, -0.116225385261084, 0.538884565151721, 
    -1.65161477308447), value = 40.8689424309873, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.7897073328672, -5.2652782756013, 
    136.305946824677, -19.7796359522329, -5.2652782756013, 16.3610028227623, 
    -29.1232332134683, -5.61776255203483, 136.305946824677, -29.1232332134683, 
    2788.03418809126, -299.031472165368, -19.7796359522329, -5.61776255203483, 
    -299.031472165368, 184.703090178928), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.544592526949223, -0.116225385261084
    ), logphi = c(0.538884565151721, -1.65161477308447)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_19 = structure(list(
    par = c(-0.335277161113841, 0.216401464395378, 0.51116859435015, 
    -1.4890153334677), value = 45.1033518039406, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.8542826524521, 0.59873868352156, 
    115.46719206379, -9.95823781302363, 0.59873868352156, 30.6441659176926, 
    -11.4408488993689, -7.90056289901031, 115.46719206379, -11.4408488993689, 
    1713.7072243596, -166.324382258054, -9.95823781302363, -7.90056289901031, 
    -166.324382258054, 120.652090178197), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335277161113841, 0.216401464395378
    ), logphi = c(0.51116859435015, -1.4890153334677)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_20 = structure(list(
    par = c(-0.1974349148219, -0.304910406575814, 0.505433097004125, 
    -1.60711975552209), value = 55.8485689402297, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.9426886474954, -6.52582108706667, 
    121.785851987966, -9.31350064981018, -6.52582108706667, 13.3756836309118, 
    -16.1222692334206, -4.60154698966875, 121.785851987966, -16.1222692334206, 
    2475.6025007111, -173.974743581162, -9.31350064981018, -4.60154698966875, 
    -173.974743581162, 153.211285811139), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.1974349148219, -0.304910406575814
    ), logphi = c(0.505433097004125, -1.60711975552209)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_21 = structure(list(
    par = c(-0.222545621413197, -0.355522910497084, 0.50160060053702, 
    -1.57555808287262), value = 55.8839075769145, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.0478208491064, -6.1667318611569, 
    118.453203089786, -9.34082779924239, -6.1667318611569, 11.97387495111, 
    -15.370628918987, -4.39389738104978, 118.453203089786, -15.370628918987, 
    2278.81371268523, -160.234265585757, -9.34082779924239, -4.39389738104978, 
    -160.234265585757, 143.960846699542), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222545621413197, -0.355522910497084
    ), logphi = c(0.50160060053702, -1.57555808287262)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_22 = structure(list(
    par = c(-0.00905872038029808, 0.223587796555917, 0.491366115042139, 
    -1.64848896070779), value = 35.0125794583086, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.0029693510513, -5.57926540878384, 
    120.314261675247, -1.96475471359037, -5.57926540878384, 29.3055529656527, 
    -7.16252923460559, -6.73588636601608, 120.314261675247, -7.16252923460559, 
    2660.52806039241, -152.064461337531, -1.96475471359037, -6.73588636601608, 
    -152.064461337531, 153.347435304596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00905872038029808, 0.223587796555917
    ), logphi = c(0.491366115042139, -1.64848896070779)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_23 = structure(list(
    par = c(-0.191745745256046, 0.1318986358397, 0.488475940534299, 
    -1.57780112077384), value = 38.6176738690723, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.2321326156053, -2.62308442877668, 
    119.72039456154, -5.33569024074865, -2.62308442877668, 26.4633583881846, 
    -9.01987769807988, -7.10599179498672, 119.72039456154, -9.01987769807988, 
    2199.45509457631, -146.212391074485, -5.33569024074865, -7.10599179498672, 
    -146.212391074485, 135.855006659469), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191745745256046, 0.1318986358397
    ), logphi = c(0.488475940534299, -1.57780112077384)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_24 = structure(list(
    par = c(-0.0378064737477672, 0.07468200131412, 0.480287613927316, 
    -1.71775607099275), value = 39.3222052210284, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.5605398362741, -7.28798837812406, 
    127.315868573064, -2.38466382640468, -7.28798837812406, 22.2700184870916, 
    -7.24663868467701, -6.2039202806119, 127.315868573064, -7.24663868467701, 
    3177.55722361923, -156.112771840355, -2.38466382640468, -6.2039202806119, 
    -156.112771840355, 168.601059730378), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0378064737477672, 0.07468200131412
    ), logphi = c(0.480287613927316, -1.71775607099275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_25 = structure(list(
    par = c(-0.598877685168547, -0.197059860913718, 0.526820990858056, 
    -1.40227916801672), value = 55.6897071966317, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.9498015999694, -1.23293156484294, 
    107.683158578453, -17.5018189914056, -1.23293156484294, 15.8992602781183, 
    -18.3840722201012, -4.92540464946956, 107.683158578453, -18.3840722201012, 
    1388.25378381746, -175.020308719631, -17.5018189914056, -4.92540464946956, 
    -175.020308719631, 110.798507511944), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.598877685168547, -0.197059860913718
    ), logphi = c(0.526820990858056, -1.40227916801672)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_26 = structure(list(
    par = c(-0.301610125304982, -0.0935463795109847, 0.48202796737607, 
    -1.56201206106757), value = 47.9095208760703, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.5137075736714, -2.84001472827811, 
    120.194196203016, -7.69376347697914, -2.84001472827811, 19.658392808708, 
    -11.6273709043213, -6.27304247746707, 120.194196203016, -11.6273709043213, 
    2126.59288239969, -139.481568753652, -7.69376347697914, -6.27304247746707, 
    -139.481568753652, 132.272158559488), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301610125304982, -0.0935463795109847
    ), logphi = c(0.48202796737607, -1.56201206106757)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_27 = structure(list(
    par = c(-0.445260447292066, -0.371136124741474, 0.506607552885049, 
    -1.67301672940619), value = 45.9275112693545, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.1376314475546, -5.64511025125114, 
    133.840111772088, -14.9197798471334, -5.64511025125114, 11.0087754965349, 
    -21.1051124612283, -4.69990844109702, 133.840111772088, -21.1051124612283, 
    2946.02829833224, -236.397975364788, -14.9197798471334, -4.69990844109702, 
    -236.397975364788, 176.785907893162), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.445260447292066, -0.371136124741474
    ), logphi = c(0.506607552885049, -1.67301672940619)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_28 = structure(list(
    par = c(-0.288488262519152, 0.357998445594509, 0.456165816163391, 
    -1.52262716259397), value = 27.0123752750708, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.3312311338113, 9.98885380365522, 
    110.380850735226, -1.23664238227406, 9.98885380365522, 47.6890227956162, 
    2.31269639527909, -8.01546617168469, 110.380850735226, 2.31269639527909, 
    1800.10554151, -94.8818934318751, -1.23664238227406, -8.01546617168469, 
    -94.8818934318751, 108.924323058091), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288488262519152, 0.357998445594509
    ), logphi = c(0.456165816163391, -1.52262716259397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_29 = structure(list(
    par = c(-0.237532769528336, 0.28085191984795, 0.478298893924705, 
    -1.54922465372033), value = 40.4343058833726, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.7275998567333, 1.75421729942116, 
    116.145680671309, -3.83034584316988, 1.75421729942116, 32.5738060027447, 
    -3.75660536633404, -7.9511245436592, 116.145680671309, -3.75660536633404, 
    1990.34496191075, -129.75312334973, -3.83034584316988, -7.9511245436592, 
    -129.75312334973, 123.650320906776), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237532769528336, 0.28085191984795
    ), logphi = c(0.478298893924705, -1.54922465372033)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_30 = structure(list(
    par = c(-0.303410678993954, -0.231827998384692, 0.502475146083124, 
    -1.7095887788799), value = 44.2129684744388, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.3641078245728, -6.44033518959475, 
    136.541893780873, -11.4325864375431, -6.44033518959475, 14.2626162240589, 
    -18.418040784951, -5.44611461616995, 136.541893780873, -18.418040784951, 
    3187.33313324593, -221.306567394386, -11.4325864375431, -5.44611461616995, 
    -221.306567394386, 179.844227391257), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303410678993954, -0.231827998384692
    ), logphi = c(0.502475146083124, -1.7095887788799)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_31 = structure(list(
    par = c(-0.394839774002251, 0.180715814154732, 0.487945725204735, 
    -1.56341128902978), value = 35.334052241327, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.1005027321926, 1.78302934727981, 
    124.755211617256, -8.88077795480058, 1.78302934727981, 30.2725765148892, 
    -7.98822185288373, -8.5662857376434, 124.755211617256, -7.98822185288373, 
    2081.63900964209, -164.948654923336, -8.88077795480058, -8.5662857376434, 
    -164.948654923336, 132.821489236434), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394839774002251, 0.180715814154732
    ), logphi = c(0.487945725204735, -1.56341128902978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_32 = structure(list(
    par = c(-0.128900948890888, -0.258099105490666, 0.477992387123041, 
    -1.61195504590618), value = 55.3745728758388, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.7537834414413, -6.10695858327404, 
    118.348041013405, -4.87305231189339, -6.10695858327404, 14.8912992568029, 
    -11.3913711334845, -4.88032226986235, 118.348041013405, -11.3913711334845, 
    2468.65251492068, -125.431952863408, -4.87305231189339, -4.88032226986235, 
    -125.431952863408, 144.859055236424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.128900948890888, -0.258099105490666
    ), logphi = c(0.477992387123041, -1.61195504590618)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_33 = structure(list(
    par = c(-0.0671794956691592, -0.121065513219659, 0.468558164377768, 
    -1.54613773302729), value = 55.9798326049822, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.5509988595164, -5.69134015471207, 
    108.047486321539, -1.79780491027515, -5.69134015471207, 18.076571475234, 
    -9.02788455370285, -5.11209248887923, 108.047486321539, -9.02788455370285, 
    2047.31234788369, -87.1854129300687, -1.79780491027515, -5.11209248887923, 
    -87.1854129300687, 123.539580190624), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0671794956691592, -0.121065513219659
    ), logphi = c(0.468558164377768, -1.54613773302729)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_34 = structure(list(
    par = c(-0.362133849747578, 0.233171339015699, 0.480272484978861, 
    -1.52078742937395), value = 35.2660561121467, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.3106058107983, 3.77832550135793, 
    117.131709684415, -6.51780421456749, 3.77832550135793, 33.2299193210872, 
    -5.24775187749071, -8.39593014845263, 117.131709684415, -5.24775187749071, 
    1832.8877008198, -134.949831336328, -6.51780421456749, -8.39593014845263, 
    -134.949831336328, 117.865938603856), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362133849747578, 0.233171339015699
    ), logphi = c(0.480272484978861, -1.52078742937395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_35 = structure(list(
    par = c(-0.0986271934001351, -0.0513323886404003, 0.493413544333947, 
    -1.58556576356222), value = 47.2834137279601, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.1847663390912, -5.86185455375698, 
    116.984917227114, -5.07285751982778, -5.86185455375698, 20.5959207342232, 
    -12.1167065465499, -5.6790650972971, 116.984917227114, -12.1167065465499, 
    2294.18830449823, -141.237954460749, -5.07285751982778, -5.6790650972971, 
    -141.237954460749, 140.696497991755), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0986271934001351, -0.0513323886404003
    ), logphi = c(0.493413544333947, -1.58556576356222)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_36 = structure(list(
    par = c(-0.283898347134736, 0.255700011087858, 0.509533041917607, 
    -1.59325492024202), value = 33.339294483817, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.020899243947, -0.728150849838016, 
    127.558031769226, -9.17085823104458, -0.728150849838016, 
    31.3492942485283, -10.6226145657473, -8.54854894605239, 127.558031769226, 
    -10.6226145657473, 2279.09230095236, -197.329652143807, -9.17085823104458, 
    -8.54854894605239, -197.329652143807, 146.77499569693), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283898347134736, 0.255700011087858
    ), logphi = c(0.509533041917607, -1.59325492024202)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_37 = structure(list(
    par = c(-0.237775569903093, -0.271898804319341, 0.487179444166961, 
    -1.71376925440493), value = 42.4244657522268, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.0625416451043, -5.97649713363069, 
    133.895459294209, -8.64545238954406, -5.97649713363069, 14.7741503813137, 
    -14.6385156423179, -5.2212476564506, 133.895459294209, -14.6385156423179, 
    3205.54662269323, -188.473709128445, -8.64545238954406, -5.2212476564506, 
    -188.473709128445, 175.0275887904), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237775569903093, -0.271898804319341
    ), logphi = c(0.487179444166961, -1.71376925440493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_38 = structure(list(
    par = c(-0.380172013886755, -0.170529239169836, 0.473635032284163, 
    -1.58944783344967), value = 47.7898401840999, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.7493307289053, -2.97327894038801, 
    124.784650340715, -8.79915998108771, -2.97327894038801, 16.2947781880973, 
    -11.6634927458392, -6.26176285400959, 124.784650340715, -11.6634927458392, 
    2283.7534732929, -144.791676986777, -8.79915998108771, -6.26176285400959, 
    -144.791676986777, 137.942466789553), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.380172013886755, -0.170529239169836
    ), logphi = c(0.473635032284163, -1.58944783344967)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_39 = structure(list(
    par = c(-0.203820254697851, -0.227106559919644, 0.507145060906972, 
    -1.60611216291368), value = 52.9531278594378, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.6825237029365, -6.72475290031116, 
    122.792116604487, -9.42429101069564, -6.72475290031116, 14.1629995269454, 
    -16.3400111770073, -5.01600293922877, 122.792116604487, -16.3400111770073, 
    2458.68181505848, -178.505420279862, -9.42429101069564, -5.01600293922877, 
    -178.505420279862, 152.972001913554), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203820254697851, -0.227106559919644
    ), logphi = c(0.507145060906972, -1.60611216291368)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_40 = structure(list(
    par = c(-0.185762213929199, -0.0166347408300588, 0.513386480500209, 
    -1.52560473087951), value = 49.6192867895438, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.0638441819397, -4.4932611906745, 
    115.028823353569, -8.66341176930518, -4.4932611906745, 22.7863867205969, 
    -15.005891107478, -5.84112975410278, 115.028823353569, -15.005891107478, 
    1955.99288806214, -163.1473800634, -8.66341176930518, -5.84112975410278, 
    -163.1473800634, 131.335712252323), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.185762213929199, -0.0166347408300588
    ), logphi = c(0.513386480500209, -1.52560473087951)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_41 = structure(list(
    par = c(-0.589424222502131, -0.116804164927793, 0.501940090920345, 
    -1.63118821626303), value = 31.5287809358007, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.2156029963029, -1.7399581615507, 
    136.325765360823, -16.7245857074505, -1.7399581615507, 20.0751250982734, 
    -19.952669822132, -7.04557267461325, 136.325765360823, -19.952669822132, 
    2587.36585130315, -238.525888907049, -16.7245857074505, -7.04557267461325, 
    -238.525888907049, 164.332024407798), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.589424222502131, -0.116804164927793
    ), logphi = c(0.501940090920345, -1.63118821626303)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_42 = structure(list(
    par = c(-0.174553244041983, 0.293113963014908, 0.522251608380724, 
    -1.61781461724805), value = 31.2788894531018, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.7125464217, -1.65640067617545, 
    128.283819513797, -8.37703363387732, -1.65640067617545, 37.2541020263739, 
    -12.4273111374862, -8.20435072057535, 128.283819513797, -12.4273111374862, 
    2445.88547649283, -211.262140610735, -8.37703363387732, -8.20435072057535, 
    -211.262140610735, 155.49340840959), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174553244041983, 0.293113963014908
    ), logphi = c(0.522251608380724, -1.61781461724805)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_43 = structure(list(
    par = c(-0.138721336335234, -0.291824223613073, 0.468088700840692, 
    -1.74584995277258), value = 38.9407108876267, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.3458795171905, -6.59675718317487, 
    131.407719461407, -4.94758944924456, -6.59675718317487, 14.2831452585312, 
    -10.2481870527527, -4.86539139377129, 131.407719461407, -10.2481870527527, 
    3443.01975460759, -154.89806363167, -4.94758944924456, -4.86539139377129, 
    -154.89806363167, 175.562514860061), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138721336335234, -0.291824223613073
    ), logphi = c(0.468088700840692, -1.74584995277258)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_44 = structure(list(
    par = c(-0.3051959396001, 0.109262091180219, 0.507521889321474, 
    -1.62331223659532), value = 44.9944204122522, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.612633468423, -3.59834993268748, 
    131.195294567732, -10.3755819136353, -3.59834993268748, 23.9049897245991, 
    -14.0373616748235, -7.71069690674864, 131.195294567732, -14.0373616748235, 
    2498.44393623277, -205.196087251558, -10.3755819136353, -7.71069690674864, 
    -205.196087251558, 155.909541017962), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3051959396001, 0.109262091180219
    ), logphi = c(0.507521889321474, -1.62331223659532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_45 = structure(list(
    par = c(-0.537126740013297, -0.0338923913616184, 0.486701082805299, 
    -1.59778454883109), value = 38.4382064477121, counts = structure(c(319L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.4787156079515, -0.417462780788469, 
    131.870537600776, -13.1588992822174, -0.417462780788469, 
    21.8657709609715, -13.6443109415296, -7.82174935753943, 131.870537600776, 
    -13.6443109415296, 2321.72314791335, -191.917694531085, -13.1588992822174, 
    -7.82174935753943, -191.917694531085, 145.98196710125), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.537126740013297, -0.0338923913616184
    ), logphi = c(0.486701082805299, -1.59778454883109)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_46 = structure(list(
    par = c(-0.611208788196848, -0.128743651980531, 0.529053152310118, 
    -1.55767556863134), value = 35.967715745717, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.4245427006723, -1.93792857494657, 
    127.512631831195, -19.736482963495, -1.93792857494657, 19.4578555028357, 
    -24.1130778437793, -5.92571090685112, 127.512631831195, -24.1130778437793, 
    2166.20959504965, -251.675130966689, -19.736482963495, -5.92571090685112, 
    -251.675130966689, 156.466233452335), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.611208788196848, -0.128743651980531
    ), logphi = c(0.529053152310118, -1.55767556863134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_47 = structure(list(
    par = c(-0.294170083330029, -0.381209513756335, 0.518609287152883, 
    -1.53997858955185), value = 66.0292089249332, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.4928944176581, -5.86898251953016, 
    116.57958504685, -12.3172447281661, -5.86898251953016, 10.6552595973142, 
    -17.7087237389628, -4.15411964915791, 116.57958504685, -17.7087237389628, 
    2089.11938181089, -182.997630004067, -12.3172447281661, -4.15411964915791, 
    -182.997630004067, 140.94016033539), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294170083330029, -0.381209513756335
    ), logphi = c(0.518609287152883, -1.53997858955185)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_48 = structure(list(
    par = c(-0.308263516368577, 0.209561357898701, 0.49169704694603, 
    -1.63638500621806), value = 30.1954294013778, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.0215665270647, -0.0382911355956139, 
    131.859605607687, -7.93054436343255, -0.0382911355956139, 
    30.8985834713837, -7.70949950279487, -8.56749377842192, 131.859605607687, 
    -7.70949950279487, 2539.1211113952, -188.18890335659, -7.93054436343255, 
    -8.56749377842192, -188.18890335659, 152.308299457005), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308263516368577, 0.209561357898701
    ), logphi = c(0.49169704694603, -1.63638500621806)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_49 = structure(list(
    par = c(-0.207771815458883, 0.187398012286954, 0.488657572179509, 
    -1.59235417086043), value = 39.8336657821957, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.6498838572046, -1.82758523870064, 
    122.167067832635, -5.41819072807925, -1.82758523870064, 28.2958828101698, 
    -7.80197150795914, -7.57677088802922, 122.167067832635, -7.80197150795914, 
    2274.07771679999, -154.60177529647, -5.41819072807925, -7.57677088802922, 
    -154.60177529647, 139.277422139372), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207771815458883, 0.187398012286954
    ), logphi = c(0.488657572179509, -1.59235417086043)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_50 = structure(list(
    par = c(-0.282153487322923, 0.166106176000839, 0.497955516839411, 
    -1.61900291751025), value = 41.7650904259255, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.1150527936528, -2.41546276491533, 
    129.326196528723, -8.35613414551517, -2.41546276491533, 26.2468894334233, 
    -10.3596321743282, -8.0362308398918, 129.326196528723, -10.3596321743282, 
    2447.44227942562, -186.966983089398, -8.35613414551517, -8.0362308398918, 
    -186.966983089398, 150.362908087232), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282153487322923, 0.166106176000839
    ), logphi = c(0.497955516839411, -1.61900291751025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_51 = structure(list(
    par = c(-0.211540863979358, -0.000110559961071413, 0.473624721477726, 
    -1.74236732478524), value = 26.3538861092512, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.3010375837483, -4.52872166967211, 
    137.410548208372, -5.63248587059917, -4.52872166967211, 21.8098249780141, 
    -7.84976239120994, -6.76347372463582, 137.410548208372, -7.84976239120994, 
    3354.92647090607, -179.888432683128, -5.63248587059917, -6.76347372463582, 
    -179.888432683128, 173.673647064554), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211540863979358, -0.000110559961071413
    ), logphi = c(0.473624721477726, -1.74236732478524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_52 = structure(list(
    par = c(-0.467797419896505, -0.16710963948798, 0.535293077824748, 
    -1.70543274953994), value = 42.8550220393187, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.0959016639507, -6.61396956935789, 
    139.429656233148, -17.8450665817564, -6.61396956935789, 14.6567230228101, 
    -28.9605428509532, -5.24238553367695, 139.429656233148, -28.9605428509532, 
    3193.26398585318, -298.752089662457, -17.8450665817564, -5.24238553367695, 
    -298.752089662457, 193.958298790875), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467797419896505, -0.16710963948798
    ), logphi = c(0.535293077824748, -1.70543274953994)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_53 = structure(list(
    par = c(-0.183924938438664, -0.231064918894096, 0.483568088377788, 
    -1.54455696597275), value = 55.8199848982611, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.4119007663824, -5.8689441555515, 
    113.556286244432, -5.99236447218487, -5.8689441555515, 13.8260592876804, 
    -12.0878500950994, -5.01646324568839, 113.556286244432, -12.0878500950994, 
    2059.60536549732, -119.988277239358, -5.99236447218487, -5.01646324568839, 
    -119.988277239358, 128.454582384308), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183924938438664, -0.231064918894096
    ), logphi = c(0.483568088377788, -1.54455696597275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_54 = structure(list(
    par = c(-0.260665783505016, -0.119312621243303, 0.476030237491053, 
    -1.58216759899611), value = 48.9585911415869, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.4642733064649, -3.68704668929354, 
    120.570618756588, -6.44407863781282, -3.68704668929354, 18.2228472684898, 
    -10.7661719095375, -6.03810411359262, 120.570618756588, -10.7661719095375, 
    2245.01270711386, -131.787634074065, -6.44407863781282, -6.03810411359262, 
    -131.787634074065, 135.616957020801), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260665783505016, -0.119312621243303
    ), logphi = c(0.476030237491053, -1.58216759899611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_55 = structure(list(
    par = c(-0.21416982667404, -0.0235777271674777, 0.492917297485213, 
    -1.58727807620734), value = 44.9341945594828, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.6227621907036, -4.62227183639641, 
    121.671611154284, -7.15764422398735, -4.62227183639641, 20.1291365868883, 
    -12.3546613313152, -6.34348250017069, 121.671611154284, -12.3546613313152, 
    2287.78098259497, -155.723753765713, -7.15764422398735, -6.34348250017069, 
    -155.723753765713, 141.556489786865), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21416982667404, -0.0235777271674777
    ), logphi = c(0.492917297485213, -1.58727807620734)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_56 = structure(list(
    par = c(-0.245342739637285, 0.0791135298056192, 0.490133255913936, 
    -1.58645029566554), value = 46.9398279960924, counts = structure(c(89L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.3207425372525, -2.98284616029321, 
    122.847769299383, -6.93129198836573, -2.98284616029321, 23.8281100983784, 
    -10.4221130161619, -7.12762818722013, 122.847769299383, -10.4221130161619, 
    2256.93106871816, -157.128046323507, -6.93129198836573, -7.12762818722013, 
    -157.128046323507, 139.606212536947), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245342739637285, 0.0791135298056192
    ), logphi = c(0.490133255913936, -1.58645029566554)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_57 = structure(list(
    par = c(-0.186139943353616, -0.201930397676226, 0.475169817727243, 
    -1.72325213738345), value = 44.0965831705031, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.5789096553476, -6.6859518117468, 
    132.784855638945, -6.14653429487078, -6.6859518117468, 14.5510361377887, 
    -11.2032944006302, -5.49837655494656, 132.784855638945, -11.2032944006302, 
    3250.08482821687, -167.217673867626, -6.14653429487078, -5.49837655494656, 
    -167.217673867626, 172.000514893966), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186139943353616, -0.201930397676226
    ), logphi = c(0.475169817727243, -1.72325213738345)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_58 = structure(list(
    par = c(-0.304469886945516, 0.281355436933232, 0.554571008612888, 
    -1.43855234070568), value = 45.0548375138875, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.5100752056271, 0.115649580578747, 
    111.108122435866, -14.4128764123508, 0.115649580578747, 35.6711618856309, 
    -16.9997853163295, -7.12116255208173, 111.108122435866, -16.9997853163295, 
    1500.85088740504, -206.666918559861, -14.4128764123508, -7.12116255208173, 
    -206.666918559861, 123.149513655108), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304469886945516, 0.281355436933232
    ), logphi = c(0.554571008612888, -1.43855234070568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_59 = structure(list(
    par = c(-0.311116427296558, 0.315901443475827, 0.488947569321749, 
    -1.65581379679467), value = 16.2841876630741, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.4928176952104, 2.73938651496053, 
    134.068823573585, -6.95886869195306, 2.73938651496053, 37.2021921419829, 
    -3.10274135006949, -9.35411927915908, 134.068823573585, -3.10274135006949, 
    2638.08116840813, -193.674759583651, -6.95886869195306, -9.35411927915908, 
    -193.674759583651, 154.756878380624), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311116427296558, 0.315901443475827
    ), logphi = c(0.488947569321749, -1.65581379679467)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_60 = structure(list(
    par = c(-0.194332831278374, -0.12632164752873, 0.48441991127958, 
    -1.60369511517495), value = 48.5982381261093, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.2190755581373, -5.22344692654997, 
    121.46119325962, -6.3116762518689, -5.22344692654997, 17.5837864464512, 
    -11.9172288748359, -5.75575458849897, 121.46119325962, -11.9172288748359, 
    2398.19158584531, -143.620528188393, -6.3116762518689, -5.75575458849897, 
    -143.620528188393, 143.906728716559), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.194332831278374, -0.12632164752873
    ), logphi = c(0.48441991127958, -1.60369511517495)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_61 = structure(list(
    par = c(-0.408957933103398, -0.326790993642983, 0.509317216819518, 
    -1.54015642635615), value = 50.5642530096771, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.8299585585611, -4.19616121938304, 
    119.667825382308, -13.5994666328187, -4.19616121938304, 13.1496979332013, 
    -17.8349268171729, -4.7066281592123, 119.667825382308, -17.8349268171729, 
    2070.86216901509, -183.446173762647, -13.5994666328187, -4.7066281592123, 
    -183.446173762647, 139.470059851377), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.408957933103398, -0.326790993642983
    ), logphi = c(0.509317216819518, -1.54015642635615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_62 = structure(list(
    par = c(-0.449153288292196, -0.105311224549219, 0.505443801122656, 
    -1.59409068987111), value = 38.5104114357765, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.279764089301, -2.25434668443825, 
    129.362422406132, -13.8684582768889, -2.25434668443825, 21.0821461354982, 
    -17.816658143488, -6.55859254550251, 129.362422406132, -17.816658143488, 
    2349.18453676158, -207.22938933293, -13.8684582768889, -6.55859254550251, 
    -207.22938933293, 152.108793646022), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449153288292196, -0.105311224549219
    ), logphi = c(0.505443801122656, -1.59409068987111)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_63 = structure(list(
    par = c(-0.246766190453318, -0.0217373863431683, 0.499282553306448, 
    -1.52675775469361), value = 48.7927182376415, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.550462749603, -3.27370884534162, 
    115.981398059795, -8.15949507870783, -3.27370884534162, 21.7612302222392, 
    -13.1664672187171, -6.2117896870717, 115.981398059795, -13.1664672187171, 
    1944.26176945051, -149.104342250794, -8.15949507870783, -6.2117896870717, 
    -149.104342250794, 127.662263656347), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.246766190453318, -0.0217373863431683
    ), logphi = c(0.499282553306448, -1.52675775469361)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_64 = structure(list(
    par = c(-0.53795056370273, -0.251886625050832, 0.486553722805635, 
    -1.77964487911512), value = 35.9471027064489, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.0255018982135, -5.28479576900054, 
    148.722994232742, -15.0574068351617, -5.28479576900054, 12.7902511231071, 
    -20.482452374182, -6.09508995275121, 148.722994232742, -20.482452374182, 
    3754.74603266213, -268.850049769398, -15.0574068351617, -6.09508995275121, 
    -268.850049769398, 195.964970108875), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.53795056370273, -0.251886625050832
    ), logphi = c(0.486553722805635, -1.77964487911512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_65 = structure(list(
    par = c(-0.198457926436039, -0.129241886027334, 0.511547705697845, 
    -1.51183246575758), value = 57.8353610758901, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4823524941098, -4.92574374177934, 
    112.892460704117, -8.99621354566449, -4.92574374177934, 18.9568275690277, 
    -15.2793747183466, -5.19737114945684, 112.892460704117, -15.2793747183466, 
    1896.50324914581, -155.55623825847, -8.99621354566449, -5.19737114945684, 
    -155.55623825847, 127.867505550938), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198457926436039, -0.129241886027334
    ), logphi = c(0.511547705697845, -1.51183246575758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_66 = structure(list(
    par = c(-0.0629200634012394, 0.275002366650111, 0.48320390823296, 
    -1.64275519491181), value = 33.1330198063741, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.1525420529708, -2.78556534816232, 
    120.748185961972, -1.67717539500956, -2.78556534816232, 32.4756731391318, 
    -4.21852253751354, -7.16770000774858, 120.748185961972, -4.21852253751354, 
    2594.27480397356, -146.668828028496, -1.67717539500956, -7.16770000774858, 
    -146.668828028496, 148.988848117426), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0629200634012394, 0.275002366650111
    ), logphi = c(0.48320390823296, -1.64275519491181)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_67 = structure(list(
    par = c(0.00483800326523721, 0.141589455960952, 0.483832731752137, 
    -1.67332745685508), value = 37.4600558266797, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.5011481353587, -6.67861908176803, 
    121.02076305176, -1.44889039610518, -6.67861908176803, 26.0196368540022, 
    -7.11173905543205, -6.25147963262407, 121.02076305176, -7.11173905543205, 
    2844.4526346707, -144.022581417325, -1.44889039610518, -6.25147963262407, 
    -144.022581417325, 158.247051396998), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00483800326523721, 0.141589455960952
    ), logphi = c(0.483832731752137, -1.67332745685508)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_68 = structure(list(
    par = c(-0.533979681042209, 0.00290015124284701, 0.488776453604756, 
    -1.67190564836713), value = 30.9004341686508, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.3938773183893, -2.04031822015338, 
    141.498935404272, -13.8556483832986, -2.04031822015338, 20.1515578517331, 
    -14.4152012460097, -8.31302761472585, 141.498935404272, -14.4152012460097, 
    2816.34505823547, -228.185397582514, -13.8556483832986, -8.31302761472585, 
    -228.185397582514, 166.593373831958), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.533979681042209, 0.00290015124284701
    ), logphi = c(0.488776453604756, -1.67190564836713)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_69 = structure(list(
    par = c(-0.207775343909169, 0.233115554612258, 0.464485011501901, 
    -1.65477149966484), value = 30.889703155568, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.2835283482791, 0.887670843496835, 
    125.79000760482, -2.50167171600424, 0.887670843496835, 31.8972073678481, 
    -0.664064721433988, -7.67540485391294, 125.79000760482, -0.664064721433988, 
    2633.43804053839, -140.07669049132, -2.50167171600424, -7.67540485391294, 
    -140.07669049132, 146.398739312659), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207775343909169, 0.233115554612258
    ), logphi = c(0.464485011501901, -1.65477149966484)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_70 = structure(list(
    par = c(-0.134508880343319, 0.125634178095976, 0.499506304326218, 
    -1.69976851391229), value = 33.0754169813586, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.6598808856279, -5.67171262311206, 
    133.117745223288, -6.04991658104126, -5.67171262311206, 25.0486066271094, 
    -10.9723042900356, -7.13676787444939, 133.117745223288, -10.9723042900356, 
    3036.93112008574, -194.119803447634, -6.04991658104126, -7.13676787444939, 
    -194.119803447634, 169.951874728014), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.134508880343319, 0.125634178095976
    ), logphi = c(0.499506304326218, -1.69976851391229)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_71 = structure(list(
    par = c(-0.366764390328066, -0.0418461786415762, 0.525119948419589, 
    -1.55635185681639), value = 45.2339854824356, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.663365569799, -3.49715381453564, 
    124.141930072597, -14.0426561658913, -3.49715381453564, 21.2201482252539, 
    -19.3588685473145, -6.21405022283028, 124.141930072597, -19.3588685473145, 
    2135.33550292411, -212.973866088539, -14.0426561658913, -6.21405022283028, 
    -212.973866088539, 147.10922543415), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.366764390328066, -0.0418461786415762
    ), logphi = c(0.525119948419589, -1.55635185681639)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_72 = structure(list(
    par = c(-0.258404941147349, 0.154450656582948, 0.491735403992401, 
    -1.75884666674672), value = 24.4277955557029, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4710344578239, -4.10350315149799, 
    144.510902293504, -7.79163264397198, -4.10350315149799, 25.9796879999996, 
    -8.76634465463155, -8.13631029572548, 144.510902293504, -8.76634465463155, 
    3472.41090074846, -222.446770988149, -7.79163264397198, -8.13631029572548, 
    -222.446770988149, 181.603901232563), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258404941147349, 0.154450656582948
    ), logphi = c(0.491735403992401, -1.75884666674672)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_73 = structure(list(
    par = c(-0.294109002499465, -0.170015186821496, 0.482633621642509, 
    -1.59210957314144), value = 46.0082459470465, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.4297983240652, -3.76677166791239, 
    123.13172795686, -8.17389850737982, -3.76677166791239, 17.2453844449194, 
    -12.6171858809698, -5.87795534379154, 123.13172795686, -12.6171858809698, 
    2321.75917215649, -148.851754639523, -8.17389850737982, -5.87795534379154, 
    -148.851754639523, 141.29408179997), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294109002499465, -0.170015186821496
    ), logphi = c(0.482633621642509, -1.59210957314144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_74 = structure(list(
    par = c(-0.447279712576284, 0.108575912131576, 0.488013968173428, 
    -1.60077105910618), value = 33.5858922711775, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.1561016046945, 0.109412775728401, 
    131.025624478198, -10.7398923736568, 0.109412775728401, 25.3316032789996, 
    -10.1343278391397, -8.53625019736626, 131.025624478198, -10.1343278391397, 
    2315.5026623769, -185.423498167303, -10.7398923736568, -8.53625019736626, 
    -185.423498167303, 144.349109604036), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.447279712576284, 0.108575912131576
    ), logphi = c(0.488013968173428, -1.60077105910618)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_75 = structure(list(
    par = c(-0.424600203927209, -0.186129704380379, 0.519431256899877, 
    -1.54219052432159), value = 52.0462385451018, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.1849575967268, -4.40067612395012, 
    121.96471109327, -14.8249809441836, -4.40067612395012, 15.2338611769665, 
    -19.4690307733225, -5.40377231672551, 121.96471109327, -19.4690307733225, 
    2072.55750191493, -204.142960130049, -14.8249809441836, -5.40377231672551, 
    -204.142960130049, 143.363112634631), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.424600203927209, -0.186129704380379
    ), logphi = c(0.519431256899877, -1.54219052432159)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_76 = structure(list(
    par = c(-0.354689811196558, -0.242161332699402, 0.509917136591092, 
    -1.61925348606564), value = 48.6341080002668, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.6574947357826, -5.54703177790827, 
    128.359952235257, -12.9412769300785, -5.54703177790827, 13.8733322732065, 
    -18.9123913258982, -5.27638794967089, 128.359952235257, -18.9123913258982, 
    2546.78669415931, -208.473684475408, -12.9412769300785, -5.27638794967089, 
    -208.473684475408, 160.252075646738), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354689811196558, -0.242161332699402
    ), logphi = c(0.509917136591092, -1.61925348606564)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_77 = structure(list(
    par = c(-0.285169621723661, -0.390038470121583, 0.490028098984308, 
    -1.66923832597266), value = 49.8328699617366, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.8254136049542, -6.35655500147436, 
    129.512565450796, -10.0054556853024, -6.35655500147436, 10.3638579318499, 
    -15.6312575860795, -4.63832919539442, 129.512565450796, -15.6312575860795, 
    2892.27006233617, -182.7556042997, -10.0054556853024, -4.63832919539442, 
    -182.7556042997, 166.53726837923), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285169621723661, -0.390038470121583
    ), logphi = c(0.490028098984308, -1.66923832597266)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_78 = structure(list(
    par = c(-0.103716254563233, -0.0536377779710753, 0.511338776348847, 
    -1.63156572786457), value = 49.3366221418356, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.9293072553116, -7.31543051202266, 
    124.019127158093, -7.38381387321851, -7.31543051202266, 19.3913383821354, 
    -15.5191207369398, -5.70118047882318, 124.019127158093, -15.5191207369398, 
    2606.32986067399, -182.428590369099, -7.38381387321851, -5.70118047882318, 
    -182.428590369099, 158.236747823892), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.103716254563233, -0.0536377779710753
    ), logphi = c(0.511338776348847, -1.63156572786457)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_79 = structure(list(
    par = c(-0.56706425708427, 0.0887962184458877, 0.504014894680155, 
    -1.70214562028247), value = 22.1342769757142, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.8393856477527, -0.736011182667085, 
    147.340954681496, -16.1887627827539, -0.736011182667085, 
    26.5022377874402, -17.7960372784725, -9.0765097429113, 147.340954681496, 
    -17.7960372784725, 3044.885807169, -272.398474018942, -16.1887627827539, 
    -9.0765097429113, -272.398474018942, 180.537122874469), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.56706425708427, 0.0887962184458877
    ), logphi = c(0.504014894680155, -1.70214562028247)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_80 = structure(list(
    par = c(-0.404438761403104, 0.0943949355609341, 0.521413094994422, 
    -1.60228801236505), value = 37.5232450623603, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.4699474928286, -3.13939835727695, 
    132.016187244233, -14.1719492097181, -3.13939835727695, 24.4616780857854, 
    -18.2126510726022, -7.75506871697473, 132.016187244233, -18.2126510726022, 
    2378.75200707904, -232.245925886332, -14.1719492097181, -7.75506871697473, 
    -232.245925886332, 157.65703146009), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404438761403104, 0.0943949355609341
    ), logphi = c(0.521413094994422, -1.60228801236505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_81 = structure(list(
    par = c(-0.389089319810832, -0.111476352563207, 0.538141244880136, 
    -1.58606448736043), value = 52.4719946692204, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9304234160478, -5.71416226158306, 
    127.204266689773, -16.3418035565854, -5.71416226158306, 16.408182094807, 
    -23.502571877998, -5.43645578776619, 127.204266689773, -23.502571877998, 
    2341.21650255403, -246.800017763782, -16.3418035565854, -5.43645578776619, 
    -246.800017763782, 161.500725074148), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389089319810832, -0.111476352563207
    ), logphi = c(0.538141244880136, -1.58606448736043)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_82 = structure(list(
    par = c(-0.298856762307585, -0.0106324072343632, 0.504646464398977, 
    -1.47891930040837), value = 46.4836653719292, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.1359939187913, -2.22890646739415, 
    111.980566625647, -9.4106055872345, -2.22890646739415, 22.2977031452132, 
    -13.6322809769496, -6.19858383199556, 111.980566625647, -13.6322809769496, 
    1698.69601297457, -146.194951931911, -9.4106055872345, -6.19858383199556, 
    -146.194951931911, 116.970104203418), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298856762307585, -0.0106324072343632
    ), logphi = c(0.504646464398977, -1.47891930040837)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_83 = structure(list(
    par = c(-0.400603288981846, -0.394737104301298, 0.515836971249488, 
    -1.67437781880541), value = 46.7110931590109, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.5058730011091, -6.43319433457634, 
    132.324616847868, -14.8992166186801, -6.43319433457634, 10.071431336911, 
    -22.0438535620815, -4.265463659614, 132.324616847868, -22.0438535620815, 
    2973.09729075579, -242.820117064113, -14.8992166186801, -4.265463659614, 
    -242.820117064113, 179.67452844303), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400603288981846, -0.394737104301298
    ), logphi = c(0.515836971249488, -1.67437781880541)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_84 = structure(list(
    par = c(-0.18684825127622, -0.0457282170740089, 0.501207841588876, 
    -1.43049780365688), value = 66.2062841631027, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.7215524231178, -4.29407208457633, 
    102.395902356278, -6.67662090592103, -4.29407208457633, 19.5420615760611, 
    -12.491015340288, -5.3507875801273, 102.395902356278, -12.491015340288, 
    1485.15077512101, -115.149736531706, -6.67662090592103, -5.3507875801273, 
    -115.149736531706, 102.58175126765), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18684825127622, -0.0457282170740089
    ), logphi = c(0.501207841588876, -1.43049780365688)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_85 = structure(list(
    par = c(0.036096615657622, 0.283060035715571, 0.452764909498954, 
    -1.63531478967251), value = 31.8771885265843, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.2464100234864, -2.77800301251574, 
    108.217520014442, 3.19915549962246, -2.77800301251574, 32.2511408814563, 
    0.446852890689797, -5.82265917525859, 108.217520014442, 0.446852890689797, 
    2530.03686044906, -86.447982697635, 3.19915549962246, -5.82265917525859, 
    -86.447982697635, 138.476008454624), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.036096615657622, 0.283060035715571
    ), logphi = c(0.452764909498954, -1.63531478967251)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_86 = structure(list(
    par = c(-0.339246538215092, 0.167489486854517, 0.495144353653166, 
    -1.73070506462206), value = 29.2405639739684, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.775839428141, -2.92917053812403, 
    144.822797597755, -9.77194778428725, -2.92917053812403, 25.9924695651392, 
    -10.0160394449489, -8.72690375963714, 144.822797597755, -10.0160394449489, 
    3236.71355836197, -231.86613490811, -9.77194778428725, -8.72690375963714, 
    -231.86613490811, 177.539909415714), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339246538215092, 0.167489486854517
    ), logphi = c(0.495144353653166, -1.73070506462206)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_87 = structure(list(
    par = c(-0.0558998208312262, 0.345113875910643, 0.508595833614022, 
    -1.56470525219302), value = 37.7406547399543, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4122098840683, -2.80987057443838, 
    115.201114986974, -3.89249532606328, -2.80987057443838, 35.1828651652397, 
    -8.33957773238581, -7.45507050758931, 115.201114986974, -8.33957773238581, 
    2120.5640168418, -161.614315311809, -3.89249532606328, -7.45507050758931, 
    -161.614315311809, 135.949333587959), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0558998208312262, 0.345113875910643
    ), logphi = c(0.508595833614022, -1.56470525219302)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_88 = structure(list(
    par = c(-0.0391030625654974, -0.162360329841019, 0.446170341008046, 
    -1.59209717956205), value = 52.3138325960849, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.3559774857749, -6.20204233925392, 
    108.315545043425, 0.596895100457573, -6.20204233925392, 16.0836641569517, 
    -6.21131966127564, -4.78274504800424, 108.315545043425, -6.21131966127564, 
    2293.22116516961, -61.7900505925917, 0.596895100457573, -4.78274504800424, 
    -61.7900505925917, 129.607341500915), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0391030625654974, -0.162360329841019
    ), logphi = c(0.446170341008046, -1.59209717956205)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_89 = structure(list(
    par = c(-0.238869555025503, -0.101943509050934, 0.518828854153721, 
    -1.56161908933063), value = 61.4899957661627, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.3782110542185, -5.50289306922025, 
    120.594730699253, -10.8756864172221, -5.50289306922025, 18.8073616467221, 
    -17.4290345817951, -5.55486837949815, 120.594730699253, -17.4290345817951, 
    2174.91064926989, -188.227483460146, -10.8756864172221, -5.55486837949815, 
    -188.227483460146, 144.330050773078), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238869555025503, -0.101943509050934
    ), logphi = c(0.518828854153721, -1.56161908933063)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_90 = structure(list(
    par = c(-0.43956833278843, 0.1950229766901, 0.501020022717928, 
    -1.54646465126706), value = 33.5302742436787, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.9973883224576, 2.15100427247705, 
    125.036065851347, -11.3005196729077, 2.15100427247705, 30.6747883609404, 
    -10.4924881654256, -8.8181648632002, 125.036065851347, -10.4924881654256, 
    1996.69429584048, -184.000215741165, -11.3005196729077, -8.8181648632002, 
    -184.000215741165, 133.735255746004), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.43956833278843, 0.1950229766901
    ), logphi = c(0.501020022717928, -1.54646465126706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_91 = structure(list(
    par = c(-0.353924639950497, -0.115795845772719, 0.489591296744056, 
    -1.79107351936329), value = 28.6767809386452, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.4698654832033, -6.01623652052297, 
    147.915639770346, -11.0868428055966, -6.01623652052297, 16.2514073434039, 
    -16.1381808414518, -6.58480589876831, 147.915639770346, -16.1381808414518, 
    3821.28126048364, -242.764475491875, -11.0868428055966, -6.58480589876831, 
    -242.764475491875, 193.159671061593), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353924639950497, -0.115795845772719
    ), logphi = c(0.489591296744056, -1.79107351936329)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_92 = structure(list(
    par = c(-0.0766538889281597, 0.103655548636826, 0.476159772164476, 
    -1.4583835307183), value = 53.1634723195734, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.7499902239067, -3.40336222848237, 
    99.5908344219032, -1.39203712912206, -3.40336222848237, 25.4662541969708, 
    -8.17617149984073, -5.79622118745959, 99.5908344219032, -8.17617149984073, 
    1581.02641785973, -80.9850124294798, -1.39203712912206, -5.79622118745959, 
    -80.9850124294798, 101.578141091352), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0766538889281597, 0.103655548636826
    ), logphi = c(0.476159772164476, -1.4583835307183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_93 = structure(list(
    par = c(-0.180276197049433, 0.100801528905048, 0.48895889796286, 
    -1.68827269372707), value = 37.8149575762456, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.9790824077311, -5.33875217634261, 
    132.388574142439, -5.89004359685674, -5.33875217634261, 22.6008095687291, 
    -9.31113564384134, -7.19648943459106, 132.388574142439, -9.31113564384134, 
    2939.00588881613, -181.47728163509, -5.89004359685674, -7.19648943459106, 
    -181.47728163509, 164.593161837701), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180276197049433, 0.100801528905048
    ), logphi = c(0.48895889796286, -1.68827269372707)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_94 = structure(list(
    par = c(-0.187176454188184, 0.0935437774662001, 0.508752084970626, 
    -1.66373474028615), value = 37.2980974021397, counts = structure(c(283L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.9008966019262, -4.96320175003007, 
    131.907583512003, -8.27392231972368, -4.96320175003007, 25.687594551016, 
    -14.0742803260707, -7.10979108209386, 131.907583512003, -14.0742803260707, 
    2787.17711568, -203.389655588637, -8.27392231972368, -7.10979108209386, 
    -203.389655588637, 165.083597392979), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.187176454188184, 0.0935437774662001
    ), logphi = c(0.508752084970626, -1.66373474028615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_95 = structure(list(
    par = c(-0.135531175159358, 0.129916533801136, 0.464821624944017, 
    -1.67916589727076), value = 27.0042774364445, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.3472683818349, -2.55884953226371, 
    125.547992347208, -2.03414279731362, -2.55884953226371, 27.7699878008519, 
    -3.42028427446905, -6.79104095269167, 125.547992347208, -3.42028427446905, 
    2839.38629332781, -136.683943939175, -2.03414279731362, -6.79104095269167, 
    -136.683943939175, 153.881571900882), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135531175159358, 0.129916533801136
    ), logphi = c(0.464821624944017, -1.67916589727076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_96 = structure(list(
    par = c(-0.105043125434308, -0.0154927726527355, 0.492731354822889, 
    -1.60478044191638), value = 45.7708494164952, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.2888401144667, -5.62811310800271, 
    119.535175572949, -5.05178354615055, -5.62811310800271, 21.9592745658304, 
    -11.7256886529304, -5.95229930500096, 119.535175572949, -11.7256886529304, 
    2406.10261209362, -147.666872010177, -5.05178354615055, -5.95229930500096, 
    -147.666872010177, 145.31773988935), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.105043125434308, -0.0154927726527355
    ), logphi = c(0.492731354822889, -1.60478044191638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_97 = structure(list(
    par = c(-0.153824097928526, -0.365649742157402, 0.480695993579571, 
    -1.64871712385239), value = 54.5000989786565, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.1160815506173, -6.85056282456742, 
    122.642988005239, -6.21377773946108, -6.85056282456742, 11.7604370259983, 
    -12.5005593041294, -4.49321701623262, 122.642988005239, -12.5005593041294, 
    2733.37824204489, -142.554724989807, -6.21377773946108, -4.49321701623262, 
    -142.554724989807, 156.427322828279), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153824097928526, -0.365649742157402
    ), logphi = c(0.480695993579571, -1.64871712385239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_98 = structure(list(
    par = c(-0.193083691660429, 0.034216698681884, 0.482648601666371, 
    -1.57861334651507), value = 47.0080792855873, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.112494718543, -3.2336560789048, 
    118.987961476691, -5.18524159875966, -3.2336560789048, 23.6798207460254, 
    -9.65525461182892, -6.55980118668964, 118.987961476691, -9.65525461182892, 
    2214.41745883055, -135.778517337037, -5.18524159875966, -6.55980118668964, 
    -135.778517337037, 135.154211989175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.193083691660429, 0.034216698681884
    ), logphi = c(0.482648601666371, -1.57861334651507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_99 = structure(list(
    par = c(-0.569269515333416, 0.0605338003484471, 0.53068266884436, 
    -1.61216988362661), value = 35.0243547174184, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.4548386373781, -2.31261997640786, 
    136.194276581847, -19.0116136309371, -2.31261997640786, 23.2915297786462, 
    -23.7500273723157, -7.77016393449514, 136.194276581847, -23.7500273723157, 
    2461.52689421741, -274.900755842467, -19.0116136309371, -7.77016393449514, 
    -274.900755842467, 169.231610193776), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.569269515333416, 0.0605338003484471
    ), logphi = c(0.53068266884436, -1.61216988362661)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_100 = structure(list(
    par = c(-0.119608204275564, 0.385166334069671, 0.48460920430299, 
    -1.75538143732154), value = 19.1814533667468, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.6867163770205, -0.82677567014855, 
    136.21282640397, -2.32258413879194, -0.82677567014855, 37.098436659555, 
    2.24350186872613, -8.24967573231916, 136.21282640397, 2.24350186872613, 
    3392.03911496799, -193.583275320819, -2.32258413879194, -8.24967573231916, 
    -193.583275320819, 174.017747410105), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.119608204275564, 0.385166334069671
    ), logphi = c(0.48460920430299, -1.75538143732154)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_101 = structure(list(
    par = c(-0.106490373436944, 0.0724375483639671, 0.528108606192131, 
    -1.48847622853566), value = 53.0366942282302, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.5246654531393, -6.00520071891708, 
    109.516113010244, -8.38921063284204, -6.00520071891708, 23.697459592853, 
    -15.5881744117181, -5.6775016368249, 109.516113010244, -15.5881744117181, 
    1766.15921637513, -166.204574048479, -8.38921063284204, -5.6775016368249, 
    -166.204574048479, 124.629186569081), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106490373436944, 0.0724375483639671
    ), logphi = c(0.528108606192131, -1.48847622853566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_102 = structure(list(
    par = c(-0.245135764131439, -0.10404198224935, 0.465772093977972, 
    -1.62905279428917), value = 39.5273544106292, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.5997249325202, -3.00843416844998, 
    124.48760313255, -5.23248412331867, -3.00843416844998, 20.1919827667041, 
    -8.72958200304197, -6.16869943925735, 124.48760313255, -8.72958200304197, 
    2523.62753972513, -130.508721293943, -5.23248412331867, -6.16869943925735, 
    -130.508721293943, 144.245347735605), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245135764131439, -0.10404198224935
    ), logphi = c(0.465772093977972, -1.62905279428917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_103 = structure(list(
    par = c(-0.427067351399378, -0.315213776884518, 0.515324260935949, 
    -1.53467463104755), value = 48.454365362241, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.9420402703329, -2.96254682119468, 
    119.572993948935, -14.5795769350698, -2.96254682119468, 16.3365073788668, 
    -18.8148174196101, -4.64973759228826, 119.572993948935, -18.8148174196101, 
    2045.46031291208, -193.240711327647, -14.5795769350698, -4.64973759228826, 
    -193.240711327647, 140.532702451068), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.427067351399378, -0.315213776884518
    ), logphi = c(0.515324260935949, -1.53467463104755)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_104 = structure(list(
    par = c(-0.178675713935694, 0.0208706924916439, 0.498451241203571, 
    -1.5031084389162), value = 52.0816932883473, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.6960410754168, -3.841348487299, 
    110.982247711888, -6.41890041119808, -3.841348487299, 22.5506812476794, 
    -12.150166417868, -6.06355962418093, 110.982247711888, -12.150166417868, 
    1818.54743037491, -133.589060393291, -6.41890041119808, -6.06355962418093, 
    -133.589060393291, 120.133289906121), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178675713935694, 0.0208706924916439
    ), logphi = c(0.498451241203571, -1.5031084389162)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_105 = structure(list(
    par = c(-0.375978556371605, 0.0896614559003653, 0.502363784733667, 
    -1.59621933165378), value = 37.6349334960961, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.2183687551016, -1.37268908240173, 
    129.430766980576, -11.1580173092207, -1.37268908240173, 25.5484347615464, 
    -13.4704241876449, -7.8662203115698, 129.430766980576, -13.4704241876449, 
    2318.86462527342, -196.343357462325, -11.1580173092207, -7.8662203115698, 
    -196.343357462325, 148.080987981913), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375978556371605, 0.0896614559003653
    ), logphi = c(0.502363784733667, -1.59621933165378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_106 = structure(list(
    par = c(-0.250345483640459, -0.0164536097549863, 0.521724849421268, 
    -1.6817460054064), value = 41.4133351802079, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.2625134591832, -7.07636162822212, 
    135.649997520915, -11.6042538760297, -7.07636162822212, 18.7491365082337, 
    -19.7241140629245, -6.44348990341825, 135.649997520915, -19.7241140629245, 
    2953.17417922902, -235.601062123614, -11.6042538760297, -6.44348990341825, 
    -235.601062123614, 175.897501412337), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250345483640459, -0.0164536097549863
    ), logphi = c(0.521724849421268, -1.6817460054064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_107 = structure(list(
    par = c(-0.100967486137773, 0.152176765079871, 0.499944358228808, 
    -1.61054396951633), value = 47.6686317652101, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.3559034189894, -4.93270152013281, 
    121.494758513307, -4.99013156485262, -4.93270152013281, 27.1318994329306, 
    -10.590492195206, -6.86670507743514, 121.494758513307, -10.590492195206, 
    2419.98242623964, -163.491308173391, -4.99013156485262, -6.86670507743514, 
    -163.491308173391, 147.391342565584), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.100967486137773, 0.152176765079871
    ), logphi = c(0.499944358228808, -1.61054396951633)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_108 = structure(list(
    par = c(-0.361684993599641, 0.178359664630763, 0.517252210324077, 
    -1.43260706469507), value = 43.4053747200339, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.3284279149201, 1.47696313845813, 
    109.056184490086, -10.9689606242469, 1.47696313845813, 30.8616645110504, 
    -12.6522887491376, -7.28166239838401, 109.056184490086, -12.6522887491376, 
    1463.57044973833, -156.046322621783, -10.9689606242469, -7.28166239838401, 
    -156.046322621783, 108.651462491949), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361684993599641, 0.178359664630763
    ), logphi = c(0.517252210324077, -1.43260706469507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_109 = structure(list(
    par = c(-0.447440961967027, -0.18471148426541, 0.497295065273918, 
    -1.64494696271471), value = 43.3830924170385, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.4086399270228, -4.41431068942677, 
    134.048297171674, -13.495995744961, -4.41431068942677, 14.8000224911016, 
    -17.8703982438577, -6.21704070091766, 134.048297171674, -17.8703982438577, 
    2689.44879645083, -213.736987962676, -13.495995744961, -6.21704070091766, 
    -213.736987962676, 163.646029211151), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.447440961967027, -0.18471148426541
    ), logphi = c(0.497295065273918, -1.64494696271471)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_110 = structure(list(
    par = c(-0.417783462301993, 0.0454648540197828, 0.475947040797923, 
    -1.7066687037392), value = 24.4522178947638, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.1391382972116, -1.30111476792649, 
    142.039474173572, -9.79915939858245, -1.30111476792649, 23.8776647805139, 
    -8.84877223228386, -8.22883609963299, 142.039474173572, -8.84877223228386, 
    3044.01152635059, -204.59636297776, -9.79915939858245, -8.22883609963299, 
    -204.59636297776, 167.458074878724), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.417783462301993, 0.0454648540197828
    ), logphi = c(0.475947040797923, -1.7066687037392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_111 = structure(list(
    par = c(-0.267346371640085, -0.139140170989533, 0.482242523058089, 
    -1.60230001303962), value = 45.1100929219985, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4311647058795, -3.83850402663199, 
    123.63363635437, -7.55067988844615, -3.83850402663199, 18.2597672999663, 
    -12.1400089021506, -5.98487100234024, 123.63363635437, -12.1400089021506, 
    2381.80148890699, -149.025357123911, -7.55067988844615, -5.98487100234024, 
    -149.025357123911, 143.424454844165), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267346371640085, -0.139140170989533
    ), logphi = c(0.482242523058089, -1.60230001303962)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_112 = structure(list(
    par = c(-0.441688862218562, -0.675992953572598, 0.485092297925977, 
    -1.65937190452178), value = 49.8730075063913, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.1873969228508, -4.73198204176128, 
    128.507153853263, -13.0341482371676, -4.73198204176128, 6.73490682778777, 
    -16.2287276541662, -3.52743813003542, 128.507153853263, -16.2287276541662, 
    2855.72124876055, -191.836671445067, -13.0341482371676, -3.52743813003542, 
    -191.836671445067, 167.023174430625), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.441688862218562, -0.675992953572598
    ), logphi = c(0.485092297925977, -1.65937190452178)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_113 = structure(list(
    par = c(-0.359831913899514, 0.332069872471736, 0.50532849983393, 
    -1.66715730532304), value = 17.8565440986557, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.5735436432437, 1.53765682853191, 
    139.44508928887, -10.0594602763238, 1.53765682853191, 36.2079745368504, 
    -6.95460604838161, -10.0468041992485, 139.44508928887, -6.95460604838161, 
    2726.31447682237, -229.858366947333, -10.0594602763238, -10.0468041992485, 
    -229.858366947333, 164.019406195592), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359831913899514, 0.332069872471736
    ), logphi = c(0.50532849983393, -1.66715730532304)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_114 = structure(list(
    par = c(-0.258622920721018, -0.101499555815047, 0.505309262156115, 
    -1.56927829119794), value = 53.4082880922963, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.6887658744404, -5.56615766811319, 
    121.394484773774, -9.72658665521209, -5.56615766811319, 16.671664807788, 
    -15.4301044492655, -5.86447124550915, 121.394484773774, -15.4301044492655, 
    2204.67022080228, -172.643099912051, -9.72658665521209, -5.86447124550915, 
    -172.643099912051, 142.065835898819), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258622920721018, -0.101499555815047
    ), logphi = c(0.505309262156115, -1.56927829119794)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_115 = structure(list(
    par = c(-0.133498862417886, 0.0438417855969643, 0.488346804250476, 
    -1.5999364674681), value = 44.1082591536565, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.4470017361838, -5.46963937786415, 
    119.867140130125, -4.78779183410438, -5.46963937786415, 21.4027519014337, 
    -10.3161261577611, -6.39108190902959, 119.867140130125, -10.3161261577611, 
    2356.9578507896, -144.334362551568, -4.78779183410438, -6.39108190902959, 
    -144.334362551568, 142.26258559269), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.133498862417886, 0.0438417855969643
    ), logphi = c(0.488346804250476, -1.5999364674681)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_116 = structure(list(
    par = c(-0.386823215552684, 0.431811806891756, 0.554767023110473, 
    -1.38599963509202), value = 33.0430014980711, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.4509020615798, 6.03632341800164, 
    105.806319860235, -14.6572634127651, 6.03632341800164, 44.451650895283, 
    -12.3976122772262, -8.37692913613353, 105.806319860235, -12.3976122772262, 
    1255.04885840577, -192.5408623622, -14.6572634127651, -8.37692913613353, 
    -192.5408623622, 110.300592016443), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.386823215552684, 0.431811806891756
    ), logphi = c(0.554767023110473, -1.38599963509202)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_117 = structure(list(
    par = c(-0.278714845372552, -0.110400415722872, 0.495706883339622, 
    -1.67020071761638), value = 39.4306267606178, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.4658207593469, -5.29663305925965, 
    133.022399179339, -9.65031336885858, -5.29663305925965, 17.5059068947547, 
    -15.0816351691674, -6.2460419725241, 133.022399179339, -15.0816351691674, 
    2855.37320041485, -195.970979428139, -9.65031336885858, -6.2460419725241, 
    -195.970979428139, 165.950375601298), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278714845372552, -0.110400415722872
    ), logphi = c(0.495706883339622, -1.67020071761638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_118 = structure(list(
    par = c(-0.290012303783173, -0.34196571459478, 0.529817461080816, 
    -1.56217546809995), value = 59.0192761765536, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7862776053445, -6.22509858594356, 
    119.369743408981, -13.6540135731167, -6.22509858594356, 12.1080007051688, 
    -19.8395369910287, -3.99418475804936, 119.369743408981, -19.8395369910287, 
    2224.85092331581, -208.164378067366, -13.6540135731167, -3.99418475804936, 
    -208.164378067366, 150.989505151244), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290012303783173, -0.34196571459478
    ), logphi = c(0.529817461080816, -1.56217546809995)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_119 = structure(list(
    par = c(-0.37947315766121, -0.0828194060050869, 0.488424543758516, 
    -1.58024878675308), value = 41.9981500754982, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.3540752117004, -2.54022516088526, 
    125.337414996096, -10.1547824833403, -2.54022516088526, 19.2569325019321, 
    -13.2785169348892, -6.68678743487305, 125.337414996096, -13.2785169348892, 
    2236.34852331855, -165.94618941923, -10.1547824833403, -6.68678743487305, 
    -165.94618941923, 140.217901792639), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37947315766121, -0.0828194060050869
    ), logphi = c(0.488424543758516, -1.58024878675308)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_120 = structure(list(
    par = c(-0.245937255725766, 0.0565262372198697, 0.471316484458085, 
    -1.55803093388911), value = 42.3855754433025, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.4974726908504, -0.897032286673038, 
    117.0832116415, -4.5506128731887, -0.897032286673038, 25.9225095255999, 
    -7.49585925419183, -6.837250557723, 117.0832116415, -7.49585925419183, 
    2068.83245331291, -118.252328100255, -4.5506128731887, -6.837250557723, 
    -118.252328100255, 125.91824513386), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245937255725766, 0.0565262372198697
    ), logphi = c(0.471316484458085, -1.55803093388911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_121 = structure(list(
    par = c(-0.0345971087249546, -0.0490889979773086, 0.444323565224659, 
    -1.60702548258208), value = 53.5754788975934, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.4768134637228, -5.68959466562546, 
    109.24887621222, 1.27830135721041, -5.68959466562546, 18.7927916730501, 
    -4.60453981965259, -5.14133700590946, 109.24887621222, -4.60453981965259, 
    2368.96915591878, -65.5889393783582, 1.27830135721041, -5.14133700590946, 
    -65.5889393783582, 131.727017281591), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0345971087249546, -0.0490889979773086
    ), logphi = c(0.444323565224659, -1.60702548258208)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_122 = structure(list(
    par = c(-0.43631596114578, -0.339264021538926, 0.522216662921327, 
    -1.57089839493917), value = 50.9590075499989, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.1412124784173, -4.28865456392202, 
    123.358228998782, -15.818047633509, -4.28865456392202, 13.3832121349542, 
    -20.9558908856877, -4.39766397342112, 123.358228998782, -20.9558908856877, 
    2271.45207279378, -219.393136900337, -15.818047633509, -4.39766397342112, 
    -219.393136900337, 154.146507311381), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.43631596114578, -0.339264021538926
    ), logphi = c(0.522216662921327, -1.57089839493917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_123 = structure(list(
    par = c(-0.515806266327695, 0.315365604583048, 0.528236457721551, 
    -1.63698336276256), value = 24.058399282838, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.8948802857815, 1.2876105852655, 
    141.530914584465, -16.5073070235167, 1.2876105852655, 34.7831227962558, 
    -15.5176721818862, -10.6361650571429, 141.530914584465, -15.5176721818862, 
    2544.22208286087, -275.874575082824, -16.5073070235167, -10.6361650571429, 
    -275.874575082824, 169.275058851781), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.515806266327695, 0.315365604583048
    ), logphi = c(0.528236457721551, -1.63698336276256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_124 = structure(list(
    par = c(-0.399264906673109, -0.0943613046197413, 0.479854855207985, 
    -1.65471234171778), value = 34.3455179666089, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.7112855154237, -1.88542496992739, 
    134.281846344564, -10.2033129536494, -1.88542496992739, 21.1254440678488, 
    -12.4885032661837, -6.9723110218689, 134.281846344564, -12.4885032661837, 
    2707.55763627406, -184.218308984185, -10.2033129536494, -6.9723110218689, 
    -184.218308984185, 157.36617967832), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399264906673109, -0.0943613046197413
    ), logphi = c(0.479854855207985, -1.65471234171778)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_125 = structure(list(
    par = c(-0.3385331700077, 0.0961572725897191, 0.509878651474444, 
    -1.63021584084329), value = 33.7366480902523, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.9273274741086, -3.3900890130667, 
    133.128360737089, -11.4808158375723, -3.3900890130667, 23.8598494597397, 
    -15.2189183957319, -7.77315155708891, 133.128360737089, -15.2189183957319, 
    2547.63596158369, -215.856672844517, -11.4808158375723, -7.77315155708891, 
    -215.856672844517, 159.289958746811), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3385331700077, 0.0961572725897191
    ), logphi = c(0.509878651474444, -1.63021584084329)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_126 = structure(list(
    par = c(-0.286504576373374, -0.504697452172765, 0.506524343311447, 
    -1.46564106039921), value = 70.1019587685411, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.0132456413808, -5.33241763633896, 
    106.617464702197, -10.5557985889959, -5.33241763633896, 8.90613559434428, 
    -14.3891723567435, -3.48154102169929, 106.617464702197, -14.3891723567435, 
    1696.65143339159, -136.691045932835, -10.5557985889959, -3.48154102169929, 
    -136.691045932835, 116.648583578183), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286504576373374, -0.504697452172765
    ), logphi = c(0.506524343311447, -1.46564106039921)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_127 = structure(list(
    par = c(-0.135403640675719, -0.132651455632844, 0.487370492946873, 
    -1.72572603202292), value = 39.856191954772, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.1256179659702, -7.4909781613286, 
    132.607889975489, -6.10439250259276, -7.4909781613286, 16.1364608146641, 
    -12.4439388251574, -5.64687107562634, 132.607889975489, -12.4439388251574, 
    3279.71307438446, -178.776620360921, -6.10439250259276, -5.64687107562634, 
    -178.776620360921, 175.338848452), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135403640675719, -0.132651455632844
    ), logphi = c(0.487370492946873, -1.72572603202292)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_128 = structure(list(
    par = c(-0.303322844669977, -0.135725991368265, 0.501900658902437, 
    -1.67901404859222), value = 37.5316308971172, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.0517645368697, -5.93080509680988, 
    134.736089679066, -10.9833419994487, -5.93080509680988, 16.1986789084523, 
    -17.0938390038344, -6.09101944615276, 134.736089679066, -17.0938390038344, 
    2933.31363061888, -211.753245056734, -10.9833419994487, -6.09101944615276, 
    -211.753245056734, 171.043385016389), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303322844669977, -0.135725991368265
    ), logphi = c(0.501900658902437, -1.67901404859222)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_129 = structure(list(
    par = c(-0.338412538357734, 0.263599846388618, 0.509116971256353, 
    -1.564740521887), value = 35.2764242753932, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.9241691977519, 1.05710112485724, 
    125.510117824135, -10.0220588450384, 1.05710112485724, 33.2025210081355, 
    -10.2915469941678, -8.79641975970458, 125.510117824135, -10.2915469941678, 
    2103.20118524443, -192.768377239361, -10.0220588450384, -8.79641975970458, 
    -192.768377239361, 139.688544345873), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338412538357734, 0.263599846388618
    ), logphi = c(0.509116971256353, -1.564740521887)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_130 = structure(list(
    par = c(-0.160788718398096, 0.125916163268865, 0.49412795584041, 
    -1.51572658367239), value = 47.9459573757219, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.4971547595312, -3.2798844689097, 
    111.656110522773, -5.13637093391139, -3.2798844689097, 25.3328154862231, 
    -10.1680940574056, -6.62835185671895, 111.656110522773, -10.1680940574056, 
    1865.30512445771, -131.340473869201, -5.13637093391139, -6.62835185671895, 
    -131.340473869201, 121.210092263624), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.160788718398096, 0.125916163268865
    ), logphi = c(0.49412795584041, -1.51572658367239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_131 = structure(list(
    par = c(-0.223925339495327, 0.240388980450107, 0.490091857213549, 
    -1.71188314010661), value = 24.6332577658137, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.1051013382728, -1.4223561253246, 
    137.660238745951, -6.10895431929492, -1.4223561253246, 31.4095742437459, 
    -5.5868918513724, -8.39656666951072, 137.660238745951, -5.5868918513724, 
    3075.99321052887, -200.751106356645, -6.10895431929492, -8.39656666951072, 
    -200.751106356645, 169.021787491452), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223925339495327, 0.240388980450107
    ), logphi = c(0.490091857213549, -1.71188314010661)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_132 = structure(list(
    par = c(-0.11276137366517, 0.0958779393363558, 0.470978118665099, 
    -1.64773587892362), value = 37.2191623011186, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.8606224378482, -4.1063760924942, 
    122.004591291969, -2.35743381971076, -4.1063760924942, 25.0121657892066, 
    -5.87443367727758, -6.53870059608153, 122.004591291969, -5.87443367727758, 
    2639.03781157282, -131.762411268888, -2.35743381971076, -6.53870059608153, 
    -131.762411268888, 148.495899837897), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.11276137366517, 0.0958779393363558
    ), logphi = c(0.470978118665099, -1.64773587892362)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_133 = structure(list(
    par = c(-0.299147858399063, 0.0513603370868121, 0.495711352986406, 
    -1.67392026647918), value = 35.1368547729051, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.9317183947644, -3.40743780391506, 
    135.736659615304, -9.38251068305362, -3.40743780391506, 23.3272848735311, 
    -12.758270662161, -7.48596114696909, 135.736659615304, -12.758270662161, 
    2843.68882169161, -203.483806958893, -9.38251068305362, -7.48596114696909, 
    -203.483806958893, 165.262686566692), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299147858399063, 0.0513603370868121
    ), logphi = c(0.495711352986406, -1.67392026647918)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_134 = structure(list(
    par = c(-0.375018351496668, -0.248423253981148, 0.536212380893484, 
    -1.51836822128288), value = 60.8367254296365, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7817168606737, -5.56762949344147, 
    117.481522810436, -15.6979778820343, -5.56762949344147, 13.3249831062443, 
    -20.8994746024871, -4.36057738717466, 117.481522810436, -20.8994746024871, 
    1966.58482624024, -213.656448742938, -15.6979778820343, -4.36057738717466, 
    -213.656448742938, 142.495442258195), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375018351496668, -0.248423253981148
    ), logphi = c(0.536212380893484, -1.51836822128288)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_135 = structure(list(
    par = c(-0.302485240845798, -0.103722013688798, 0.490835581827183, 
    -1.62992158462713), value = 41.0321553982364, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.9831483313784, -4.41488268165813, 
    128.971497147745, -9.32944757181531, -4.41488268165813, 17.90055266504, 
    -13.8399737608097, -6.35429790030173, 128.971497147745, -13.8399737608097, 
    2565.26464335316, -177.667501613854, -9.32944757181531, -6.35429790030173, 
    -177.667501613854, 153.862873350619), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302485240845798, -0.103722013688798
    ), logphi = c(0.490835581827183, -1.62992158462713)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_136 = structure(list(
    par = c(0.106415050110204, -0.0119656499551134, 0.490220843713019, 
    -1.54947247286715), value = 59.988731369349, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.9368615679435, -9.1265487398573, 
    103.666907197209, -0.80967714666258, -9.1265487398573, 21.2106601082951, 
    -10.6344826455995, -4.90626801408212, 103.666907197209, -10.6344826455995, 
    2098.48636425569, -104.568204489119, -0.80967714666258, -4.90626801408212, 
    -104.568204489119, 129.494161285493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.106415050110204, -0.0119656499551134
    ), logphi = c(0.490220843713019, -1.54947247286715)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_137 = structure(list(
    par = c(-0.282469215386734, -0.0696328322198872, 0.512020041774324, 
    -1.66935712847102), value = 39.0122490511998, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.4306257388358, -5.65707722266495, 
    134.253307892962, -11.3842477436066, -5.65707722266495, 19.0289047736769, 
    -18.2616064865471, -6.31575311604848, 134.253307892962, -18.2616064865471, 
    2862.85169627121, -221.362925923785, -11.3842477436066, -6.31575311604848, 
    -221.362925923785, 170.956951709655), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282469215386734, -0.0696328322198872
    ), logphi = c(0.512020041774324, -1.66935712847102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_138 = structure(list(
    par = c(-0.436006279952647, 0.122386735714472, 0.506691515518572, 
    -1.61931146222104), value = 35.3290669421009, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.1098538617507, -1.58364018076895, 
    134.541716171555, -12.98090151991, -1.58364018076895, 24.9731625618921, 
    -14.5050562778692, -8.49743553477111, 134.541716171555, -14.5050562778692, 
    2459.45867632713, -220.979052183878, -12.98090151991, -8.49743553477111, 
    -220.979052183878, 156.631574620647), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.436006279952647, 0.122386735714472
    ), logphi = c(0.506691515518572, -1.61931146222104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_139 = structure(list(
    par = c(-0.362026391187568, 0.38184169091608, 0.489514485956471, 
    -1.611504878921), value = 15.3346047561663, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.187955973845, 6.09652395766602, 
    129.907062611068, -7.28249324488672, 6.09652395766602, 40.885786740219, 
    -0.971589598108835, -9.97976610950246, 129.907062611068, 
    -0.971589598108835, 2326.74362650975, -185.788070503179, 
    -7.28249324488672, -9.97976610950246, -185.788070503179, 
    143.24128395593), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362026391187568, 0.38184169091608
    ), logphi = c(0.489514485956471, -1.611504878921)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_140 = structure(list(
    par = c(-0.353085440653509, 0.248887108183024, 0.553793416828359, 
    -1.50552182427996), value = 38.8239087375763, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.5748345904777, -1.3334305339896, 
    120.954237736726, -15.9524505010111, -1.3334305339896, 31.399840171531, 
    -19.5902185957664, -7.57842570742184, 120.954237736726, -19.5902185957664, 
    1822.42675751709, -237.673406437544, -15.9524505010111, -7.57842570742184, 
    -237.673406437544, 141.903443676483), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353085440653509, 0.248887108183024
    ), logphi = c(0.553793416828359, -1.50552182427996)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_141 = structure(list(
    par = c(-0.25449722355168, 0.161883294955647, 0.51569818353874, 
    -1.45440923350283), value = 49.0380276874824, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.6679531612001, -1.57242265963475, 
    109.024360282817, -9.0298008625922, -1.57242265963475, 27.1470602477564, 
    -12.7685241757547, -6.82082859171373, 109.024360282817, -12.7685241757547, 
    1570.16437953139, -152.190978790934, -9.0298008625922, -6.82082859171373, 
    -152.190978790934, 112.663341919728), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25449722355168, 0.161883294955647
    ), logphi = c(0.51569818353874, -1.45440923350283)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_142 = structure(list(
    par = c(-0.399651425531036, -0.129333094182559, 0.503459457147647, 
    -1.5543414057036), value = 47.9101687954352, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.6010394958593, -3.42870511715887, 
    123.092400723834, -12.3540452019455, -3.42870511715887, 17.3241382714906, 
    -16.3459299535873, -6.13334355303863, 123.092400723834, -16.3459299535873, 
    2112.59599991642, -181.31923095055, -12.3540452019455, -6.13334355303863, 
    -181.31923095055, 139.510253095665), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399651425531036, -0.129333094182559
    ), logphi = c(0.503459457147647, -1.5543414057036)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_143 = structure(list(
    par = c(0.15306777601842, 0.319557796614225, 0.458878921649971, 
    -1.50713282671327), value = 40.1674778081137, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.2030870876961, -3.32400910529884, 
    91.04534270854, 4.493247184989, -3.32400910529884, 39.082871042595, 
    -3.70794310455835, -5.27482787582301, 91.04534270854, -3.70794310455835, 
    1811.27055379982, -52.3165652195345, 4.493247184989, -5.27482787582301, 
    -52.3165652195345, 109.019561282508), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.15306777601842, 0.319557796614225
    ), logphi = c(0.458878921649971, -1.50713282671327)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_144 = structure(list(
    par = c(-0.227024305080345, 0.0729272507188218, 0.496387950804544, 
    -1.67909390843145), value = 34.5073262337797, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.0520452599603, -4.69313313544717, 
    133.919096001023, -7.84099974815433, -4.69313313544717, 23.1152858241046, 
    -11.9368102637907, -7.26736711609277, 133.919096001023, -11.9368102637907, 
    2883.17875258848, -195.838248149727, -7.84099974815433, -7.26736711609277, 
    -195.838248149727, 165.622095719797), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227024305080345, 0.0729272507188218
    ), logphi = c(0.496387950804544, -1.67909390843145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_145 = structure(list(
    par = c(-0.144134705675363, -0.172805536823296, 0.512386049429525, 
    -1.57864306283605), value = 48.8377951942827, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.1548965977937, -6.24346331790093, 
    118.572252096882, -8.51935654999636, -6.24346331790093, 17.8487480173573, 
    -16.0438222263082, -5.00622816446139, 118.572252096882, -16.0438222263082, 
    2286.66351352835, -171.093924719479, -8.51935654999636, -5.00622816446139, 
    -171.093924719479, 146.015130168209), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144134705675363, -0.172805536823296
    ), logphi = c(0.512386049429525, -1.57864306283605)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_146 = structure(list(
    par = c(-0.237320523338545, 0.0732914809985294, 0.469052573339338, 
    -1.61583185846986), value = 39.4220124628153, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.0630727685948, -1.51386807623055, 
    123.484339084712, -4.4295636811853, -1.51386807623055, 25.3283523896641, 
    -6.3278712811865, -7.06296402697149, 123.484339084712, -6.3278712811865, 
    2411.38568271992, -133.672987812972, -4.4295636811853, -7.06296402697149, 
    -133.672987812972, 140.029682976106), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237320523338545, 0.0732914809985294
    ), logphi = c(0.469052573339338, -1.61583185846986)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_147 = structure(list(
    par = c(-0.28471002096188, 0.0364257439856468, 0.457658660431771, 
    -1.71066299141058), value = 26.5434177470149, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.6585778374318, -1.4858563286424, 
    135.093464412428, -4.89673105885657, -1.4858563286424, 24.6367547509507, 
    -3.81239037228198, -7.23454042894645, 135.093464412428, -3.81239037228198, 
    3056.36438578816, -156.666908835312, -4.89673105885657, -7.23454042894645, 
    -156.666908835312, 160.278130130642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28471002096188, 0.0364257439856468
    ), logphi = c(0.457658660431771, -1.71066299141058)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_148 = structure(list(
    par = c(-0.121515319489486, 0.030530212624506, 0.46966335160589, 
    -1.45576449210595), value = 54.9132682868803, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.2792487290933, -2.43313157177738, 
    100.188073128393, -1.66920227506751, -2.43313157177738, 24.5862493262194, 
    -8.15845543478133, -5.66522286504778, 100.188073128393, -8.15845543478133, 
    1565.58726225064, -73.4727959788017, -1.66920227506751, -5.66522286504778, 
    -73.4727959788017, 99.7546198373556), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.121515319489486, 0.030530212624506
    ), logphi = c(0.46966335160589, -1.45576449210595)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_149 = structure(list(
    par = c(-0.344648607521689, 0.0970081662597047, 0.496932869970013, 
    -1.50873874408197), value = 40.7557451949855, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.550122089798, 0.475110072173379, 
    116.846218920941, -9.07337098077221, 0.475110072173379, 27.6755894290659, 
    -11.3689781109372, -7.35149078678887, 116.846218920941, -11.3689781109372, 
    1818.22507913232, -151.459623162431, -9.07337098077221, -7.35149078678887, 
    -151.459623162431, 121.841111351273), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344648607521689, 0.0970081662597047
    ), logphi = c(0.496932869970013, -1.50873874408197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_150 = structure(list(
    par = c(-0.252270956528553, -0.304372630212702, 0.529617878601488, 
    -1.50110076188398), value = 54.49532416794, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.4794266079593, -5.38479896938782, 
    112.197160778038, -12.6909876749792, -5.38479896938782, 14.3381926278607, 
    -18.0035189458749, -3.98964520531564, 112.197160778038, -18.0035189458749, 
    1876.54926405756, -182.291848165761, -12.6909876749792, -3.98964520531564, 
    -182.291848165761, 133.053987887877), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252270956528553, -0.304372630212702
    ), logphi = c(0.529617878601488, -1.50110076188398)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_151 = structure(list(
    par = c(-0.085426219138795, 0.000223812155372403, 0.46880233310213, 
    -1.6739941806713), value = 45.9964669917866, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.5945049461099, -6.46423950456665, 
    123.120630988183, -2.28103493959964, -6.46423950456665, 19.5651116232654, 
    -6.90805424241603, -5.96924375795282, 123.120630988183, -6.90805424241603, 
    2841.59998456168, -130.897215377068, -2.28103493959964, -5.96924375795282, 
    -130.897215377068, 155.440536985907), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.085426219138795, 0.000223812155372403
    ), logphi = c(0.46880233310213, -1.6739941806713)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_152 = structure(list(
    par = c(-0.282829411196088, -0.0353773924512495, 0.503749578736097, 
    -1.53068964329113), value = 50.7595188729546, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.6799565321312, -3.77408604812501, 
    117.81674792033, -9.5042094923059, -3.77408604812501, 20.0945378878714, 
    -14.2771072475512, -6.24456517428484, 117.81674792033, -14.2771072475512, 
    1970.11353227339, -160.74410762279, -9.5042094923059, -6.24456517428484, 
    -160.74410762279, 130.703573033131), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282829411196088, -0.0353773924512495
    ), logphi = c(0.503749578736097, -1.53068964329113)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_153 = structure(list(
    par = c(-0.4356019844043, -0.234872733022126, 0.480002675695782, 
    -1.6026391909143), value = 43.8399653836308, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.9151244804067, -3.4672124904489, 
    127.759103719427, -11.0536160846664, -3.4672124904489, 14.33548171903, 
    -14.0179344558788, -6.02588729314846, 127.759103719427, -14.0179344558788, 
    2386.24301805856, -166.384640575501, -11.0536160846664, -6.02588729314846, 
    -166.384640575501, 145.291740938802), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4356019844043, -0.234872733022126
    ), logphi = c(0.480002675695782, -1.6026391909143)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_154 = structure(list(
    par = c(-0.350614102237894, -0.0474838890725253, 0.549986122984016, 
    -1.51069907182565), value = 56.8306266294289, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.9821437822351, -5.34110591488002, 
    118.559532733542, -16.4174796344341, -5.34110591488002, 18.5961091823117, 
    -22.3677579054282, -5.21319293866895, 118.559532733542, -22.3677579054282, 
    1903.88589688872, -231.061954051093, -16.4174796344341, -5.21319293866895, 
    -231.061954051093, 143.940809142151), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350614102237894, -0.0474838890725253
    ), logphi = c(0.549986122984016, -1.51069907182565)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_155 = structure(list(
    par = c(-0.537276641431422, 0.0334665481205892, 0.500574447767905, 
    -1.60200325107834), value = 28.8736799299258, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.5757203240713, 0.180361785950822, 
    133.668796369335, -14.6668903164837, 0.180361785950822, 24.9822496662944, 
    -15.6720865280846, -8.21016459351398, 133.668796369335, -15.6720865280846, 
    2356.82078681343, -217.033802706545, -14.6668903164837, -8.21016459351398, 
    -217.033802706545, 152.439060878251), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.537276641431422, 0.0334665481205892
    ), logphi = c(0.500574447767905, -1.60200325107834)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_156 = structure(list(
    par = c(-0.239613963763004, 0.05110274036046, 0.515301159195563, 
    -1.71367622320552), value = 35.4182045764162, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.9166891498295, -6.13431590501534, 
    139.473651357136, -10.4685318795816, -6.13431590501534, 22.1292026907349, 
    -17.5185596180683, -7.0743946949392, 139.473651357136, -17.5185596180683, 
    3170.63408732032, -235.875128044682, -10.4685318795816, -7.0743946949392, 
    -235.875128044682, 180.332144099182), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239613963763004, 0.05110274036046
    ), logphi = c(0.515301159195563, -1.71367622320552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_157 = structure(list(
    par = c(-0.663333479811194, -0.116996443685557, 0.509330113275927, 
    -1.65009264051693), value = 34.2249117247242, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.81486243426, -2.59867388763269, 
    139.339856557896, -19.2185298795167, -2.59867388763269, 17.7622545916023, 
    -23.7502879603113, -6.98729493286976, 139.339856557896, -23.7502879603113, 
    2735.3268883985, -271.544845514171, -19.2185298795167, -6.98729493286976, 
    -271.544845514171, 175.305855394825), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.663333479811194, -0.116996443685557
    ), logphi = c(0.509330113275927, -1.65009264051693)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_158 = structure(list(
    par = c(-0.446585198782903, -0.056442846719075, 0.513805257827195, 
    -1.49590344072169), value = 47.0126532337799, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3886028046498, -1.46798825007011, 
    117.91469579947, -13.7917890956629, -1.46798825007011, 21.1730570178759, 
    -16.7700537403448, -6.36287002997449, 117.91469579947, -16.7700537403448, 
    1792.58735922261, -180.805637109316, -13.7917890956629, -6.36287002997449, 
    -180.805637109316, 127.377689672414), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.446585198782903, -0.056442846719075
    ), logphi = c(0.513805257827195, -1.49590344072169)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_159 = structure(list(
    par = c(-0.329442920005865, -0.0803251620273842, 0.479318977697497, 
    -1.64926305468312), value = 38.7819878718603, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0176425123632, -3.65892889853114, 
    131.470373522902, -8.5723652549774, -3.65892889853114, 18.5344257381814, 
    -11.5251871566358, -6.74537264089281, 131.470373522902, -11.5251871566358, 
    2670.82663661, -171.26147012636, -8.5723652549774, -6.74537264089281, 
    -171.26147012636, 154.771893678074), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329442920005865, -0.0803251620273842
    ), logphi = c(0.479318977697497, -1.64926305468312)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_160 = structure(list(
    par = c(-0.419665830928059, 0.260411719890103, 0.524534211499192, 
    -1.55040982273877), value = 32.7087123093513, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.244918293809, 0.559511882158858, 
    127.086462601511, -13.7001896138855, 0.559511882158858, 31.4593073493796, 
    -14.0940201518447, -9.02858624129976, 127.086462601511, -14.0940201518447, 
    2032.60737880662, -220.062251553799, -13.7001896138855, -9.02858624129976, 
    -220.062251553799, 143.331753040599), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419665830928059, 0.260411719890103
    ), logphi = c(0.524534211499192, -1.55040982273877)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_161 = structure(list(
    par = c(-0.315029335748057, -0.434376065254379, 0.485032434382338, 
    -1.67446063295955), value = 47.4622208854063, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.0201980485, -6.00579654097544, 
    130.248469519145, -10.2347529367108, -6.00579654097544, 9.72631545081981, 
    -15.2891593963034, -4.53598128480337, 130.248469519145, -15.2891593963034, 
    2928.73137582461, -181.010654861424, -10.2347529367108, -4.53598128480337, 
    -181.010654861424, 166.917023660673), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.315029335748057, -0.434376065254379
    ), logphi = c(0.485032434382338, -1.67446063295955)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_162 = structure(list(
    par = c(-0.431046946037553, -0.0631039292935543, 0.491631849927166, 
    -1.69034827755142), value = 34.8960822371063, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.3956834292057, -4.01464451904587, 
    140.285986899968, -12.3714115423113, -4.01464451904587, 18.0851186595277, 
    -15.5337327889526, -7.27571638403646, 140.285986899968, -15.5337327889526, 
    2978.95200359122, -222.669286609189, -12.3714115423113, -7.27571638403646, 
    -222.669286609189, 171.509818889248), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431046946037553, -0.0631039292935543
    ), logphi = c(0.491631849927166, -1.69034827755142)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_163 = structure(list(
    par = c(-0.345683376960752, 0.250207894071976, 0.541332664362136, 
    -1.54785336027542), value = 35.4975385699416, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0696233817498, -1.28631859830364, 
    125.813112843431, -14.4130286852118, -1.28631859830364, 32.1917560146545, 
    -17.8891208992837, -8.16879612042243, 125.813112843431, -17.8891208992837, 
    2040.24136677994, -235.553067852834, -14.4130286852118, -8.16879612042243, 
    -235.553067852834, 147.94354954617), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.345683376960752, 0.250207894071976
    ), logphi = c(0.541332664362136, -1.54785336027542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_164 = structure(list(
    par = c(-0.194772186366578, -0.0759382388151058, 0.483126745667639, 
    -1.70432885742542), value = 42.2835586934362, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.6450013005331, -6.39712229322242, 
    133.010260396915, -6.53031318531561, -6.39712229322242, 17.312509797307, 
    -11.3370082921449, -6.22543115547103, 133.010260396915, -11.3370082921449, 
    3088.77064080093, -176.568094127028, -6.53031318531561, -6.22543115547103, 
    -176.568094127028, 168.79346877019), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.194772186366578, -0.0759382388151058
    ), logphi = c(0.483126745667639, -1.70432885742542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_165 = structure(list(
    par = c(-0.346033780134396, 0.0681710573311558, 0.469497890820671, 
    -1.47092003926646), value = 45.6377206927937, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.7758626792455, 1.61309258750464, 
    109.176075643092, -5.3551170111632, 1.61309258750464, 26.5874369009822, 
    -7.37899908287432, -6.9978298196105, 109.176075643092, -7.37899908287432, 
    1603.52421811005, -97.8611689870235, -5.3551170111632, -6.9978298196105, 
    -97.8611689870235, 103.06853321751), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346033780134396, 0.0681710573311558
    ), logphi = c(0.469497890820671, -1.47092003926646)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_166 = structure(list(
    par = c(-0.211041970870077, 0.026620611048947, 0.489002843024727, 
    -1.56809863259701), value = 45.9183923053492, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.7844812717766, -3.27954185586066, 
    119.082173020146, -6.26916493295937, -3.27954185586066, 23.4343083747035, 
    -10.9254424209837, -6.56727343795183, 119.082173020146, -10.9254424209837, 
    2159.75115744449, -143.987629691367, -6.26916493295937, -6.56727343795183, 
    -143.987629691367, 134.628273055881), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211041970870077, 0.026620611048947
    ), logphi = c(0.489002843024727, -1.56809863259701)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_167 = structure(list(
    par = c(-0.186298604623403, 0.148631226554084, 0.524918824412127, 
    -1.5364341192687), value = 51.550268936888, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.2212717721545, -4.4893606272467, 
    118.159002084894, -9.44988617845866, -4.4893606272467, 26.6296852018399, 
    -15.2801667123725, -6.80587352608342, 118.159002084894, -15.2801667123725, 
    1996.15021550947, -187.001268548315, -9.44988617845866, -6.80587352608342, 
    -187.001268548315, 136.830414701805), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186298604623403, 0.148631226554084
    ), logphi = c(0.524918824412127, -1.5364341192687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_168 = structure(list(
    par = c(-0.247562304415324, -0.192419909108945, 0.481886045663541, 
    -1.57784512309587), value = 52.1928775256912, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.7630236408783, -4.66602535276195, 
    119.704130559839, -7.1345447505422, -4.66602535276195, 16.0494932632815, 
    -12.2456290672091, -5.5434680330535, 119.704130559839, -12.2456290672091, 
    2240.68574419967, -136.371213117492, -7.1345447505422, -5.5434680330535, 
    -136.371213117492, 136.990567591866), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247562304415324, -0.192419909108945
    ), logphi = c(0.481886045663541, -1.57784512309587)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_169 = structure(list(
    par = c(-0.251539534328792, 0.354418668820392, 0.480571734828896, 
    -1.68011312456445), value = 17.2472346915502, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.7949932495421, 3.28943042493535, 
    133.151287435851, -4.47273467951703, 3.28943042493535, 38.8905802939377, 
    0.8758439093981, -9.00699525274717, 133.151287435851, 0.8758439093981, 
    2795.57140007825, -182.279615362546, -4.47273467951703, -9.00699525274717, 
    -182.279615362546, 156.713113467433), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251539534328792, 0.354418668820392
    ), logphi = c(0.480571734828896, -1.68011312456445)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_170 = structure(list(
    par = c(-0.353288864974555, -0.186098229059936, 0.521267554769774, 
    -1.38657451690404), value = 59.948790270242, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.5066861773429, -3.16823829216162, 
    101.564606879379, -12.1389292209173, -3.16823829216162, 16.5410649710651, 
    -15.397291246444, -4.55560300771651, 101.564606879379, -15.397291246444, 
    1323.60083772198, -140.613505354104, -12.1389292209173, -4.55560300771651, 
    -140.613505354104, 100.104463552242), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353288864974555, -0.186098229059936
    ), logphi = c(0.521267554769774, -1.38657451690404)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_171 = structure(list(
    par = c(-0.40912133672483, -0.320905788406596, 0.493152969839152, 
    -1.80815278197195), value = 32.4970711317866, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.3091882703847, -6.64992151833133, 
    146.764045350523, -13.1079399849909, -6.64992151833133, 11.6088864352548, 
    -20.6146894132786, -5.13233479715325, 146.764045350523, -20.6146894132786, 
    4041.84481595493, -260.902072620084, -13.1079399849909, -5.13233479715325, 
    -260.902072620084, 201.870421633998), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40912133672483, -0.320905788406596
    ), logphi = c(0.493152969839152, -1.80815278197195)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_172 = structure(list(
    par = c(-0.249435539487762, 0.231157145660913, 0.531290447870592, 
    -1.5514492214238), value = 38.3799092689279, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.1235854871758, -2.83248120069857, 
    122.902760809396, -11.2063111643579, -2.83248120069857, 29.6142816349487, 
    -15.5970192512456, -7.72082135025443, 122.902760809396, -15.5970192512456, 
    2062.97263895649, -210.185603764401, -11.2063111643579, -7.72082135025443, 
    -210.185603764401, 143.330881204662), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249435539487762, 0.231157145660913
    ), logphi = c(0.531290447870592, -1.5514492214238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_173 = structure(list(
    par = c(-0.12188785514702, -0.200225384350628, 0.515964637709854, 
    -1.59901240907423), value = 51.3890023738944, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.2108713433813, -7.59676347783511, 
    119.980820246113, -8.62752303731895, -7.59676347783511, 15.243061483261, 
    -16.7172248559666, -4.79618087378952, 119.980820246113, -16.7172248559666, 
    2421.91892893295, -179.398368025829, -8.62752303731895, -4.79618087378952, 
    -179.398368025829, 152.497298907761), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.12188785514702, -0.200225384350628
    ), logphi = c(0.515964637709854, -1.59901240907423)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_174 = structure(list(
    par = c(-0.432666174651444, -0.0674273732126823, 0.53104549628238, 
    -1.59873474041711), value = 46.1395800270183, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.3070312667306, -5.34448867561821, 
    130.233828663506, -16.4242434657069, -5.34448867561821, 16.8938415523456, 
    -22.8598722511464, -6.14390639785967, 130.233828663506, -22.8598722511464, 
    2404.92911093604, -247.579737066239, -16.4242434657069, -6.14390639785967, 
    -247.579737066239, 163.004453904492), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432666174651444, -0.0674273732126823
    ), logphi = c(0.53104549628238, -1.59873474041711)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_175 = structure(list(
    par = c(-0.468517345507151, -0.0480283133472579, 0.558568009808967, 
    -1.57092719176717), value = 44.3816929589152, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.9723633915651, -4.37292768928899, 
    127.269757946635, -20.0774526559755, -4.37292768928899, 21.41035304426, 
    -28.1929470524744, -5.21493203464729, 127.269757946635, -28.1929470524744, 
    2255.72067717827, -284.806700600271, -20.0774526559755, -5.21493203464729, 
    -284.806700600271, 167.755504477896), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.468517345507151, -0.0480283133472579
    ), logphi = c(0.558568009808967, -1.57092719176717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_176 = structure(list(
    par = c(-0.538534327617083, -0.0572255150137697, 0.533240998166515, 
    -1.66174726611724), value = 37.062050133593, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.4049292712897, -4.81280902242531, 
    138.864542815753, -19.0514577678158, -4.81280902242531, 18.0755370315921, 
    -27.5623932548541, -6.42328519262492, 138.864542815753, -27.5623932548541, 
    2837.2416762501, -294.078396609443, -19.0514577678158, -6.42328519262492, 
    -294.078396609443, 183.982170577579), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.538534327617083, -0.0572255150137697
    ), logphi = c(0.533240998166515, -1.66174726611724)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_177 = structure(list(
    par = c(-0.277825146304548, -0.101723292270086, 0.476679396787068, 
    -1.61806792151284), value = 42.2380060390929, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.28696207485, -3.52026313699128, 
    125.599599117621, -7.0658282345093, -3.52026313699128, 19.0861829167943, 
    -10.8523244186642, -6.31186702104714, 125.599599117621, -10.8523244186642, 
    2466.28308371477, -147.946819823552, -7.0658282345093, -6.31186702104714, 
    -147.946819823552, 145.348646682919), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277825146304548, -0.101723292270086
    ), logphi = c(0.476679396787068, -1.61806792151284)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_178 = structure(list(
    par = c(-0.0446596198319638, 0.0621968617601872, 0.500990918782283, 
    -1.59072696677121), value = 47.0520952431308, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.4229737611585, -6.74298223479752, 
    116.670016462095, -4.42595381056066, -6.74298223479752, 23.334641692685, 
    -11.9694228590816, -6.02757391821029, 116.670016462095, -11.9694228590816, 
    2320.80126169976, -150.219657840012, -4.42595381056066, -6.02757391821029, 
    -150.219657840012, 143.062220168133), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0446596198319638, 0.0621968617601872
    ), logphi = c(0.500990918782283, -1.59072696677121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_179 = structure(list(
    par = c(-0.0871069147999807, 0.0277966216554835, 0.474617351247686, 
    -1.67157698000036), value = 41.8163612740371, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.1086025469044, -5.70572867886199, 
    123.91526614941, -2.78202061831934, -5.70572867886199, 22.0535301203029, 
    -7.55220598236406, -6.1569196594391, 123.91526614941, -7.55220598236406, 
    2827.17094905038, -139.813363793984, -2.78202061831934, -6.1569196594391, 
    -139.813363793984, 156.350683599982), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0871069147999807, 0.0277966216554835
    ), logphi = c(0.474617351247686, -1.67157698000036)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_180 = structure(list(
    par = c(-0.30162033532902, 0.159931176067884, 0.516053633910342, 
    -1.56611489215268), value = 35.5945390606592, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.2473490597596, -1.67362948211291, 
    124.851765940903, -10.7841551795218, -1.67362948211291, 28.451406031138, 
    -14.2672290408541, -7.73196881009852, 124.851765940903, -14.2672290408541, 
    2144.62989467634, -197.808554018408, -10.7841551795218, -7.73196881009852, 
    -197.808554018408, 143.226958440934), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30162033532902, 0.159931176067884
    ), logphi = c(0.516053633910342, -1.56611489215268)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_181 = structure(list(
    par = c(-0.421026593453823, -0.0171416990784046, 0.515754139603237, 
    -1.72501761519039), value = 33.6941025001518, counts = structure(c(373L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.2741878363931, -5.54350628334532, 
    144.73402266546, -14.7426438950049, -5.54350628334532, 19.1350356075759, 
    -21.9542219070945, -7.16003297451806, 144.73402266546, -21.9542219070945, 
    3276.84647944793, -271.181026914924, -14.7426438950049, -7.16003297451806, 
    -271.181026914924, 188.267844505319), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421026593453823, -0.0171416990784046
    ), logphi = c(0.515754139603237, -1.72501761519039)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_182 = structure(list(
    par = c(-0.442666877081297, 0.0578822427950288, 0.484475196218385, 
    -1.59766282248696), value = 31.7602967613483, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.8089390677545, 0.300109249451452, 
    129.935204315146, -10.4426060287821, 0.300109249451452, 25.2328044094696, 
    -10.5245554902211, -8.1149668407221, 129.935204315146, -10.5245554902211, 
    2302.46833982051, -177.185376101896, -10.4426060287821, -8.1149668407221, 
    -177.185376101896, 142.591875452069), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.442666877081297, 0.0578822427950288
    ), logphi = c(0.484475196218385, -1.59766282248696)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_183 = structure(list(
    par = c(-0.509032419213477, 0.365133649062132, 0.524147238921311, 
    -1.65607687657749), value = 20.5752891065504, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.3074163099294, 3.88354874658603, 
    144.104288414937, -15.5677150015521, 3.88354874658603, 41.979462984898, 
    -12.1729872741838, -11.3462674864451, 144.104288414937, -12.1729872741838, 
    2650.73036130659, -276.892857051791, -15.5677150015521, -11.3462674864451, 
    -276.892857051791, 171.228170685822), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.509032419213477, 0.365133649062132
    ), logphi = c(0.524147238921311, -1.65607687657749)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_184 = structure(list(
    par = c(-0.36264155783259, -0.144644339610982, 0.521600086046197, 
    -1.77277550968892), value = 38.854820803958, counts = structure(c(287L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.8268115444058, -7.42746621895662, 
    145.089367720175, -14.3127636276219, -7.42746621895662, 15.373408770003, 
    -25.1776110609114, -5.71050629893932, 145.089367720175, -25.1776110609114, 
    3720.68684430538, -281.297774066047, -14.3127636276219, -5.71050629893932, 
    -281.297774066047, 200.431357288977), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36264155783259, -0.144644339610982
    ), logphi = c(0.521600086046197, -1.77277550968892)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_185 = structure(list(
    par = c(-0.354482362252474, 0.04912019469723, 0.49698121901145, 
    -1.66658747715425), value = 36.681178284595, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.4805329935843, -3.23718124128902, 
    136.771764305266, -10.6943776367885, -3.23718124128902, 22.527683080753, 
    -13.5565172243446, -7.7245972054385, 136.771764305266, -13.5565172243446, 
    2789.68144999148, -211.272991986533, -10.6943776367885, -7.7245972054385, 
    -211.272991986533, 164.718647758022), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354482362252474, 0.04912019469723
    ), logphi = c(0.49698121901145, -1.66658747715425)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_186 = structure(list(
    par = c(-0.359885963409672, 0.161675016598793, 0.52149901590289, 
    -1.53831436261342), value = 39.9743677359575, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.0811020816581, -1.00829850957496, 
    123.265338604739, -12.5004574478282, -1.00829850957496, 28.0238413150613, 
    -15.3061874677007, -7.8101352496418, 123.265338604739, -15.3061874677007, 
    1988.65850128094, -202.353162011448, -12.5004574478282, -7.8101352496418, 
    -202.353162011448, 138.733349851705), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359885963409672, 0.161675016598793
    ), logphi = c(0.52149901590289, -1.53831436261342)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_187 = structure(list(
    par = c(-0.0467529410709155, 0.199280896981047, 0.478026117138696, 
    -1.71683870023603), value = 33.1410521053772, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.3567905161669, -4.51106273224866, 
    127.337969928476, -1.53753795384404, -4.51106273224866, 29.8926618711448, 
    -3.89799661171253, -6.77339002486121, 127.337969928476, -3.89799661171253, 
    3139.74567784037, -157.243781974792, -1.53753795384404, -6.77339002486121, 
    -157.243781974792, 166.204667834791), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0467529410709155, 0.199280896981047
    ), logphi = c(0.478026117138696, -1.71683870023603)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_188 = structure(list(
    par = c(-0.0639900153445425, 0.0132693308767803, 0.48693116609141, 
    -1.77529619308776), value = 26.8512991875557, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.9517295961598, -7.36562507075433, 
    135.39061115786, -4.09531995027024, -7.36562507075433, 22.4499107286391, 
    -9.5321388462466, -6.11223063851085, 135.39061115786, -9.5321388462466, 
    3667.03159543569, -183.963076428206, -4.09531995027024, -6.11223063851085, 
    -183.963076428206, 183.806858769842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0639900153445425, 0.0132693308767803
    ), logphi = c(0.48693116609141, -1.77529619308776)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_189 = structure(list(
    par = c(-0.675529260388871, -0.419322259298968, 0.504859732655276, 
    -1.80828011211203), value = 27.9193303275643, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4401501396682, -5.41388364716511, 
    145.475077536261, -19.0323348769894, -5.41388364716511, 10.1576666224901, 
    -30.4488224340815, -4.07870530061416, 145.475077536261, -30.4488224340815, 
    4127.65832207818, -334.901290587553, -19.0323348769894, -4.07870530061416, 
    -334.901290587553, 217.16424384266), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.675529260388871, -0.419322259298968
    ), logphi = c(0.504859732655276, -1.80828011211203)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_190 = structure(list(
    par = c(-0.00947086112668927, 0.174300567842775, 0.4634960988959, 
    -1.57535642169563), value = 37.032501314627, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7862029238318, -2.28766830367988, 
    107.534013780608, 0.980294253771774, -2.28766830367988, 32.7897953518175, 
    -4.47096557643079, -5.98305931909238, 107.534013780608, -4.47096557643079, 
    2176.87530560973, -88.218830843978, 0.980294253771774, -5.98305931909238, 
    -88.218830843978, 127.305935128774), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00947086112668927, 0.174300567842775
    ), logphi = c(0.4634960988959, -1.57535642169563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_191 = structure(list(
    par = c(-0.321975722451456, 0.177264479323451, 0.55135850368956, 
    -1.54956523231006), value = 41.8585827734761, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3688097325796, -3.86102019689361, 
    125.216887205681, -15.5356985001021, -3.86102019689361, 26.9951251663514, 
    -21.4640527662624, -7.12234745137152, 125.216887205681, -21.4640527662624, 
    2074.4462522817, -247.495167424283, -15.5356985001021, -7.12234745137152, 
    -247.495167424283, 152.418200217497), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.321975722451456, 0.177264479323451
    ), logphi = c(0.55135850368956, -1.54956523231006)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_192 = structure(list(
    par = c(-0.467595657595874, 0.17049078249475, 0.55732599071033, 
    -1.4678832848748), value = 39.2227608478143, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.2820384561933, 0.680876267367125, 
    118.474698428628, -19.4412726024495, 0.680876267367125, 31.6734028018573, 
    -20.666191579366, -7.59643912751073, 118.474698428628, -20.666191579366, 
    1651.65695714542, -238.334161300813, -19.4412726024495, -7.59643912751073, 
    -238.334161300813, 136.927648886953), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467595657595874, 0.17049078249475
    ), logphi = c(0.55732599071033, -1.4678832848748)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_193 = structure(list(
    par = c(-0.158429948495813, -0.127429771694742, 0.469960467734969, 
    -1.66208256997471), value = 44.4928288609751, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.1484083565489, -5.72780260910122, 
    124.98695174834, -4.35788266184289, -5.72780260910122, 17.1110556745901, 
    -9.25394618889186, -5.71329220377947, 124.98695174834, -9.25394618889186, 
    2771.16887866846, -136.062690964778, -4.35788266184289, -5.71329220377947, 
    -136.062690964778, 154.263159583223), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.158429948495813, -0.127429771694742
    ), logphi = c(0.469960467734969, -1.66208256997471)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_194 = structure(list(
    par = c(-0.478396568174442, -0.0684486367462146, 0.487784296197525, 
    -1.59493256928606), value = 34.9769968883513, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.0055213412101, -1.6375563625104, 
    129.856776236892, -12.1913445667587, -1.6375563625104, 19.3705306248404, 
    -13.9197970607796, -7.26287051477925, 129.856776236892, -13.9197970607796, 
    2316.56285379778, -184.007850565493, -12.1913445667587, -7.26287051477925, 
    -184.007850565493, 145.140016728718), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.478396568174442, -0.0684486367462146
    ), logphi = c(0.487784296197525, -1.59493256928606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_195 = structure(list(
    par = c(-0.335897032297859, -0.187804679745299, 0.515770871512177, 
    -1.65030038059976), value = 49.8687685620886, counts = structure(c(325L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.0374153701507, -6.01251462484242, 
    132.029612764484, -13.191024536674, -6.01251462484242, 15.2224304184045, 
    -20.2907744508707, -5.51470444865032, 132.029612764484, -20.2907744508707, 
    2756.58001806889, -226.797137610646, -13.191024536674, -5.51470444865032, 
    -226.797137610646, 169.757381190294), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335897032297859, -0.187804679745299
    ), logphi = c(0.515770871512177, -1.65030038059976)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_196 = structure(list(
    par = c(-0.257064885167682, 0.262488321160992, 0.491500832895248, 
    -1.64558784536872), value = 31.4143653974072, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.3234276296807, -0.096750228273379, 
    131.095555369498, -6.52677409984648, -0.096750228273379, 
    33.2442838288927, -5.8908173441452, -8.59383148288373, 131.095555369498, 
    -5.8908173441452, 2593.73416579578, -185.322149738099, -6.52677409984648, 
    -8.59383148288373, -185.322149738099, 153.410514318608), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257064885167682, 0.262488321160992
    ), logphi = c(0.491500832895248, -1.64558784536872)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_197 = structure(list(
    par = c(-0.23897910115196, 0.00768465261451293, 0.526434951619433, 
    -1.68848117789036), value = 34.1437126085454, counts = structure(c(287L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.0158296782254, -6.42501769121395, 
    136.503274344335, -11.7956075298409, -6.42501769121395, 21.6998358535392, 
    -20.5552218588423, -6.50617629105454, 136.503274344335, -20.5552218588423, 
    3002.36613913007, -243.141477892728, -11.7956075298409, -6.50617629105454, 
    -243.141477892728, 178.439584585632), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.23897910115196, 0.00768465261451293
    ), logphi = c(0.526434951619433, -1.68848117789036)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_198 = structure(list(
    par = c(-0.257634116603296, 0.103675218972519, 0.540878167720348, 
    -1.61568378687533), value = 40.7699666612284, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.5503000956223, -5.96320786350191, 
    130.512055001475, -13.3759189520077, -5.96320786350191, 23.7648203356144, 
    -21.3559501798244, -6.8290568346896, 130.512055001475, -21.3559501798244, 
    2485.73466238611, -245.980421157199, -13.3759189520077, -6.8290568346896, 
    -245.980421157199, 164.711221811942), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257634116603296, 0.103675218972519
    ), logphi = c(0.540878167720348, -1.61568378687533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_199 = structure(list(
    par = c(-0.0726603306589443, 0.506494637382247, 0.508989643243276, 
    -1.59749684219322), value = 34.0136413748598, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.1746297449261, 0.635422262362795, 
    118.979802889996, -3.13136891971766, 0.635422262362795, 41.4232720586938, 
    -2.98132302489762, -8.47525138603089, 118.979802889996, -2.98132302489762, 
    2277.73702136602, -177.963103744183, -3.13136891971766, -8.47525138603089, 
    -177.963103744183, 142.746489737888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0726603306589443, 0.506494637382247
    ), logphi = c(0.508989643243276, -1.59749684219322)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_200 = structure(list(
    par = c(-0.345626007108532, -0.257570643396465, 0.518533296561867, 
    -1.62182363647264), value = 45.4240310943101, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.2492091853854, -5.91605974520348, 
    128.203360938883, -13.718863456802, -5.91605974520348, 13.7198448957321, 
    -20.4489324371337, -4.96117810122598, 128.203360938883, -20.4489324371337, 
    2578.06087166124, -221.219725771604, -13.718863456802, -4.96117810122598, 
    -221.219725771604, 164.056959379266), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.345626007108532, -0.257570643396465
    ), logphi = c(0.518533296561867, -1.62182363647264)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_1 = structure(list(
    par = c(-0.279919751539309, -0.00415079639930909, 0.480508365610278, 
    -1.64516746286584), value = 43.3588211672938, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.1415350268489, -4.19922790406702, 
    162.305692088083, -9.11079686360949, -4.19922790406702, 27.0492700664704, 
    -12.6993847580081, -8.72909569871183, 162.305692088083, -12.6993847580081, 
    3291.63407675992, -207.466122159161, -9.11079686360949, -8.72909569871183, 
    -207.466122159161, 191.094546453385), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279919751539309, -0.00415079639930909
    ), logphi = c(0.480508365610278, -1.64516746286584)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_2 = structure(list(
    par = c(-0.0260701648662556, -0.118082194030685, 0.493237549146374, 
    -1.64777544669454), value = 61.2945555414363, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.8958866475484, -10.3802262199082, 
    150.291717806894, -5.24629920661823, -10.3802262199082, 21.7869847034535, 
    -15.4191626737799, -6.4873184690839, 150.291717806894, -15.4191626737799, 
    3396.04669093241, -185.572361237618, -5.24629920661823, -6.4873184690839, 
    -185.572361237618, 196.493602913961), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0260701648662556, -0.118082194030685
    ), logphi = c(0.493237549146374, -1.64777544669454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_3 = structure(list(
    par = c(-0.0951509837825653, 0.091403790087383, 0.500353368790397, 
    -1.66354069059289), value = 42.5167090590285, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.1012697696134, -6.77677499716367, 
    158.989347854188, -6.78039903601046, -6.77677499716367, 33.0589892580946, 
    -14.5803468747374, -8.30520696570858, 158.989347854188, -14.5803468747374, 
    3483.98568787012, -222.287989664949, -6.78039903601046, -8.30520696570858, 
    -222.287989664949, 201.957686792653), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0951509837825653, 0.091403790087383
    ), logphi = c(0.500353368790397, -1.66354069059289)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_4 = structure(list(
    par = c(-0.232916283065791, -0.0265608749681974, 0.495140177730171, 
    -1.60672628561524), value = 56.9379412030966, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.486077750838, -5.7158421942205, 
    156.037931228425, -9.91389385696095, -5.7158421942205, 25.4024624783966, 
    -16.2801231340381, -8.07464251106893, 156.037931228425, -16.2801231340381, 
    3013.25593511059, -210.140293399164, -9.91389385696095, -8.07464251106893, 
    -210.140293399164, 184.65831858272), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232916283065791, -0.0265608749681974
    ), logphi = c(0.495140177730171, -1.60672628561524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_5 = structure(list(
    par = c(-0.352202007633567, -0.0200408687310554, 0.508262842208391, 
    -1.58859785159197), value = 50.7942320034141, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.0344501090765, -3.74798556102007, 
    159.113221535279, -14.7932427561059, -3.74798556102007, 27.6569307704477, 
    -20.3603594677304, -8.49811348757612, 159.113221535279, -20.3603594677304, 
    2881.04851609461, -247.526699844514, -14.7932427561059, -8.49811348757612, 
    -247.526699844514, 186.327044492174), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.352202007633567, -0.0200408687310554
    ), logphi = c(0.508262842208391, -1.58859785159197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_6 = structure(list(
    par = c(-0.155547567584014, 0.182327822576726, 0.501810436061608, 
    -1.52845900566314), value = 56.1092837992888, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.4047734510266, -3.65128062718156, 
    142.440266692745, -7.19243466473785, -3.65128062718156, 35.0357629574916, 
    -13.133639328089, -8.71527050705367, 142.440266692745, -13.133639328089, 
    2413.88561806311, -184.230157690202, -7.19243466473785, -8.71527050705367, 
    -184.230157690202, 158.086215549247), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.155547567584014, 0.182327822576726
    ), logphi = c(0.501810436061608, -1.52845900566314)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_7 = structure(list(
    par = c(-0.347694314429775, 0.15450310640083, 0.489438034766187, 
    -1.6608573248942), value = 40.8856114125245, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.7817416992733, -1.65175061717093, 
    169.913192413773, -11.232521024418, -1.65175061717093, 32.9383544084294, 
    -11.0651891080948, -10.642638715197, 169.913192413773, -11.0651891080948, 
    3389.05468563411, -247.986102396069, -11.232521024418, -10.642638715197, 
    -247.986102396069, 198.600183843212), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347694314429775, 0.15450310640083
    ), logphi = c(0.489438034766187, -1.6608573248942)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_8 = structure(list(
    par = c(0.00786114837862775, 0.270191061683042, 0.457056247569932, 
    -1.51617808089263), value = 57.3898561199382, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.1341966673973, -2.98501209705648, 
    123.41881630995, 3.25244917398493, -2.98501209705648, 39.3182788478441, 
    -3.74942465697359, -7.37455776800289, 123.41881630995, -3.74942465697359, 
    2292.87074842688, -79.9460698726051, 3.25244917398493, -7.37455776800289, 
    -79.9460698726051, 137.575756276931), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00786114837862775, 0.270191061683042
    ), logphi = c(0.457056247569932, -1.51617808089263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_9 = structure(list(
    par = c(-0.433173534556471, 0.00169440508564101, 0.520807190414504, 
    -1.6482981791837), value = 40.8114388569574, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.1682469492599, -4.19674695706362, 
    171.196480478031, -19.1215263258826, -4.19674695706362, 28.8240486412406, 
    -26.4536277985172, -8.95930494149155, 171.196480478031, -26.4536277985172, 
    3382.08164500742, -315.459337528523, -19.1215263258826, -8.95930494149155, 
    -315.459337528523, 214.31103813363), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.433173534556471, 0.00169440508564101
    ), logphi = c(0.520807190414504, -1.6482981791837)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_10 = structure(list(
    par = c(-0.468537944275684, -0.165860714112816, 0.476217247018143, 
    -1.68301781557148), value = 46.6301024370736, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.6813739961702, -4.01959458073975, 
    173.288041674269, -14.7076445911054, -4.01959458073975, 20.2733865055649, 
    -17.2128266591187, -8.51561103765164, 173.288041674269, -17.2128266591187, 
    3646.34448394341, -249.852269557316, -14.7076445911054, -8.51561103765164, 
    -249.852269557316, 206.421504955756), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.468537944275684, -0.165860714112816
    ), logphi = c(0.476217247018143, -1.68301781557148)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_11 = structure(list(
    par = c(-0.599014016963398, -0.011319678487273, 0.52453476529942, 
    -1.5855535864726), value = 45.197879902845, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.7428997959257, -2.17837612481731, 
    165.62287800781, -23.6755570437452, -2.17837612481731, 27.3616015320499, 
    -28.4673976622685, -9.08021547907367, 165.62287800781, -28.4673976622685, 
    2877.82615496113, -320.835051654811, -23.6755570437452, -9.08021547907367, 
    -320.835051654811, 200.953254587688), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.599014016963398, -0.011319678487273
    ), logphi = c(0.52453476529942, -1.5855535864726)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_12 = structure(list(
    par = c(-0.54107474055885, -0.114183321651548, 0.532104173983611, 
    -1.59835495096392), value = 55.1477842163914, counts = structure(c(475L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.7670540145757, -4.82395330791974, 
    164.038467744376, -23.6027291364849, -4.82395330791974, 22.3221998716383, 
    -31.4447838682952, -7.3743327462239, 164.038467744376, -31.4447838682952, 
    3021.06941553149, -331.179674574855, -23.6027291364849, -7.3743327462239, 
    -331.179674574855, 208.944789157783), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.54107474055885, -0.114183321651548
    ), logphi = c(0.532104173983611, -1.59835495096392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_13 = structure(list(
    par = c(-0.334075202869521, -0.0637562634149216, 0.519475080309164, 
    -1.54295040467239), value = 61.3206978212215, counts = structure(c(313L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.3504726974791, -4.45128031678621, 
    151.663842940408, -15.8284500244577, -4.45128031678621, 26.1767922200562, 
    -22.3065566160585, -7.53529355446148, 151.663842940408, -22.3065566160585, 
    2571.96701806528, -243.457768902111, -15.8284500244577, -7.53529355446148, 
    -243.457768902111, 175.970038766238), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334075202869521, -0.0637562634149216
    ), logphi = c(0.519475080309164, -1.54295040467239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_14 = structure(list(
    par = c(-0.153763380139468, 0.142813269500231, 0.508931956737031, 
    -1.57293848704183), value = 51.1598971668082, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.6356164804921, -5.69878005229896, 
    150.104463301659, -8.76463765209223, -5.69878005229896, 31.9369346826193, 
    -15.7216357141721, -8.66481530881202, 150.104463301659, -15.7216357141721, 
    2743.0558692636, -214.25933046082, -8.76463765209223, -8.66481530881202, 
    -214.25933046082, 176.12318423943), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153763380139468, 0.142813269500231
    ), logphi = c(0.508931956737031, -1.57293848704183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_15 = structure(list(
    par = c(-0.48592976959152, 0.204088987121249, 0.517759290780923, 
    -1.56082000366613), value = 34.0426135280012, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.807816050281, 2.02064951437819, 
    161.699925754988, -18.2458533410923, 2.02064951437819, 39.0778340353393, 
    -18.2009338036693, -11.3233687120129, 161.699925754988, -18.2009338036693, 
    2616.96776677667, -276.92383782707, -18.2458533410923, -11.3233687120129, 
    -276.92383782707, 181.640846390607), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.48592976959152, 0.204088987121249
    ), logphi = c(0.517759290780923, -1.56082000366613)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_16 = structure(list(
    par = c(-0.133410978897177, 0.170215558092071, 0.467301300799823, 
    -1.53738109575878), value = 56.4377977106425, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.9897090149624, -0.603706629576095, 
    136.845011777353, -1.63688362686543, -0.603706629576095, 
    38.5259910125058, -6.42880910106669, -8.26602760817252, 136.845011777353, 
    -6.42880910106669, 2434.13189778963, -120.168058263204, -1.63688362686543, 
    -8.26602760817252, -120.168058263204, 147.875953189214), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.133410978897177, 0.170215558092071
    ), logphi = c(0.467301300799823, -1.53738109575878)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_17 = structure(list(
    par = c(-0.206872261947534, -0.250645603847843, 0.517998704674537, 
    -1.67496426041199), value = 59.2010504067728, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.501832790128, -9.65799113039623, 
    162.644538871604, -13.6469014968554, -9.65799113039623, 16.8312302744056, 
    -24.3184972621435, -6.00802909822562, 162.644538871604, -24.3184972621435, 
    3686.75357947978, -270.540943303921, -13.6469014968554, -6.00802909822562, 
    -270.540943303921, 218.287705422426), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206872261947534, -0.250645603847843
    ), logphi = c(0.517998704674537, -1.67496426041199)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_18 = structure(list(
    par = c(-0.244459701289564, 0.0860218065664229, 0.510669208862726, 
    -1.58843025486965), value = 53.8095194596165, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.4463173460916, -4.12397515425766, 
    156.284962802289, -11.7759588462718, -4.12397515425766, 32.3696528798934, 
    -18.0004919325683, -8.83409967045168, 156.284962802289, -18.0004919325683, 
    2864.73448922209, -236.279663586636, -11.7759588462718, -8.83409967045168, 
    -236.279663586636, 183.97109546342), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.244459701289564, 0.0860218065664229
    ), logphi = c(0.510669208862726, -1.58843025486965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_19 = structure(list(
    par = c(-0.393029573926267, -0.163690486989745, 0.492912402754923, 
    -1.58043811414298), value = 63.3177627386523, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.8555413926505, -4.7414989587935, 
    156.624400746708, -14.1051575228701, -4.7414989587935, 20.1039381568791, 
    -18.8524342963348, -7.66301182419937, 156.624400746708, -18.8524342963348, 
    2823.50274223653, -216.883416085167, -14.1051575228701, -7.66301182419937, 
    -216.883416085167, 178.660860585822), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.393029573926267, -0.163690486989745
    ), logphi = c(0.492912402754923, -1.58043811414298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_20 = structure(list(
    par = c(-0.219463151810578, -0.633619488806225, 0.479222466740265, 
    -1.65608438558997), value = 70.6902057157437, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.3118334585843, -7.90896670110897, 
    153.726895767647, -10.0146761017328, -7.90896670110897, 8.54883828083075, 
    -16.0550907821744, -4.37634565386702, 153.726895767647, -16.0550907821744, 
    3519.50811247548, -184.442994164868, -10.0146761017328, -4.37634565386702, 
    -184.442994164868, 200.50334619981), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219463151810578, -0.633619488806225
    ), logphi = c(0.479222466740265, -1.65608438558997)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_21 = structure(list(
    par = c(-0.31113784805738, -0.0406755003474304, 0.489386053302957, 
    -1.65594986901535), value = 49.9998515884232, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.9761683264007, -5.46906999332464, 
    165.944743740098, -11.5481756770563, -5.46906999332464, 23.7475650379793, 
    -16.2014518974019, -8.61013087583018, 165.944743740098, -16.2014518974019, 
    3408.80733447158, -234.262527207818, -11.5481756770563, -8.61013087583018, 
    -234.262527207818, 199.583614016063), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31113784805738, -0.0406755003474304
    ), logphi = c(0.489386053302957, -1.65594986901535)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_22 = structure(list(
    par = c(-0.329279978573232, 0.0133049073515692, 0.484668571449407, 
    -1.71777504835728), value = 36.2051857936014, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.3814695028813, -4.49644194588927, 
    175.871704257702, -11.45771157951, -4.49644194588927, 27.3892610458404, 
    -14.0828849701791, -9.36156728492676, 175.871704257702, -14.0828849701791, 
    3952.64600516043, -258.882109008596, -11.45771157951, -9.36156728492676, 
    -258.882109008596, 216.099939528647), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329279978573232, 0.0133049073515692
    ), logphi = c(0.484668571449407, -1.71777504835728)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_23 = structure(list(
    par = c(-0.356015614352577, 0.146955256860748, 0.542656786910826, 
    -1.6303106952614), value = 39.3756891437516, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.6366874572566, -4.75735623517437, 
    169.208316702196, -19.4911617423799, -4.75735623517437, 34.3108873437359, 
    -28.5149742467183, -9.47773747128622, 169.208316702196, -28.5149742467183, 
    3213.00587773443, -336.25692589645, -19.4911617423799, -9.47773747128622, 
    -336.25692589645, 213.929435636473), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356015614352577, 0.146955256860748
    ), logphi = c(0.542656786910826, -1.6303106952614)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_24 = structure(list(
    par = c(-0.281457760709693, -0.0206782282621191, 0.476498740650842, 
    -1.77076825837697), value = 40.6779120842639, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0939246022422, -5.8236232263198, 
    179.688227511576, -9.57664629019916, -5.8236232263198, 25.8035027851378, 
    -11.8819861789632, -8.79663308595013, 179.688227511576, -11.8819861789632, 
    4494.55581729197, -256.912718057833, -9.57664629019916, -8.79663308595013, 
    -256.912718057833, 227.281743963914), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281457760709693, -0.0206782282621191
    ), logphi = c(0.476498740650842, -1.77076825837697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_25 = structure(list(
    par = c(-0.441128599229295, -0.269533217022586, 0.461749656196843, 
    -1.67060616080097), value = 48.3639686590186, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.750580093303, -3.84294972910482, 
    168.229956416965, -12.2568343829954, -3.84294972910482, 17.7310557578636, 
    -14.4155395709333, -7.63391368518995, 168.229956416965, -14.4155395709333, 
    3521.60801998735, -206.43301347345, -12.2568343829954, -7.63391368518995, 
    -206.43301347345, 195.657965265994), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.441128599229295, -0.269533217022586
    ), logphi = c(0.461749656196843, -1.67060616080097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_26 = structure(list(
    par = c(0.044250813169101, -0.0351829864833918, 0.47015069192124, 
    -1.63986534382955), value = 66.774999340527, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.435738521345, -9.46156729142444, 
    141.189939284914, -0.201727118565032, -9.46156729142444, 
    25.9993282583082, -9.65726290758084, -6.43717230985885, 141.189939284914, 
    -9.65726290758084, 3290.95428849513, -130.962185147965, -0.201727118565032, 
    -6.43717230985885, -130.962185147965, 184.87459417571), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.044250813169101, -0.0351829864833918
    ), logphi = c(0.47015069192124, -1.63986534382955)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_27 = structure(list(
    par = c(-0.26697694673278, -0.198483610654573, 0.481404767660827, 
    -1.60079118670104), value = 57.5441126247196, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.5029822976539, -5.71278935623809, 
    153.684315769453, -9.57773102960857, -5.71278935623809, 19.6757773025524, 
    -15.6188531175161, -7.05304286263697, 153.684315769453, -15.6188531175161, 
    2976.34312715545, -182.404688629845, -9.57773102960857, -7.05304286263697, 
    -182.404688629845, 179.0578079639), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26697694673278, -0.198483610654573
    ), logphi = c(0.481404767660827, -1.60079118670104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_28 = structure(list(
    par = c(-0.23694917010866, 0.0811032800493314, 0.523754104401231, 
    -1.59347238395765), value = 53.8536251739434, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.8162578354695, -6.28015140691218, 
    157.839214931954, -13.6341125074324, -6.28015140691218, 29.8927470776533, 
    -21.4967914224928, -8.55587650594458, 157.839214931954, -21.4967914224928, 
    2921.41080305619, -262.011086098468, -13.6341125074324, -8.55587650594458, 
    -262.011086098468, 191.216977110997), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.23694917010866, 0.0811032800493314
    ), logphi = c(0.523754104401231, -1.59347238395765)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_29 = structure(list(
    par = c(-0.50988221644037, 0.0807986409930286, 0.54582113643004, 
    -1.55135934579687), value = 57.5422505065405, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.1728363333837, -1.62163778583135, 
    161.207258386753, -25.064514463935, -1.62163778583135, 32.6145993483351, 
    -28.8501272152075, -9.90504594966524, 161.207258386753, -28.8501272152075, 
    2626.70249323449, -330.129704328996, -25.064514463935, -9.90504594966524, 
    -330.129704328996, 197.403193169521), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.50988221644037, 0.0807986409930286
    ), logphi = c(0.54582113643004, -1.55135934579687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_30 = structure(list(
    par = c(-0.214130221650591, 0.259386392041479, 0.49858877992492, 
    -1.48672598371502), value = 52.5268185327076, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.7281254951134, 1.28503722685025, 
    137.779739624477, -7.20879400084584, 1.28503722685025, 43.7317270538529, 
    -10.529003686699, -9.35490763609437, 137.779739624477, -10.529003686699, 
    2120.11715665739, -170.525309179936, -7.20879400084584, -9.35490763609437, 
    -170.525309179936, 142.811700680312), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214130221650591, 0.259386392041479
    ), logphi = c(0.49858877992492, -1.48672598371502)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_31 = structure(list(
    par = c(-0.236612441061942, 0.1914398456532, 0.488806292156934, 
    -1.54276150106529), value = 47.5652363328229, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.3250238769709, -0.430701847520254, 
    146.296693859682, -7.09865605941218, -0.430701847520254, 
    37.0287960649307, -9.97759886978145, -9.42554397731499, 146.296693859682, 
    -9.97759886978145, 2479.69459777941, -176.869491990139, -7.09865605941218, 
    -9.42554397731499, -176.869491990139, 158.009332928088), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236612441061942, 0.1914398456532
    ), logphi = c(0.488806292156934, -1.54276150106529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_32 = structure(list(
    par = c(-0.486109381327481, -0.298894787202078, 0.520732572610821, 
    -1.65784325049565), value = 55.6410709838726, counts = structure(c(367L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.793674384953, -6.11720810184124, 
    167.057695898976, -21.231406545752, -6.11720810184124, 17.0182961021226, 
    -30.3709809514885, -6.01250002052467, 167.057695898976, -30.3709809514885, 
    3556.10246133153, -325.479974097043, -21.231406545752, -6.01250002052467, 
    -325.479974097043, 223.574857621145), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.486109381327481, -0.298894787202078
    ), logphi = c(0.520732572610821, -1.65784325049565)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_33 = structure(list(
    par = c(-0.431131101023925, 0.152960738038317, 0.495419687362979, 
    -1.70650988568597), value = 30.0689135146389, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.0299686343296, -0.958101844972248, 
    181.079570641174, -14.771942796088, -0.958101844972248, 35.690013994838, 
    -14.1227685013234, -11.4184576096577, 181.079570641174, -14.1227685013234, 
    3808.1830259209, -297.946710686503, -14.771942796088, -11.4184576096577, 
    -297.946710686503, 217.263466369744), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431131101023925, 0.152960738038317
    ), logphi = c(0.495419687362979, -1.70650988568597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_34 = structure(list(
    par = c(-0.635458711982723, 0.201892873607162, 0.564233820272211, 
    -1.42750147887363), value = 53.8259587979366, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.8666207395884, 2.94161422687012, 
    144.244916089775, -28.0264098684313, 2.94161422687012, 39.537812853041, 
    -27.3535501911226, -9.13844115757456, 144.244916089775, -27.3535501911226, 
    1829.59712474329, -307.051335145303, -28.0264098684313, -9.13844115757456, 
    -307.051335145303, 167.029065611501), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.635458711982723, 0.201892873607162
    ), logphi = c(0.564233820272211, -1.42750147887363)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_35 = structure(list(
    par = c(-0.17345972385512, 0.221010580801753, 0.512725832829481, 
    -1.53259596942808), value = 50.5871780163647, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.7501174672417, -1.6941449381136, 
    145.420272577468, -9.08589439241325, -1.6941449381136, 41.6122426951659, 
    -14.6762758639341, -9.12026383659281, 145.420272577468, -14.6762758639341, 
    2442.26495372857, -209.430583227643, -9.08589439241325, -9.12026383659281, 
    -209.430583227643, 163.684356557781), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17345972385512, 0.221010580801753
    ), logphi = c(0.512725832829481, -1.53259596942808)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_36 = structure(list(
    par = c(0.0681966262634394, 0.191204036463285, 0.495500175455181, 
    -1.66658323549087), value = 53.1627583687968, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.6589488355769, -10.3425501354337, 
    148.68907607557, -1.56141991425329, -10.3425501354337, 33.6496636776928, 
    -10.5797458118673, -7.77559226339264, 148.68907607557, -10.5797458118673, 
    3510.99502065111, -189.907909153852, -1.56141991425329, -7.77559226339264, 
    -189.907909153852, 198.961461311598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0681966262634394, 0.191204036463285
    ), logphi = c(0.495500175455181, -1.66658323549087)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_37 = structure(list(
    par = c(-0.4114032746348, -0.00345688531063075, 0.517650419562023, 
    -1.48463060129768), value = 59.0804314642193, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.4348367086469, -1.77182307226076, 
    145.347842392951, -16.6093049962512, -1.77182307226076, 28.7452789518028, 
    -20.4772408327614, -8.12039521669305, 145.347842392951, -20.4772408327614, 
    2165.57406595186, -223.7893454069, -16.6093049962512, -8.12039521669305, 
    -223.7893454069, 155.959828681773), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4114032746348, -0.00345688531063075
    ), logphi = c(0.517650419562023, -1.48463060129768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_38 = structure(list(
    par = c(-0.183508433011528, -0.196534244599388, 0.477135195999193, 
    -1.69638006019546), value = 52.01725681188, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.1451081772336, -7.47839334458433, 
    162.600732510398, -7.66509527938553, -7.47839334458433, 20.0757673791685, 
    -14.3189173442693, -6.87505233543106, 162.600732510398, -14.3189173442693, 
    3804.89690319585, -200.922754629573, -7.66509527938553, -6.87505233543106, 
    -200.922754629573, 207.594952961188), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183508433011528, -0.196534244599388
    ), logphi = c(0.477135195999193, -1.69638006019546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_39 = structure(list(
    par = c(-0.325103652508304, -0.0556141239895758, 0.502314612063902, 
    -1.61621780070647), value = 54.9016363829173, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.107853566611, -5.73608806142545, 
    161.495512422505, -13.5900990922977, -5.73608806142545, 23.3456610541083, 
    -19.5752867089283, -8.26091530203854, 161.495512422505, -19.5752867089283, 
    3100.69859911621, -243.20053530591, -13.5900990922977, -8.26091530203854, 
    -243.20053530591, 192.828284545143), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325103652508304, -0.0556141239895758
    ), logphi = c(0.502314612063902, -1.61621780070647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_40 = structure(list(
    par = c(-0.225872018635862, 0.162901837555503, 0.445419678319512, 
    -1.58827053056209), value = 41.8769042775765, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.0800177319114, 1.01451044898226, 
    144.483810451845, -0.810279162877237, 1.01451044898226, 33.7070081570801, 
    -0.566788942890639, -8.66250151432268, 144.483810451845, 
    -0.566788942890639, 2736.61334962405, -110.233863409803, 
    -0.810279162877237, -8.66250151432268, -110.233863409803, 
    155.099464461017), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225872018635862, 0.162901837555503
    ), logphi = c(0.445419678319512, -1.58827053056209)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_41 = structure(list(
    par = c(-0.198529694474043, 0.101777986754552, 0.473750549131656, 
    -1.67085359251096), value = 48.3426511331921, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.2415813207155, -3.78849011717364, 
    161.344587292334, -5.4999186449578, -3.78849011717364, 31.0415254247687, 
    -7.58471546191686, -8.95703579484319, 161.344587292334, -7.58471546191686, 
    3486.12202928678, -194.428663060187, -5.4999186449578, -8.95703579484319, 
    -194.428663060187, 194.11198328001), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198529694474043, 0.101777986754552
    ), logphi = c(0.473750549131656, -1.67085359251096)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_42 = structure(list(
    par = c(-0.403811014519233, -0.196726292525397, 0.518361773487911, 
    -1.49157191938085), value = 66.5961410333427, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.9321108666875, -4.32269890282555, 
    144.200528314542, -17.3270040217943, -4.32269890282555, 20.2214138376178, 
    -22.2868189112546, -6.42552566887389, 144.200528314542, -22.2868189112546, 
    2248.91425816054, -224.823557841702, -17.3270040217943, -6.42552566887389, 
    -224.823557841702, 160.254708472252), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403811014519233, -0.196726292525397
    ), logphi = c(0.518361773487911, -1.49157191938085)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_43 = structure(list(
    par = c(-0.310043112765794, -0.038689335231183, 0.50357921609754, 
    -1.53225380826981), value = 57.4889453063805, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.9496136002625, -4.08721891176356, 
    148.447332360746, -12.5616312782739, -4.08721891176356, 25.611519124169, 
    -18.0929427937571, -7.92472431143665, 148.447332360746, -18.0929427937571, 
    2471.48417163778, -205.141098852835, -12.5616312782739, -7.92472431143665, 
    -205.141098852835, 164.282525815906), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310043112765794, -0.038689335231183
    ), logphi = c(0.50357921609754, -1.53225380826981)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_44 = structure(list(
    par = c(-0.358113471546846, 0.00852716225745876, 0.513009474168642, 
    -1.54374590158675), value = 63.4721157132269, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.52502771531, -3.67829862035762, 
    152.982608501162, -15.1293329402336, -3.67829862035762, 26.9744584624476, 
    -20.1943192372767, -8.46474613780401, 152.982608501162, -20.1943192372767, 
    2550.68642945488, -236.256148098413, -15.1293329402336, -8.46474613780401, 
    -236.256148098413, 172.910532139525), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358113471546846, 0.00852716225745876
    ), logphi = c(0.513009474168642, -1.54374590158675)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_45 = structure(list(
    par = c(-0.298213338372588, 0.0242053787439867, 0.481103313658076, 
    -1.64954888641678), value = 40.0343817389953, counts = structure(c(309L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.9834954880599, -3.2688616897758, 
    164.074867425867, -9.52060454650905, -3.2688616897758, 28.1333364444691, 
    -12.3044230093683, -9.09217033928655, 164.074867425867, -12.3044230093683, 
    3320.25917227519, -214.57193541341, -9.52060454650905, -9.09217033928655, 
    -214.57193541341, 192.53986958212), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298213338372588, 0.0242053787439867
    ), logphi = c(0.481103313658076, -1.64954888641678)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_46 = structure(list(
    par = c(-0.326429315472694, 0.0962581780682472, 0.471490282516082, 
    -1.61435082587676), value = 42.2164172119463, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.205479635239, -0.887226065060531, 
    158.831505876478, -7.90845454901046, -0.887226065060531, 
    30.5193897514044, -7.97187883350148, -9.68336096107691, 158.831505876478, 
    -7.97187883350148, 2986.591801589, -185.988167839213, -7.90845454901046, 
    -9.68336096107691, -185.988167839213, 175.704339470784), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326429315472694, 0.0962581780682472
    ), logphi = c(0.471490282516082, -1.61435082587676)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_47 = structure(list(
    par = c(-0.3979031941787, -0.119551802768585, 0.515108257370681, 
    -1.58997261163389), value = 56.5085686244686, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.0942388290186, -5.0218406215663, 
    159.668667700785, -17.4367832919131, -5.0218406215663, 22.8063971761117, 
    -23.9978311196154, -7.58343357709634, 159.668667700785, -23.9978311196154, 
    2926.15721543577, -266.977160588766, -17.4367832919131, -7.58343357709634, 
    -266.977160588766, 192.412555618304), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3979031941787, -0.119551802768585
    ), logphi = c(0.515108257370681, -1.58997261163389)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_48 = structure(list(
    par = c(-0.236365974308368, -0.0324181841866417, 0.508809411980172, 
    -1.59364698748631), value = 58.134954234755, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.0216004352823, -6.4897211107251, 
    155.479870979747, -11.9658091239927, -6.4897211107251, 25.0737564240211, 
    -19.4826559685168, -7.83043887508938, 155.479870979747, -19.4826559685168, 
    2932.22321580799, -230.997656442078, -11.9658091239927, -7.83043887508938, 
    -230.997656442078, 186.213634117749), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236365974308368, -0.0324181841866417
    ), logphi = c(0.508809411980172, -1.59364698748631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_49 = structure(list(
    par = c(-0.278459732962347, -0.329613935766985, 0.501071762044568, 
    -1.77118274232784), value = 52.0211723133306, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0968604796602, -9.91953953466407, 
    174.913092186202, -13.8779907858932, -9.91953953466407, 13.5891265546917, 
    -23.9117145248713, -5.95308879702827, 174.913092186202, -23.9117145248713, 
    4646.17538620082, -291.090751774803, -13.8779907858932, -5.95308879702827, 
    -291.090751774803, 242.382741687308), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278459732962347, -0.329613935766985
    ), logphi = c(0.501071762044568, -1.77118274232784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_50 = structure(list(
    par = c(-0.170700945679177, -0.384380194627187, 0.496380935739168, 
    -1.72548344562515), value = 60.3151330929737, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.0303881080036, -9.71325247256516, 
    164.336519622665, -10.6224408886746, -9.71325247256516, 13.3487338338512, 
    -19.8607665407025, -5.42488329458024, 164.336519622665, -19.8607665407025, 
    4170.27315931406, -239.713167744071, -10.6224408886746, -5.42488329458024, 
    -239.713167744071, 226.156329993898), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170700945679177, -0.384380194627187
    ), logphi = c(0.496380935739168, -1.72548344562515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_51 = structure(list(
    par = c(-0.406511553093148, 0.376158338946775, 0.482040876702351, 
    -1.53587092479522), value = 29.5556805699664, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.8890338839489, 11.8132434145934, 
    150.017029064031, -8.32411201479033, 11.8132434145934, 57.1436914977852, 
    -0.578305268561508, -12.1062008133777, 150.017029064031, 
    -0.578305268561508, 2349.21102310359, -187.9090351391, -8.32411201479033, 
    -12.1062008133777, -187.9090351391, 151.377848434109), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.406511553093148, 0.376158338946775
    ), logphi = c(0.482040876702351, -1.53587092479522)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_52 = structure(list(
    par = c(-0.0644956794725977, 0.071070591446175, 0.450840817312335, 
    -1.73103862814278), value = 38.4259630983758, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.9768205947137, -4.96599768240458, 
    155.716208844581, 0.123261974849243, -4.96599768240458, 31.8392374882848, 
    -1.57204316053594, -7.34400702562255, 155.716208844581, -1.57204316053594, 
    4045.17027546802, -151.65981188936, 0.123261974849243, -7.34400702562255, 
    -151.65981188936, 203.088265434914), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0644956794725977, 0.071070591446175
    ), logphi = c(0.450840817312335, -1.73103862814278)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_53 = structure(list(
    par = c(-0.172679235527141, 0.127724599178869, 0.510485088990417, 
    -1.54302815456899), value = 62.1155587380975, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.384858769008, -5.69446319076405, 
    146.479416601508, -9.3928380842101, -5.69446319076405, 30.7936731829273, 
    -16.2434337518391, -8.47716875540527, 146.479416601508, -16.2434337518391, 
    2532.27131697109, -207.172731696126, -9.3928380842101, -8.47716875540527, 
    -207.172731696126, 167.235392938281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.172679235527141, 0.127724599178869
    ), logphi = c(0.510485088990417, -1.54302815456899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_54 = structure(list(
    par = c(-0.440252369695924, 0.0098226715954967, 0.523629016323775, 
    -1.65444827766954), value = 51.5869617044758, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.323815572881, -5.67798237760542, 
    172.408350225695, -19.7072311660662, -5.67798237760542, 25.7867617978746, 
    -27.5819106825281, -8.99349826877227, 172.408350225695, -27.5819106825281, 
    3438.08894080588, -325.575090448282, -19.7072311660662, -8.99349826877227, 
    -325.575090448282, 217.788770404681), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.440252369695924, 0.0098226715954967
    ), logphi = c(0.523629016323775, -1.65444827766954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_55 = structure(list(
    par = c(0.0129074552049811, 0.124729566602466, 0.496612246333747, 
    -1.61693259750245), value = 55.1560603757685, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.9657807701284, -9.14437305787885, 
    145.710837138324, -3.28930338522326, -9.14437305787885, 31.2277176615083, 
    -12.743169005347, -7.65429280491503, 145.710837138324, -12.743169005347, 
    3098.0961241216, -182.048573034166, -3.28930338522326, -7.65429280491503, 
    -182.048573034166, 184.749565638853), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0129074552049811, 0.124729566602466
    ), logphi = c(0.496612246333747, -1.61693259750245)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_56 = structure(list(
    par = c(-0.414928901511943, -0.0243872697007926, 0.501494314759172, 
    -1.56851590146211), value = 65.2777140917247, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.3001795422008, -3.91889128081857, 
    157.589350600063, -15.2067402794387, -3.91889128081857, 23.860916357421, 
    -18.9985301091156, -8.81088682902487, 157.589350600063, -18.9985301091156, 
    2715.10917686513, -233.933070486358, -15.2067402794387, -8.81088682902487, 
    -233.933070486358, 177.426082508703), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.414928901511943, -0.0243872697007926
    ), logphi = c(0.501494314759172, -1.56851590146211)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_57 = structure(list(
    par = c(-0.270890437265796, -0.399192177668135, 0.483356848465187, 
    -1.58095482651965), value = 71.0367161954035, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.8968132773668, -6.96045950476787, 
    149.071364049291, -10.5216225083637, -6.96045950476787, 13.2637410246161, 
    -16.7798377361805, -5.66177676830648, 149.071364049291, -16.7798377361805, 
    2862.96562969568, -173.989333600133, -10.5216225083637, -5.66177676830648, 
    -173.989333600133, 175.186487240353), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270890437265796, -0.399192177668135
    ), logphi = c(0.483356848465187, -1.58095482651965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_58 = structure(list(
    par = c(-0.18429546479644, 0.303390321540331, 0.478913868173223, 
    -1.39642503279929), value = 58.3132041524342, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.2886277282749, 4.80088252174937, 
    119.273344012072, -2.61561677739053, 4.80088252174937, 47.3520304726804, 
    -6.73379480531366, -8.49716977757708, 119.273344012072, -6.73379480531366, 
    1605.77229905456, -101.9502704942, -2.61561677739053, -8.49716977757708, 
    -101.9502704942, 107.704080814841), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18429546479644, 0.303390321540331
    ), logphi = c(0.478913868173223, -1.39642503279929)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_59 = structure(list(
    par = c(-0.348279632055363, -0.0815474411507272, 0.495102985084822, 
    -1.67558279344662), value = 40.4949742063614, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.8382846746782, -5.04299211989689, 
    170.165545901213, -13.7211014301641, -5.04299211989689, 24.7579900278794, 
    -19.3055990234114, -8.41756974789831, 170.165545901213, -19.3055990234114, 
    3604.43044929148, -260.536694224989, -13.7211014301641, -8.41756974789831, 
    -260.536694224989, 209.831757366885), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348279632055363, -0.0815474411507272
    ), logphi = c(0.495102985084822, -1.67558279344662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_60 = structure(list(
    par = c(-0.141193324409565, 0.232473278506822, 0.481544839450417, 
    -1.5530276569089), value = 52.6713451910745, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.3645124545227, -1.21792709073532, 
    142.022520336127, -3.54344317088362, -1.21792709073532, 39.2877713863982, 
    -7.41195713516163, -8.94918099803022, 142.022520336127, -7.41195713516163, 
    2547.95667555818, -155.568199942557, -3.54344317088362, -8.94918099803022, 
    -155.568199942557, 157.714931843245), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.141193324409565, 0.232473278506822
    ), logphi = c(0.481544839450417, -1.5530276569089)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_61 = structure(list(
    par = c(-0.542244999823533, 0.00939290841309333, 0.498221285695298, 
    -1.65066700077546), value = 47.536721135105, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.7736839450484, -2.25959679056587, 
    174.333508971003, -18.7376738916001, -2.25959679056587, 26.7169738510376, 
    -20.7479746379136, -10.2461506816809, 174.333508971003, -20.7479746379136, 
    3352.44426768355, -295.107272260786, -18.7376738916001, -10.2461506816809, 
    -295.107272260786, 206.525172151473), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.542244999823533, 0.00939290841309333
    ), logphi = c(0.498221285695298, -1.65066700077546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_62 = structure(list(
    par = c(-0.171227704037699, 0.295909900306906, 0.531014406948025, 
    -1.54052856596886), value = 54.5511417542061, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.1564346033432, -3.36307581605411, 
    149.012402635762, -11.4604316099332, -3.36307581605411, 41.2345989069252, 
    -17.1900217385001, -9.62779294688687, 149.012402635762, -17.1900217385001, 
    2494.38307304572, -247.80837390459, -11.4604316099332, -9.62779294688687, 
    -247.80837390459, 173.121404287713), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.171227704037699, 0.295909900306906
    ), logphi = c(0.531014406948025, -1.54052856596886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_63 = structure(list(
    par = c(-0.328841819243529, 0.264600092372399, 0.490015482373492, 
    -1.6691147652862), value = 28.5454629184159, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.2630072968446, 1.13003175705728, 
    170.812248674324, -9.92234328300867, 1.13003175705728, 41.3737222917376, 
    -6.52057628514058, -11.5160938740644, 170.812248674324, -6.52057628514058, 
    3428.29463631844, -252.387032558588, -9.92234328300867, -11.5160938740644, 
    -252.387032558588, 199.256918861579), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328841819243529, 0.264600092372399
    ), logphi = c(0.490015482373492, -1.6691147652862)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_64 = structure(list(
    par = c(-0.152091710866506, 0.211136549900169, 0.496812964792543, 
    -1.61620385154173), value = 44.5350952480309, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.5670189274961, -4.10971249742431, 
    154.959468456894, -6.61292361936461, -4.10971249742431, 35.6719718048737, 
    -10.95878610613, -9.38637225367245, 154.959468456894, -10.95878610613, 
    3042.62902550612, -210.514828541619, -6.61292361936461, -9.38637225367245, 
    -210.514828541619, 184.47747296868), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.152091710866506, 0.211136549900169
    ), logphi = c(0.496812964792543, -1.61620385154173)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_65 = structure(list(
    par = c(-0.443175709532414, -0.178704823995149, 0.502029221688091, 
    -1.76358625549239), value = 36.719537985303, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.350260867025, -7.21447847062962, 
    182.717834634971, -17.9033263556505, -7.21447847062962, 18.7991521602981, 
    -27.0080431779007, -7.66949083974566, 182.717834634971, -27.0080431779007, 
    4526.34735136925, -333.646534455667, -17.9033263556505, -7.66949083974566, 
    -333.646534455667, 243.526725240528), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443175709532414, -0.178704823995149
    ), logphi = c(0.502029221688091, -1.76358625549239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_66 = structure(list(
    par = c(-0.463143543642116, 0.262746843084167, 0.465971770884606, 
    -1.7603960104542), value = 14.1902644723835, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.0843469211823, 2.58788441875879, 
    187.875454546571, -10.3481853752641, 2.58788441875879, 36.7474130644752, 
    4.06934755226018, -12.777238988626, 187.875454546571, 4.06934755226018, 
    4225.55949624304, -278.003309214014, -10.3481853752641, -12.777238988626, 
    -278.003309214014, 216.021824902768), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.463143543642116, 0.262746843084167
    ), logphi = c(0.465971770884606, -1.7603960104542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_67 = structure(list(
    par = c(-0.312815976075708, 0.0285117220075407, 0.484060415399777, 
    -1.6065418616953), value = 54.3938058601122, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.548097485215, -3.48122637205961, 
    158.553630445368, -9.93486561107204, -3.48122637205961, 27.4571067535589, 
    -13.037778984426, -9.05668972883689, 158.553630445368, -13.037778984426, 
    2969.36209788612, -203.09256428952, -9.93486561107204, -9.05668972883689, 
    -203.09256428952, 179.840012430432), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312815976075708, 0.0285117220075407
    ), logphi = c(0.484060415399777, -1.6065418616953)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_68 = structure(list(
    par = c(-0.392958091205156, -0.208693500740733, 0.523463781290371, 
    -1.91832516598749), value = 26.0149339121761, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.4098834587121, -10.6636893146828, 
    192.138310046275, -17.8214593269388, -10.6636893146828, 17.3766440436651, 
    -39.5386657601193, -5.8212707712002, 192.138310046275, -39.5386657601193, 
    6512.42688583231, -408.333146921791, -17.8214593269388, -5.8212707712002, 
    -408.333146921791, 281.35571092669), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392958091205156, -0.208693500740733
    ), logphi = c(0.523463781290371, -1.91832516598749)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_69 = structure(list(
    par = c(-0.342036871021534, 0.0990819053891321, 0.51528670815622, 
    -1.58474651667822), value = 51.5481536687364, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.1640876083139, -3.675272115089, 
    159.920812048853, -14.9379542939698, -3.675272115089, 30.1555934107967, 
    -19.7453804844372, -9.44380909295717, 159.920812048853, -19.7453804844372, 
    2831.1529760181, -259.465557337357, -14.9379542939698, -9.44380909295717, 
    -259.465557337357, 186.563160928799), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342036871021534, 0.0990819053891321
    ), logphi = c(0.51528670815622, -1.58474651667822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_70 = structure(list(
    par = c(-0.305318017227062, 0.0357825790957573, 0.542458036716222, 
    -1.63949014189093), value = 49.0330242021075, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.9333712651645, -8.13726145665328, 
    166.92489916359, -18.5537999808361, -8.13726145665328, 26.2664663974732, 
    -29.8716981141922, -8.03902712043225, 166.92489916359, -29.8716981141922, 
    3325.60795783365, -327.920534718196, -18.5537999808361, -8.03902712043225, 
    -327.920534718196, 216.397073923957), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305318017227062, 0.0357825790957573
    ), logphi = c(0.542458036716222, -1.63949014189093)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_71 = structure(list(
    par = c(-0.260786966827882, -0.0131557684440665, 0.515195549587522, 
    -1.65619216802499), value = 50.5539491984683, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.9414984456814, -7.36865103689865, 
    166.192397307086, -13.7837549374353, -7.36865103689865, 25.2413014987241, 
    -22.3042664728723, -8.21985529597669, 166.192397307086, -22.3042664728723, 
    3451.37262688233, -274.345197932568, -13.7837549374353, -8.21985529597669, 
    -274.345197932568, 209.625327336482), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260786966827882, -0.0131557684440665
    ), logphi = c(0.515195549587522, -1.65619216802499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_72 = structure(list(
    par = c(-0.340270983985456, -0.259484638757649, 0.493132760391613, 
    -1.57044698101559), value = 64.8424508877978, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.8107323490638, -5.7024401343142, 
    152.274849419598, -13.065288632319, -5.7024401343142, 17.165267692576, 
    -18.8247963812671, -6.65867270122078, 152.274849419598, -18.8247963812671, 
    2771.76499132636, -202.300593105775, -13.065288632319, -6.65867270122078, 
    -202.300593105775, 175.460451007581), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340270983985456, -0.259484638757649
    ), logphi = c(0.493132760391613, -1.57044698101559)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_73 = structure(list(
    par = c(-0.328906720652348, 0.0646007640772131, 0.516500700904034, 
    -1.64949175723548), value = 44.8621394804955, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.7002494586718, -5.09421749228522, 
    168.989089001315, -15.3823657704777, -5.09421749228522, 29.5784351127537, 
    -22.085426019558, -9.2810254530562, 168.989089001315, -22.085426019558, 
    3368.25486442294, -288.761659567704, -15.3823657704777, -9.2810254530562, 
    -288.761659567704, 208.589884884702), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328906720652348, 0.0646007640772131
    ), logphi = c(0.516500700904034, -1.64949175723548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_74 = structure(list(
    par = c(-0.426260676076115, -0.0475440673801878, 0.500616164077581, 
    -1.60660919934328), value = 49.103908293363, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.0047452657672, -3.41503464973414, 
    163.504923428093, -15.8738399020919, -3.41503464973414, 25.2676979712874, 
    -20.0758516637478, -8.82915510924676, 163.504923428093, -20.0758516637478, 
    3011.93362106034, -252.905785988133, -15.8738399020919, -8.82915510924676, 
    -252.905785988133, 190.724722452629), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.426260676076115, -0.0475440673801878
    ), logphi = c(0.500616164077581, -1.60660919934328)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_75 = structure(list(
    par = c(-0.308176401410795, -0.033786690066681, 0.493833636991082, 
    -1.65946941602277), value = 51.8670931500338, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.1844570680707, -4.8408995141358, 
    166.80887540943, -12.1070960741321, -4.8408995141358, 26.4172058876966, 
    -17.306517738902, -8.62010140600944, 166.80887540943, -17.306517738902, 
    3446.71622838, -243.977742012902, -12.1070960741321, -8.62010140600944, 
    -243.977742012902, 202.597821630235), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308176401410795, -0.033786690066681
    ), logphi = c(0.493833636991082, -1.65946941602277)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_76 = structure(list(
    par = c(-0.0854739225585251, -0.141409179378152, 0.495205183131138, 
    -1.47789321906742), value = 73.7956237215486, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.8569791270672, -7.59966860286454, 
    129.861916505547, -6.01951757595032, -7.59966860286454, 22.1667403010883, 
    -15.3154588957705, -6.00763634928114, 129.861916505547, -15.3154588957705, 
    2148.6467670897, -137.038704387749, -6.01951757595032, -6.00763634928114, 
    -137.038704387749, 141.390906847505), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0854739225585251, -0.141409179378152
    ), logphi = c(0.495205183131138, -1.47789321906742)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_77 = structure(list(
    par = c(-0.471899322956032, -0.0887750762945473, 0.520359161286312, 
    -1.70130926887248), value = 44.2129512027823, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.5189799999119, -6.46889609967616, 
    177.254351710232, -20.5649871656277, -6.46889609967616, 22.126675629508, 
    -30.6176152058413, -8.11732851158098, 177.254351710232, -30.6176152058413, 
    3899.00449156855, -346.783378350146, -20.5649871656277, -8.11732851158098, 
    -346.783378350146, 233.619124585971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.471899322956032, -0.0887750762945473
    ), logphi = c(0.520359161286312, -1.70130926887248)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_78 = structure(list(
    par = c(-0.241919970975868, -0.189283872310414, 0.487410729624245, 
    -1.4964797090699), value = 68.3707273134356, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.8384905157259, -4.29116087019565, 
    137.917815838051, -8.76872100086246, -4.29116087019565, 22.4142276508132, 
    -15.4819738042988, -6.53855171073303, 137.917815838051, -15.4819738042988, 
    2245.32075780104, -147.180771525868, -8.76872100086246, -6.53855171073303, 
    -147.180771525868, 145.95286691943), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241919970975868, -0.189283872310414
    ), logphi = c(0.487410729624245, -1.4964797090699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_79 = structure(list(
    par = c(-0.0717075185515036, -0.163430136058129, 0.496524259541859, 
    -1.72245916459119), value = 60.8992959701714, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.1981823036607, -11.0068544270092, 
    162.404854389564, -7.30883368937896, -11.0068544270092, 18.9809646258254, 
    -17.3363058362241, -6.49788882167712, 162.404854389564, -17.3363058362241, 
    4096.82341217632, -224.604558326291, -7.30883368937896, -6.49788882167712, 
    -224.604558326291, 221.27482696277), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0717075185515036, -0.163430136058129
    ), logphi = c(0.496524259541859, -1.72245916459119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_80 = structure(list(
    par = c(-0.221318043895633, 0.13583693651582, 0.521110165560465, 
    -1.64604396279136), value = 46.1549815225656, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.1741953373298, -6.7176090308152, 
    165.481899614406, -12.7373573217682, -6.7176090308152, 31.2970235576415, 
    -20.4054491934613, -9.27371682202249, 165.481899614406, -20.4054491934613, 
    3330.59986190065, -277.386704623517, -12.7373573217682, -9.27371682202249, 
    -277.386704623517, 205.871485592368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221318043895633, 0.13583693651582
    ), logphi = c(0.521110165560465, -1.64604396279136)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_81 = structure(list(
    par = c(-0.137748010534016, 0.0101011848132612, 0.479380378484354, 
    -1.49451186234924), value = 62.252477887387, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.7808839370332, -4.79457558810736, 
    133.093164047082, -4.23179197106549, -4.79457558810736, 27.0664650408037, 
    -11.8674137858932, -7.29538286670106, 133.093164047082, -11.8674137858932, 
    2201.48774790196, -123.425714649628, -4.23179197106549, -7.29538286670106, 
    -123.425714649628, 140.197603341718), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137748010534016, 0.0101011848132612
    ), logphi = c(0.479380378484354, -1.49451186234924)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_82 = structure(list(
    par = c(-0.259964678114346, -0.223750751596097, 0.472234416271516, 
    -1.51296214683725), value = 72.1595657131546, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7796856588818, -4.96398302729517, 
    139.276350683559, -7.24081235858876, -4.96398302729517, 18.6316261761021, 
    -13.5006741395216, -6.59410389225457, 139.276350683559, -13.5006741395216, 
    2330.64892154999, -126.726293926183, -7.24081235858876, -6.59410389225457, 
    -126.726293926183, 145.948332420431), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259964678114346, -0.223750751596097
    ), logphi = c(0.472234416271516, -1.51296214683725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_83 = structure(list(
    par = c(-0.258769723839618, 0.259227950417367, 0.530131732385378, 
    -1.55872313731169), value = 53.5336344152393, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.1140602178942, -3.0358060509883, 
    155.20138490821, -13.9135031771431, -3.0358060509883, 38.0209299262191, 
    -18.5853828735816, -10.0682314965184, 155.20138490821, -18.5853828735816, 
    2620.47346754635, -265.901099146149, -13.9135031771431, -10.0682314965184, 
    -265.901099146149, 180.897888528264), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258769723839618, 0.259227950417367
    ), logphi = c(0.530131732385378, -1.55872313731169)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_84 = structure(list(
    par = c(-0.233026495311055, -0.238464271019722, 0.484701049685701, 
    -1.53994182078352), value = 71.2053377722639, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.213636099377, -6.98177082014695, 
    143.389228441038, -8.80402499348065, -6.98177082014695, 16.6738892986018, 
    -15.68087440873, -6.39930354218166, 143.389228441038, -15.68087440873, 
    2540.21501456236, -157.1101345057, -8.80402499348065, -6.39930354218166, 
    -157.1101345057, 159.814738111663), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233026495311055, -0.238464271019722
    ), logphi = c(0.484701049685701, -1.53994182078352)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_85 = structure(list(
    par = c(-0.326886430211845, 0.130703860427064, 0.503386097966684, 
    -1.4970720863763), value = 53.8115445834423, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.0476604116318, -0.824295574020084, 
    144.34888865722, -11.6223897341783, -0.824295574020084, 32.8463151451075, 
    -14.7300647128645, -9.2148582861995, 144.34888865722, -14.7300647128645, 
    2202.34900189986, -194.5628233333, -11.6223897341783, -9.2148582861995, 
    -194.5628233333, 150.745209337444), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326886430211845, 0.130703860427064
    ), logphi = c(0.503386097966684, -1.4970720863763)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_86 = structure(list(
    par = c(-0.221372428407444, 0.132574137583758, 0.497517628522503, 
    -1.49697910247022), value = 59.5110797858303, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.9968954910353, -2.10812589429565, 
    139.684634230974, -8.16209275544821, -2.10812589429565, 33.7028852364085, 
    -13.2668716013029, -8.58713024687319, 139.684634230974, -13.2668716013029, 
    2206.55134934589, -170.653284969013, -8.16209275544821, -8.58713024687319, 
    -170.653284969013, 147.058919790055), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221372428407444, 0.132574137583758
    ), logphi = c(0.497517628522503, -1.49697910247022)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_87 = structure(list(
    par = c(-0.102973222798782, -0.198678307027829, 0.467049923558162, 
    -1.57641780435768), value = 74.2870731829418, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.6743108191718, -7.47747361273809, 
    140.592769028558, -3.43520556889132, -7.47747361273809, 19.6897400783769, 
    -11.7456712871444, -6.23998216831012, 140.592769028558, -11.7456712871444, 
    2782.73383565875, -119.938959421972, -3.43520556889132, -6.23998216831012, 
    -119.938959421972, 164.525749710265), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.102973222798782, -0.198678307027829
    ), logphi = c(0.467049923558162, -1.57641780435768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_88 = structure(list(
    par = c(-0.373921661169998, 0.126204911341122, 0.449433173645689, 
    -1.64806152521643), value = 32.3531032623361, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.1261498138357, 2.7983216117633, 
    162.388041276884, -5.69968293362422, 2.7983216117633, 34.5845902405273, 
    -0.399176631304954, -10.0663652853328, 162.388041276884, 
    -0.399176631304954, 3194.70802619648, -166.963836945477, 
    -5.69968293362422, -10.0663652853328, -166.963836945477, 
    175.620577408608), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.373921661169998, 0.126204911341122
    ), logphi = c(0.449433173645689, -1.64806152521643)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_89 = structure(list(
    par = c(-0.240528241183453, -0.0254379916645924, 0.520630125857733, 
    -1.55976123421262), value = 59.1483482628198, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0863765440637, -6.50944158842037, 
    151.520655473192, -13.5755619039557, -6.50944158842037, 25.3922163402365, 
    -21.5185565917153, -7.52817531335381, 151.520655473192, -21.5185565917153, 
    2690.51221559025, -239.742497692319, -13.5755619039557, -7.52817531335381, 
    -239.742497692319, 179.841079265941), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240528241183453, -0.0254379916645924
    ), logphi = c(0.520630125857733, -1.55976123421262)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_90 = structure(list(
    par = c(-0.11250266434336, 0.244079884981354, 0.478953698469387, 
    -1.81126692686548), value = 19.265503516012, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.1807264922633, -4.57360555117248, 
    176.718669670173, -3.54300583582656, -4.57360555117248, 39.7265465812424, 
    -0.846251603014991, -9.33471894803972, 176.718669670173, 
    -0.846251603014991, 4886.81743865538, -246.487473980039, 
    -3.54300583582656, -9.33471894803972, -246.487473980039, 
    231.911887875746), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.11250266434336, 0.244079884981354
    ), logphi = c(0.478953698469387, -1.81126692686548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_91 = structure(list(
    par = c(-0.330883534847473, 0.143978392560919, 0.511473710930475, 
    -1.6720791093098), value = 41.1671212736435, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.8717215790099, -4.42460325444927, 
    173.154980554813, -14.3203499929356, -4.42460325444927, 32.2474771756731, 
    -18.7296141174187, -10.3044513046768, 173.154980554813, -18.7296141174187, 
    3532.37779879478, -291.51352601442, -14.3203499929356, -10.3044513046768, 
    -291.51352601442, 212.205735955706), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330883534847473, 0.143978392560919
    ), logphi = c(0.511473710930475, -1.6720791093098)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_92 = structure(list(
    par = c(-0.291372871900308, -0.0460860134386707, 0.507561998082541, 
    -1.51535887561687), value = 63.4428744811025, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.2321339931206, -3.86424421705556, 
    145.432340262985, -12.5860889879092, -3.86424421705556, 26.4586712113157, 
    -18.5674642203537, -7.61122090153776, 145.432340262985, -18.5674642203537, 
    2366.25986374506, -202.338634418098, -12.5860889879092, -7.61122090153776, 
    -202.338634418098, 160.051229268987), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291372871900308, -0.0460860134386707
    ), logphi = c(0.507561998082541, -1.51535887561687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_93 = structure(list(
    par = c(-0.0367166641469381, -0.117104143685589, 0.49778459209568, 
    -1.5241788291145), value = 75.4026609464173, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.2068287163656, -9.85092822958222, 
    134.616263480325, -5.48941484268539, -9.85092822958222, 20.5237955839266, 
    -15.7010349646214, -6.12852793402396, 134.616263480325, -15.7010349646214, 
    2451.51838655033, -152.389095362082, -5.48941484268539, -6.12852793402396, 
    -152.389095362082, 157.222031216264), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0367166641469381, -0.117104143685589
    ), logphi = c(0.49778459209568, -1.5241788291145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_94 = structure(list(
    par = c(-0.432316553461156, 0.24179792320226, 0.505990904315725, 
    -1.57831671614786), value = 29.1138487579907, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.8334428208794, 2.66912506852179, 
    162.119948139861, -14.7477278789054, 2.66912506852179, 40.8123238546665, 
    -13.0918187934981, -11.6654841146868, 162.119948139861, -13.0918187934981, 
    2718.51181364724, -255.543152992033, -14.7477278789054, -11.6654841146868, 
    -255.543152992033, 179.652463931035), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432316553461156, 0.24179792320226
    ), logphi = c(0.505990904315725, -1.57831671614786)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_95 = structure(list(
    par = c(-0.377555560267229, 0.0364296452891391, 0.505516776413807, 
    -1.6430553360926), value = 53.0938825613422, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.0069731007125, -4.39212389835575, 
    168.753489321105, -15.1793902638531, -4.39212389835575, 27.2580719489213, 
    -19.8613577655493, -9.46019616954175, 168.753489321105, -19.8613577655493, 
    3300.59184977216, -273.336375992805, -15.1793902638531, -9.46019616954175, 
    -273.336375992805, 203.045944973113), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377555560267229, 0.0364296452891391
    ), logphi = c(0.505516776413807, -1.6430553360926)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_96 = structure(list(
    par = c(-0.484991918935021, -0.35996005267383, 0.499041640893621, 
    -1.68628655263873), value = 50.5802499878307, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.5276871050312, -6.3595690438234, 
    170.409570905861, -18.800099070404, -6.3595690438234, 14.0966453034963, 
    -25.789303377266, -6.26399368641728, 170.409570905861, -25.789303377266, 
    3789.62154179518, -295.998155448451, -18.800099070404, -6.26399368641728, 
    -295.998155448451, 222.759187641586), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.484991918935021, -0.35996005267383
    ), logphi = c(0.499041640893621, -1.68628655263873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_97 = structure(list(
    par = c(-0.406750818444092, -0.477520473438519, 0.525198323511629, 
    -1.58573359620513), value = 82.3262903975231, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.5931126615592, -7.30649360392022, 
    152.807009921929, -19.6344851062236, -7.30649360392022, 11.2818096766887, 
    -25.9745073520889, -4.41151276042717, 152.807009921929, -25.9745073520889, 
    2984.34913706203, -280.170093521548, -19.6344851062236, -4.41151276042717, 
    -280.170093521548, 199.588172598908), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.406750818444092, -0.477520473438519
    ), logphi = c(0.525198323511629, -1.58573359620513)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_98 = structure(list(
    par = c(-0.203854298489976, 0.0202678249723229, 0.484570500891502, 
    -1.5819655667122), value = 54.8723645282905, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.4844870390863, -3.85774644406922, 
    149.97775116754, -7.14311757210595, -3.85774644406922, 29.487003169848, 
    -12.783637696856, -8.18807204527872, 149.97775116754, -12.783637696856, 
    2797.70572229054, -176.022348971294, -7.14311757210595, -8.18807204527872, 
    -176.022348971294, 171.072260163996), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203854298489976, 0.0202678249723229
    ), logphi = c(0.484570500891502, -1.5819655667122)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_99 = structure(list(
    par = c(-0.467394022941213, -0.167434540795763, 0.525114475403452, 
    -1.5912792236702), value = 65.5761645211496, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.2002573849202, -5.98567005027917, 
    160.764651624845, -20.8074493297516, -5.98567005027917, 19.193435871756, 
    -28.0904006828564, -6.97391585013918, 160.764651624845, -28.0904006828564, 
    2964.77867134826, -298.746755412083, -20.8074493297516, -6.97391585013918, 
    -298.746755412083, 200.603642245056), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467394022941213, -0.167434540795763
    ), logphi = c(0.525114475403452, -1.5912792236702)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_100 = structure(list(
    par = c(-0.533059778330514, -0.134805082230832, 0.508340902967765, 
    -1.55976087757088), value = 56.1897368592564, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.668338322017, -3.40136686816095, 
    158.307047970041, -19.6747663352426, -3.40136686816095, 21.1470727400354, 
    -23.5896676095138, -7.99917120009042, 158.307047970041, -23.5896676095138, 
    2686.17585504316, -260.478213713, -19.6747663352426, -7.99917120009042, 
    -260.478213713, 182.038675422547), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.533059778330514, -0.134805082230832
    ), logphi = c(0.508340902967765, -1.55976087757088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_101 = structure(list(
    par = c(-0.215940423694995, -0.491633365309836, 0.482972605438632, 
    -1.70859870745734), value = 66.1064468693394, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.9101676646255, -8.46641167129292, 
    162.099616218825, -10.4062738426336, -8.46641167129292, 11.4001110915751, 
    -17.6237326670048, -5.0862874090285, 162.099616218825, -17.6237326670048, 
    3996.08480902813, -216.007116028649, -10.4062738426336, -5.0862874090285, 
    -216.007116028649, 217.633689100438), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215940423694995, -0.491633365309836
    ), logphi = c(0.482972605438632, -1.70859870745734)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_102 = structure(list(
    par = c(-0.348903394794878, 0.226850262955903, 0.508308763304049, 
    -1.49635015530745), value = 45.6340551870568, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.269353963288, 2.90139922753951, 
    145.70689154958, -12.3013580219933, 2.90139922753951, 42.4775938547839, 
    -13.4201778330123, -10.1597102979412, 145.70689154958, -13.4201778330123, 
    2179.85754345662, -207.938209172198, -12.3013580219933, -10.1597102979412, 
    -207.938209172198, 152.002319333988), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348903394794878, 0.226850262955903
    ), logphi = c(0.508308763304049, -1.49635015530745)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_103 = structure(list(
    par = c(-0.383054561697227, -0.123957225306942, 0.474071330894345, 
    -1.73939843673317), value = 36.2744929485281, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.6422469996961, -5.09200262932552, 
    178.512345502924, -12.3907623601482, -5.09200262932552, 21.7600407435015, 
    -15.045822879145, -8.52903834402952, 178.512345502924, -15.045822879145, 
    4183.25302008071, -257.76976824865, -12.3907623601482, -8.52903834402952, 
    -257.76976824865, 220.634249203044), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383054561697227, -0.123957225306942
    ), logphi = c(0.474071330894345, -1.73939843673317)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_104 = structure(list(
    par = c(-0.267936955111028, -0.146590601506328, 0.506470342074987, 
    -1.57106503310591), value = 65.0238857917068, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.7981243316024, -6.28648825795608, 
    151.936034729516, -12.7688801043746, -6.28648825795608, 21.2314961771654, 
    -20.0337707525478, -7.00304949319275, 151.936034729516, -20.0337707525478, 
    2779.78353598485, -219.252895213629, -12.7688801043746, -7.00304949319275, 
    -219.252895213629, 179.154911851498), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267936955111028, -0.146590601506328
    ), logphi = c(0.506470342074987, -1.57106503310591)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_105 = structure(list(
    par = c(-0.262850832015117, -0.319775941488271, 0.492544798205028, 
    -1.74274902367816), value = 50.536479813894, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.7628303255721, -8.57129830578174, 
    171.344742534885, -12.4155133036652, -8.57129830578174, 15.421283713124, 
    -20.7713962616651, -6.18243183581058, 171.344742534885, -20.7713962616651, 
    4322.34023849176, -261.569013298768, -12.4155133036652, -6.18243183581058, 
    -261.569013298768, 230.661030625967), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262850832015117, -0.319775941488271
    ), logphi = c(0.492544798205028, -1.74274902367816)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_106 = structure(list(
    par = c(-0.315797650841019, -0.103139673740191, 0.490246845331799, 
    -1.51147502583901), value = 55.4895976290494, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.4860093433361, -2.93741095269695, 
    143.763023597643, -10.7230179100526, -2.93741095269695, 25.9098254442591, 
    -15.9317898322797, -7.51477305804826, 143.763023597643, -15.9317898322797, 
    2324.32018483131, -169.978345847532, -10.7230179100526, -7.51477305804826, 
    -169.978345847532, 152.020861502677), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.315797650841019, -0.103139673740191
    ), logphi = c(0.490246845331799, -1.51147502583901)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_107 = structure(list(
    par = c(-0.330466171870756, 0.128028078357677, 0.49989429983221, 
    -1.58632812162082), value = 44.8311777442419, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.2320298438223, -1.74264865293594, 
    158.526842772844, -12.0226431175041, -1.74264865293594, 33.6530585069994, 
    -14.7067681464108, -9.86421621540501, 158.526842772844, -14.7067681464108, 
    2812.79801323286, -229.356385689883, -12.0226431175041, -9.86421621540501, 
    -229.356385689883, 179.264025337744), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330466171870756, 0.128028078357677
    ), logphi = c(0.49989429983221, -1.58632812162082)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_108 = structure(list(
    par = c(-0.132159336103334, -0.0561731954801997, 0.501477726935662, 
    -1.51633351626121), value = 70.9788747484525, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.852164832047, -7.51024817091661, 
    138.699576154977, -7.88347462687966, -7.51024817091661, 23.1656015152737, 
    -16.4237565627445, -6.87053359804679, 138.699576154977, -16.4237565627445, 
    2382.06464599244, -169.768248797553, -7.88347462687966, -6.87053359804679, 
    -169.768248797553, 155.964750685911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132159336103334, -0.0561731954801997
    ), logphi = c(0.501477726935662, -1.51633351626121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_109 = structure(list(
    par = c(-0.130684931771504, -0.168722770385068, 0.496873281818449, 
    -1.60094917485265), value = 65.8765403589096, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.7253201385165, -8.24145791966657, 
    149.433741349014, -8.26375113938127, -8.24145791966657, 20.5232827639179, 
    -17.1957864658623, -6.51161079545659, 149.433741349014, -17.1957864658623, 
    3011.49309766657, -191.102094980522, -8.26375113938127, -6.51161079545659, 
    -191.102094980522, 183.834993734422), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130684931771504, -0.168722770385068
    ), logphi = c(0.496873281818449, -1.60094917485265)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_110 = structure(list(
    par = c(-0.100257921703547, 0.0735019608382509, 0.49056723064516, 
    -1.61583520742899), value = 54.1933853608444, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.9949193082623, -6.62391007999474, 
    150.838832450262, -5.41076069993096, -6.62391007999474, 29.8399555518358, 
    -12.6745022406283, -8.03895372136765, 150.838832450262, -12.6745022406283, 
    3073.6355121963, -186.460377685549, -5.41076069993096, -8.03895372136765, 
    -186.460377685549, 183.361842507779), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.100257921703547, 0.0735019608382509
    ), logphi = c(0.49056723064516, -1.61583520742899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_111 = structure(list(
    par = c(-0.29889245191185, -0.229942369894969, 0.459302396114851, 
    -1.68851036313134), value = 45.5549781349289, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.2845982561369, -4.95156187341195, 
    164.924534486133, -8.25974978280186, -4.95156187341195, 20.1723961712474, 
    -11.7221705409065, -7.25410237656376, 164.924534486133, -11.7221705409065, 
    3683.21442875086, -184.460362347316, -8.25974978280186, -7.25410237656376, 
    -184.460362347316, 198.3429371748), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29889245191185, -0.229942369894969
    ), logphi = c(0.459302396114851, -1.68851036313134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_112 = structure(list(
    par = c(-0.251003168424233, -0.204621577295802, 0.495775798989149, 
    -1.69612609824813), value = 57.9285154136446, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.5313270367038, -8.57515466634595, 
    167.20871219178, -11.9005821339613, -8.57515466634595, 17.4984509158094, 
    -19.8813019594013, -6.95741831169272, 167.20871219178, -19.8813019594013, 
    3835.86141281, -248.303122758031, -11.9005821339613, -6.95741831169272, 
    -248.303122758031, 216.360834869533), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251003168424233, -0.204621577295802
    ), logphi = c(0.495775798989149, -1.69612609824813)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_113 = structure(list(
    par = c(-0.214080803324092, 0.134472271815046, 0.542363381888485, 
    -1.63072970225848), value = 48.7396444608342, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.6340821409646, -7.6433761542205, 
    164.304215513056, -15.649182982358, -7.6433761542205, 32.023375245771, 
    -26.3897552539305, -8.6696928232044, 164.304215513056, -26.3897552539305, 
    3224.18245212575, -309.113463253574, -15.649182982358, -8.6696928232044, 
    -309.113463253574, 209.404419237558), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214080803324092, 0.134472271815046
    ), logphi = c(0.542363381888485, -1.63072970225848)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_114 = structure(list(
    par = c(-0.157159586120006, 0.123801513709896, 0.508392764071415, 
    -1.54086201615727), value = 52.2204828728595, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.2298309003833, -4.50929301720748, 
    145.196606700537, -8.70327397706205, -4.50929301720748, 33.7390884208588, 
    -15.7804647766824, -8.35393710119092, 145.196606700537, -15.7804647766824, 
    2517.76099817746, -200.223801465782, -8.70327397706205, -8.35393710119092, 
    -200.223801465782, 165.504263899052), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.157159586120006, 0.123801513709896
    ), logphi = c(0.508392764071415, -1.54086201615727)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_115 = structure(list(
    par = c(-0.306265704529224, 0.0712380226122412, 0.470100191855357, 
    -1.48865057185551), value = 50.3713601205604, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.2331769717784, 1.28678822619577, 
    137.890815166131, -6.08487493458654, 1.28678822619577, 32.8518927013022, 
    -9.22593555330309, -8.63374664206162, 137.890815166131, -9.22593555330309, 
    2115.88915992067, -125.710834736559, -6.08487493458654, -8.63374664206162, 
    -125.710834736559, 134.515632094434), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306265704529224, 0.0712380226122412
    ), logphi = c(0.470100191855357, -1.48865057185551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_116 = structure(list(
    par = c(-0.0767140797855538, 0.104849330699159, 0.481280911042131, 
    -1.52721287710645), value = 56.2790971542107, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.7276616886222, -4.60803339663585, 
    135.25630962441, -2.84684088036613, -4.60803339663585, 33.5136961329141, 
    -10.6417870533448, -7.64696130683973, 135.25630962441, -10.6417870533448, 
    2408.34726878525, -133.657848531143, -2.84684088036613, -7.64696130683973, 
    -133.657848531143, 150.407042500689), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0767140797855538, 0.104849330699159
    ), logphi = c(0.481280911042131, -1.52721287710645)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_117 = structure(list(
    par = c(-0.500528793738277, -0.101701024876976, 0.50544074832793, 
    -1.70518226695492), value = 50.65349545548, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.2003216418245, -6.08953728153949, 
    178.743816025673, -19.4760721896614, -6.08953728153949, 20.4967219499252, 
    -26.5379722872439, -8.61863939149998, 178.743816025673, -26.5379722872439, 
    3910.18017643141, -326.746545654899, -19.4760721896614, -8.61863939149998, 
    -326.746545654899, 228.769813823249), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.500528793738277, -0.101701024876976
    ), logphi = c(0.50544074832793, -1.70518226695492)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_118 = structure(list(
    par = c(-0.144386363576148, -0.418501826286533, 0.511029092585324, 
    -1.5238103220257), value = 78.10912815862, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.8092137969484, -8.2442808420069, 
    137.714294890401, -10.8425357865372, -8.2442808420069, 14.1815489662633, 
    -18.5860467141197, -4.60881062025464, 137.714294890401, -18.5860467141197, 
    2498.91882184272, -185.064610855434, -10.8425357865372, -4.60881062025464, 
    -185.064610855434, 165.046388278967), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144386363576148, -0.418501826286533
    ), logphi = c(0.511029092585324, -1.5238103220257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_119 = structure(list(
    par = c(-0.241477159397636, 0.170313746219146, 0.481559029057771, 
    -1.62399589876082), value = 36.5562989408728, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.4915813698223, -1.43303358157709, 
    158.033475969432, -6.86053037934897, -1.43303358157709, 35.8729848244366, 
    -8.143569628416, -9.70373590547524, 158.033475969432, -8.143569628416, 
    3077.41580877163, -197.98148242689, -6.86053037934897, -9.70373590547524, 
    -197.98148242689, 181.782289113031), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241477159397636, 0.170313746219146
    ), logphi = c(0.481559029057771, -1.62399589876082)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_120 = structure(list(
    par = c(-0.220781323501933, -0.338316675373427, 0.510655154998655, 
    -1.59286392563407), value = 76.1532127595238, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.0841217683314, -8.37767322892091, 
    150.949645284726, -12.9354328617381, -8.37767322892091, 14.8251127818355, 
    -21.1379075700791, -5.46163986037129, 150.949645284726, -21.1379075700791, 
    2993.15919490084, -225.009564278622, -12.9354328617381, -5.46163986037129, 
    -225.009564278622, 189.494807671053), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220781323501933, -0.338316675373427
    ), logphi = c(0.510655154998655, -1.59286392563407)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_121 = structure(list(
    par = c(-0.114682322141338, 0.0555726344052128, 0.495121433200052, 
    -1.64658136815162), value = 53.6025401531678, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.1698803090854, -7.77103696947279, 
    156.647781787811, -6.68560988525968, -7.77103696947279, 27.696862353821, 
    -14.1126583041995, -8.12179488551834, 156.647781787811, -14.1126583041995, 
    3336.38631611954, -208.696445392675, -6.68560988525968, -8.12179488551834, 
    -208.696445392675, 195.302685352061), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.114682322141338, 0.0555726344052128
    ), logphi = c(0.495121433200052, -1.64658136815162)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_122 = structure(list(
    par = c(-0.225803307212422, -0.00528477924785348, 0.502344368536941, 
    -1.62059871148439), value = 59.4153250474808, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.2872237676405, -6.9008486196509, 
    158.710240896198, -10.7737142069908, -6.9008486196509, 24.5500667830356, 
    -17.7634892750689, -8.19199812429616, 158.710240896198, -17.7634892750689, 
    3131.76505242829, -229.035652264287, -10.7737142069908, -8.19199812429616, 
    -229.035652264287, 191.961210273206), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225803307212422, -0.00528477924785348
    ), logphi = c(0.502344368536941, -1.62059871148439)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_123 = structure(list(
    par = c(-0.23435664111381, -0.412797521447427, 0.499080949923653, 
    -1.6568739811976), value = 64.7047403707214, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.1320225607176, -8.2697697720846, 
    158.292201286159, -12.3377877745412, -8.2697697720846, 13.2605976759237, 
    -20.3305587316294, -5.34768525817242, 158.292201286159, -20.3305587316294, 
    3527.00220069835, -229.740987968796, -12.3377877745412, -5.34768525817242, 
    -229.740987968796, 207.292547734994), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.23435664111381, -0.412797521447427
    ), logphi = c(0.499080949923653, -1.6568739811976)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_124 = structure(list(
    par = c(-0.250537305065859, -0.315726355866197, 0.480317741289897, 
    -1.65383522163133), value = 61.6080085331598, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.8670173676273, -7.02389107054557, 
    159.011919087959, -9.74555026278523, -7.02389107054557, 16.1115085806074, 
    -16.557061726985, -6.06034155214985, 159.011919087959, -16.557061726985, 
    3442.70496119314, -198.009354054562, -9.74555026278523, -6.06034155214985, 
    -198.009354054562, 197.259042376885), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250537305065859, -0.315726355866197
    ), logphi = c(0.480317741289897, -1.65383522163133)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_125 = structure(list(
    par = c(-0.39296118053484, 0.0657914479512714, 0.533737327299729, 
    -1.69399905875228), value = 38.1802894277722, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.2284445061416, -6.0178416880774, 
    177.614169540874, -19.6866927417716, -6.0178416880774, 29.9125553144819, 
    -30.5056119724867, -9.15386102207094, 177.614169540874, -30.5056119724867, 
    3794.52268009217, -353.743112773586, -19.6866927417716, -9.15386102207094, 
    -353.743112773586, 231.816931993478), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.39296118053484, 0.0657914479512714
    ), logphi = c(0.533737327299729, -1.69399905875228)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_126 = structure(list(
    par = c(-0.147425039269645, -0.0457222935662308, 0.501300910915967, 
    -1.59907004004566), value = 60.9708273022591, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.9356966148958, -7.84159357003489, 
    151.553180330666, -8.71310170236228, -7.84159357003489, 23.8566405741381, 
    -17.1648959010895, -7.39293545404252, 151.553180330666, -17.1648959010895, 
    2975.74430022962, -204.444315345498, -8.71310170236228, -7.39293545404252, 
    -204.444315345498, 183.815838497026), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.147425039269645, -0.0457222935662308
    ), logphi = c(0.501300910915967, -1.59907004004566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_127 = structure(list(
    par = c(-0.144992326748501, -0.264331190027164, 0.488626415831601, 
    -1.68618396977376), value = 56.2792035511797, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.1809666078453, -8.85884901435929, 
    159.653540222848, -8.43018984664212, -8.85884901435929, 17.4408318684982, 
    -16.9782539547469, -6.18237855753989, 159.653540222848, -16.9782539547469, 
    3750.51406292215, -208.764674226813, -8.43018984664212, -6.18237855753989, 
    -208.764674226813, 209.586702476727), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144992326748501, -0.264331190027164
    ), logphi = c(0.488626415831601, -1.68618396977376)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_128 = structure(list(
    par = c(-0.258079068225204, -0.0996157823893566, 0.497603693701551, 
    -1.67539312317113), value = 50.0430364760937, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.9462921516979, -6.87527004927801, 
    166.413125509024, -11.761305710678, -6.87527004927801, 22.5011550512022, 
    -18.9928749669832, -7.7833788143522, 166.413125509024, -18.9928749669832, 
    3618.34927417881, -246.906744656883, -11.761305710678, -7.7833788143522, 
    -246.906744656883, 209.394341959879), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258079068225204, -0.0996157823893566
    ), logphi = c(0.497603693701551, -1.67539312317113)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_129 = structure(list(
    par = c(-0.186658199798962, -0.232999912400432, 0.4689309748321, 
    -1.60718110365301), value = 56.2894644679753, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7989791501309, -6.18920527628575, 
    149.219520471533, -6.06049452400725, -6.18920527628575, 19.7163495538888, 
    -12.8366736760199, -6.52397856448772, 149.219520471533, -12.8366736760199, 
    3018.11284367659, -147.170712645917, -6.06049452400725, -6.52397856448772, 
    -147.170712645917, 175.766794848542), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186658199798962, -0.232999912400432
    ), logphi = c(0.4689309748321, -1.60718110365301)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_130 = structure(list(
    par = c(-0.156777365221656, 0.200588189768299, 0.514478934364767, 
    -1.5379788508323), value = 54.406675566743, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.1809477301226, -4.46033190470985, 
    145.73747868063, -9.1271549562677, -4.46033190470985, 35.1019093329796, 
    -15.5530003578264, -8.87556839401782, 145.73747868063, -15.5530003578264, 
    2487.32192339141, -212.190581732052, -9.1271549562677, -8.87556839401782, 
    -212.190581732052, 166.225128053199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.156777365221656, 0.200588189768299
    ), logphi = c(0.514478934364767, -1.5379788508323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_131 = structure(list(
    par = c(-0.274848617707969, -0.102068962396375, 0.501257400412935, 
    -1.53917037577335), value = 63.4996737828004, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.7347716196123, -5.21818661347595, 
    147.512256205573, -11.6962549521205, -5.21818661347595, 23.3790758947805, 
    -18.1227639917125, -7.32658863977775, 147.512256205573, -18.1227639917125, 
    2531.87610306504, -197.483802612197, -11.6962549521205, -7.32658863977775, 
    -197.483802612197, 165.724655104782), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274848617707969, -0.102068962396375
    ), logphi = c(0.501257400412935, -1.53917037577335)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_132 = structure(list(
    par = c(-0.29848921436984, -0.0942584617885663, 0.533893354925201, 
    -1.40566501641595), value = 73.5613190253952, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.7199357740315, -4.39697202736511, 
    129.783817953921, -15.851921208565, -4.39697202736511, 24.6992374499655, 
    -20.8984335543505, -5.94260390585077, 129.783817953921, -20.8984335543505, 
    1753.07804354929, -201.458993672077, -15.851921208565, -5.94260390585077, 
    -201.458993672077, 135.438144372557), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29848921436984, -0.0942584617885663
    ), logphi = c(0.533893354925201, -1.40566501641595)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_133 = structure(list(
    par = c(-0.126990511991183, 0.445772913608543, 0.534743291113127, 
    -1.58077307481902), value = 34.6720083132451, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.768263426923, -1.00530552593625, 
    154.094171501029, -9.87076481351323, -1.00530552593625, 50.7383463261846, 
    -13.3737572998172, -10.8691079061529, 154.094171501029, -13.3737572998172, 
    2746.03860484746, -268.69110510841, -9.87076481351323, -10.8691079061529, 
    -268.69110510841, 184.832625533815), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126990511991183, 0.445772913608543
    ), logphi = c(0.534743291113127, -1.58077307481902)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_134 = structure(list(
    par = c(-0.190590744379069, 0.326255172803544, 0.498864923244057, 
    -1.64185159685293), value = 31.6199995362614, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.4942423242255, 0.114942089624037, 
    161.137026980285, -7.02310480882318, 0.114942089624037, 45.2714639855856, 
    -7.11150433119201, -10.6909000585631, 161.137026980285, -7.11150433119201, 
    3214.15187367791, -234.352376217828, -7.02310480882318, -10.6909000585631, 
    -234.352376217828, 192.027225480729), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190590744379069, 0.326255172803544
    ), logphi = c(0.498864923244057, -1.64185159685293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_135 = structure(list(
    par = c(-0.369062310847818, -0.101732196575701, 0.476338587868043, 
    -1.60481834932338), value = 51.2712070379089, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.235715212746, -2.6920113835871, 
    158.762605394713, -10.9489069428648, -2.6920113835871, 24.2926786881981, 
    -14.1543694898161, -8.35464889981097, 158.762605394713, -14.1543694898161, 
    2965.83080619861, -193.310536584335, -10.9489069428648, -8.35464889981097, 
    -193.310536584335, 177.957620344671), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369062310847818, -0.101732196575701
    ), logphi = c(0.476338587868043, -1.60481834932338)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_136 = structure(list(
    par = c(-0.126168890101428, 0.0508105736594172, 0.461392009881239, 
    -1.68331770994515), value = 38.0575145211813, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.8525207188731, -3.77268850293433, 
    156.254436443959, -2.49073585933957, -3.77268850293433, 32.3195639921892, 
    -5.62247030977403, -7.92796092419223, 156.254436443959, -5.62247030977403, 
    3601.72926207092, -162.255863962457, -2.49073585933957, -7.92796092419223, 
    -162.255863962457, 193.358409369182), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126168890101428, 0.0508105736594172
    ), logphi = c(0.461392009881239, -1.68331770994515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_137 = structure(list(
    par = c(-0.320260803804559, 0.0245347664249717, 0.503101014310235, 
    -1.49709751011011), value = 54.6645812059259, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.5561546223946, -1.75809288371909, 
    143.649075237562, -12.0450182041765, -1.75809288371909, 30.3466018500842, 
    -16.6381401189852, -8.2882730865208, 143.649075237562, -16.6381401189852, 
    2225.26421494074, -191.153624641949, -12.0450182041765, -8.2882730865208, 
    -191.153624641949, 151.650852822982), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320260803804559, 0.0245347664249717
    ), logphi = c(0.503101014310235, -1.49709751011011)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_138 = structure(list(
    par = c(-0.15322330564601, 0.101323937678044, 0.477127100173963, 
    -1.65712600080722), value = 46.0663939455976, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.4709657798381, -3.9478590672104, 
    157.426472481959, -4.79625149907292, -3.9478590672104, 32.9510137948574, 
    -8.58980161488887, -8.61545417407683, 157.426472481959, -8.58980161488887, 
    3380.62447559473, -187.190758145661, -4.79625149907292, -8.61545417407683, 
    -187.190758145661, 191.060886848504), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.15322330564601, 0.101323937678044
    ), logphi = c(0.477127100173963, -1.65712600080722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_139 = structure(list(
    par = c(-0.196672611423363, 0.165520591807175, 0.489129137146907, 
    -1.58935860709381), value = 46.4814165893927, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.310702629532, -3.4665110533183, 
    151.788039207901, -6.72258684986105, -3.4665110533183, 33.1851329136157, 
    -10.5090794573215, -9.21872267678481, 151.788039207901, -10.5090794573215, 
    2827.86969930804, -190.635113767712, -6.72258684986105, -9.21872267678481, 
    -190.635113767712, 173.538067516077), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196672611423363, 0.165520591807175
    ), logphi = c(0.489129137146907, -1.58935860709381)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_140 = structure(list(
    par = c(-0.447520085292173, -0.0857815532049558, 0.526022061160923, 
    -1.66114240547936), value = 55.356723394137, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.0782305365988, -6.48297563365929, 
    171.387044126448, -20.5518559264206, -6.48297563365929, 22.3103053862417, 
    -30.1720000752681, -7.84630451811097, 171.387044126448, -30.1720000752681, 
    3532.60483868922, -333.101440617156, -20.5518559264206, -7.84630451811097, 
    -333.101440617156, 222.799052750133), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.447520085292173, -0.0857815532049558
    ), logphi = c(0.526022061160923, -1.66114240547936)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_141 = structure(list(
    par = c(-0.215479114003253, -0.168996553122113, 0.503401034628076, 
    -1.5144806705533), value = 70.5551348020999, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.6155703353534, -6.20204174239802, 
    141.173452796295, -10.6233959016322, -6.20204174239802, 21.1110116623558, 
    -18.0694229463541, -6.44055807086374, 141.173452796295, -18.0694229463541, 
    2383.80680012185, -181.473952196143, -10.6233959016322, -6.44055807086374, 
    -181.473952196143, 157.995684645584), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215479114003253, -0.168996553122113
    ), logphi = c(0.503401034628076, -1.5144806705533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_142 = structure(list(
    par = c(-0.162181755945204, -0.0360602548632783, 0.521232553284893, 
    -1.61346627144503), value = 56.5980505438059, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.1712574303833, -8.31441793280874, 
    156.177079555064, -11.9703032481766, -8.31441793280874, 25.4204564047456, 
    -21.9476062959245, -7.31424134237102, 156.177079555064, -21.9476062959245, 
    3111.21259768754, -250.037319966978, -11.9703032481766, -7.31424134237102, 
    -250.037319966978, 196.5123724883), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162181755945204, -0.0360602548632783
    ), logphi = c(0.521232553284893, -1.61346627144503)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_143 = structure(list(
    par = c(-0.201553069158246, 0.237649297862453, 0.494087649318856, 
    -1.68397740320441), value = 32.0714117105677, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.0769313264924, -3.10736225550556, 
    167.368401013945, -7.55274406838424, -3.10736225550556, 37.7194934504388, 
    -8.71258987977797, -10.2420309584517, 167.368401013945, -8.71258987977797, 
    3597.53209757407, -242.29557108324, -7.55274406838424, -10.2420309584517, 
    -242.29557108324, 204.605656406898), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201553069158246, 0.237649297862453
    ), logphi = c(0.494087649318856, -1.68397740320441)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_144 = structure(list(
    par = c(-0.394261874218561, 0.172486822391327, 0.512461715608331, 
    -1.54926019045704), value = 52.6655843872677, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.7333412252825, -0.756653886213599, 
    156.30919862808, -15.0642649003885, -0.756653886213599, 34.2866954543553, 
    -16.8266256554972, -10.3470717789378, 156.30919862808, -16.8266256554972, 
    2543.7161990709, -246.247288815837, -15.0642649003885, -10.3470717789378, 
    -246.247288815837, 173.27524367694), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394261874218561, 0.172486822391327
    ), logphi = c(0.512461715608331, -1.54926019045704)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_145 = structure(list(
    par = c(-0.327475832084718, 0.0930581651285201, 0.514013024922116, 
    -1.45763388718174), value = 60.3424673423642, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.6484072645044, -0.431241000242721, 
    138.845959092748, -13.1679184995903, -0.431241000242721, 
    34.2072931562853, -17.1346974369158, -8.43425601182446, 138.845959092748, 
    -17.1346974369158, 1985.85022061692, -195.712817179228, -13.1679184995903, 
    -8.43425601182446, -195.712817179228, 142.762357450366), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.327475832084718, 0.0930581651285201
    ), logphi = c(0.514013024922116, -1.45763388718174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_146 = structure(list(
    par = c(-0.229136528079904, -0.318822782625898, 0.475794936233858, 
    -1.76674805531094), value = 50.9639094833992, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.8265014584977, -7.95749612159113, 
    172.067950602539, -9.65121341334196, -7.95749612159113, 16.661400739082, 
    -16.2332154864941, -6.26075837573126, 172.067950602539, -16.2332154864941, 
    4541.02982832083, -234.870372934459, -9.65121341334196, -6.26075837573126, 
    -234.870372934459, 229.769813811842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229136528079904, -0.318822782625898
    ), logphi = c(0.475794936233858, -1.76674805531094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_147 = structure(list(
    par = c(-0.561534456951499, 0.239802482958233, 0.516569161048478, 
    -1.68749357602504), value = 25.5040458963492, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.2306414977343, 0.898821998163157, 
    184.778625412108, -20.9242623636641, 0.898821998163157, 40.3411472671422, 
    -20.3981067716796, -13.0796445496628, 184.778625412108, -20.3981067716796, 
    3631.40654668648, -357.604383184551, -20.9242623636641, -13.0796445496628, 
    -357.604383184551, 224.406674581346), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.561534456951499, 0.239802482958233
    ), logphi = c(0.516569161048478, -1.68749357602504)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_148 = structure(list(
    par = c(-0.247262705622554, 0.146151385811494, 0.498871454602005, 
    -1.63968225685466), value = 43.1512157003844, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.4924729341674, -2.56511806107085, 
    163.316942911607, -9.96385872298333, -2.56511806107085, 36.2407457537017, 
    -13.6784727988726, -9.70869550265263, 163.316942911607, -13.6784727988726, 
    3240.58573186115, -238.15504477831, -9.96385872298333, -9.70869550265263, 
    -238.15504477831, 194.844926699744), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247262705622554, 0.146151385811494
    ), logphi = c(0.498871454602005, -1.63968225685466)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_149 = structure(list(
    par = c(-0.272981911211045, -0.240841562506586, 0.548488280338354, 
    -1.48068332191199), value = 78.3269755098397, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.057099559581, -7.76364787213879, 
    138.960708145675, -18.5369089926724, -7.76364787213879, 17.7866837880458, 
    -25.2896778007994, -4.74117183379974, 138.960708145675, -25.2896778007994, 
    2219.77041979571, -257.853534328945, -18.5369089926724, -4.74117183379974, 
    -257.853534328945, 167.717829107517), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.272981911211045, -0.240841562506586
    ), logphi = c(0.548488280338354, -1.48068332191199)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_150 = structure(list(
    par = c(-0.110645843376274, 0.0166119282026796, 0.46343890873521, 
    -1.63406221056107), value = 56.3000181143286, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.3597109020585, -5.55863120688116, 
    148.937800682702, -2.31514038517844, -5.55863120688116, 27.5223874712793, 
    -7.67818483460303, -7.57766911618774, 148.937800682702, -7.67818483460303, 
    3188.42850361101, -142.187680861383, -2.31514038517844, -7.57766911618774, 
    -142.187680861383, 179.32278971422), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.110645843376274, 0.0166119282026796
    ), logphi = c(0.46343890873521, -1.63406221056107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_151 = structure(list(
    par = c(-0.311573159734144, -0.253115710030672, 0.488042083163624, 
    -1.63336977390827), value = 55.0021816477204, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.4375364748601, -6.35182364838727, 
    160.020434984531, -12.187140692177, -6.35182364838727, 17.5086064722052, 
    -18.3724191433754, -6.84861600852571, 160.020434984531, -18.3724191433754, 
    3264.61503011721, -216.40299583936, -12.187140692177, -6.84861600852571, 
    -216.40299583936, 194.257650669272), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311573159734144, -0.253115710030672
    ), logphi = c(0.488042083163624, -1.63336977390827)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_152 = structure(list(
    par = c(-0.0643721173691717, 0.123825665137431, 0.494168342611822, 
    -1.58931608000029), value = 52.0287240164684, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.4897738907422, -5.82075881538913, 
    145.7994535361, -4.62472097950695, -5.82075881538913, 35.0597255724949, 
    -12.5085885933629, -8.03634445922796, 145.7994535361, -12.5085885933629, 
    2865.96752605917, -179.157250576267, -4.62472097950695, -8.03634445922796, 
    -179.157250576267, 175.265657411217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0643721173691717, 0.123825665137431
    ), logphi = c(0.494168342611822, -1.58931608000029)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_153 = structure(list(
    par = c(-0.212903838742273, -0.136615114283989, 0.500819307941287, 
    -1.57538225014328), value = 65.8316150221004, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.7033561413934, -7.07595373583558, 
    150.116645901477, -10.54928147326, -7.07595373583558, 21.0468104739903, 
    -18.2734604941004, -6.95785940507676, 150.116645901477, -18.2734604941004, 
    2805.85019639545, -201.978715594464, -10.54928147326, -6.95785940507676, 
    -201.978715594464, 177.39686427376), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212903838742273, -0.136615114283989
    ), logphi = c(0.500819307941287, -1.57538225014328)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_154 = structure(list(
    par = c(-0.470803251458174, 0.287894211581659, 0.514598426817881, 
    -1.62454905423172), value = 40.7642910374684, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.53851142471, 2.38851262501782, 
    172.266257123965, -17.261049234385, 2.38851262501782, 42.2804124990961, 
    -14.7216649093451, -12.76078934076, 172.266257123965, -14.7216649093451, 
    3070.0809636155, -303.279018192271, -17.261049234385, -12.76078934076, 
    -303.279018192271, 199.5511497217), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.470803251458174, 0.287894211581659
    ), logphi = c(0.514598426817881, -1.62454905423172)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_155 = structure(list(
    par = c(-0.188753876443864, 0.210780522683227, 0.466112033420553, 
    -1.63538180984634), value = 43.5028855814089, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.2358147361227, -0.716249815013725, 
    153.772562530463, -2.99766903211207, -0.716249815013725, 
    36.8801930488161, -2.70228033372177, -9.28662133414804, 153.772562530463, 
    -2.70228033372177, 3142.75355615656, -166.110236457406, -2.99766903211207, 
    -9.28662133414804, -166.110236457406, 177.986792710527), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188753876443864, 0.210780522683227
    ), logphi = c(0.466112033420553, -1.63538180984634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_156 = structure(list(
    par = c(-0.576915443727504, -0.659993646751865, 0.515626765880588, 
    -1.70745030803845), value = 54.5024542649861, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.380357730792, -6.464273411666, 
    164.599887714445, -22.682816311459, -6.464273411666, 8.2540496357808, 
    -30.6109481122974, -3.44045859534958, 164.599887714445, -30.6109481122974, 
    4115.51753685657, -354.384572940347, -22.682816311459, -3.44045859534958, 
    -354.384572940347, 245.441665079227), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.576915443727504, -0.659993646751865
    ), logphi = c(0.515626765880588, -1.70745030803845)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_157 = structure(list(
    par = c(-0.364072751663369, 0.0102790081590739, 0.454776973693841, 
    -1.62545088103838), value = 44.9090856857484, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.8154726396515, -0.140448436880547, 
    159.424666364316, -6.99539657933457, -0.140448436880547, 
    28.5141583251658, -6.17127521884697, -9.20313690144781, 159.424666364316, 
    -6.17127521884697, 3053.62505101492, -162.076955675161, -6.99539657933457, 
    -9.20313690144781, -162.076955675161, 172.809421144393), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.364072751663369, 0.0102790081590739
    ), logphi = c(0.454776973693841, -1.62545088103838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_158 = structure(list(
    par = c(-0.318838673541525, -0.262387870332054, 0.499560003692007, 
    -1.56919357655897), value = 63.9724851119918, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.2568056436704, -5.78020912023192, 
    151.67043281572, -13.455862547751, -5.78020912023192, 18.0627028640856, 
    -19.8164016609326, -6.43876948114297, 151.67043281572, -19.8164016609326, 
    2775.40977580415, -210.78544877362, -13.455862547751, -6.43876948114297, 
    -210.78544877362, 177.595771404526), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318838673541525, -0.262387870332054
    ), logphi = c(0.499560003692007, -1.56919357655897)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_159 = structure(list(
    par = c(-0.36341508797417, 0.0239951081349836, 0.479132710902308, 
    -1.67924023254516), value = 36.9638207346118, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.198954824235, -2.52609785356128, 
    171.22029552219, -11.1896234127329, -2.52609785356128, 28.6496161105987, 
    -12.2540322866627, -9.62682471339349, 171.22029552219, -12.2540322866627, 
    3570.10310500172, -237.017419618013, -11.1896234127329, -9.62682471339349, 
    -237.017419618013, 201.858014806433), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36341508797417, 0.0239951081349836
    ), logphi = c(0.479132710902308, -1.67924023254516)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_160 = structure(list(
    par = c(-0.198642776114278, -0.0726640406082311, 0.510668810253309, 
    -1.65733210332321), value = 55.2193130976263, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.3042526893537, -9.02242298117528, 
    162.659907882556, -11.78412470626, -9.02242298117528, 21.7910271196331, 
    -20.7263396472257, -7.23188664331076, 162.659907882556, -20.7263396472257, 
    3474.7718074275, -253.111683472085, -11.78412470626, -7.23188664331076, 
    -253.111683472085, 207.578530922348), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198642776114278, -0.0726640406082311
    ), logphi = c(0.510668810253309, -1.65733210332321)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_161 = structure(list(
    par = c(-0.169661052682376, -0.109168888150227, 0.494046790102929, 
    -1.64357938515782), value = 56.9366665319306, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.7294237473849, -7.8302161785615, 
    157.534983385332, -8.83294673048596, -7.8302161785615, 22.1701087035342, 
    -16.8378514917578, -7.24381740813129, 157.534983385332, -16.8378514917578, 
    3341.60413478912, -210.572679149479, -8.83294673048596, -7.24381740813129, 
    -210.572679149479, 196.567130444691), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.169661052682376, -0.109168888150227
    ), logphi = c(0.494046790102929, -1.64357938515782)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_162 = structure(list(
    par = c(-0.29634826520827, -0.190786315191099, 0.485052515544552, 
    -1.63377931579058), value = 59.5627990685667, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.7903875728132, -6.71239943628166, 
    160.051092084501, -11.1171255401388, -6.71239943628166, 18.1776383314514, 
    -16.9624801564794, -7.29726293435817, 160.051092084501, -16.9624801564794, 
    3248.84934524583, -209.403613189885, -11.1171255401388, -7.29726293435817, 
    -209.403613189885, 192.036897365355), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29634826520827, -0.190786315191099
    ), logphi = c(0.485052515544552, -1.63377931579058)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_163 = structure(list(
    par = c(-0.191557221204621, 0.206771399013898, 0.496281075685641, 
    -1.6421881109305), value = 33.0419914247272, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.4396963818208, -2.74728704496852, 
    160.834135048304, -7.68349006730062, -2.74728704496852, 37.9497315439181, 
    -10.8260436544327, -9.77993485484774, 160.834135048304, -10.8260436544327, 
    3248.46600648954, -226.415438877581, -7.68349006730062, -9.77993485484774, 
    -226.415438877581, 192.978261498666), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191557221204621, 0.206771399013898
    ), logphi = c(0.496281075685641, -1.6421881109305)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_164 = structure(list(
    par = c(-0.395947751632142, -0.0784514277065377, 0.499386015822779, 
    -1.644495901059), value = 50.5238696008252, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.8105932991235, -5.0639086488502, 
    167.663016469533, -15.3661046784492, -5.0639086488502, 23.025043336844, 
    -20.6290935942377, -8.52847438359561, 167.663016469533, -20.6290935942377, 
    3334.27642971174, -263.195412521178, -15.3661046784492, -8.52847438359561, 
    -263.195412521178, 202.704659791664), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.395947751632142, -0.0784514277065377
    ), logphi = c(0.499386015822779, -1.644495901059)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_165 = structure(list(
    par = c(-0.302782427573678, 0.168881170177645, 0.497904276635695, 
    -1.75820182103138), value = 29.7596085579209, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0278995874534, -4.76315216246803, 
    183.686652995618, -11.7206829512995, -4.76315216246803, 32.3890288473905, 
    -13.1914623366924, -10.6662699668192, 183.686652995618, -13.1914623366924, 
    4334.02370364533, -298.66688660185, -11.7206829512995, -10.6662699668192, 
    -298.66688660185, 229.852717620105), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302782427573678, 0.168881170177645
    ), logphi = c(0.497904276635695, -1.75820182103138)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_166 = structure(list(
    par = c(-0.423852312705033, -0.495174769795715, 0.500792876507272, 
    -1.55527494223958), value = 74.680712029632, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.3727039407618, -5.97564219262381, 
    149.565060088008, -16.6534197951762, -5.97564219262381, 11.2390375903715, 
    -21.0556439164122, -5.01887577186722, 149.565060088008, -21.0556439164122, 
    2713.29714873048, -219.461884118033, -16.6534197951762, -5.01887577186722, 
    -219.461884118033, 177.427580958067), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423852312705033, -0.495174769795715
    ), logphi = c(0.500792876507272, -1.55527494223958)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_167 = structure(list(
    par = c(-0.226309109991182, 0.229970505366921, 0.544068759572415, 
    -1.62469783181052), value = 52.1825168396079, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.7246558568828, -6.47254712937695, 
    165.2685261746, -15.7070750770316, -6.47254712937695, 35.6114652646511, 
    -24.754554026174, -9.67290411324484, 165.2685261746, -24.754554026174, 
    3145.88326101806, -314.10508629115, -15.7070750770316, -9.67290411324484, 
    -314.10508629115, 207.352093221758), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226309109991182, 0.229970505366921
    ), logphi = c(0.544068759572415, -1.62469783181052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_168 = structure(list(
    par = c(-0.314052093860831, -0.10460574631964, 0.510735748080523, 
    -1.53502567176), value = 57.1305013762827, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.9345679986338, -4.92095137261117, 
    148.895184217679, -14.0854162360426, -4.92095137261117, 23.3502203226266, 
    -20.3787489603258, -7.27778554843184, 148.895184217679, -20.3787489603258, 
    2514.37863212622, -219.313554163492, -14.0854162360426, -7.27778554843184, 
    -219.313554163492, 169.179296419131), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314052093860831, -0.10460574631964
    ), logphi = c(0.510735748080523, -1.53502567176)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_169 = structure(list(
    par = c(-0.341352097834071, 0.0134822023901789, 0.515711831596665, 
    -1.63253787179822), value = 53.716076226644, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.9215293675949, -5.53360350075138, 
    166.15262000208, -15.771807509779, -5.53360350075138, 27.0975074059265, 
    -22.6708533475062, -8.7799907646513, 166.15262000208, -22.6708533475062, 
    3237.68604753916, -280.863942800025, -15.771807509779, -8.7799907646513, 
    -280.863942800025, 203.856199277652), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341352097834071, 0.0134822023901789
    ), logphi = c(0.515711831596665, -1.63253787179822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_170 = structure(list(
    par = c(-0.171941203653711, -0.205117947762134, 0.518689370826147, 
    -1.6012537156265), value = 69.9092161173164, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.3209320608755, -9.25715514554781, 
    152.440264109543, -12.4500929210569, -9.25715514554781, 18.2932087469112, 
    -22.1638526376466, -6.07785732498201, 152.440264109543, -22.1638526376466, 
    3046.58442303918, -238.301787597095, -12.4500929210569, -6.07785732498201, 
    -238.301787597095, 193.387919360077), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.171941203653711, -0.205117947762134
    ), logphi = c(0.518689370826147, -1.6012537156265)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_171 = structure(list(
    par = c(-0.157790856073686, 0.0187774657557738, 0.473962807381505, 
    -1.62607694662297), value = 55.1169823182681, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.7907162129403, -5.52721814806034, 
    152.470623664414, -4.82096035181456, -5.52721814806034, 26.6924817626801, 
    -10.1024860903465, -8.00151591029419, 152.470623664414, -10.1024860903465, 
    3132.81408051402, -166.718571295021, -4.82096035181456, -8.00151591029419, 
    -166.718571295021, 181.007848928161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.157790856073686, 0.0187774657557738
    ), logphi = c(0.473962807381505, -1.62607694662297)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_172 = structure(list(
    par = c(-0.213454056815373, 0.150666706594822, 0.515899961619335, 
    -1.7009834401782), value = 44.0793510905156, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.7779461136745, -6.91015310572141, 
    172.875986164556, -11.8324682727433, -6.91015310572141, 32.2664349035051, 
    -18.9851195173674, -9.61981256075717, 172.875986164556, -18.9851195173674, 
    3811.65265090466, -288.357298638964, -11.8324682727433, -9.61981256075717, 
    -288.357298638964, 219.800977033557), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.213454056815373, 0.150666706594822
    ), logphi = c(0.515899961619335, -1.7009834401782)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_173 = structure(list(
    par = c(-0.304131179038653, -0.0203855858373855, 0.505413162362394, 
    -1.65827563537038), value = 53.8799953665231, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.2744596474025, -6.41809523749259, 
    167.499941412075, -13.5952672444262, -6.41809523749259, 24.5049119058649, 
    -20.2894422400846, -8.55567924240574, 167.499941412075, -20.2894422400846, 
    3453.73132511995, -264.725047091297, -13.5952672444262, -8.55567924240574, 
    -264.725047091297, 207.098947612394), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304131179038653, -0.0203855858373855
    ), logphi = c(0.505413162362394, -1.65827563537038)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_174 = structure(list(
    par = c(-0.228350351799734, 0.00248305307405691, 0.489057789153911, 
    -1.5074681515944), value = 59.9745000991528, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.7959519622724, -3.40542610111072, 
    140.23171769395, -7.87712000960283, -3.40542610111072, 28.2346975915004, 
    -13.9022589635829, -7.81077957423548, 140.23171769395, -13.9022589635829, 
    2286.13166850522, -157.094787493151, -7.87712000960283, -7.81077957423548, 
    -157.094787493151, 148.477976699368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228350351799734, 0.00248305307405691
    ), logphi = c(0.489057789153911, -1.5074681515944)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_175 = structure(list(
    par = c(-0.555170518716508, -0.358035781780286, 0.516481664527462, 
    -1.56459888679062), value = 66.3104399762638, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.9625891749436, -5.05769855863036, 
    155.49270592885, -21.9179015967796, -5.05769855863036, 14.5532349797861, 
    -26.9179561769306, -5.69200857114538, 155.49270592885, -26.9179561769306, 
    2789.44556190552, -280.136143116394, -21.9179015967796, -5.69200857114538, 
    -280.136143116394, 191.400645416451), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.555170518716508, -0.358035781780286
    ), logphi = c(0.516481664527462, -1.56459888679062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_176 = structure(list(
    par = c(-0.386093746123295, 0.441786837237577, 0.510857017879304, 
    -1.64603740572102), value = 26.7960729443272, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.8574914352056, 5.37935069644391, 
    172.647635933387, -12.9420402226188, 5.37935069644391, 50.7868414771906, 
    -4.49716802464195, -13.8594598286801, 172.647635933387, -4.49716802464195, 
    3191.3068490752, -294.600073566187, -12.9420402226188, -13.8594598286801, 
    -294.600073566187, 199.502079940572), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.386093746123295, 0.441786837237577
    ), logphi = c(0.510857017879304, -1.64603740572102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_177 = structure(list(
    par = c(-0.28035796676895, -0.0363375889904195, 0.502034576586194, 
    -1.69036984809355), value = 43.0349502839876, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.1244212141694, -6.82400883178502, 
    170.638504132015, -12.7328780994418, -6.82400883178502, 24.8588162303776, 
    -19.7575668199335, -8.40999058304703, 170.638504132015, -19.7575668199335, 
    3744.95249578999, -267.629916411494, -12.7328780994418, -8.40999058304703, 
    -267.629916411494, 215.463177768882), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28035796676895, -0.0363375889904195
    ), logphi = c(0.502034576586194, -1.69036984809355)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_178 = structure(list(
    par = c(-0.413957304047546, -0.268382705220511, 0.517495277066062, 
    -1.77035160115052), value = 49.7651367473135, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.0999964705924, -8.72518436345615, 
    179.007276027932, -18.9532088974431, -8.72518436345615, 15.8173344253498, 
    -32.0809156963975, -6.18258199214239, 179.007276027932, -32.0809156963975, 
    4661.38460321197, -353.855670233827, -18.9532088974431, -6.18258199214239, 
    -353.855670233827, 252.30666675391), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.413957304047546, -0.268382705220511
    ), logphi = c(0.517495277066062, -1.77035160115052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_179 = structure(list(
    par = c(-0.581871752474874, 0.103848518765863, 0.537705266083437, 
    -1.6239257410732), value = 39.1692710723288, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.7018865967268, -2.15076394027847, 
    172.901493005639, -25.0355108217803, -2.15076394027847, 33.0738721885382, 
    -31.9999758602307, -10.0384337162751, 172.901493005639, -31.9999758602307, 
    3170.85840913123, -367.067129468879, -25.0355108217803, -10.0384337162751, 
    -367.067129468879, 219.234926941425), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.581871752474874, 0.103848518765863
    ), logphi = c(0.537705266083437, -1.6239257410732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_180 = structure(list(
    par = c(-0.120263961872953, 0.271892172504024, 0.493504054174878, 
    -1.49233328317701), value = 59.2692419016943, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.375296142383, -1.96333630420042, 
    133.781846392012, -4.28639626637306, -1.96333630420042, 39.3883004541351, 
    -9.54197907532262, -8.76044722897262, 133.781846392012, -9.54197907532262, 
    2161.08416724303, -153.088786126077, -4.28639626637306, -8.76044722897262, 
    -153.088786126077, 141.988398466353), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.120263961872953, 0.271892172504024
    ), logphi = c(0.493504054174878, -1.49233328317701)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_181 = structure(list(
    par = c(-0.272992047778223, -0.11637537350651, 0.49174166887938, 
    -1.56207861646286), value = 66.3459934454148, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.4347828685786, -5.73065193520961, 
    149.940148538974, -10.4976955235259, -5.73065193520961, 21.2093214315701, 
    -16.6192771970941, -7.4407471384319, 149.940148538974, -16.6192771970941, 
    2683.47079995834, -188.444996661374, -10.4976955235259, -7.4407471384319, 
    -188.444996661374, 169.570435023303), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.272992047778223, -0.11637537350651
    ), logphi = c(0.49174166887938, -1.56207861646286)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_182 = structure(list(
    par = c(-0.035170106098922, 0.00637961911987958, 0.499773183357974, 
    -1.69184619203895), value = 52.3227845037844, counts = structure(c(391L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.5581999511651, -10.0959948117207, 
    158.657881664581, -5.82978017948932, -10.0959948117207, 26.5003643207251, 
    -15.5497613008038, -7.40382416530849, 158.657881664581, -15.5497613008038, 
    3770.12477843053, -217.860342710097, -5.82978017948932, -7.40382416530849, 
    -217.860342710097, 210.899630976868), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.035170106098922, 0.00637961911987958
    ), logphi = c(0.499773183357974, -1.69184619203895)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_183 = structure(list(
    par = c(-0.312292540700009, -0.116762346341158, 0.536828502857363, 
    -1.63140384563915), value = 59.9574906848094, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.7607069589209, -8.32954903806638, 
    163.030688371535, -18.4013504682667, -8.32954903806638, 20.9871634435643, 
    -29.3694994937255, -6.73421838204291, 163.030688371535, -29.3694994937255, 
    3293.41870405919, -312.105479550517, -18.4013504682667, -6.73421838204291, 
    -312.105479550517, 213.614478672852), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312292540700009, -0.116762346341158
    ), logphi = c(0.536828502857363, -1.63140384563915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_184 = structure(list(
    par = c(-0.199888415483663, 0.0738445533872615, 0.495700097599799, 
    -1.6048628607233), value = 57.0512062746471, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.9792234168939, -5.5442087134594, 
    155.015515733936, -8.5456631921943, -5.5442087134594, 28.5813541278657, 
    -14.3240319943061, -8.6475570615363, 155.015515733936, -14.3240319943061, 
    2979.08992983764, -207.581083156327, -8.5456631921943, -8.6475570615363, 
    -207.581083156327, 182.595848315259), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199888415483663, 0.0738445533872615
    ), logphi = c(0.495700097599799, -1.6048628607233)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_185 = structure(list(
    par = c(-0.465028625448138, -0.047353500233931, 0.506676065306127, 
    -1.70211056257716), value = 38.5847643661463, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4337145275666, -5.70078650774519, 
    178.587057108714, -18.4726561567317, -5.70078650774519, 23.0054169509941, 
    -25.0611205601103, -9.06456895233276, 178.587057108714, -25.0611205601103, 
    3863.67911043628, -320.61758797397, -18.4726561567317, -9.06456895233276, 
    -320.61758797397, 226.278000155844), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.465028625448138, -0.047353500233931
    ), logphi = c(0.506676065306127, -1.70211056257716)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_186 = structure(list(
    par = c(-0.307273923227934, 0.198086656850889, 0.518235964422483, 
    -1.53845172393287), value = 46.9960068209821, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.1203023749077, -1.72589518143695, 
    152.218953903827, -13.5047728795357, -1.72589518143695, 36.0194385837787, 
    -17.037229957495, -9.8389908176344, 152.218953903827, -17.037229957495, 
    2477.99792918535, -240.019192580654, -13.5047728795357, -9.8389908176344, 
    -240.019192580654, 170.364799700451), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.307273923227934, 0.198086656850889
    ), logphi = c(0.518235964422483, -1.53845172393287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_187 = structure(list(
    par = c(-0.517607418271504, -0.0407808561290054, 0.5214555128037, 
    -1.61144750106167), value = 55.5418814290982, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4057680415524, -4.79646455353588, 
    167.21685978105, -21.4005531926631, -4.79646455353588, 23.0731967878484, 
    -27.5989384412867, -8.66202609905997, 167.21685978105, -27.5989384412867, 
    3086.42302226225, -313.521735175293, -21.4005531926631, -8.66202609905997, 
    -313.521735175293, 205.791299801916), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.517607418271504, -0.0407808561290054
    ), logphi = c(0.5214555128037, -1.61144750106167)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_188 = structure(list(
    par = c(-0.213360816296124, 0.167415637511491, 0.497479916090065, 
    -1.62191515567728), value = 52.7335329844108, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.0704328348299, -3.66672622575948, 
    158.898402176533, -8.61239390026469, -3.66672622575948, 34.1567727861758, 
    -12.5148711873635, -9.55348638509435, 158.898402176533, -12.5148711873635, 
    3091.2643270451, -222.792916723336, -8.61239390026469, -9.55348638509435, 
    -222.792916723336, 187.820355643353), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.213360816296124, 0.167415637511491
    ), logphi = c(0.497479916090065, -1.62191515567728)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_189 = structure(list(
    par = c(-0.457353489113671, -0.085405727080978, 0.503740546153643, 
    -1.6155303887597), value = 50.1293238698726, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.2236735479615, -4.59921337991887, 
    165.368512014652, -17.4193194837358, -4.59921337991887, 22.1164371012605, 
    -22.2206337099351, -8.54690900453647, 165.368512014652, -22.2206337099351, 
    3099.48856169129, -268.480164121065, -17.4193194837358, -8.54690900453647, 
    -268.480164121065, 196.669522090076), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.457353489113671, -0.085405727080978
    ), logphi = c(0.503740546153643, -1.6155303887597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_190 = structure(list(
    par = c(-0.336309789314295, -0.585356052530347, 0.473410439755157, 
    -1.7307036921739), value = 53.4781880088958, counts = structure(c(357L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.0793653357998, -7.07055192350481, 
    167.701267322684, -12.6811055274345, -7.07055192350481, 9.72056948711497, 
    -17.9534672941628, -4.94611955037527, 167.701267322684, -17.9534672941628, 
    4211.53587252654, -231.972203205366, -12.6811055274345, -4.94611955037527, 
    -231.972203205366, 223.180688838198), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336309789314295, -0.585356052530347
    ), logphi = c(0.473410439755157, -1.7307036921739)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_191 = structure(list(
    par = c(-0.264442216689458, -0.14867181641827, 0.478924960417895, 
    -1.68927939673895), value = 46.9207760162847, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0530233394211, -5.76564522347667, 
    166.393349156024, -9.68414602109391, -5.76564522347667, 22.2629155004483, 
    -14.9983478685556, -7.61517501590703, 166.393349156024, -14.9983478685556, 
    3721.44229101146, -217.88146431323, -9.68414602109391, -7.61517501590703, 
    -217.88146431323, 206.316634191239), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264442216689458, -0.14867181641827
    ), logphi = c(0.478924960417895, -1.68927939673895)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_192 = structure(list(
    par = c(-0.212035916405405, 0.0465759616439775, 0.474419133684416, 
    -1.60466876849193), value = 50.8702108990758, counts = structure(c(323L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.1972768388545, -3.19634612466757, 
    152.29369916625, -5.83120995401032, -3.19634612466757, 30.0058078455123, 
    -9.89627385727943, -8.47843706264229, 152.29369916625, -9.89627385727943, 
    2946.88484577499, -168.04723931596, -5.83120995401032, -8.47843706264229, 
    -168.04723931596, 174.007780376684), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212035916405405, 0.0465759616439775
    ), logphi = c(0.474419133684416, -1.60466876849193)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_193 = structure(list(
    par = c(-0.185342147238101, -0.0482610617555993, 0.527272065902248, 
    -1.61767872916937), value = 63.1484552177086, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.7692375371727, -7.42787219110141, 
    157.908747620894, -13.4935453921514, -7.42787219110141, 27.3998672479792, 
    -23.9078735031484, -7.19470492871466, 157.908747620894, -23.9078735031484, 
    3153.40874566949, -266.640468364443, -13.4935453921514, -7.19470492871466, 
    -266.640468364443, 200.829261110869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.185342147238101, -0.0482610617555993
    ), logphi = c(0.527272065902248, -1.61767872916937)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_194 = structure(list(
    par = c(-0.444189642248037, 0.0211145541681197, 0.515720837150611, 
    -1.53349154561152), value = 56.2973533050949, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.4808130457712, -3.12030622851012, 
    154.222479476829, -17.5952658771905, -3.12030622851012, 25.9457879643321, 
    -21.2751617425511, -8.88392249898118, 154.222479476829, -21.2751617425511, 
    2475.30856297118, -249.569992194054, -17.5952658771905, -8.88392249898118, 
    -249.569992194054, 172.485569894576), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.444189642248037, 0.0211145541681197
    ), logphi = c(0.515720837150611, -1.53349154561152)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_195 = structure(list(
    par = c(-0.235542614926873, -0.0970496346751486, 0.485628605006592, 
    -1.60780953719826), value = 57.4909486503536, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.6567242113558, -5.92328116155727, 
    154.68276269992, -8.97027366963954, -5.92328116155727, 22.9111208742694, 
    -15.1491509488011, -7.62268773435437, 154.68276269992, -15.1491509488011, 
    3021.49610934777, -191.004904229075, -8.97027366963954, -7.62268773435437, 
    -191.004904229075, 181.785414991253), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.235542614926873, -0.0970496346751486
    ), logphi = c(0.485628605006592, -1.60780953719826)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_196 = structure(list(
    par = c(-0.275219881185437, -0.314822697064249, 0.479347827472168, 
    -1.60066105503507), value = 64.7811894720354, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.33668303679, -5.85313595280468, 
    152.643193167989, -9.97391680357396, -5.85313595280468, 16.9420689033473, 
    -16.1057325982483, -6.30908795962171, 152.643193167989, -16.1057325982483, 
    2993.51722012986, -177.148461819598, -9.97391680357396, -6.30908795962171, 
    -177.148461819598, 179.445849699533), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275219881185437, -0.314822697064249
    ), logphi = c(0.479347827472168, -1.60066105503507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_197 = structure(list(
    par = c(-0.218141267044774, 0.302641425488191, 0.506338276848696, 
    -1.56137881523127), value = 43.9561777659649, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.059394101018, 0.122412254555115, 
    151.01859964517, -8.70010337195026, 0.122412254555115, 43.1032949048671, 
    -10.7534600566339, -10.3176021148954, 151.01859964517, -10.7534600566339, 
    2607.77279230417, -217.804661629906, -8.70010337195026, -10.3176021148954, 
    -217.804661629906, 170.027461985356), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218141267044774, 0.302641425488191
    ), logphi = c(0.506338276848696, -1.56137881523127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_198 = structure(list(
    par = c(-0.387566193299487, -0.0784150880292173, 0.49857340050239, 
    -1.66909952512169), value = 41.4965138261784, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.2014192705694, -5.16866589350684, 
    170.879184670625, -15.2060031526347, -5.16866589350684, 23.4257740476806, 
    -20.7612338609664, -8.56137494942288, 170.879184670625, -20.7612338609664, 
    3549.96483419612, -271.957306251736, -15.2060031526347, -8.56137494942288, 
    -271.957306251736, 210.196459709877), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.387566193299487, -0.0784150880292173
    ), logphi = c(0.49857340050239, -1.66909952512169)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_199 = structure(list(
    par = c(-0.271693186341378, 0.0361344582154955, 0.498164944934421, 
    -1.59982283759008), value = 52.1485139634894, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.4367479803474, -4.40508188148669, 
    157.478625503416, -10.9443051758973, -4.40508188148669, 28.2545963159464, 
    -16.1517723409332, -8.75621597362652, 157.478625503416, -16.1517723409332, 
    2944.23002811506, -220.711327833634, -10.9443051758973, -8.75621597362652, 
    -220.711327833634, 183.375509038797), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271693186341378, 0.0361344582154955
    ), logphi = c(0.498164944934421, -1.59982283759008)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_200 = structure(list(
    par = c(-0.222092344756284, 0.152760153319628, 0.505882415535763, 
    -1.59612218185185), value = 47.7260066473771, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.5893081203991, -2.89868822811457, 
    156.409096925714, -10.0803638503066, -2.89868822811457, 36.8574738107696, 
    -15.1619967407868, -9.34904954696947, 156.409096925714, -15.1619967407868, 
    2902.4750023261, -228.677271667976, -10.0803638503066, -9.34904954696947, 
    -228.677271667976, 183.295460578492), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222092344756284, 0.152760153319628
    ), logphi = c(0.505882415535763, -1.59612218185185)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_1 = structure(list(
    par = c(-0.151491732220519, -0.10500046626174, 0.505589698018163, 
    -1.63955956330831), value = 69.6206693005367, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.0715548483736, -10.7745840942641, 
    188.7336357278, -11.9118437602594, -10.7745840942641, 25.7072392102486, 
    -23.0547208737164, -8.47462946751421, 188.7336357278, -23.0547208737164, 
    3990.51161662101, -272.842296151765, -11.9118437602594, -8.47462946751421, 
    -272.842296151765, 239.386936470964), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.151491732220519, -0.10500046626174
    ), logphi = c(0.505589698018163, -1.63955956330831)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_2 = structure(list(
    par = c(-0.182780540453014, 0.279361766203168, 0.520657887806855, 
    -1.62772879508068), value = 49.9129492175382, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.2470622668401, -5.00171448969411, 
    194.42812457271, -12.6928213033395, -5.00171448969411, 47.3965177416602, 
    -18.7202840873368, -12.3158004976531, 194.42812457271, -18.7202840873368, 
    3766.19433615488, -319.448452703597, -12.6928213033395, -12.3158004976531, 
    -319.448452703597, 236.575870642852), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.182780540453014, 0.279361766203168
    ), logphi = c(0.520657887806855, -1.62772879508068)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_3 = structure(list(
    par = c(-0.376455106705758, -0.115681270267552, 0.487832408057775, 
    -1.63123336132067), value = 66.5536346048154, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.4756658847525, -5.34381578276566, 
    196.647173492437, -15.8641138625626, -5.34381578276566, 27.3639046177721, 
    -21.1138773131836, -9.90093182551277, 196.647173492437, -21.1138773131836, 
    3850.5782384064, -275.502226587676, -15.8641138625626, -9.90093182551277, 
    -275.502226587676, 231.269707644088), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376455106705758, -0.115681270267552
    ), logphi = c(0.487832408057775, -1.63123336132067)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_4 = structure(list(
    par = c(-0.41892378775674, 0.0122282676964694, 0.50300851596204, 
    -1.46440522809731), value = 63.8616008483322, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.1218304243557, 0.267997126712771, 
    169.647736727896, -16.8862628271427, 0.267997126712771, 36.4503429359786, 
    -20.2158286963794, -10.1679831665535, 169.647736727896, -20.2158286963794, 
    2423.61089662069, -225.700223279723, -16.8862628271427, -10.1679831665535, 
    -225.700223279723, 170.461646510134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.41892378775674, 0.0122282676964694
    ), logphi = c(0.50300851596204, -1.46440522809731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_5 = structure(list(
    par = c(-0.369676605988058, 0.0972854464299694, 0.495259613363253, 
    -1.52745380728119), value = 61.189272552706, counts = structure(c(283L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.0813518789265, 0.592405925203821, 
    179.75912558299, -14.2651319041676, 0.592405925203821, 42.4717345026693, 
    -16.8703867036157, -11.4035239811017, 179.75912558299, -16.8703867036157, 
    2868.02591752178, -237.569816676775, -14.2651319041676, -11.4035239811017, 
    -237.569816676775, 189.776041089829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369676605988058, 0.0972854464299694
    ), logphi = c(0.495259613363253, -1.52745380728119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_6 = structure(list(
    par = c(-0.344213380923297, -0.317870438485761, 0.511333677489943, 
    -1.61185665709513), value = 75.9102879410815, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.2239613455331, -8.29886220898857, 
    189.435979347508, -19.4833428039942, -8.29886220898857, 19.0753989492976, 
    -28.4251701963001, -7.10551483962263, 189.435979347508, -28.4251701963001, 
    3769.68257275223, -307.926397709934, -19.4833428039942, -7.10551483962263, 
    -307.926397709934, 238.776115928374), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344213380923297, -0.317870438485761
    ), logphi = c(0.511333677489943, -1.61185665709513)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_7 = structure(list(
    par = c(-0.275065054374882, -0.0154970211615612, 0.486643011542382, 
    -1.60556916117638), value = 64.7417311720563, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.5803449672737, -4.6266650031157, 
    188.18681980548, -11.565639168154, -4.6266650031157, 33.046543236992, 
    -17.2344435434013, -10.1436815018729, 188.18681980548, -17.2344435434013, 
    3578.44048612321, -240.424997983268, -11.565639168154, -10.1436815018729, 
    -240.424997983268, 217.034592708387), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275065054374882, -0.0154970211615612
    ), logphi = c(0.486643011542382, -1.60556916117638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_8 = structure(list(
    par = c(-0.215414351214458, -0.0169740588435687, 0.49502079481018, 
    -1.60337817375287), value = 70.6338130310793, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.9333776530252, -7.41968611706056, 
    185.79551748843, -11.2493856718743, -7.41968611706056, 30.2367724316355, 
    -19.1219731284775, -9.64659922075839, 185.79551748843, -19.1219731284775, 
    3583.51324992867, -247.036754236873, -11.2493856718743, -9.64659922075839, 
    -247.036754236873, 219.763739487178), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215414351214458, -0.0169740588435687
    ), logphi = c(0.49502079481018, -1.60337817375287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_9 = structure(list(
    par = c(-0.339567138214587, 0.311838700724585, 0.513689835163496, 
    -1.57749134010307), value = 47.4277821361368, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.9383934945204, 3.61097623091666, 
    191.631321888153, -15.6198804610597, 3.61097623091666, 57.5242394713626, 
    -14.8957158270235, -13.867202037332, 191.631321888153, -14.8957158270235, 
    3255.56264327176, -308.179156965238, -15.6198804610597, -13.867202037332, 
    -308.179156965238, 216.385774189476), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339567138214587, 0.311838700724585
    ), logphi = c(0.513689835163496, -1.57749134010307)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_10 = structure(list(
    par = c(-0.162122351986898, 0.105296825301872, 0.506162748987399, 
    -1.61034845031601), value = 61.521345326056, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6480370907111, -7.14351186203999, 
    186.719025929705, -10.7902944446181, -7.14351186203999, 38.0346086750194, 
    -19.2940966297073, -10.3597784795184, 186.719025929705, -19.2940966297073, 
    3640.62437453683, -269.210953266708, -10.7902944446181, -10.3597784795184, 
    -269.210953266708, 225.44852866524), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162122351986898, 0.105296825301872
    ), logphi = c(0.506162748987399, -1.61034845031601)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_11 = structure(list(
    par = c(-0.135140830635012, -0.0221851792044087, 0.458042929242205, 
    -1.65712296602943), value = 63.4988312553045, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.3309113332872, -7.12195824448258, 
    182.966859993527, -3.07240156249833, -7.12195824448258, 29.4295562497382, 
    -8.41236388815503, -8.99939014509243, 182.966859993527, -8.41236388815503, 
    4052.1381742078, -173.047302628682, -3.07240156249833, -8.99939014509243, 
    -173.047302628682, 221.814298347667), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135140830635012, -0.0221851792044087
    ), logphi = c(0.458042929242205, -1.65712296602943)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_12 = structure(list(
    par = c(-0.107850819817356, 0.0672209801058168, 0.505995188244817, 
    -1.56378830416278), value = 74.0854350283545, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.5092272057666, -7.86814845454842, 
    175.01342053805, -9.13846034578114, -7.86814845454842, 36.8291940944232, 
    -19.3705831676994, -9.35208363728179, 175.01342053805, -19.3705831676994, 
    3234.90459263098, -235.579668295571, -9.13846034578114, -9.35208363728179, 
    -235.579668295571, 206.673516025546), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.107850819817356, 0.0672209801058168
    ), logphi = c(0.505995188244817, -1.56378830416278)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_13 = structure(list(
    par = c(-0.286768062156031, 0.0827673082448796, 0.515269083335546, 
    -1.61316735185462), value = 74.0303428189576, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.8599024308637, -6.62566985809576, 
    194.54824925802, -16.516517966636, -6.62566985809576, 34.5122294476141, 
    -24.0833601630186, -10.9277860165236, 194.54824925802, -24.0833601630186, 
    3673.90612240825, -315.683000945199, -16.516517966636, -10.9277860165236, 
    -315.683000945199, 234.036898262957), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286768062156031, 0.0827673082448796
    ), logphi = c(0.515269083335546, -1.61316735185462)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_14 = structure(list(
    par = c(-0.126740141205449, 0.14289049692747, 0.519508013376741, 
    -1.43693283476152), value = 77.2678778952413, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.9078505547379, -5.54665108509766, 
    155.022189520793, -10.7295897908699, -5.54665108509766, 40.5382313672931, 
    -19.7470535994171, -8.94657267380694, 155.022189520793, -19.7470535994171, 
    2261.92716435492, -210.840260976397, -10.7295897908699, -8.94657267380694, 
    -210.840260976397, 162.439061156761), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126740141205449, 0.14289049692747
    ), logphi = c(0.519508013376741, -1.43693283476152)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_15 = structure(list(
    par = c(-0.103210713109328, -0.180846015992263, 0.530356987789049, 
    -1.69383898054142), value = 74.7278752712886, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.9018717778822, -13.702023760942, 
    194.806985167162, -14.7574535631634, -13.702023760942, 23.1833055792663, 
    -30.7652742108644, -7.16661052457823, 194.806985167162, -30.7652742108644, 
    4634.44966834103, -335.680068994648, -14.7574535631634, -7.16661052457823, 
    -335.680068994648, 269.588805579701), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.103210713109328, -0.180846015992263
    ), logphi = c(0.530356987789049, -1.69383898054142)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_16 = structure(list(
    par = c(-0.235910199786, 0.216181462170083, 0.502511414973456, 
    -1.60503159636276), value = 57.934158131462, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.5392743428496, -3.44984361788647, 
    189.83152023111, -11.3935209959948, -3.44984361788647, 42.2185233102113, 
    -15.0037169195372, -12.0496478270837, 189.83152023111, -15.0037169195372, 
    3537.36423262596, -275.950484375898, -11.3935209959948, -12.0496478270837, 
    -275.950484375898, 220.920576509798), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.235910199786, 0.216181462170083
    ), logphi = c(0.502511414973456, -1.60503159636276)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_17 = structure(list(
    par = c(-0.132098313802195, 0.00473638514253812, 0.524585972513912, 
    -1.57700219857134), value = 77.2239419211933, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.9490327335329, -10.1406329342524, 
    180.433569322958, -13.6187980892544, -10.1406329342524, 31.6869369960671, 
    -25.5378008588991, -8.74284293139738, 180.433569322958, -25.5378008588991, 
    3387.85769307037, -285.87656837864, -13.6187980892544, -8.74284293139738, 
    -285.87656837864, 221.805176487067), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132098313802195, 0.00473638514253812
    ), logphi = c(0.524585972513912, -1.57700219857134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_18 = structure(list(
    par = c(-0.336551988141346, -0.0246099856389119, 0.501134817294483, 
    -1.65955265482143), value = 56.5081292012172, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.9674457503316, -5.26200739692229, 
    202.318931973977, -16.6501806067032, -5.26200739692229, 33.6116255681418, 
    -23.510856637543, -10.5108508599017, 202.318931973977, -23.510856637543, 
    4147.82854293883, -316.251913060839, -16.6501806067032, -10.5108508599017, 
    -316.251913060839, 247.657616089469), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336551988141346, -0.0246099856389119
    ), logphi = c(0.501134817294483, -1.65955265482143)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_19 = structure(list(
    par = c(-0.152159943140384, -0.0695523331300728, 0.47879158152226, 
    -1.5538874920811), value = 80.5699306597879, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.6322489524739, -7.27025818747506, 
    170.633314652946, -6.43863747562534, -7.27025818747506, 28.5422993790974, 
    -15.3210018680738, -8.61018806297409, 170.633314652946, -15.3210018680738, 
    3130.22416899855, -172.843541371037, -6.43863747562534, -8.61018806297409, 
    -172.843541371037, 192.247632220699), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.152159943140384, -0.0695523331300728
    ), logphi = c(0.47879158152226, -1.5538874920811)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_20 = structure(list(
    par = c(-0.449769970092962, -0.194039151237295, 0.500157867942037, 
    -1.59094234423474), value = 79.2720105268359, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.9303538920474, -5.73415084659246, 
    191.757256150282, -20.2417291141899, -5.73415084659246, 22.8521238305746, 
    -26.186650558202, -8.99189742398221, 191.757256150282, -26.186650558202, 
    3508.39587603602, -294.59135195431, -20.2417291141899, -8.99189742398221, 
    -294.59135195431, 224.956443457103), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449769970092962, -0.194039151237295
    ), logphi = c(0.500157867942037, -1.59094234423474)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_21 = structure(list(
    par = c(-0.241889320654299, 0.079658662648996, 0.501885534021277, 
    -1.62834238231185), value = 63.761179537186, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.025179890697, -5.85536416153332, 
    193.524950683255, -12.8005998742964, -5.85536416153332, 36.1136791031669, 
    -19.4256997847475, -10.8451843150448, 193.524950683255, -19.4256997847475, 
    3804.6578201687, -283.703267308866, -12.8005998742964, -10.8451843150448, 
    -283.703267308866, 232.072782829107), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241889320654299, 0.079658662648996
    ), logphi = c(0.501885534021277, -1.62834238231185)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_22 = structure(list(
    par = c(-0.170122194162532, -0.0623346033019539, 0.489167922784552, 
    -1.62224645973585), value = 70.2340031410729, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.1471588210443, -7.92715728081816, 
    185.28415753849, -9.32655009577843, -7.92715728081816, 29.5544569652861, 
    -18.0197536607807, -9.05954311924972, 185.28415753849, -18.0197536607807, 
    3773.10628880068, -232.795804226527, -9.32655009577843, -9.05954311924972, 
    -232.795804226527, 224.51918537314), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170122194162532, -0.0623346033019539
    ), logphi = c(0.489167922784552, -1.62224645973585)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_23 = structure(list(
    par = c(-0.301626130229533, -0.0128624902100939, 0.482719277268873, 
    -1.68775125522227), value = 55.3672089312813, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.0485272347798, -5.24807860990961, 
    203.73355639336, -12.4775444341196, -5.24807860990961, 32.2612008805123, 
    -16.5194103463051, -10.6869064451232, 203.73355639336, -16.5194103463051, 
    4408.84910993944, -282.032371855756, -12.4775444341196, -10.6869064451232, 
    -282.032371855756, 247.230188126224), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301626130229533, -0.0128624902100939
    ), logphi = c(0.482719277268873, -1.68775125522227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_24 = structure(list(
    par = c(-0.356775792329284, -0.273916911143364, 0.492152721564616, 
    -1.74339603683605), value = 52.9162119043879, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.7264391734883, -9.17677943945705, 
    210.971507053515, -17.6224872063813, -9.17677943945705, 19.5046743627358, 
    -26.7513213749737, -8.19973582988354, 210.971507053515, -26.7513213749737, 
    5178.63401169372, -340.430552624227, -17.6224872063813, -8.19973582988354, 
    -340.430552624227, 278.680938800235), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356775792329284, -0.273916911143364
    ), logphi = c(0.492152721564616, -1.74339603683605)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_25 = structure(list(
    par = c(-0.292645183767769, -0.000883577876040077, 0.490374325552663, 
    -1.62365700175966), value = 67.7488568695983, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.6728259640768, -6.16895016847252, 
    193.008832859221, -12.8613840182368, -6.16895016847252, 29.9387951478991, 
    -18.2925344809348, -10.4742031865612, 193.008832859221, -18.2925344809348, 
    3754.38439698428, -262.910662407023, -12.8613840182368, -10.4742031865612, 
    -262.910662407023, 226.311917234767), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292645183767769, -0.000883577876040077
    ), logphi = c(0.490374325552663, -1.62365700175966)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_26 = structure(list(
    par = c(-0.270436013992772, 0.0667756377496593, 0.514864485531492, 
    -1.59466877290387), value = 60.0364462787507, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.9615015094871, -5.92710256874796, 
    190.176207032877, -15.8962124796602, -5.92710256874796, 35.6823477520862, 
    -23.7491097845322, -10.5371189516035, 190.176207032877, -23.7491097845322, 
    3505.07693106117, -300.989925584361, -15.8962124796602, -10.5371189516035, 
    -300.989925584361, 226.340192888586), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270436013992772, 0.0667756377496593
    ), logphi = c(0.514864485531492, -1.59466877290387)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_27 = structure(list(
    par = c(-0.229883104519269, -0.0582597584778752, 0.527420269624043, 
    -1.65105868161042), value = 61.4216992480658, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.201665093388, -9.6382237444459, 
    196.882606628535, -17.789760653919, -9.6382237444459, 30.2599448254171, 
    -30.7145809852472, -8.84783001531275, 196.882606628535, -30.7145809852472, 
    4123.46435377131, -345.455019525431, -17.789760653919, -8.84783001531275, 
    -345.455019525431, 255.306559891366), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229883104519269, -0.0582597584778752
    ), logphi = c(0.527420269624043, -1.65105868161042)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_28 = structure(list(
    par = c(-0.385891343151294, -0.0468458215149469, 0.4848487421797, 
    -1.46890726194162), value = 70.5672369042037, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.9445217317138, -0.69327223073401, 
    166.992092133, -12.8604878817384, -0.69327223073401, 32.4747923592383, 
    -16.9861497845147, -9.7075252689649, 166.992092133, -16.9861497845147, 
    2440.19833581888, -182.026136435809, -12.8604878817384, -9.7075252689649, 
    -182.026136435809, 162.863263298618), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385891343151294, -0.0468458215149469
    ), logphi = c(0.4848487421797, -1.46890726194162)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_29 = structure(list(
    par = c(-0.27951825718128, 0.0253122415317275, 0.486954339414258, 
    -1.50363716709074), value = 71.5181082507365, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.6460531295511, -3.24086619940545, 
    169.758828519662, -10.2910465749062, -3.24086619940545, 33.0415114966343, 
    -15.9481309509601, -9.90394578792575, 169.758828519662, -15.9481309509601, 
    2697.46255770897, -190.338776222987, -10.2910465749062, -9.90394578792575, 
    -190.338776222987, 175.735786012154), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.27951825718128, 0.0253122415317275
    ), logphi = c(0.486954339414258, -1.50363716709074)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_30 = structure(list(
    par = c(-0.217225261506585, -0.243978504059073, 0.490184223436127, 
    -1.67657295042299), value = 68.7218245093023, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.0318997312907, -9.9630311822807, 
    194.694704550358, -12.4015205784644, -9.9630311822807, 20.6311355022137, 
    -21.687543650728, -7.90215435131358, 194.694704550358, -21.687543650728, 
    4384.95530980987, -266.664245492265, -12.4015205784644, -7.90215435131358, 
    -266.664245492265, 249.385979468997), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.217225261506585, -0.243978504059073
    ), logphi = c(0.490184223436127, -1.67657295042299)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_31 = structure(list(
    par = c(-0.398824831334769, -0.265581840962175, 0.503301991680605, 
    -1.72507875123714), value = 53.9215265198532, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.3673311080067, -8.91078471632056, 
    209.805563875065, -20.4439462292427, -8.91078471632056, 20.0761454287601, 
    -31.0587424205977, -8.10180360666379, 209.805563875065, -31.0587424205977, 
    4981.14239388414, -366.626840925477, -20.4439462292427, -8.10180360666379, 
    -366.626840925477, 279.59442623704), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.398824831334769, -0.265581840962175
    ), logphi = c(0.503301991680605, -1.72507875123714)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_32 = structure(list(
    par = c(-0.212018143192916, 0.117173780395639, 0.485974202285807, 
    -1.53857861138155), value = 68.2839460533664, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.6229190594511, -2.17684020142883, 
    172.98329051485, -7.89104131371232, -2.17684020142883, 40.926535849195, 
    -13.4645689833235, -10.4320055402951, 172.98329051485, -13.4645689833235, 
    2960.55618051128, -197.531116237215, -7.89104131371232, -10.4320055402951, 
    -197.531116237215, 187.317452425617), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212018143192916, 0.117173780395639
    ), logphi = c(0.485974202285807, -1.53857861138155)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_33 = structure(list(
    par = c(-0.409091229848918, 0.198351920130976, 0.485093016659614, 
    -1.57173360314295), value = 44.4745369705886, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.6035573491832, 3.45266769130603, 
    188.980027797214, -13.117440438748, 3.45266769130603, 44.8603961089589, 
    -10.2743768888303, -13.2384009141617, 188.980027797214, -10.2743768888303, 
    3179.94077005679, -248.854637005635, -13.117440438748, -13.2384009141617, 
    -248.854637005635, 200.764934431774), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.409091229848918, 0.198351920130976
    ), logphi = c(0.485093016659614, -1.57173360314295)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_34 = structure(list(
    par = c(-0.237766817129766, -0.0286119538167851, 0.512386611060396, 
    -1.68202319637239), value = 59.1176654310974, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.8963898069802, -9.03380886718708, 
    202.166404857707, -15.5387952682773, -9.03380886718708, 30.7705315325535, 
    -26.2597855211766, -9.70041767089924, 202.166404857707, -26.2597855211766, 
    4421.85944093332, -329.820203972986, -15.5387952682773, -9.70041767089924, 
    -329.820203972986, 259.405974750493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237766817129766, -0.0286119538167851
    ), logphi = c(0.512386611060396, -1.68202319637239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_35 = structure(list(
    par = c(-0.365818632402162, 0.152686705336403, 0.519285418489785, 
    -1.64094416957495), value = 47.0602651202934, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.8980464828055, -3.26831028552022, 
    204.427576576904, -19.4965829107829, -3.26831028552022, 42.4885208545334, 
    -25.1678954814594, -12.433698106662, 204.427576576904, -25.1678954814594, 
    3922.66360637983, -358.678443207694, -19.4965829107829, -12.433698106662, 
    -358.678443207694, 248.087533444519), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.365818632402162, 0.152686705336403
    ), logphi = c(0.519285418489785, -1.64094416957495)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_36 = structure(list(
    par = c(-0.259271460595359, -0.157774447782969, 0.514886586071769, 
    -1.55084549642019), value = 83.3308453431139, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.2710408080095, -7.76914399125417, 
    178.814444915076, -16.3954177292425, -7.76914399125417, 25.5258274357573, 
    -25.5459647071632, -7.95267092357221, 178.814444915076, -25.5459647071632, 
    3174.80721201946, -270.056980372857, -16.3954177292425, -7.95267092357221, 
    -270.056980372857, 211.130428649398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259271460595359, -0.157774447782969
    ), logphi = c(0.514886586071769, -1.55084549642019)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_37 = structure(list(
    par = c(-0.381503058680312, 0.18513865446465, 0.512869747575394, 
    -1.47660604563867), value = 59.7532728940265, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.0730556344861, 1.95307280748125, 
    172.652595223255, -16.7206473289383, 1.95307280748125, 45.5053467920408, 
    -18.5331905413477, -11.7276531188537, 172.652595223255, -18.5331905413477, 
    2485.78155335544, -252.088390050531, -16.7206473289383, -11.7276531188537, 
    -252.088390050531, 178.144128460289), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381503058680312, 0.18513865446465
    ), logphi = c(0.512869747575394, -1.47660604563867)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_38 = structure(list(
    par = c(-0.218918647229409, 0.145935729983618, 0.480756266699303, 
    -1.6756759048836), value = 46.9638848644334, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.4615336482188, -4.05474499487468, 
    197.438848708487, -8.06921409157724, -4.05474499487468, 39.4876359273155, 
    -9.74241306295198, -11.4313755998907, 197.438848708487, -9.74241306295198, 
    4231.0965442578, -257.667299418785, -8.06921409157724, -11.4313755998907, 
    -257.667299418785, 237.613503893286), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218918647229409, 0.145935729983618
    ), logphi = c(0.480756266699303, -1.6756759048836)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_39 = structure(list(
    par = c(-0.0662761734675826, 0.0782109245499474, 0.477777117977365, 
    -1.65515667600136), value = 65.385732715372, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.289021882408, -8.25184559261061, 
    182.502773114379, -3.58420173718343, -8.25184559261061, 35.6672744210584, 
    -11.0767095939934, -9.42101610057478, 182.502773114379, -11.0767095939934, 
    4064.65340946482, -206.752253090414, -3.58420173718343, -9.42101610057478, 
    -206.752253090414, 229.040049468665), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0662761734675826, 0.0782109245499474
    ), logphi = c(0.477777117977365, -1.65515667600136)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_40 = structure(list(
    par = c(-0.508744516654635, -0.448642512532561, 0.486093581745169, 
    -1.72330940637552), value = 67.8371682178245, counts = structure(c(303L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.361843106283, -7.28242950032154, 
    208.829617889705, -21.8441674952885, -7.28242950032154, 15.0629299717764, 
    -29.0416911283842, -7.11104870276813, 208.829617889705, -29.0416911283842, 
    4974.53280033255, -353.084958227612, -21.8441674952885, -7.11104870276813, 
    -353.084958227612, 275.977897551627), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508744516654635, -0.448642512532561
    ), logphi = c(0.486093581745169, -1.72330940637552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_41 = structure(list(
    par = c(-0.400853446537462, 0.0365753231086487, 0.509535845605295, 
    -1.67835422333638), value = 48.256980989331, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.3478133716164, -6.27122287966131, 
    209.934653476296, -19.9457392824343, -6.27122287966131, 31.7220201715429, 
    -26.7134086104903, -11.5233549138338, 209.934653476296, -26.7134086104903, 
    4342.25761399176, -362.990173221611, -19.9457392824343, -11.5233549138338, 
    -362.990173221611, 260.271801632683), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400853446537462, 0.0365753231086487
    ), logphi = c(0.509535845605295, -1.67835422333638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_42 = structure(list(
    par = c(-0.165355760379056, 0.200705374854782, 0.477835309005966, 
    -1.52536192559839), value = 61.9040127460112, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.2145875966769, -1.4586744256917, 
    166.168756210894, -4.30394253569943, -1.4586744256917, 43.1473054938181, 
    -9.29943796812438, -10.4946367835979, 166.168756210894, -9.29943796812438, 
    2829.13016627795, -168.293284841248, -4.30394253569943, -10.4946367835979, 
    -168.293284841248, 177.105177563419), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165355760379056, 0.200705374854782
    ), logphi = c(0.477835309005966, -1.52536192559839)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_43 = structure(list(
    par = c(-0.011501189725784, 0.118188476745305, 0.501141607865264, 
    -1.60263900835654), value = 67.3182424063349, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.6768976608751, -10.2246885447244, 
    175.112346987305, -5.37478860529461, -10.2246885447244, 37.868155683185, 
    -16.7572443707797, -9.28405234823515, 175.112346987305, -16.7572443707797, 
    3583.98801354198, -226.66051873621, -5.37478860529461, -9.28405234823515, 
    -226.66051873621, 218.313422390537), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.011501189725784, 0.118188476745305
    ), logphi = c(0.501141607865264, -1.60263900835654)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_44 = structure(list(
    par = c(-0.247086848220987, 0.356521513073767, 0.485408125416781, 
    -1.54453769505551), value = 55.4558792888404, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.5178056429039, 4.27089448962192, 
    174.786361000656, -6.51825000552719, 4.27089448962192, 53.6639866961508, 
    -4.26186102941983, -12.6891368434912, 174.786361000656, -4.26186102941983, 
    2935.81100350693, -212.241398150681, -6.51825000552719, -12.6891368434912, 
    -212.241398150681, 186.068365094272), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247086848220987, 0.356521513073767
    ), logphi = c(0.485408125416781, -1.54453769505551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_45 = structure(list(
    par = c(-0.508586394323176, -0.0430819677389389, 0.541029822829535, 
    -1.51384293295897), value = 74.5674550259031, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4933708571216, -4.44721319681207, 
    182.831693059882, -27.8446550012745, -4.44721319681207, 29.9185625820542, 
    -34.188936762547, -8.86960829760142, 182.831693059882, -34.188936762547, 
    2869.27031734407, -356.628938444459, -27.8446550012745, -8.86960829760142, 
    -356.628938444459, 218.002176197274), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508586394323176, -0.0430819677389389
    ), logphi = c(0.541029822829535, -1.51384293295897)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_46 = structure(list(
    par = c(-0.273104024062554, 0.272099492905759, 0.492614318386844, 
    -1.54636747697974), value = 47.2545467185186, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.9142471758884, 2.64397087867962, 
    178.64011926072, -9.55787100842542, 2.64397087867962, 50.4317371099461, 
    -9.92925806109213, -12.4223301831705, 178.64011926072, -9.92925806109213, 
    2981.75670315892, -230.834262018753, -9.55787100842542, -12.4223301831705, 
    -230.834262018753, 192.050456009341), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273104024062554, 0.272099492905759
    ), logphi = c(0.492614318386844, -1.54636747697974)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_47 = structure(list(
    par = c(-0.26811257039162, -0.166214977939052, 0.50877893595459, 
    -1.54372775238153), value = 83.6202702025418, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.4201070723705, -7.61400719184735, 
    177.409926052974, -15.5512202439922, -7.61400719184735, 24.6335845019985, 
    -24.0993046816129, -8.03595986198502, 177.409926052974, -24.0993046816129, 
    3105.34788943784, -253.831991116726, -15.5512202439922, -8.03595986198502, 
    -253.831991116726, 205.27940689874), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26811257039162, -0.166214977939052
    ), logphi = c(0.50877893595459, -1.54372775238153)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_48 = structure(list(
    par = c(-0.411056839257142, -0.000867384899092599, 0.506331123711024, 
    -1.57278983443477), value = 59.1814042143375, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.0638675374706, -2.67518580798765, 
    189.532698506412, -18.9448890610677, -2.67518580798765, 34.6427961854801, 
    -23.8372809686638, -10.7327345872932, 189.532698506412, -23.8372809686638, 
    3298.45431589248, -294.773171228613, -18.9448890610677, -10.7327345872932, 
    -294.773171228613, 217.140589318987), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411056839257142, -0.000867384899092599
    ), logphi = c(0.506331123711024, -1.57278983443477)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_49 = structure(list(
    par = c(-0.173563790921134, -0.252352551156119, 0.504653316839586, 
    -1.62580796050939), value = 79.7979821909076, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.4240527862084, -10.4365936373085, 
    185.31404901978, -13.0486520006912, -10.4365936373085, 21.2299135142757, 
    -23.908553306029, -7.29812798994089, 185.31404901978, -23.908553306029, 
    3885.86376168476, -264.642162465023, -13.0486520006912, -7.29812798994089, 
    -264.642162465023, 235.892638947632), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173563790921134, -0.252352551156119
    ), logphi = c(0.504653316839586, -1.62580796050939)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_50 = structure(list(
    par = c(-0.349548902164711, 0.0357842999852854, 0.518660913967773, 
    -1.62582954187865), value = 56.3067346830138, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.7027725894704, -6.25603699155874, 
    199.073330845678, -19.5348643652338, -6.25603699155874, 33.4487282760421, 
    -27.6874688669437, -10.7414071646161, 199.073330845678, -27.6874688669437, 
    3815.31991052242, -342.322672214124, -19.5348643652338, -10.7414071646161, 
    -342.322672214124, 243.49914682098), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349548902164711, 0.0357842999852854
    ), logphi = c(0.518660913967773, -1.62582954187865)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_51 = structure(list(
    par = c(-0.193426376394528, 0.120932543893544, 0.474094589929897, 
    -1.53827604673531), value = 63.7651015633162, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.1298023036931, -0.76294693052148, 
    169.59664158378, -5.16274667905492, -0.76294693052148, 43.599182401266, 
    -10.4409971335429, -10.2142789524251, 169.59664158378, -10.4409971335429, 
    2939.11907016486, -167.643369141324, -5.16274667905492, -10.2142789524251, 
    -167.643369141324, 181.466271344632), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.193426376394528, 0.120932543893544
    ), logphi = c(0.474094589929897, -1.53827604673531)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_52 = structure(list(
    par = c(-0.0314341466510084, -0.281402949035051, 0.476922461444591, 
    -1.57748542333096), value = 88.487531476358, counts = structure(c(331L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.3926938353975, -11.0757767366465, 
    165.402362910072, -4.26382499796318, -11.0757767366465, 20.3473018629552, 
    -16.0042587182829, -6.58623926952373, 165.402362910072, -16.0042587182829, 
    3397.25366249866, -151.932025980628, -4.26382499796318, -6.58623926952373, 
    -151.932025980628, 203.040037494162), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0314341466510084, -0.281402949035051
    ), logphi = c(0.476922461444591, -1.57748542333096)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_53 = structure(list(
    par = c(-0.0623069670159531, -2.85132992515907e-05, 0.496488097586909, 
    -1.52909277079244), value = 75.8921097155545, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.8622824223594, -7.57269614126699, 
    164.393049008282, -6.41375727283844, -7.57269614126699, 36.7521724413677, 
    -17.7248966011234, -8.37084134275301, 164.393049008282, -17.7248966011234, 
    2952.67914837183, -189.342409109727, -6.41375727283844, -8.37084134275301, 
    -189.342409109727, 188.985207341119), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0623069670159531, -2.85132992515907e-05
    ), logphi = c(0.496488097586909, -1.52909277079244)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_54 = structure(list(
    par = c(-0.0670735627263871, 0.195588952612992, 0.491104239868118, 
    -1.63574060495382), value = 60.5732588414366, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.1286301835144, -7.1123428089237, 
    182.531303709155, -4.71701407356306, -7.1123428089237, 42.3753768110657, 
    -11.7144033762173, -10.3886062996494, 182.531303709155, -11.7144033762173, 
    3856.13372882787, -232.08622985571, -4.71701407356306, -10.3886062996494, 
    -232.08622985571, 225.807044966331), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0670735627263871, 0.195588952612992
    ), logphi = c(0.491104239868118, -1.63574060495382)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_55 = structure(list(
    par = c(-0.234311590885931, 0.0223828963582005, 0.472959712776748, 
    -1.68795214870391), value = 56.7823875064532, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.4463943029107, -6.41495597797359, 
    198.464980165625, -8.39618812520371, -6.41495597797359, 30.9040774766345, 
    -11.4798322847776, -10.4426746023734, 198.464980165625, -11.4798322847776, 
    4385.3994012899, -245.725117246742, -8.39618812520371, -10.4426746023734, 
    -245.725117246742, 240.570626074188), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234311590885931, 0.0223828963582005
    ), logphi = c(0.472959712776748, -1.68795214870391)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_56 = structure(list(
    par = c(-0.35754949796525, 0.0241090756775967, 0.497802978386935, 
    -1.60313789325365), value = 57.409600234851, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.1684083734337, -3.57250507043716, 
    193.465011395944, -15.8589646623852, -3.57250507043716, 34.0738959430098, 
    -20.4797647072041, -11.0181553258926, 193.465011395944, -20.4797647072041, 
    3557.27803700212, -282.63689375585, -15.8589646623852, -11.0181553258926, 
    -282.63689375585, 222.998568329302), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35754949796525, 0.0241090756775967
    ), logphi = c(0.497802978386935, -1.60313789325365)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_57 = structure(list(
    par = c(-0.273558003559175, -0.242627000435172, 0.464336973501695, 
    -1.71331764568579), value = 53.8399130303197, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.6120191027776, -6.64798320570981, 
    201.028171355588, -10.3281311600867, -6.64798320570981, 23.6282782548614, 
    -15.4505403813232, -8.46164326784304, 201.028171355588, -15.4505403813232, 
    4727.24158719018, -241.029457406228, -10.3281311600867, -8.46164326784304, 
    -241.029457406228, 250.109187263092), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273558003559175, -0.242627000435172
    ), logphi = c(0.464336973501695, -1.71331764568579)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_58 = structure(list(
    par = c(-0.138641022228412, -0.192140409542402, 0.504884762537259, 
    -1.54398034494799), value = 93.7000564189451, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.6256581629962, -9.8762401528063, 
    170.738808257909, -11.1698179505737, -9.8762401528063, 24.3918207054605, 
    -21.7919473364248, -7.31636244033496, 170.738808257909, -21.7919473364248, 
    3118.31073134528, -221.944779141836, -11.1698179505737, -7.31636244033496, 
    -221.944779141836, 201.485382568478), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138641022228412, -0.192140409542402
    ), logphi = c(0.504884762537259, -1.54398034494799)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_59 = structure(list(
    par = c(0.0227593477964885, 0.0844079386860258, 0.472819169656353, 
    -1.59674596062174), value = 66.8319743394205, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.1977123163679, -9.42925267466421, 
    165.173114012873, -0.0689526977737387, -9.42925267466421, 
    37.1974242483475, -10.6276130438232, -8.50233128701916, 165.173114012873, 
    -10.6276130438232, 3503.38401645089, -153.626406156349, -0.0689526977737387, 
    -8.50233128701916, -153.626406156349, 204.568289280616), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0227593477964885, 0.0844079386860258
    ), logphi = c(0.472819169656353, -1.59674596062174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_60 = structure(list(
    par = c(-0.362642852606975, -0.0823344130375097, 0.531498397046196, 
    -1.62422841303389), value = 68.1665220806009, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.9662955492781, -9.28214282325257, 
    197.085693955046, -22.6885990670667, -9.28214282325257, 25.1186444479856, 
    -34.1831590198183, -8.85473979650442, 197.085693955046, -34.1831590198183, 
    3861.59663450414, -370.984661955731, -22.6885990670667, -8.85473979650442, 
    -370.984661955731, 252.335266463177), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362642852606975, -0.0823344130375097
    ), logphi = c(0.531498397046196, -1.62422841303389)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_61 = structure(list(
    par = c(-0.492240950500679, -0.145902688248898, 0.499180823489999, 
    -1.60649518238871), value = 61.3987664273103, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.1506239545417, -4.71634161058887, 
    196.734803161291, -21.3775559458895, -4.71634161058887, 25.451140459154, 
    -26.5481481562801, -9.8071333951566, 196.734803161291, -26.5481481562801, 
    3638.68851948723, -311.958430069481, -21.3775559458895, -9.8071333951566, 
    -311.958430069481, 231.417409743528), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.492240950500679, -0.145902688248898
    ), logphi = c(0.499180823489999, -1.60649518238871)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_62 = structure(list(
    par = c(-0.0272628374885337, 0.0705153789102657, 0.483360041556109, 
    -1.55638600272543), value = 74.8488813703455, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.3107774286366, -7.3645056701821, 
    164.592291312715, -2.93207242663129, -7.3645056701821, 39.3969856133936, 
    -13.6880549703733, -8.75610439798891, 164.592291312715, -13.6880549703733, 
    3152.55127958025, -168.356736795161, -2.93207242663129, -8.75610439798891, 
    -168.356736795161, 193.253134671778), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0272628374885337, 0.0705153789102657
    ), logphi = c(0.483360041556109, -1.55638600272543)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_63 = structure(list(
    par = c(0.1083609526638, -0.0844804911265602, 0.490678835442649, 
    -1.65187964914397), value = 76.2135555930979, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.9219762646483, -14.2379819436655, 
    170.413288007154, -2.03895361039486, -14.2379819436655, 29.9999259887329, 
    -16.3915227702205, -7.21021297778179, 170.413288007154, -16.3915227702205, 
    4132.02246121358, -193.236553027276, -2.03895361039486, -7.21021297778179, 
    -193.236553027276, 235.386603112175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.1083609526638, -0.0844804911265602
    ), logphi = c(0.490678835442649, -1.65187964914397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_64 = structure(list(
    par = c(-0.461820250572261, 0.136452188976104, 0.489247983595458, 
    -1.71855174165325), value = 31.2487116612688, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.5515530834997, -1.7812870396483, 
    220.0679708384, -17.8624463345045, -1.7812870396483, 38.3554589742374, 
    -15.4582239755285, -13.8570531262872, 220.0679708384, -15.4582239755285, 
    4696.94909144636, -358.130742821317, -17.8624463345045, -13.8570531262872, 
    -358.130742821317, 262.571208869744), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.461820250572261, 0.136452188976104
    ), logphi = c(0.489247983595458, -1.71855174165325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_65 = structure(list(
    par = c(-0.0906477532473891, 0.05042264802559, 0.472333447742293, 
    -1.6357850454326), value = 59.1601512957062, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.3823736904694, -6.72378245702987, 
    179.735884795917, -3.45216537134263, -6.72378245702987, 36.2452910405153, 
    -10.6368018499836, -9.29927403969799, 179.735884795917, -10.6368018499836, 
    3858.4941396298, -189.071368131621, -3.45216537134263, -9.29927403969799, 
    -189.071368131621, 219.590038033957), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0906477532473891, 0.05042264802559
    ), logphi = c(0.472333447742293, -1.6357850454326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_66 = structure(list(
    par = c(-0.276910450976133, -0.0406211201246489, 0.491566627948005, 
    -1.54889833874109), value = 70.1402521272122, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.0274430911306, -4.66068693683042, 
    178.366407379116, -12.067103416058, -4.66068693683042, 32.1183582627782, 
    -18.6429501454199, -9.5708698424346, 178.366407379116, -18.6429501454199, 
    3086.84299189821, -221.744023377823, -12.067103416058, -9.5708698424346, 
    -221.744023377823, 197.112383034437), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276910450976133, -0.0406211201246489
    ), logphi = c(0.491566627948005, -1.54889833874109)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_67 = structure(list(
    par = c(-0.164743355684293, 0.224930244117976, 0.480302932965616, 
    -1.53644331735972), value = 55.3937087032003, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.131393140908, -0.302276699670756, 
    168.564299489304, -4.60377179933857, -0.302276699670756, 
    48.4034995000826, -8.97059442017678, -10.7705416567683, 168.564299489304, 
    -8.97059442017678, 2915.8680257062, -179.796498535723, -4.60377179933857, 
    -10.7705416567683, -179.796498535723, 182.225607241904), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.164743355684293, 0.224930244117976
    ), logphi = c(0.480302932965616, -1.53644331735972)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_68 = structure(list(
    par = c(-0.253613715030782, -0.153443568792006, 0.4803251942113, 
    -1.63218705688154), value = 67.4463774287884, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.9973861995131, -7.4026740186639, 
    189.533324167712, -10.9904398133409, -7.4026740186639, 24.3552601482122, 
    -17.9822280124142, -8.88731351977867, 189.533324167712, -17.9822280124142, 
    3865.5525239939, -231.380599677422, -10.9904398133409, -8.88731351977867, 
    -231.380599677422, 226.102931595307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253613715030782, -0.153443568792006
    ), logphi = c(0.4803251942113, -1.63218705688154)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_69 = structure(list(
    par = c(-0.363473930836192, -0.254474819384867, 0.528073413756845, 
    -1.6543956397753), value = 75.262886730934, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.8996622319371, -9.96867514402311, 
    197.568289681982, -22.7055873658344, -9.96867514402311, 19.5184432421058, 
    -35.1623293433079, -7.16296999669908, 197.568289681982, -35.1623293433079, 
    4222.3337758962, -375.376435503227, -22.7055873658344, -7.16296999669908, 
    -375.376435503227, 264.779413274852), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363473930836192, -0.254474819384867
    ), logphi = c(0.528073413756845, -1.6543956397753)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_70 = structure(list(
    par = c(-0.106601155312888, 0.0220032668968976, 0.481612942775402, 
    -1.64699768848177), value = 62.8227842238259, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.1715838829678, -8.6337982700968, 
    184.701459010839, -5.76079473013635, -8.6337982700968, 32.732651540357, 
    -13.7716016332945, -9.35802468404745, 184.701459010839, -13.7716016332945, 
    3994.62634599423, -217.595269178972, -5.76079473013635, -9.35802468404745, 
    -217.595269178972, 228.704189421336), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106601155312888, 0.0220032668968976
    ), logphi = c(0.481612942775402, -1.64699768848177)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_71 = structure(list(
    par = c(-0.261716811824747, -0.020456026366597, 0.504826620466778, 
    -1.5146706835879), value = 74.2681111834934, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.6221975295784, -5.66616452246649, 
    173.063990175137, -13.5639894356387, -5.66616452246649, 30.9182676048181, 
    -20.9921684195535, -9.25225280745678, 173.063990175137, -20.9921684195535, 
    2826.59338348523, -232.094103461478, -13.5639894356387, -9.25225280745678, 
    -232.094103461478, 189.541037183716), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261716811824747, -0.020456026366597
    ), logphi = c(0.504826620466778, -1.5146706835879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_72 = structure(list(
    par = c(-0.300513400185136, 0.277259232343989, 0.490916722096401, 
    -1.61998036892515), value = 43.9816558424257, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.6425239351164, 0.912073842229688, 
    194.074387907861, -10.6470211314047, 0.912073842229688, 47.2893037546385, 
    -8.17544055209396, -13.3339897647744, 194.074387907861, -8.17544055209396, 
    3624.41615862075, -271.899672823039, -10.6470211314047, -13.3339897647744, 
    -271.899672823039, 220.246553437775), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300513400185136, 0.277259232343989
    ), logphi = c(0.490916722096401, -1.61998036892515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_73 = structure(list(
    par = c(-0.195096471664645, -0.208495895605382, 0.49598394993078, 
    -1.63885660750769), value = 71.1684353087287, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.0268589726488, -9.19376908115055, 
    188.520970553441, -12.1972794957514, -9.19376908115055, 23.6926966827866, 
    -22.0675420337102, -7.9411365732085, 188.520970553441, -22.0675420337102, 
    3989.12425314535, -257.0557964372, -12.1972794957514, -7.9411365732085, 
    -257.0557964372, 236.7472258058), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195096471664645, -0.208495895605382
    ), logphi = c(0.49598394993078, -1.63885660750769)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_74 = structure(list(
    par = c(-0.290795477254823, 0.0270160552600192, 0.464603109011644, 
    -1.69631581687184), value = 43.1798037265348, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.1181380682722, -2.63077546769352, 
    201.927296824778, -8.69624400134938, -2.63077546769352, 36.0371789849268, 
    -8.73043297211495, -10.9094540707844, 201.927296824778, -8.73043297211495, 
    4443.60904393015, -244.01087464021, -8.69624400134938, -10.9094540707844, 
    -244.01087464021, 239.364575531198), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290795477254823, 0.0270160552600192
    ), logphi = c(0.464603109011644, -1.69631581687184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_75 = structure(list(
    par = c(-0.293616453702288, 0.279425698140336, 0.524538039117591, 
    -1.53202108333223), value = 55.3033718417618, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.8588408580421, -0.120698427252819, 
    181.924164452951, -16.2755898820421, -0.120698427252819, 
    50.52578346465, -19.4165594535889, -12.4647719728088, 181.924164452951, 
    -19.4165594535889, 2905.9587371183, -298.186276626033, -16.2755898820421, 
    -12.4647719728088, -298.186276626033, 203.939220137173), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293616453702288, 0.279425698140336
    ), logphi = c(0.524538039117591, -1.53202108333223)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_76 = structure(list(
    par = c(-0.311327457349985, 0.0844695786545563, 0.528838510936466, 
    -1.59407413631112), value = 65.9000845082312, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.7883655216033, -6.87738333837729, 
    193.171627955735, -19.6330203081629, -6.87738333837729, 34.4896149435669, 
    -28.4499274059158, -10.6263711323606, 193.171627955735, -28.4499274059158, 
    3511.83731388005, -341.278372456344, -19.6330203081629, -10.6263711323606, 
    -341.278372456344, 234.563601310356), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311327457349985, 0.0844695786545563
    ), logphi = c(0.528838510936466, -1.59407413631112)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_77 = structure(list(
    par = c(-0.107562703065688, 0.32728790402849, 0.487646784278365, 
    -1.58327297273524), value = 43.2271442949056, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.5002942659463, 0.794966631190164, 
    174.581454404077, -3.69901557384367, 0.794966631190164, 57.2440682375941, 
    -6.62409268059605, -11.3491870346039, 174.581454404077, -6.62409268059605, 
    3309.99085278982, -212.536373559225, -3.69901557384367, -11.3491870346039, 
    -212.536373559225, 202.059314499792), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.107562703065688, 0.32728790402849
    ), logphi = c(0.487646784278365, -1.58327297273524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_78 = structure(list(
    par = c(-0.313645905753118, -0.138839255276464, 0.509480566332462, 
    -1.54991247450149), value = 76.6733681063018, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.0193348168484, -6.7067352560457, 
    180.804778906918, -16.9923990718246, -6.7067352560457, 26.2472362315691, 
    -24.8451742947964, -8.51274555735415, 180.804778906918, -24.8451742947964, 
    3149.81981828311, -267.50782640228, -16.9923990718246, -8.51274555735415, 
    -267.50782640228, 208.907661058078), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313645905753118, -0.138839255276464
    ), logphi = c(0.509480566332462, -1.54991247450149)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_79 = structure(list(
    par = c(-0.307805058490422, 0.0461616440770182, 0.497672012044635, 
    -1.60623007205936), value = 62.6351058288716, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.5280747113148, -4.45186124053976, 
    191.95499983482, -14.1501767583208, -4.45186124053976, 34.4876486728651, 
    -19.3809534110301, -10.9170249587009, 191.95499983482, -19.3809534110301, 
    3584.83371945617, -274.548057817015, -14.1501767583208, -10.9170249587009, 
    -274.548057817015, 222.848882582838), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.307805058490422, 0.0461616440770182
    ), logphi = c(0.497672012044635, -1.60623007205936)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_80 = structure(list(
    par = c(-0.34391660270241, 0.239096654383705, 0.521320861996858, 
    -1.67189704823107), value = 29.3689620348385, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.555453815961, -1.14175271193062, 
    210.617475584485, -18.6162831568026, -1.14175271193062, 51.8929018031855, 
    -22.8130822605976, -13.56163866717, 210.617475584485, -22.8130822605976, 
    4212.59326757273, -377.239513031924, -18.6162831568026, -13.56163866717, 
    -377.239513031924, 258.196003519728), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34391660270241, 0.239096654383705
    ), logphi = c(0.521320861996858, -1.67189704823107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_81 = structure(list(
    par = c(-0.515005748973916, -0.109597013796558, 0.510465810251185, 
    -1.65360094396213), value = 59.8398921627661, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.1832563492953, -6.10868542949561, 
    206.273830279713, -24.3518651288355, -6.10868542949561, 25.5039788719102, 
    -32.1533797311702, -10.0482910525557, 206.273830279713, -32.1533797311702, 
    4133.72489028418, -375.179322144703, -24.3518651288355, -10.0482910525557, 
    -375.179322144703, 258.317054601775), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.515005748973916, -0.109597013796558
    ), logphi = c(0.510465810251185, -1.65360094396213)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_82 = structure(list(
    par = c(-0.192139414561846, -0.213680888593545, 0.483089537462851, 
    -1.69181815629411), value = 69.3244316856437, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.0256080418742, -9.67757750203191, 
    195.447630865431, -10.467743436493, -9.67757750203191, 22.3905498053512, 
    -19.1769542894349, -8.12248672410476, 195.447630865431, -19.1769542894349, 
    4532.44372723205, -253.495458480302, -10.467743436493, -8.12248672410476, 
    -253.495458480302, 250.797596891061), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.192139414561846, -0.213680888593545
    ), logphi = c(0.483089537462851, -1.69181815629411)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_83 = structure(list(
    par = c(-0.467979695464766, 0.314525056641957, 0.53524564678213, 
    -1.50585828485561), value = 52.5638103383783, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.9527467084383, 3.48873828315277, 
    184.488369974645, -23.2091505836252, 3.48873828315277, 51.0477235273754, 
    -21.570443152541, -13.9670743362075, 184.488369974645, -21.570443152541, 
    2684.61154555411, -335.176479126176, -23.2091505836252, -13.9670743362075, 
    -335.176479126176, 204.252518489767), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467979695464766, 0.314525056641957
    ), logphi = c(0.53524564678213, -1.50585828485561)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_84 = structure(list(
    par = c(-0.229852488535824, 0.0629108085427195, 0.497299272126433, 
    -1.46180129798602), value = 79.0465309447549, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.7708622546436, -3.35036938281519, 
    161.213493761636, -10.1229974216466, -3.35036938281519, 36.1340049863657, 
    -17.092295504284, -9.46758931164027, 161.213493761636, -17.092295504284, 
    2407.55614609611, -186.491270405043, -10.1229974216466, -9.46758931164027, 
    -186.491270405043, 163.444815552083), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229852488535824, 0.0629108085427195
    ), logphi = c(0.497299272126433, -1.46180129798602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_85 = structure(list(
    par = c(-0.29761827272981, 0.114062226385931, 0.498029825453979, 
    -1.64338749848649), value = 61.1465661538767, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.2801541162902, -5.27875047495741, 
    198.982841171258, -13.6944769790759, -5.27875047495741, 35.4980993204634, 
    -17.6537963252343, -11.7640287307097, 198.982841171258, -17.6537963252343, 
    3928.35196880803, -295.703238426093, -13.6944769790759, -11.7640287307097, 
    -295.703238426093, 236.299272643237), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29761827272981, 0.114062226385931
    ), logphi = c(0.498029825453979, -1.64338749848649)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_86 = structure(list(
    par = c(-0.216600176408679, -0.132332197598841, 0.471514724866957, 
    -1.58514258417302), value = 69.1934363433411, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.0226303608915, -5.50331204252075, 
    178.193225657708, -7.71153236378552, -5.50331204252075, 28.1833830442224, 
    -14.9470057522194, -8.68981895685295, 178.193225657708, -14.9470057522194, 
    3394.07558454496, -180.273160236055, -7.71153236378552, -8.68981895685295, 
    -180.273160236055, 202.255269329044), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216600176408679, -0.132332197598841
    ), logphi = c(0.471514724866957, -1.58514258417302)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_87 = structure(list(
    par = c(-0.214424392192232, -0.0548821010767664, 0.511549414354756, 
    -1.57697533708094), value = 78.0898594174668, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.1681117335277, -8.15640038354104, 
    182.542677212183, -14.1661135533155, -8.15640038354104, 29.4535551539354, 
    -23.8331527242508, -8.9132694274241, 182.542677212183, -23.8331527242508, 
    3378.28469773171, -270.183827531412, -14.1661135533155, -8.9132694274241, 
    -270.183827531412, 217.96066594959), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214424392192232, -0.0548821010767664
    ), logphi = c(0.511549414354756, -1.57697533708094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_88 = structure(list(
    par = c(-0.421661293592302, 0.198436848876716, 0.495144372216374, 
    -1.66547222080454), value = 34.7942475658713, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.3439084085226, 0.998613261415926, 
    209.598665735555, -16.5700272773961, 0.998613261415926, 46.0543659528412, 
    -14.0542420421497, -14.0421365566468, 209.598665735555, -14.0542420421497, 
    4099.94874692288, -331.197496215019, -16.5700272773961, -14.0421365566468, 
    -331.197496215019, 244.036765737476), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421661293592302, 0.198436848876716
    ), logphi = c(0.495144372216374, -1.66547222080454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_89 = structure(list(
    par = c(-0.191360173243558, -0.0396182345890047, 0.471273174834626, 
    -1.68334327331768), value = 55.7903578221544, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.0639268293586, -7.32209589315858, 
    194.121772318923, -7.27933267796743, -7.32209589315858, 29.4449539719466, 
    -12.4826594305461, -9.54699799926573, 194.121772318923, -12.4826594305461, 
    4358.34617929487, -227.915709103854, -7.27933267796743, -9.54699799926573, 
    -227.915709103854, 238.783062659564), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191360173243558, -0.0396182345890047
    ), logphi = c(0.471273174834626, -1.68334327331768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_90 = structure(list(
    par = c(-0.554912201619521, 0.140012120259572, 0.510309683639311, 
    -1.68291149465885), value = 38.6265360584895, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.9355709444753, -1.42820540460775, 
    218.443868270413, -24.500665478655, -1.42820540460775, 40.1230652293805, 
    -26.4316630378403, -14.1090708698499, 218.443868270413, -26.4316630378403, 
    4343.00392105413, -408.343713832693, -24.500665478655, -14.1090708698499, 
    -408.343713832693, 265.86697013542), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.554912201619521, 0.140012120259572
    ), logphi = c(0.510309683639311, -1.68291149465885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_91 = structure(list(
    par = c(-0.189416931563898, 0.180500364736205, 0.491357621296667, 
    -1.56329761792634), value = 55.9909329513774, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.3494790467363, -2.47929115992918, 
    177.346044182514, -7.92899256651936, -2.47929115992918, 43.7254727110314, 
    -12.94356142445, -10.9668277374908, 177.346044182514, -12.94356142445, 
    3164.42076936596, -220.101134549289, -7.92899256651936, -10.9668277374908, 
    -220.101134549289, 198.776301132852), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189416931563898, 0.180500364736205
    ), logphi = c(0.491357621296667, -1.56329761792634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_92 = structure(list(
    par = c(-0.153825277429087, 0.0517652662921357, 0.502305415353712, 
    -1.58738261965074), value = 73.6311825447647, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.2289721703082, -7.45925310141615, 
    181.164969092151, -10.0950132182476, -7.45925310141615, 34.9442683891255, 
    -19.1681658705534, -9.70531749544534, 181.164969092151, -19.1681658705534, 
    3437.14872567702, -246.300836877822, -10.0950132182476, -9.70531749544534, 
    -246.300836877822, 215.145189134347), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153825277429087, 0.0517652662921357
    ), logphi = c(0.502305415353712, -1.58738261965074)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_93 = structure(list(
    par = c(-0.29286227310901, -0.0195017014683187, 0.496508198792602, 
    -1.53649789950663), value = 73.8040580694677, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.4606034385813, -4.8126704683682, 
    177.57643726668, -13.1743931497397, -4.8126704683682, 30.9050846212244, 
    -19.5085162353337, -9.73393427727842, 177.57643726668, -19.5085162353337, 
    2985.0630528685, -229.772390527572, -13.1743931497397, -9.73393427727842, 
    -229.772390527572, 194.540103624519), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29286227310901, -0.0195017014683187
    ), logphi = c(0.496508198792602, -1.53649789950663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_94 = structure(list(
    par = c(-0.342504336070106, -0.300899855336405, 0.510777811075036, 
    -1.53135352626939), value = 82.9872210097828, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7394073715097, -7.01237042832759, 
    176.252713881553, -18.4907873688189, -7.01237042832759, 20.3398024076762, 
    -25.692800075916, -7.01343308051605, 176.252713881553, -25.692800075916, 
    3030.30277479266, -261.939396743571, -18.4907873688189, -7.01343308051605, 
    -261.939396743571, 204.23725996821), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342504336070106, -0.300899855336405
    ), logphi = c(0.510777811075036, -1.53135352626939)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_95 = structure(list(
    par = c(-0.374144377229259, -0.492199360679849, 0.504330805346331, 
    -1.65814131504965), value = 72.754863794859, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.8348091703494, -8.74077779400295, 
    193.743338989805, -20.0070977367517, -8.74077779400295, 13.7193664926372, 
    -28.3273592636135, -5.96928412122111, 193.743338989805, -28.3273592636135, 
    4277.74541535086, -319.824242687616, -20.0070977367517, -5.96928412122111, 
    -319.824242687616, 256.94543771948), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374144377229259, -0.492199360679849
    ), logphi = c(0.504330805346331, -1.65814131504965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_96 = structure(list(
    par = c(-0.4203842246099, -0.0234422066491973, 0.503404623221135, 
    -1.74232162384616), value = 49.8806655316599, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.9661265573466, -7.96554274096195, 
    219.772682088504, -20.2386482097694, -7.96554274096195, 27.7480245323147, 
    -28.2253185481807, -11.0866942844012, 219.772682088504, -28.2253185481807, 
    5098.18611729251, -388.956697490173, -20.2386482097694, -11.0866942844012, 
    -388.956697490173, 281.666738956687), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4203842246099, -0.0234422066491973
    ), logphi = c(0.503404623221135, -1.74232162384616)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_97 = structure(list(
    par = c(-0.183896493943941, 0.0157412509177781, 0.48938451567793, 
    -1.58289103607926), value = 68.1932193265774, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.2436172777971, -6.87131549526043, 
    179.796332702153, -8.89602516984667, -6.87131549526043, 32.1411919195214, 
    -16.6021794925086, -9.64156816429806, 179.796332702153, -16.6021794925086, 
    3379.31156583693, -219.062708829654, -8.89602516984667, -9.64156816429806, 
    -219.062708829654, 207.914855803182), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183896493943941, 0.0157412509177781
    ), logphi = c(0.48938451567793, -1.58289103607926)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_98 = structure(list(
    par = c(-0.129791715681797, 0.0910856042386363, 0.504577225912105, 
    -1.64240609861246), value = 59.3911795198533, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.5977219217909, -8.36858745323354, 
    190.101780544794, -9.81241662945109, -8.36858745323354, 37.1849500204746, 
    -19.0760582050586, -10.1442029230014, 190.101780544794, -19.0760582050586, 
    3962.82715869845, -273.495012953262, -9.81241662945109, -10.1442029230014, 
    -273.495012953262, 236.760892235566), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129791715681797, 0.0910856042386363
    ), logphi = c(0.504577225912105, -1.64240609861246)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_99 = structure(list(
    par = c(-0.0657423008310793, -0.0799396379153383, 0.482843348113878, 
    -1.623957109429), value = 76.7297175958947, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.658080218489, -10.5798647282995, 
    177.735323930506, -5.36660411576406, -10.5798647282995, 27.59795849272, 
    -15.8387446376196, -8.24851242597902, 177.735323930506, -15.8387446376196, 
    3799.99376916018, -198.284034166107, -5.36660411576406, -8.24851242597902, 
    -198.284034166107, 221.702002200175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0657423008310793, -0.0799396379153383
    ), logphi = c(0.482843348113878, -1.623957109429)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_100 = structure(list(
    par = c(-0.360188346982226, 0.148570985476724, 0.508468233373106, 
    -1.63408580614605), value = 53.9543308093383, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.9783432666694, -2.88116322977316, 
    201.887466987571, -17.2795971025153, -2.88116322977316, 40.8159456739554, 
    -20.823526751812, -12.5285651382256, 201.887466987571, -20.823526751812, 
    3835.36346210001, -328.647985179842, -17.2795971025153, -12.5285651382256, 
    -328.647985179842, 239.236026070344), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360188346982226, 0.148570985476724
    ), logphi = c(0.508468233373106, -1.63408580614605)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_101 = structure(list(
    par = c(-0.251085943050955, -0.146629154175443, 0.517595694705343, 
    -1.56860777877788), value = 82.6639793314389, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.4181976963223, -9.29107789104933, 
    181.889706315275, -16.7264364634434, -9.29107789104933, 24.0544308738322, 
    -26.5145027498193, -8.03152375894456, 181.889706315275, -26.5145027498193, 
    3333.11698472727, -284.452930490176, -16.7264364634434, -8.03152375894456, 
    -284.452930490176, 219.579028620132), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251085943050955, -0.146629154175443
    ), logphi = c(0.517595694705343, -1.56860777877788)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_102 = structure(list(
    par = c(-0.426205356988913, -0.285992289657072, 0.508123730252366, 
    -1.70277147338721), value = 65.2437789615222, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.8600328466905, -8.51536961476995, 
    206.664668276346, -21.9640919283393, -8.51536961476995, 19.550281436409, 
    -32.7087903535528, -7.79463264777291, 206.664668276346, -32.7087903535528, 
    4735.62882523382, -372.10471416671, -21.9640919283393, -7.79463264777291, 
    -372.10471416671, 275.507741605452), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.426205356988913, -0.285992289657072
    ), logphi = c(0.508123730252366, -1.70277147338721)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_103 = structure(list(
    par = c(-0.41158863803676, -0.180249418791237, 0.512627767942428, 
    -1.64487599827071), value = 59.9230651737876, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.9430766103667, -7.04420706654219, 
    199.995277874621, -21.6159550472383, -7.04420706654219, 24.7062296807599, 
    -30.9302083714158, -8.71468526497665, 199.995277874621, -30.9302083714158, 
    4069.37895752435, -348.176684614288, -21.6159550472383, -8.71468526497665, 
    -348.176684614288, 253.285789153068), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.41158863803676, -0.180249418791237
    ), logphi = c(0.512627767942428, -1.64487599827071)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_104 = structure(list(
    par = c(-0.113954059300511, -0.190713112271326, 0.499622100026421, 
    -1.67420765273154), value = 82.0480808400702, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.6745880333985, -11.9875867419239, 
    190.186660974589, -10.4413272943304, -11.9875867419239, 22.48068323496, 
    -22.1199550285434, -7.71439734670309, 190.186660974589, -22.1199550285434, 
    4373.71207822679, -264.39632167552, -10.4413272943304, -7.71439734670309, 
    -264.39632167552, 250.522608784109), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.113954059300511, -0.190713112271326
    ), logphi = c(0.499622100026421, -1.67420765273154)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_105 = structure(list(
    par = c(-0.442735495837166, -0.0263308681772667, 0.495050029554744, 
    -1.66397966217547), value = 50.2353852902341, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.2618171491688, -5.16370124259424, 
    207.177748929865, -19.0579707854965, -5.16370124259424, 29.0664701534382, 
    -23.2415720802237, -11.3062673321451, 207.177748929865, -23.2415720802237, 
    4173.64905640127, -329.584103575087, -19.0579707854965, -11.3062673321451, 
    -329.584103575087, 248.716259404702), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.442735495837166, -0.0263308681772667
    ), logphi = c(0.495050029554744, -1.66397966217547)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_106 = structure(list(
    par = c(-0.147556131997279, 0.0423878941738544, 0.472714331342017, 
    -1.61590046284712), value = 61.3282448974182, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.3290185814143, -6.06874318620498, 
    180.329908243237, -5.00169129491468, -6.06874318620498, 34.2124522987319, 
    -11.2789643598177, -9.6444427422071, 180.329908243237, -11.2789643598177, 
    3653.72318140267, -191.243658649753, -5.00169129491468, -9.6444427422071, 
    -191.243658649753, 212.241973692073), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.147556131997279, 0.0423878941738544
    ), logphi = c(0.472714331342017, -1.61590046284712)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_107 = structure(list(
    par = c(-0.239999283723956, -0.076122149621541, 0.503068653352875, 
    -1.66230769934104), value = 60.2313795122312, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.7481898749337, -8.22382268594879, 
    197.44996857618, -14.2301743961681, -8.22382268594879, 29.0771677757817, 
    -23.6385152998508, -9.34987591083569, 197.44996857618, -23.6385152998508, 
    4206.19273276657, -298.604694139115, -14.2301743961681, -9.34987591083569, 
    -298.604694139115, 248.312184288224), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239999283723956, -0.076122149621541
    ), logphi = c(0.503068653352875, -1.66230769934104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_108 = structure(list(
    par = c(-0.410937831419753, 0.166801538014322, 0.533289013874495, 
    -1.56925408472292), value = 57.6586160227796, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.3813022069919, -2.25447579182969, 
    193.732584033768, -22.9319257591953, -2.25447579182969, 42.9398905197331, 
    -28.3535182283856, -12.0306348563304, 193.732584033768, -28.3535182283856, 
    3259.18174556605, -358.512373399122, -22.9319257591953, -12.0306348563304, 
    -358.512373399122, 229.279449836639), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.410937831419753, 0.166801538014322
    ), logphi = c(0.533289013874495, -1.56925408472292)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_109 = structure(list(
    par = c(-0.027168043512819, 0.124231134217624, 0.510064825576185, 
    -1.66068877939622), value = 58.7122008639518, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.8953196881961, -10.7118915515514, 
    187.722781504363, -7.46913857341269, -10.7118915515514, 38.9704856509354, 
    -19.1886475189307, -9.70777896203145, 187.722781504363, -19.1886475189307, 
    4166.03250229031, -273.578255702844, -7.46913857341269, -9.70777896203145, 
    -273.578255702844, 244.01383079109), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.027168043512819, 0.124231134217624
    ), logphi = c(0.510064825576185, -1.66068877939622)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_110 = structure(list(
    par = c(-0.277419558160852, 0.0478976582691789, 0.498154141719915, 
    -1.68328923667904), value = 48.9756030802425, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.1015868349091, -6.56236450780057, 
    204.351187379714, -13.8993851983571, -6.56236450780057, 34.2314867403104, 
    -19.9507515699082, -11.0312367240795, 204.351187379714, -19.9507515699082, 
    4376.6986988274, -310.60378598724, -13.8993851983571, -11.0312367240795, 
    -310.60378598724, 252.286727265627), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277419558160852, 0.0478976582691789
    ), logphi = c(0.498154141719915, -1.68328923667904)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_111 = structure(list(
    par = c(-0.110883652266962, 0.0843883148969294, 0.52792718404849, 
    -1.48329870657767), value = 83.4716663928319, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.204622376267, -8.51853429395533, 
    163.603823047254, -12.5702240900694, -8.51853429395533, 36.4259679628276, 
    -23.1179509952995, -8.60779626421504, 163.603823047254, -23.1179509952995, 
    2607.55699088122, -247.326491216171, -12.5702240900694, -8.60779626421504, 
    -247.326491216171, 184.766466208686), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.110883652266962, 0.0843883148969294
    ), logphi = c(0.52792718404849, -1.48329870657767)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_112 = structure(list(
    par = c(-0.432772647930493, -0.236341395919689, 0.505003025120462, 
    -1.60973650815856), value = 68.8204065159624, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4040825257264, -6.90145261472708, 
    193.71129913992, -20.9196000930945, -6.90145261472708, 20.8545026190166, 
    -28.2194762881716, -8.37623984750735, 193.71129913992, -28.2194762881716, 
    3712.90184065742, -313.067919137211, -20.9196000930945, -8.37623984750735, 
    -313.067919137211, 235.905120213431), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432772647930493, -0.236341395919689
    ), logphi = c(0.505003025120462, -1.60973650815856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_113 = structure(list(
    par = c(-0.228342347414751, 0.0447883667686952, 0.506679416412932, 
    -1.67929247289008), value = 66.0558396363332, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.9998089989722, -8.27550148940759, 
    201.945624350941, -13.7975034757432, -8.27550148940759, 33.4031388113942, 
    -22.4087899987069, -10.5282436244636, 201.945624350941, -22.4087899987069, 
    4356.46729589578, -316.100034803313, -13.7975034757432, -10.5282436244636, 
    -316.100034803313, 254.091306715054), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228342347414751, 0.0447883667686952
    ), logphi = c(0.506679416412932, -1.67929247289008)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_114 = structure(list(
    par = c(0.00837305322204168, 0.229717485327993, 0.488900433678702, 
    -1.58389303737479), value = 62.9913320631476, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.3833064786287, -6.93419412023388, 
    167.779470912066, -1.80583398989853, -6.93419412023388, 46.7651705591265, 
    -11.0548640304131, -9.67908202831325, 167.779470912066, -11.0548640304131, 
    3372.31186487408, -192.220757266881, -1.80583398989853, -9.67908202831325, 
    -192.220757266881, 204.175370088322), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00837305322204168, 0.229717485327993
    ), logphi = c(0.488900433678702, -1.58389303737479)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_115 = structure(list(
    par = c(-0.409624348496312, -0.208175487806275, 0.513236425859364, 
    -1.64171884340309), value = 67.8132668541629, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.3529383076971, -8.22264567545972, 
    198.766827800512, -21.7200781467142, -8.22264567545972, 21.6485359914032, 
    -31.1614989421116, -8.36979633689339, 198.766827800512, -31.1614989421116, 
    4046.549632438, -346.748379119077, -21.7200781467142, -8.36979633689339, 
    -346.748379119077, 252.793122825778), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.409624348496312, -0.208175487806275
    ), logphi = c(0.513236425859364, -1.64171884340309)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_116 = structure(list(
    par = c(-0.124281168336215, 0.183744443277182, 0.484226484044376, 
    -1.62692206496987), value = 58.9311315144147, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.4339597485613, -4.83808592122159, 
    183.327800927557, -5.20075117016461, -4.83808592122159, 42.3034594394522, 
    -10.1445972546799, -10.6885116650801, 183.327800927557, -10.1445972546799, 
    3748.20837300049, -223.201824091745, -5.20075117016461, -10.6885116650801, 
    -223.201824091745, 219.704538412913), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.124281168336215, 0.183744443277182
    ), logphi = c(0.484226484044376, -1.62692206496987)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_117 = structure(list(
    par = c(-0.168819754541683, 0.339980815796509, 0.492333256503982, 
    -1.61873693166974), value = 46.4632707033902, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.3894072680251, 0.760505880492701, 
    186.058568733216, -6.29540141172669, 0.760505880492701, 55.0277180391134, 
    -6.16909855466474, -12.4236832448332, 186.058568733216, -6.16909855466474, 
    3623.00295572382, -251.443993958489, -6.29540141172669, -12.4236832448332, 
    -251.443993958489, 218.014395720445), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168819754541683, 0.339980815796509
    ), logphi = c(0.492333256503982, -1.61873693166974)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_118 = structure(list(
    par = c(-0.407671142775446, -0.191588498083132, 0.501243004818678, 
    -1.61301940210559), value = 65.0540074018155, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.0991533269216, -6.80044207967967, 
    194.209985536986, -19.3654277822475, -6.80044207967967, 22.6715268425437, 
    -26.3750976436938, -8.88348203709199, 194.209985536986, -26.3750976436938, 
    3723.78226658299, -301.600054863016, -19.3654277822475, -8.88348203709199, 
    -301.600054863016, 233.65164746636), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407671142775446, -0.191588498083132
    ), logphi = c(0.501243004818678, -1.61301940210559)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_119 = structure(list(
    par = c(-0.132414605081849, -0.0191023545601176, 0.520705432070723, 
    -1.57076206972616), value = 70.9235109645149, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.4741864140747, -9.1297386966005, 
    178.681319312091, -13.0466543470931, -9.1297386966005, 33.3407947152864, 
    -24.6651495707795, -8.57291659883685, 178.681319312091, -24.6651495707795, 
    3333.65393746377, -273.782127086619, -13.0466543470931, -8.57291659883685, 
    -273.782127086619, 217.787738566955), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132414605081849, -0.0191023545601176
    ), logphi = c(0.520705432070723, -1.57076206972616)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_120 = structure(list(
    par = c(-0.175295403231444, 0.109224135378171, 0.502976489708852, 
    -1.58860770018031), value = 66.8456000433256, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.9057740097692, -5.82688319994418, 
    183.06536894741, -10.4386626667008, -5.82688319994418, 38.5611445210543, 
    -18.2099499212995, -10.3909293081017, 183.06536894741, -18.2099499212995, 
    3429.87977933973, -254.145432261765, -10.4386626667008, -10.3909293081017, 
    -254.145432261765, 215.444924489105), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175295403231444, 0.109224135378171
    ), logphi = c(0.502976489708852, -1.58860770018031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_121 = structure(list(
    par = c(-0.13202740688916, 0.0472685157176572, 0.491462885210175, 
    -1.63687568684086), value = 66.9991140839122, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.7167680194948, -8.59518783613566, 
    186.711990028954, -7.91465255822743, -8.59518783613566, 32.9174251127995, 
    -16.1824292845836, -9.76791706186475, 186.711990028954, -16.1824292845836, 
    3898.24652685178, -240.970493072368, -7.91465255822743, -9.76791706186475, 
    -240.970493072368, 229.232071600194), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.13202740688916, 0.0472685157176572
    ), logphi = c(0.491462885210175, -1.63687568684086)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_122 = structure(list(
    par = c(-0.421990638371984, -0.0967293107275321, 0.485464014262173, 
    -1.63530910673986), value = 57.8344744639302, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.7250457871188, -3.96635996402495, 
    199.402696440032, -16.8087455794108, -3.96635996402495, 28.4191078989693, 
    -20.7033952843716, -10.4354719123734, 199.402696440032, -20.7033952843716, 
    3875.63295096882, -282.827380427619, -16.8087455794108, -10.4354719123734, 
    -282.827380427619, 232.160646001844), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421990638371984, -0.0967293107275321
    ), logphi = c(0.485464014262173, -1.63530910673986)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_123 = structure(list(
    par = c(-0.136538185471662, -0.117390483461303, 0.485482878644113, 
    -1.675131702312), value = 76.840482411283, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.0073491877006, -10.3015336598844, 
    190.9027233431, -8.46850384661479, -10.3015336598844, 25.5020521038318, 
    -17.7256403262049, -8.54595674937286, 190.9027233431, -17.7256403262049, 
    4333.29274558503, -241.030501353379, -8.46850384661479, -8.54595674937286, 
    -241.030501353379, 243.589758959217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.136538185471662, -0.117390483461303
    ), logphi = c(0.485482878644113, -1.675131702312)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_124 = structure(list(
    par = c(-0.460084071968951, -0.267995386834379, 0.506098188839081, 
    -1.57517921808344), value = 67.9825917646539, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.2621993875991, -5.37136293843332, 
    188.090162495769, -21.6578964256087, -5.37136293843332, 22.2110687424504, 
    -28.0130048579963, -7.99946015561659, 188.090162495769, -28.0130048579963, 
    3395.7544378147, -299.754445595823, -21.6578964256087, -7.99946015561659, 
    -299.754445595823, 223.179484898139), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.460084071968951, -0.267995386834379
    ), logphi = c(0.506098188839081, -1.57517921808344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_125 = structure(list(
    par = c(-0.299413206174929, 0.103545879605502, 0.551757937466674, 
    -1.55671347291642), value = 69.8330311957119, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.5193249324054, -7.45609919761137, 
    187.149502874462, -23.0963391150141, -7.45609919761137, 36.5289629584709, 
    -33.8125545695789, -9.62407369442531, 187.149502874462, -33.8125545695789, 
    3197.80159173888, -370.598970453884, -23.0963391150141, -9.62407369442531, 
    -370.598970453884, 231.735266826405), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299413206174929, 0.103545879605502
    ), logphi = c(0.551757937466674, -1.55671347291642)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_126 = structure(list(
    par = c(-0.257722189217637, 0.163859870306206, 0.485241047089395, 
    -1.6290375020262), value = 54.9376601840126, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.2535269465781, -1.72583707147567, 
    192.266346699554, -9.50967768442723, -1.72583707147567, 42.5816718117034, 
    -11.1861772946753, -11.8120039473979, 192.266346699554, -11.1861772946753, 
    3748.45067828744, -251.955459556363, -9.50967768442723, -11.8120039473979, 
    -251.955459556363, 222.326396617234), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257722189217637, 0.163859870306206
    ), logphi = c(0.485241047089395, -1.6290375020262)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_127 = structure(list(
    par = c(-0.523552515016451, -0.0980366876394691, 0.544810886023814, 
    -1.63894970710578), value = 62.5694299808143, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.2723741254747, -6.89783761487206, 
    202.19372224517, -29.8680459795975, -6.89783761487206, 28.2858995959145, 
    -44.2281899744046, -8.25604906395938, 202.19372224517, -44.2281899744046, 
    4050.07145313974, -449.427084109999, -29.8680459795975, -8.25604906395938, 
    -449.427084109999, 274.125211845444), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.523552515016451, -0.0980366876394691
    ), logphi = c(0.544810886023814, -1.63894970710578)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_128 = structure(list(
    par = c(-0.311481639793336, -0.103529341306579, 0.491662855851765, 
    -1.77560968716855), value = 49.2526111707976, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.5890005723545, -9.32851307489102, 
    217.866871556893, -15.4485856160846, -9.32851307489102, 25.4751207808823, 
    -23.421852159089, -9.7603272610769, 217.866871556893, -23.421852159089, 
    5527.84274845663, -348.477830279137, -15.4485856160846, -9.7603272610769, 
    -348.477830279137, 284.512244844493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311481639793336, -0.103529341306579
    ), logphi = c(0.491662855851765, -1.77560968716855)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_129 = structure(list(
    par = c(-0.371560367412806, -0.09082710166625, 0.490530192253865, 
    -1.71575425897913), value = 50.3554996975402, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.622913975247, -6.52251875088439, 
    211.515495594838, -16.813097353463, -6.52251875088439, 27.9697660197087, 
    -22.9074295585718, -10.2819965626111, 211.515495594838, -22.9074295585718, 
    4771.77635300308, -330.516432273775, -16.813097353463, -10.2819965626111, 
    -330.516432273775, 264.994482570557), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371560367412806, -0.09082710166625
    ), logphi = c(0.490530192253865, -1.71575425897913)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_130 = structure(list(
    par = c(-0.21820692961674, -0.180994184589009, 0.481953374547957, 
    -1.59430728721552), value = 77.2313605907969, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.9142796665819, -7.17814180362097, 
    181.012913920142, -9.97065718877366, -7.17814180362097, 25.0410529289979, 
    -18.1056313053318, -8.3085920010717, 181.012913920142, -18.1056313053318, 
    3513.62246679088, -207.78293196777, -9.97065718877366, -8.3085920010717, 
    -207.78293196777, 211.785538091647), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21820692961674, -0.180994184589009
    ), logphi = c(0.481953374547957, -1.59430728721552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_131 = structure(list(
    par = c(-0.380359521893479, 0.0929060601542334, 0.48774406539005, 
    -1.52918066931902), value = 59.686389021401, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.1912194847462, 0.131471518116655, 
    179.4914404325, -13.1651912385067, 0.131471518116655, 37.6266198607311, 
    -14.9359085508394, -11.5104058995286, 179.4914404325, -14.9359085508394, 
    2866.84673785942, -223.03303024529, -13.1651912385067, -11.5104058995286, 
    -223.03303024529, 186.498115954947), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.380359521893479, 0.0929060601542334
    ), logphi = c(0.48774406539005, -1.52918066931902)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_132 = structure(list(
    par = c(-0.316327009348684, -0.0187541181423943, 0.49720103418045, 
    -1.58027039362146), value = 61.3257539140247, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.5644225559091, -3.51068906567775, 
    186.856138952862, -14.5086452674192, -3.51068906567775, 35.2734704431867, 
    -20.503352155643, -10.1572404656025, 186.856138952862, -20.503352155643, 
    3362.12674954339, -259.073544133237, -14.5086452674192, -10.1572404656025, 
    -259.073544133237, 213.195557702051), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316327009348684, -0.0187541181423943
    ), logphi = c(0.49720103418045, -1.58027039362146)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_133 = structure(list(
    par = c(-0.323013685980702, -0.223786867443414, 0.498222283596619, 
    -1.63761461319838), value = 69.6622425006063, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.9531729776149, -7.85850942008892, 
    194.335182758465, -16.5854343290306, -7.85850942008892, 22.0038555660551, 
    -24.8885509641639, -8.34470485955308, 194.335182758465, -24.8885509641639, 
    3976.35933727614, -288.977631473841, -16.5854343290306, -8.34470485955308, 
    -288.977631473841, 240.244956387414), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323013685980702, -0.223786867443414
    ), logphi = c(0.498222283596619, -1.63761461319838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_134 = structure(list(
    par = c(-0.143382699136042, 0.0649564937936425, 0.49719858580765, 
    -1.62794297023869), value = 66.5424358205989, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.6738914113132, -8.33193164950785, 
    186.99452281723, -9.05508335158345, -8.33193164950785, 34.2115720854963, 
    -17.5269702964442, -9.9707964498208, 186.99452281723, -17.5269702964442, 
    3812.07468175759, -252.51385463676, -9.05508335158345, -9.9707964498208, 
    -252.51385463676, 228.370764745023), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143382699136042, 0.0649564937936425
    ), logphi = c(0.49719858580765, -1.62794297023869)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_135 = structure(list(
    par = c(-0.357903968054395, -0.0156054980112075, 0.502808932089879, 
    -1.68330734131067), value = 56.0177274688652, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.8220103902969, -6.74293354663291, 
    207.636611563089, -17.7456812728849, -6.74293354663291, 30.0332961398198, 
    -24.7869248397592, -10.7786419007994, 207.636611563089, -24.7869248397592, 
    4404.0947452455, -338.637036062295, -17.7456812728849, -10.7786419007994, 
    -338.637036062295, 258.014503204507), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357903968054395, -0.0156054980112075
    ), logphi = c(0.502808932089879, -1.68330734131067)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_136 = structure(list(
    par = c(-0.278466457262476, 0.0803557194340807, 0.499129338284581, 
    -1.59401564954551), value = 56.449498765072, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.8491475705608, -4.84428829672368, 
    188.737883757284, -13.1344468519146, -4.84428829672368, 35.2639885328188, 
    -18.541448639553, -10.9679236031113, 188.737883757284, -18.541448639553, 
    3466.42828439947, -266.529556607331, -13.1344468519146, -10.9679236031113, 
    -266.529556607331, 217.637721293684), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278466457262476, 0.0803557194340807
    ), logphi = c(0.499129338284581, -1.59401564954551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_137 = structure(list(
    par = c(-0.223570468427614, 0.340806000149612, 0.512679273590038, 
    -1.64329545227337), value = 45.9445203670048, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.3118631730941, -1.90372856678778, 
    198.464600936532, -11.9069169883801, -1.90372856678778, 51.4756224259116, 
    -12.9391118175448, -13.4988039635076, 198.464600936532, -12.9391118175448, 
    3878.82462875311, -319.916444307289, -11.9069169883801, -13.4988039635076, 
    -319.916444307289, 238.089198679958), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223570468427614, 0.340806000149612
    ), logphi = c(0.512679273590038, -1.64329545227337)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_138 = structure(list(
    par = c(-0.171283375650354, 0.285144489345217, 0.505740921728357, 
    -1.609611513066), value = 54.4876516453795, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.3388217040325, -3.04290298025478, 
    187.700663206058, -9.40227703161156, -3.04290298025478, 48.3831448576666, 
    -13.2411426037038, -12.129399813432, 187.700663206058, -13.2411426037038, 
    3574.01666841461, -275.469522003746, -9.40227703161156, -12.129399813432, 
    -275.469522003746, 222.156851378941), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.171283375650354, 0.285144489345217
    ), logphi = c(0.505740921728357, -1.609611513066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_139 = structure(list(
    par = c(-0.309241731746435, -0.036415482284147, 0.481767504746103, 
    -1.68848962682471), value = 60.1837301551858, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.2817005455219, -6.47191837188643, 
    203.865494384559, -12.7374234750732, -6.47191837188643, 28.6520782228905, 
    -16.9560248899359, -10.5100779794753, 203.865494384559, -16.9560248899359, 
    4421.87799567861, -282.01892013513, -12.7374234750732, -10.5100779794753, 
    -282.01892013513, 247.624692043757), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309241731746435, -0.036415482284147
    ), logphi = c(0.481767504746103, -1.68848962682471)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_140 = structure(list(
    par = c(-0.12210830231349, 0.036972886860487, 0.536121461530778, 
    -1.49402343952326), value = 79.6006936103716, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.2989996425983, -9.22440182193895, 
    166.516202064315, -14.7309817464247, -9.22440182193895, 34.1903352136796, 
    -25.7753181216458, -8.13044433556342, 166.516202064315, -25.7753181216458, 
    2703.83662707019, -270.890196631512, -14.7309817464247, -8.13044433556342, 
    -270.890196631512, 193.673359724755), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.12210830231349, 0.036972886860487
    ), logphi = c(0.536121461530778, -1.49402343952326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_141 = structure(list(
    par = c(-0.395053185487076, 0.033271198944522, 0.525259131372122, 
    -1.46629984691404), value = 78.8376391615447, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.8252009092075, -3.44157551168678, 
    171.219340334261, -20.4459074222285, -3.44157551168678, 33.1292357458324, 
    -25.1194450058279, -9.66341562502748, 171.219340334261, -25.1194450058279, 
    2467.93336375006, -272.696067582956, -20.4459074222285, -9.66341562502748, 
    -272.696067582956, 183.293851900856), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.395053185487076, 0.033271198944522
    ), logphi = c(0.525259131372122, -1.46629984691404)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_142 = structure(list(
    par = c(-0.259437588856464, -0.0512311893691324, 0.478138456276368, 
    -1.59155010208905), value = 68.6798621034094, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.7689458873238, -5.01656218787616, 
    183.28701417758, -9.65984957801425, -5.01656218787616, 30.2694924414482, 
    -15.4732168375915, -9.66809829705539, 183.28701417758, -15.4732168375915, 
    3440.7807421033, -209.24936580613, -9.65984957801425, -9.66809829705539, 
    -209.24936580613, 207.334759490863), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259437588856464, -0.0512311893691324
    ), logphi = c(0.478138456276368, -1.59155010208905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_143 = structure(list(
    par = c(-0.232520736675759, 0.196944195705879, 0.51693915337808, 
    -1.53894802071941), value = 61.7641890688571, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.4586226946831, -3.71517834274471, 
    179.198201802677, -13.7007081955076, -3.71517834274471, 43.0304501808365, 
    -19.7349608654918, -11.2096941755624, 179.198201802677, -19.7349608654918, 
    2985.79309918345, -272.9086147788, -13.7007081955076, -11.2096941755624, 
    -272.9086147788, 202.413827381065), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232520736675759, 0.196944195705879
    ), logphi = c(0.51693915337808, -1.53894802071941)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_144 = structure(list(
    par = c(-0.374130439893348, -0.249101062407884, 0.51292662105351, 
    -1.6000525960062), value = 72.9393425825682, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.9123352971515, -7.72231300771864, 
    189.952215652767, -20.3710712085581, -7.72231300771864, 21.0958270159267, 
    -28.95512289669, -7.75718415368942, 189.952215652767, -28.95512289669, 
    3639.8192354028, -313.152638927505, -20.3710712085581, -7.75718415368942, 
    -313.152638927505, 234.831413827408), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374130439893348, -0.249101062407884
    ), logphi = c(0.51292662105351, -1.6000525960062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_145 = structure(list(
    par = c(-0.175808265328128, 0.102863297265219, 0.482486429054954, 
    -1.6761417890267), value = 45.7641533052048, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.3904748076294, -5.93542213778164, 
    194.906830172314, -7.47735205397504, -5.93542213778164, 37.2738265266293, 
    -11.7818916010037, -10.68191390452, 194.906830172314, -11.7818916010037, 
    4263.46713902781, -250.864393080974, -7.47735205397504, -10.68191390452, 
    -250.864393080974, 239.161722534575), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175808265328128, 0.102863297265219
    ), logphi = c(0.482486429054954, -1.6761417890267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_146 = structure(list(
    par = c(-0.478069071139766, 0.340383683122638, 0.51226139734597, 
    -1.65292472975662), value = 35.2369296001281, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.130913737733, 5.08286863443175, 
    212.854785530681, -20.1717902790222, 5.08286863443175, 57.1877176795965, 
    -13.6560792736162, -16.4436740952567, 212.854785530681, -13.6560792736162, 
    3935.6439415652, -378.755774274708, -20.1717902790222, -16.4436740952567, 
    -378.755774274708, 247.884609434479), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.478069071139766, 0.340383683122638
    ), logphi = c(0.51226139734597, -1.65292472975662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_147 = structure(list(
    par = c(-0.0845923177338447, -0.0154260554277969, 0.49800317547259, 
    -1.69520043039462), value = 64.3289670084781, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.109964058219, -12.2615251996194, 
    193.844902945273, -8.36056533870533, -12.2615251996194, 28.444144898998, 
    -19.0944076052801, -9.05557873664975, 193.844902945273, -19.0944076052801, 
    4557.14151394204, -269.15635637792, -8.36056533870533, -9.05557873664975, 
    -269.15635637792, 254.472165295283), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0845923177338447, -0.0154260554277969
    ), logphi = c(0.49800317547259, -1.69520043039462)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_148 = structure(list(
    par = c(-0.177101215724924, 0.157004322456547, 0.498738464202883, 
    -1.59419393283379), value = 58.0794798875861, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.134568509839, -5.59934754562619, 
    183.689646727103, -9.36877821722248, -5.59934754562619, 39.608658148893, 
    -15.6646047546616, -10.8869349837448, 183.689646727103, -15.6646047546616, 
    3459.95646389596, -249.077780912543, -9.36877821722248, -10.8869349837448, 
    -249.077780912543, 214.867386846507), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.177101215724924, 0.157004322456547
    ), logphi = c(0.498738464202883, -1.59419393283379)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_149 = structure(list(
    par = c(-0.483138927929512, 0.0188053439384106, 0.539199944185079, 
    -1.66853369016004), value = 51.5046174643435, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.2934784141287, -7.99040730825595, 
    209.997101990211, -27.5618998379912, -7.99040730825595, 30.2419166757772, 
    -41.2619522620616, -10.2736064668818, 209.997101990211, -41.2619522620616, 
    4305.52653353544, -445.476181365478, -27.5618998379912, -10.2736064668818, 
    -445.476181365478, 277.604024468303), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.483138927929512, 0.0188053439384106
    ), logphi = c(0.539199944185079, -1.66853369016004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_150 = structure(list(
    par = c(-0.298437770363899, 0.00773308452112469, 0.522115384300094, 
    -1.64911484070827), value = 59.2456496257918, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.7419135136101, -8.82156555981339, 
    200.66607448932, -18.7798067425859, -8.82156555981339, 30.2825854259225, 
    -29.2828877768159, -10.095149274747, 200.66607448932, -29.2828877768159, 
    4070.22841723048, -350.418846860379, -18.7798067425859, -10.095149274747, 
    -350.418846860379, 253.175282262319), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298437770363899, 0.00773308452112469
    ), logphi = c(0.522115384300094, -1.64911484070827)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_151 = structure(list(
    par = c(-0.159337910891776, -0.18805046207269, 0.486324533589747, 
    -1.58008889730725), value = 82.5607532808996, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.6804929328896, -9.15196888939818, 
    175.861480251172, -8.89907918733002, -9.15196888939818, 23.3099223478916, 
    -18.4870782682367, -7.84100390305298, 175.861480251172, -18.4870782682367, 
    3401.04170406974, -199.980335208849, -8.89907918733002, -7.84100390305298, 
    -199.980335208849, 207.761925924643), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159337910891776, -0.18805046207269
    ), logphi = c(0.486324533589747, -1.58008889730725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_152 = structure(list(
    par = c(-0.373848849782171, 0.0322222655148733, 0.507044042359394, 
    -1.6357506640458), value = 57.3658233045021, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.0188734142369, -5.19912667762412, 
    201.075460466882, -18.3365939294688, -5.19912667762412, 32.8951021710822, 
    -24.2820949765132, -11.2092302266831, 201.075460466882, -24.2820949765132, 
    3891.54435848305, -326.508988489849, -18.3365939294688, -11.2092302266831, 
    -326.508988489849, 241.62848111331), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.373848849782171, 0.0322222655148733
    ), logphi = c(0.507044042359394, -1.6357506640458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_153 = structure(list(
    par = c(-0.151991275343731, 0.0200090694284112, 0.495251461805703, 
    -1.68349786496883), value = 60.5122122596175, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.26380118334, -8.21718637311619, 
    196.326997420115, -9.65849726242141, -8.21718637311619, 34.7432749361332, 
    -18.1837462136514, -9.82892549306058, 196.326997420115, -18.1837462136514, 
    4400.16360081152, -274.608497928597, -9.65849726242141, -9.82892549306058, 
    -274.608497928597, 249.287190518643), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.151991275343731, 0.0200090694284112
    ), logphi = c(0.495251461805703, -1.68349786496883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_154 = structure(list(
    par = c(-0.356251326607076, -0.0186607049833762, 0.508576440130331, 
    -1.63383142185822), value = 55.6944978770244, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.8545326766341, -6.39341561914364, 
    199.267244211043, -18.344618418098, -6.39341561914364, 30.3136055226361, 
    -25.7127846889915, -10.4392480171356, 199.267244211043, -25.7127846889915, 
    3894.48946872051, -323.432043739302, -18.344618418098, -10.4392480171356, 
    -323.432043739302, 242.048760494384), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356251326607076, -0.0186607049833762
    ), logphi = c(0.508576440130331, -1.63383142185822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_155 = structure(list(
    par = c(-0.250789382610226, 0.133609061697906, 0.532478966215801, 
    -1.62847275179591), value = 56.4933181157517, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.8577077576963, -7.37428175945354, 
    197.801818453414, -18.2146357117219, -7.37428175945354, 39.4932904157486, 
    -28.6743504815945, -10.9355770412378, 197.801818453414, -28.6743504815945, 
    3833.6223148896, -355.760388636384, -18.2146357117219, -10.9355770412378, 
    -355.760388636384, 246.943587066895), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250789382610226, 0.133609061697906
    ), logphi = c(0.532478966215801, -1.62847275179591)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_156 = structure(list(
    par = c(-0.304004100686007, -0.1749685957813, 0.503279232440468, 
    -1.609904492307), value = 71.362536749674, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.0231961278396, -8.18565701266039, 
    189.977831144716, -16.3784817477364, -8.18565701266039, 23.0283586439839, 
    -24.8977569796693, -8.53376247000881, 189.977831144716, -24.8977569796693, 
    3697.73471512502, -282.87261280191, -16.3784817477364, -8.53376247000881, 
    -282.87261280191, 230.597701982305), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304004100686007, -0.1749685957813
    ), logphi = c(0.503279232440468, -1.609904492307)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_157 = structure(list(
    par = c(-0.418221181315379, -0.25118694355304, 0.518959058965922, 
    -1.67177772148099), value = 63.5226755383556, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.0861333254745, -9.27420939333956, 
    202.287060012907, -23.1095616740618, -9.27420939333956, 19.5745901443445, 
    -34.6150664043421, -7.70908892278044, 202.287060012907, -34.6150664043421, 
    4396.09114310713, -378.134617367465, -23.1095616740618, -7.70908892278044, 
    -378.134617367465, 268.942137005013), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418221181315379, -0.25118694355304
    ), logphi = c(0.518959058965922, -1.67177772148099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_158 = structure(list(
    par = c(-0.230680976802261, 0.035110990685738, 0.495180924403717, 
    -1.69058423888557), value = 52.2511085149588, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.072385401029, -7.08644541447256, 
    202.473657646252, -12.0377638044289, -7.08644541447256, 33.9239647217937, 
    -18.6976049310061, -10.5842243547372, 202.473657646252, -18.6976049310061, 
    4461.66610375975, -296.496609125008, -12.0377638044289, -10.5842243547372, 
    -296.496609125008, 252.81411027045), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230680976802261, 0.035110990685738
    ), logphi = c(0.495180924403717, -1.69058423888557)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_159 = structure(list(
    par = c(-0.337774372330949, -0.0697145984239526, 0.477864476552391, 
    -1.62195981398257), value = 57.4629028182692, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.0499091224129, -4.39858013834282, 
    192.650501295688, -12.4614521936905, -4.39858013834282, 28.9733289733363, 
    -16.5290023748099, -10.1876871818618, 192.650501295688, -16.5290023748099, 
    3722.94571674203, -239.903491883631, -12.4614521936905, -10.1876871818618, 
    -239.903491883631, 220.423545322035), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337774372330949, -0.0697145984239526
    ), logphi = c(0.477864476552391, -1.62195981398257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_160 = structure(list(
    par = c(-0.400228845299893, -0.0526001525909276, 0.516354974427909, 
    -1.61204475284848), value = 62.5697496957031, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.609592210971, -5.34521453587899, 
    196.839115323755, -21.1167588641814, -5.34521453587899, 31.3484179113033, 
    -29.1092306152763, -9.93925874048784, 196.839115323755, -29.1092306152763, 
    3703.72589121892, -338.04554569361, -21.1167588641814, -9.93925874048784, 
    -338.04554569361, 239.7684339428), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400228845299893, -0.0526001525909276
    ), logphi = c(0.516354974427909, -1.61204475284848)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_161 = structure(list(
    par = c(-0.430920536348911, 0.10335645340936, 0.512299550897188, 
    -1.68342419496937), value = 43.7821761959618, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.4235336620986, -4.14851764496404, 
    213.459290311135, -21.0079758513615, -4.14851764496404, 37.5872338054251, 
    -26.3842711714091, -12.5837548861085, 213.459290311135, -26.3842711714091, 
    4374.54562820605, -381.32117362899, -21.0079758513615, -12.5837548861085, 
    -381.32117362899, 263.390008582221), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.430920536348911, 0.10335645340936
    ), logphi = c(0.512299550897188, -1.68342419496937)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_162 = structure(list(
    par = c(-0.323980730725573, 0.0306250713203201, 0.514281757428399, 
    -1.53942002972188), value = 69.2865633315146, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.7616253973813, -4.72664096307085, 
    181.764090026348, -17.1652320410942, -4.72664096307085, 33.8285929011306, 
    -23.6834617197701, -10.1321424939016, 181.764090026348, -23.6834617197701, 
    3023.25447620078, -278.389401572099, -17.1652320410942, -10.1321424939016, 
    -278.389401572099, 205.329311789626), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323980730725573, 0.0306250713203201
    ), logphi = c(0.514281757428399, -1.53942002972188)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_163 = structure(list(
    par = c(-0.293375957348395, 0.138644590757823, 0.51520601690173, 
    -1.54399814022742), value = 56.7791963162044, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.6947632643329, -3.61946504234822, 
    182.404733957142, -15.7133058831249, -3.61946504234822, 38.8191030165075, 
    -21.2912734607329, -11.1294950411178, 182.404733957142, -21.2912734607329, 
    3034.70737517841, -280.662172749579, -15.7133058831249, -11.1294950411178, 
    -280.662172749579, 205.580714554898), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293375957348395, 0.138644590757823
    ), logphi = c(0.51520601690173, -1.54399814022742)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_164 = structure(list(
    par = c(-0.38693678651471, -0.042281531548882, 0.491717100265736, 
    -1.61878032428809), value = 56.6883430545164, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.8482176991795, -3.16235088959615, 
    196.223455157352, -16.291182501682, -3.16235088959615, 32.960484611877, 
    -20.7486912291444, -10.6497632135216, 196.223455157352, -20.7486912291444, 
    3712.40640249937, -281.769176003976, -16.291182501682, -10.6497632135216, 
    -281.769176003976, 227.553750557163), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38693678651471, -0.042281531548882
    ), logphi = c(0.491717100265736, -1.61878032428809)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_165 = structure(list(
    par = c(-0.278998813590338, -0.216455534838799, 0.524096140324593, 
    -1.56150123433033), value = 73.6015938093838, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.6186265994593, -8.61122244799617, 
    180.881924006115, -18.8924787920541, -8.61122244799617, 23.2725482192109, 
    -28.564151843824, -7.25120890621156, 180.881924006115, -28.564151843824, 
    3295.169634427, -299.295056068516, -18.8924787920541, -7.25120890621156, 
    -299.295056068516, 221.599821916385), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278998813590338, -0.216455534838799
    ), logphi = c(0.524096140324593, -1.56150123433033)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_166 = structure(list(
    par = c(-0.199670748001894, -0.0944820319762694, 0.474244984064892, 
    -1.67751547915987), value = 55.7502176919573, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.6025932763864, -7.55070394831137, 
    193.773077647563, -8.38361504751362, -7.55070394831137, 27.8475849295745, 
    -14.7421067495657, -9.16329699762741, 193.773077647563, -14.7421067495657, 
    4316.76712733164, -231.676433453565, -8.38361504751362, -9.16329699762741, 
    -231.676433453565, 239.098426057183), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199670748001894, -0.0944820319762694
    ), logphi = c(0.474244984064892, -1.67751547915987)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_167 = structure(list(
    par = c(-0.224026233704916, 0.216316952156478, 0.487011614061958, 
    -1.55656875716579), value = 58.9571010224863, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.5646958130623, -0.094327925026505, 
    177.089042978196, -7.71668352683719, -0.094327925026505, 
    46.5691852422623, -10.5276031323598, -11.4941214359732, 177.089042978196, 
    -10.5276031323598, 3082.95853738727, -213.822416260001, -7.71668352683719, 
    -11.4941214359732, -213.822416260001, 193.659306221505), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224026233704916, 0.216316952156478
    ), logphi = c(0.487011614061958, -1.55656875716579)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_168 = structure(list(
    par = c(-0.315038792771879, -0.0626014220859238, 0.499573340625974, 
    -1.72835086695906), value = 52.7024824037201, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.759952947417, -8.00328653127735, 
    211.989101629229, -16.3568912894263, -8.00328653127735, 29.7292717359454, 
    -24.7836009119595, -10.1028251204838, 211.989101629229, -24.7836009119595, 
    4937.10157861038, -343.305346234501, -16.3568912894263, -10.1028251204838, 
    -343.305346234501, 272.262371765919), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.315038792771879, -0.0626014220859238
    ), logphi = c(0.499573340625974, -1.72835086695906)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_169 = structure(list(
    par = c(-0.143562220921129, 0.263609759437483, 0.502559780007911, 
    -1.64968679779359), value = 50.3312416066423, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.8930159295143, -3.59717280673522, 
    192.721147472596, -8.38808874092933, -3.59717280673522, 50.3464825722943, 
    -12.7178915629855, -11.8734933991504, 192.721147472596, -12.7178915629855, 
    3973.75449428772, -281.407889973551, -8.38808874092933, -11.8734933991504, 
    -281.407889973551, 235.781531342738), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143562220921129, 0.263609759437483
    ), logphi = c(0.502559780007911, -1.64968679779359)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_170 = structure(list(
    par = c(-0.414187904775017, -0.0164416726118626, 0.457558435464673, 
    -1.63422113748736), value = 49.8330413117394, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.2673145453857, -0.447591782304357, 
    196.061661771552, -10.7803621816061, -0.447591782304357, 
    32.0893195393523, -9.2563288305314, -11.3173391387278, 196.061661771552, 
    -9.2563288305314, 3757.89733422316, -215.651381275883, -10.7803621816061, 
    -11.3173391387278, -215.651381275883, 213.135307365775), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.414187904775017, -0.0164416726118626
    ), logphi = c(0.457558435464673, -1.63422113748736)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_171 = structure(list(
    par = c(-0.336446235717796, 0.127427620635528, 0.527934333069667, 
    -1.66134019080494), value = 51.7389225444281, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.9057800055414, -6.5413443728346, 
    206.95881431898, -20.3738599005021, -6.5413443728346, 38.2855690634898, 
    -29.6687962606512, -11.7117844009584, 206.95881431898, -29.6687962606512, 
    4160.58057282065, -381.804457818546, -20.3738599005021, -11.7117844009584, 
    -381.804457818546, 259.914332803035), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336446235717796, 0.127427620635528
    ), logphi = c(0.527934333069667, -1.66134019080494)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_172 = structure(list(
    par = c(-0.48332344150545, 0.047885929310328, 0.512121841340356, 
    -1.68767409517074), value = 45.7647437048599, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.5501517766434, -4.86771260455043, 
    214.859052903194, -23.0862551511279, -4.86771260455043, 33.8034279430133, 
    -29.5889172292618, -12.116906155768, 214.859052903194, -29.5889172292618, 
    4444.91197970009, -395.22141854853, -23.0862551511279, -12.116906155768, 
    -395.22141854853, 268.027505850199), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.48332344150545, 0.047885929310328
    ), logphi = c(0.512121841340356, -1.68767409517074)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_173 = structure(list(
    par = c(-0.297595553944035, 0.179812741951854, 0.508737430182, 
    -1.52835692084455), value = 64.5831959218033, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.0320864341493, -1.08354702277325, 
    178.962302666008, -14.1003107643201, -1.08354702277325, 43.6512027661706, 
    -17.9929622028396, -11.565858017093, 178.962302666008, -17.9929622028396, 
    2884.42932543731, -258.933469698519, -14.1003107643201, -11.565858017093, 
    -258.933469698519, 195.220338028435), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297595553944035, 0.179812741951854
    ), logphi = c(0.508737430182, -1.52835692084455)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_174 = structure(list(
    par = c(-0.318877927407874, -0.0323572254410978, 0.5036778162534, 
    -1.67798124256776), value = 57.0300768285893, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.9000196099652, -7.64267083930292, 
    204.718865710163, -16.6968368811027, -7.64267083930292, 29.3132284507891, 
    -24.6657891178614, -10.3121346555213, 204.718865710163, -24.6657891178614, 
    4355.99574034562, -327.901832840816, -16.6968368811027, -10.3121346555213, 
    -327.901832840816, 255.755202614338), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318877927407874, -0.0323572254410978
    ), logphi = c(0.5036778162534, -1.67798124256776)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_175 = structure(list(
    par = c(-0.29972042580697, 0.133521682818466, 0.503302335356117, 
    -1.56986772843493), value = 64.0089406558926, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.8700016651519, -3.18467910176423, 
    186.134872151911, -13.9191262391591, -3.18467910176423, 39.1832876900367, 
    -18.2185147750147, -11.4927026118039, 186.134872151911, -18.2185147750147, 
    3237.35485396526, -268.465208179691, -13.9191262391591, -11.4927026118039, 
    -268.465208179691, 209.72179382639), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29972042580697, 0.133521682818466
    ), logphi = c(0.503302335356117, -1.56986772843493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_176 = structure(list(
    par = c(-0.551564170041492, -0.117554131224261, 0.554622890785344, 
    -1.53781811111767), value = 75.4320023934126, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.0415732710217, -5.91830052343312, 
    185.628954906036, -31.8726428574223, -5.91830052343312, 26.9222849063055, 
    -41.1483209425967, -7.21039815232416, 185.628954906036, -41.1483209425967, 
    3112.51322507289, -412.686075556223, -31.8726428574223, -7.21039815232416, 
    -412.686075556223, 240.731220987556), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.551564170041492, -0.117554131224261
    ), logphi = c(0.554622890785344, -1.53781811111767)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_177 = structure(list(
    par = c(-0.157782227572581, -0.0340350730336694, 0.506955515895725, 
    -1.60993682065621), value = 71.9085328078023, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.6179386099993, -9.25325202416616, 
    185.158392909557, -11.7476915839632, -9.25325202416616, 29.9944333796986, 
    -22.1942202962566, -9.01894064675446, 185.158392909557, -22.1942202962566, 
    3678.81214925347, -265.438968099829, -11.7476915839632, -9.01894064675446, 
    -265.438968099829, 227.533472624941), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.157782227572581, -0.0340350730336694
    ), logphi = c(0.506955515895725, -1.60993682065621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_178 = structure(list(
    par = c(-0.314871770694766, -0.360756638637602, 0.469819432697504, 
    -1.65277977896978), value = 74.047164158054, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.2161841082425, -7.13071302982371, 
    192.292577395392, -12.417450502511, -7.13071302982371, 18.0373413627422, 
    -18.5048624601336, -7.60821822964886, 192.292577395392, -18.5048624601336, 
    4096.85388384418, -225.5819664434, -12.417450502511, -7.60821822964886, 
    -225.5819664434, 232.245168493961), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314871770694766, -0.360756638637602
    ), logphi = c(0.469819432697504, -1.65277977896978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_179 = structure(list(
    par = c(-0.32273394731921, -0.187320618113431, 0.52679009975614, 
    -1.59021472668995), value = 72.3139502424999, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.6455939314071, -8.14656704051231, 
    187.863273776401, -20.8073728096281, -8.14656704051231, 24.5134071015229, 
    -31.084590453645, -7.67175522398134, 187.863273776401, -31.084590453645, 
    3554.31169662523, -330.460516128284, -20.8073728096281, -7.67175522398134, 
    -330.460516128284, 235.979532288155), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32273394731921, -0.187320618113431
    ), logphi = c(0.52679009975614, -1.59021472668995)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_180 = structure(list(
    par = c(-0.309149243668487, 0.248315584623382, 0.480840146944003, 
    -1.64370319745876), value = 40.9696899567625, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.8442339526941, 3.11570327404809, 
    197.080847907927, -9.49823781493109, 3.11570327404809, 51.437248410835, 
    -5.59078678641356, -13.1430117749076, 197.080847907927, -5.59078678641356, 
    3844.07922175356, -262.617708186141, -9.49823781493109, -13.1430117749076, 
    -262.617708186141, 224.453699090077), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309149243668487, 0.248315584623382
    ), logphi = c(0.480840146944003, -1.64370319745876)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_181 = structure(list(
    par = c(-0.304409810674797, -0.0235453097792959, 0.528571074776866, 
    -1.4533441056568), value = 77.5343114144686, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.9399686006977, -4.28767197035995, 
    165.285704003537, -18.546574157341, -4.28767197035995, 34.5166505972827, 
    -25.2699090772524, -8.37824697796918, 165.285704003537, -25.2699090772524, 
    2399.75092921796, -258.496627015603, -18.546574157341, -8.37824697796918, 
    -258.496627015603, 178.153375458123), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304409810674797, -0.0235453097792959
    ), logphi = c(0.528571074776866, -1.4533441056568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_182 = structure(list(
    par = c(-0.201801707873704, -0.137620509859381, 0.493519465674508, 
    -1.65437148158386), value = 67.4988821776046, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.4497386356311, -8.93340479635185, 
    192.220413769206, -11.742377477475, -8.93340479635185, 26.0095187556431, 
    -20.9730251050644, -8.6643861418878, 192.220413769206, -20.9730251050644, 
    4125.15486698339, -262.966978985091, -11.742377477475, -8.6643861418878, 
    -262.966978985091, 240.729778994364), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201801707873704, -0.137620509859381
    ), logphi = c(0.493519465674508, -1.65437148158386)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_183 = structure(list(
    par = c(-0.202684582923646, -0.193352638051414, 0.526823109570058, 
    -1.49148037470443), value = 94.9402815615049, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.6909213411584, -8.92277161312904, 
    166.227269161823, -16.3940565656162, -8.92277161312904, 24.3413911391599, 
    -25.6829535913994, -6.75968874119803, 166.227269161823, -25.6829535913994, 
    2717.47987217807, -256.433347185947, -16.3940565656162, -6.75968874119803, 
    -256.433347185947, 191.725809020937), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202684582923646, -0.193352638051414
    ), logphi = c(0.526823109570058, -1.49148037470443)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_184 = structure(list(
    par = c(-0.13780149858159, 0.148130613981372, 0.514284346093848, 
    -1.50106877916489), value = 74.9460257589357, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.3474909016968, -6.50443078242802, 
    166.816431338646, -10.5165591186562, -6.50443078242802, 39.2327218179389, 
    -19.4197291669695, -9.72139490151847, 166.816431338646, -19.4197291669695, 
    2709.33113643679, -231.695142211663, -10.5165591186562, -9.72139490151847, 
    -231.695142211663, 185.042652432799), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.13780149858159, 0.148130613981372
    ), logphi = c(0.514284346093848, -1.50106877916489)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_185 = structure(list(
    par = c(-0.474901991282628, -0.441961794181891, 0.482571696940216, 
    -1.67057761959243), value = 72.8854660172063, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.2976535724054, -7.14948528823811, 
    200.545065645485, -19.8594284057663, -7.14948528823811, 14.412165665334, 
    -25.5218347540165, -7.26016555674391, 200.545065645485, -25.5218347540165, 
    4344.17208846938, -302.044436388371, -19.8594284057663, -7.26016555674391, 
    -302.044436388371, 251.577921005719), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.474901991282628, -0.441961794181891
    ), logphi = c(0.482571696940216, -1.67057761959243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_186 = structure(list(
    par = c(-0.361832731106563, -0.0672720345558802, 0.491804899209823, 
    -1.66414777942951), value = 60.7772921353491, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.8635477543472, -5.98948080643424, 
    202.846707551885, -16.1454345946055, -5.98948080643424, 28.3532945459797, 
    -21.7321757283173, -10.3727098945683, 202.846707551885, -21.7321757283173, 
    4187.45527049502, -302.110514271092, -16.1454345946055, -10.3727098945683, 
    -302.110514271092, 245.53331163446), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361832731106563, -0.0672720345558802
    ), logphi = c(0.491804899209823, -1.66414777942951)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_187 = structure(list(
    par = c(-0.217524456768193, -0.167749867893546, 0.508482476455339, 
    -1.50536563228718), value = 82.3870218794262, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.9865905542465, -7.95912819029354, 
    168.349585038641, -13.611013201853, -7.95912819029354, 24.500473351452, 
    -22.5501393096295, -7.59183992826706, 168.349585038641, -22.5501393096295, 
    2795.64904703378, -225.287515970507, -13.611013201853, -7.59183992826706, 
    -225.287515970507, 188.343190487217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.217524456768193, -0.167749867893546
    ), logphi = c(0.508482476455339, -1.50536563228718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_188 = structure(list(
    par = c(-0.376972730728888, 0.233276993414287, 0.544117123652837, 
    -1.61387836647025), value = 57.9703415674347, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.732340436308, -4.1277168385534, 
    202.504655280933, -23.7371591822466, -4.1277168385534, 45.5753557915273, 
    -31.6015624228783, -12.6489339216107, 202.504655280933, -31.6015624228783, 
    3660.85554657047, -404.277354139282, -23.7371591822466, -12.6489339216107, 
    -404.277354139282, 250.725384972839), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376972730728888, 0.233276993414287
    ), logphi = c(0.544117123652837, -1.61387836647025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_189 = structure(list(
    par = c(-0.187410413226349, -0.252909465154217, 0.465761539122825, 
    -1.58277937736906), value = 80.641979131972, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6595138800078, -7.99578445764837, 
    174.326466076735, -6.58901323369321, -7.99578445764837, 20.73585649498, 
    -14.8903436567593, -7.62162124168242, 174.326466076735, -14.8903436567593, 
    3390.33725550308, -157.017968563267, -6.58901323369321, -7.62162124168242, 
    -157.017968563267, 199.975440001054), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.187410413226349, -0.252909465154217
    ), logphi = c(0.465761539122825, -1.58277937736906)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_190 = structure(list(
    par = c(-0.110846107659222, 0.212983038129378, 0.484687390992052, 
    -1.62689547335615), value = 55.2316207035105, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.8274553217155, -4.37894149740714, 
    182.462337273037, -4.62594657602011, -4.37894149740714, 44.715327163658, 
    -9.27627937485909, -10.7820866306341, 182.462337273037, -9.27627937485909, 
    3743.24957526895, -222.766937265639, -4.62594657602011, -10.7820866306341, 
    -222.766937265639, 219.342737061368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.110846107659222, 0.212983038129378
    ), logphi = c(0.484687390992052, -1.62689547335615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_191 = structure(list(
    par = c(-0.295759873537195, 0.143352259698419, 0.489014015207279, 
    -1.56605452810398), value = 53.0305629125543, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.8305580155871, 0.913718512407513, 
    183.065120294756, -10.9382417097237, 0.913718512407513, 47.0248236545956, 
    -13.5363649498288, -11.584425880784, 183.065120294756, -13.5363649498288, 
    3175.34260415009, -233.43996242442, -10.9382417097237, -11.584425880784, 
    -233.43996242442, 200.266468368682), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.295759873537195, 0.143352259698419
    ), logphi = c(0.489014015207279, -1.56605452810398)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_192 = structure(list(
    par = c(-0.360636554765334, -0.198169455271635, 0.525058117546414, 
    -1.61440580254323), value = 73.8867699784212, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.1254150427196, -8.39596492596684, 
    192.857340341135, -21.8822596202983, -8.39596492596684, 23.3697516591747, 
    -32.4286667172657, -7.80784951004421, 192.857340341135, -32.4286667172657, 
    3788.43426880948, -347.686953141135, -21.8822596202983, -7.80784951004421, 
    -347.686953141135, 246.380693123882), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360636554765334, -0.198169455271635
    ), logphi = c(0.525058117546414, -1.61440580254323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_193 = structure(list(
    par = c(-0.137634816784439, -0.115890280740332, 0.496414094751645, 
    -1.57083682015101), value = 80.1946267165197, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.3624102039844, -9.22931016589246, 
    175.10689430722, -9.51991501452198, -9.22931016589246, 26.7388459853635, 
    -19.8275905205492, -8.15279220134357, 175.10689430722, -19.8275905205492, 
    3322.58897789472, -216.991149599721, -9.51991501452198, -8.15279220134357, 
    -216.991149599721, 207.673141790821), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137634816784439, -0.115890280740332
    ), logphi = c(0.496414094751645, -1.57083682015101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_194 = structure(list(
    par = c(-0.161317502720355, 0.315259387154268, 0.510135734337065, 
    -1.76122275593872), value = 35.0381580999892, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.4513398899617, -5.94284582611238, 
    215.572520854579, -10.0790370156645, -5.94284582611238, 49.113149273694, 
    -12.0827290128744, -13.0359435077665, 215.572520854579, -12.0827290128744, 
    5214.62023639252, -352.32847027622, -10.0790370156645, -13.0359435077665, 
    -352.32847027622, 275.595735960366), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161317502720355, 0.315259387154268
    ), logphi = c(0.510135734337065, -1.76122275593872)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_195 = structure(list(
    par = c(-0.22424766916723, 0.0990819901423571, 0.503107100334001, 
    -1.61937204540319), value = 55.6357704740118, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.4006612408491, -6.17515266121416, 
    191.296358588389, -12.2556705868249, -6.17515266121416, 36.7196083708166, 
    -19.0538272466512, -10.850766070547, 191.296358588389, -19.0538272466512, 
    3715.17079757489, -278.692030468264, -12.2556705868249, -10.850766070547, 
    -278.692030468264, 228.582253466669), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.22424766916723, 0.0990819901423571
    ), logphi = c(0.503107100334001, -1.61937204540319)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_196 = structure(list(
    par = c(-0.0955535977840898, 0.117919793234163, 0.476485608733505, 
    -1.5935565638573), value = 64.7491323545878, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.4763647723335, -5.79209955375859, 
    173.892305888046, -3.42659788366007, -5.79209955375859, 38.6764794200189, 
    -10.5719139789073, -9.70270865785494, 173.892305888046, -10.5719139789073, 
    3443.62130792319, -182.304021606683, -3.42659788366007, -9.70270865785494, 
    -182.304021606683, 204.155877941758), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0955535977840898, 0.117919793234163
    ), logphi = c(0.476485608733505, -1.5935565638573)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_197 = structure(list(
    par = c(-0.0756846696824874, 0.0449523044072849, 0.507209465960437, 
    -1.56276802442765), value = 83.6405955090286, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.92545561928, -10.9449886700475, 
    173.011416659818, -8.57065640147425, -10.9449886700475, 31.4682335229577, 
    -19.8283228520779, -8.9334258088769, 173.011416659818, -19.8283228520779, 
    3238.0852476841, -231.76798695701, -8.57065640147425, -8.9334258088769, 
    -231.76798695701, 206.771867645728), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0756846696824874, 0.0449523044072849
    ), logphi = c(0.507209465960437, -1.56276802442765)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_198 = structure(list(
    par = c(-0.199617345481587, 0.230357495028033, 0.507116109224263, 
    -1.54268024077531), value = 69.2101549790032, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.7844139754179, -1.10360881677707, 
    176.863980591691, -10.5899275055776, -1.10360881677707, 49.983640138862, 
    -15.8266906709059, -11.3678944337892, 176.863980591691, -15.8266906709059, 
    2998.84884304191, -248.404892966292, -10.5899275055776, -11.3678944337892, 
    -248.404892966292, 197.855919431333), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199617345481587, 0.230357495028033
    ), logphi = c(0.507116109224263, -1.54268024077531)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_199 = structure(list(
    par = c(-0.42207735900184, -0.165912026592275, 0.507066995010779, 
    -1.54987483228926), value = 78.7754389286844, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.1293127417225, -5.53794687263576, 
    184.240814242287, -19.9766752260189, -5.53794687263576, 24.2327719846003, 
    -26.072364239127, -8.78647729862791, 184.240814242287, -26.072364239127, 
    3146.14867667729, -281.357207104094, -19.9766752260189, -8.78647729862791, 
    -281.357207104094, 210.548641540242), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42207735900184, -0.165912026592275
    ), logphi = c(0.507066995010779, -1.54987483228926)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_200 = structure(list(
    par = c(-0.122172989336564, 0.00357620893297475, 0.479460174747205, 
    -1.50092249700023), value = 74.5454869270231, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.3148759710557, -5.75393885782205, 
    159.991243762647, -4.78895290001446, -5.75393885782205, 33.9035120049402, 
    -14.3263900902468, -8.64521894783365, 159.991243762647, -14.3263900902468, 
    2694.30747819399, -148.631896077944, -4.78895290001446, -8.64521894783365, 
    -148.631896077944, 170.79906958628), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122172989336564, 0.00357620893297475
    ), logphi = c(0.479460174747205, -1.50092249700023)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_1 = structure(list(
    par = c(-0.442391302812413, -0.212384008036104, 0.476305677076196, 
    -1.64757508354376), value = 70.6474497777389, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.0346312185573, -5.02780138944559, 
    233.257618564409, -19.424464026585, -5.02780138944559, 28.0389213429544, 
    -23.9376745696518, -11.0812287594797, 233.257618564409, -23.9376745696518, 
    4679.05495163379, -315.358534111354, -19.424464026585, -11.0812287594797, 
    -315.358534111354, 272.823528675303), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.442391302812413, -0.212384008036104
    ), logphi = c(0.476305677076196, -1.64757508354376)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_2 = structure(list(
    par = c(-0.344928622714336, 0.00822521343449698, 0.497384117788721, 
    -1.62176881612997), value = 71.2248665820336, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.9207940656102, -6.14445148983123, 
    228.784009969729, -18.3060728495832, -6.14445148983123, 36.8457268216105, 
    -24.3669012895964, -12.6629461245642, 228.784009969729, -24.3669012895964, 
    4366.00863199743, -337.431263371712, -18.3060728495832, -12.6629461245642, 
    -337.431263371712, 268.635698084552), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344928622714336, 0.00822521343449698
    ), logphi = c(0.497384117788721, -1.62176881612997)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_3 = structure(list(
    par = c(-0.40610864591412, -0.0334333572971914, 0.480447567473, 
    -1.59266930236352), value = 67.1234339180147, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.2006234433372, -2.763284147278, 
    222.934743959513, -16.7952768528323, -2.763284147278, 36.5264192225823, 
    -19.6929945417423, -12.6974154710524, 222.934743959513, -19.6929945417423, 
    4002.94725849903, -284.229700394434, -16.7952768528323, -12.6974154710524, 
    -284.229700394434, 245.527986891148), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40610864591412, -0.0334333572971914
    ), logphi = c(0.480447567473, -1.59266930236352)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_4 = structure(list(
    par = c(-0.359484067539817, 0.137334446277196, 0.529119274889042, 
    -1.49766260419639), value = 74.628694117125, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.6702492571299, -1.37004991174194, 
    206.928077005841, -23.25361204214, -1.37004991174194, 50.6334956682508, 
    -28.8700221844351, -12.6288436366195, 206.928077005841, -28.8700221844351, 
    3125.79701613913, -346.093952963145, -23.25361204214, -12.6288436366195, 
    -346.093952963145, 229.045548369555), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359484067539817, 0.137334446277196
    ), logphi = c(0.529119274889042, -1.49766260419639)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_5 = structure(list(
    par = c(-0.252885589374089, -0.285471606344817, 0.480422547109301, 
    -1.68471511083429), value = 77.2972811448213, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.682012442272, -9.76885016257256, 
    229.09748302169, -14.2589003431226, -9.76885016257256, 24.0766717780616, 
    -23.401525304223, -9.16545117490841, 229.09748302169, -23.401525304223, 
    5202.90604555385, -298.460204543716, -14.2589003431226, -9.16545117490841, 
    -298.460204543716, 290.057377778652), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252885589374089, -0.285471606344817
    ), logphi = c(0.480422547109301, -1.68471511083429)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_6 = structure(list(
    par = c(-0.357845228978364, 0.178871888918346, 0.49588949320911, 
    -1.60831939255986), value = 58.1235992134445, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.98103577954, 0.357384799087868, 
    228.069703267053, -16.6688851166441, 0.357384799087868, 52.7483007051188, 
    -17.1085297360207, -14.964244076765, 228.069703267053, -17.1085297360207, 
    4140.7108822753, -332.787474000895, -16.6688851166441, -14.964244076765, 
    -332.787474000895, 258.142506060821), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357845228978364, 0.178871888918346
    ), logphi = c(0.49588949320911, -1.60831939255986)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_7 = structure(list(
    par = c(-0.279815240561363, -0.200400558566881, 0.480915805370999, 
    -1.71854072960272), value = 68.4133601968834, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.8495774360126, -9.62530055659272, 
    238.775863088847, -15.1461962420996, -9.62530055659272, 27.0966214017676, 
    -23.3324770739785, -10.227338940183, 238.775863088847, -23.3324770739785, 
    5627.18185052447, -331.51560352529, -15.1461962420996, -10.227338940183, 
    -331.51560352529, 304.044246995261), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279815240561363, -0.200400558566881
    ), logphi = c(0.480915805370999, -1.71854072960272)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_8 = structure(list(
    par = c(-0.461532639781429, 0.0190010177368513, 0.493873801281288, 
    -1.62418993197951), value = 63.5054781038172, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.3543225137466, -2.40826991415588, 
    234.851337985731, -21.8206173023816, -2.40826991415588, 40.2558975380884, 
    -24.4101991846435, -13.8540835976642, 234.851337985731, -24.4101991846435, 
    4367.22742363216, -358.61641067747, -21.8206173023816, -13.8540835976642, 
    -358.61641067747, 270.291608327256), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.461532639781429, 0.0190010177368513
    ), logphi = c(0.493873801281288, -1.62418993197951)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_9 = structure(list(
    par = c(-0.292897004292962, -0.0743542482481117, 0.515338029378998, 
    -1.55355092491187), value = 88.1572669683983, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.3180402035368, -7.70117542714388, 
    212.214195776994, -19.9981014610273, -7.70117542714388, 33.9060158829341, 
    -29.7818505288205, -10.4009854773324, 212.214195776994, -29.7818505288205, 
    3705.22519421357, -327.49675856536, -19.9981014610273, -10.4009854773324, 
    -327.49675856536, 247.781625844823), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292897004292962, -0.0743542482481117
    ), logphi = c(0.515338029378998, -1.55355092491187)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_10 = structure(list(
    par = c(-0.389097500630858, -0.374907789125091, 0.490800061277122, 
    -1.73264525048864), value = 67.906455711925, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.9937120884897, -9.72954907396684, 
    242.818340801421, -21.8280781858482, -9.72954907396684, 20.4303197861577, 
    -32.0467184700135, -8.60435993921271, 242.818340801421, -32.0467184700135, 
    5920.34254225737, -394.19013311992, -21.8280781858482, -8.60435993921271, 
    -394.19013311992, 323.008791035306), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389097500630858, -0.374907789125091
    ), logphi = c(0.490800061277122, -1.73264525048864)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_11 = structure(list(
    par = c(-0.184895090371501, -0.00666339164635048, 0.466262571622263, 
    -1.59759936375463), value = 78.1858290222189, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.469296388743, -6.19037248483778, 
    207.748939292429, -5.99641048637523, -6.19037248483778, 37.1707460935511, 
    -12.9208671104664, -11.0123840428855, 207.748939292429, -12.9208671104664, 
    4050.15529338471, -201.188560925658, -5.99641048637523, -11.0123840428855, 
    -201.188560925658, 236.504606345278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.184895090371501, -0.00666339164635048
    ), logphi = c(0.466262571622263, -1.59759936375463)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_12 = structure(list(
    par = c(-0.29274569125503, -0.20604829185701, 0.479590617388778, 
    -1.54400669734516), value = 93.5828368437247, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.1205572339545, -6.75036902109127, 
    204.542648415185, -13.1362160260551, -6.75036902109127, 27.0080948325813, 
    -21.101713620908, -9.70507619868499, 204.542648415185, -21.101713620908, 
    3567.46748352066, -221.390136287525, -13.1362160260551, -9.70507619868499, 
    -221.390136287525, 223.042377317739), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29274569125503, -0.20604829185701
    ), logphi = c(0.479590617388778, -1.54400669734516)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_13 = structure(list(
    par = c(-0.301448449075619, 0.0608109171310886, 0.49716286995919, 
    -1.64288360206542), value = 60.8025272132444, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.6235186892701, -6.21686307056279, 
    231.517153251204, -16.4306921872637, -6.21686307056279, 39.4482117354045, 
    -22.2930798514653, -13.0849446051684, 231.517153251204, -22.2930798514653, 
    4596.40020921448, -341.378243517099, -16.4306921872637, -13.0849446051684, 
    -341.378243517099, 276.12740243832), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301448449075619, 0.0608109171310886
    ), logphi = c(0.49716286995919, -1.64288360206542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_14 = structure(list(
    par = c(-0.376776614228588, 0.060467595605074, 0.51516049652059, 
    -1.60646198271026), value = 65.3593520821564, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.3778763126579, -5.02755210263217, 
    229.65260874841, -22.7142063309316, -5.02755210263217, 41.9776212652323, 
    -29.9976323994144, -13.0977156640455, 229.65260874841, -29.9976323994144, 
    4211.67594837613, -384.490827812556, -22.7142063309316, -13.0977156640455, 
    -384.490827812556, 273.217255212899), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376776614228588, 0.060467595605074
    ), logphi = c(0.51516049652059, -1.60646198271026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_15 = structure(list(
    par = c(-0.389647000899705, 0.00340959031130426, 0.504523259030271, 
    -1.61995683283562), value = 73.5963973067053, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.9491058677311, -6.02350971234955, 
    231.28353661761, -21.4992885361198, -6.02350971234955, 36.3120484401236, 
    -28.0033986470585, -12.7735023518483, 231.28353661761, -28.0033986470585, 
    4360.9277138934, -366.498655212766, -21.4992885361198, -12.7735023518483, 
    -366.498655212766, 274.007849991875), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389647000899705, 0.00340959031130426
    ), logphi = c(0.504523259030271, -1.61995683283562)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_16 = structure(list(
    par = c(-0.298740046068971, 0.0442218532583682, 0.5091611895567, 
    -1.59315043776048), value = 76.0368726855436, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.4449162487376, -7.01701787519937, 
    222.097577282199, -18.5226534021865, -7.01701787519937, 38.2949819588418, 
    -26.5672435659781, -12.3470677628745, 222.097577282199, -26.5672435659781, 
    4066.62758798859, -340.755436191387, -18.5226534021865, -12.3470677628745, 
    -340.755436191387, 260.959609569511), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298740046068971, 0.0442218532583682
    ), logphi = c(0.5091611895567, -1.59315043776048)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_17 = structure(list(
    par = c(-0.232745730565725, -0.180736061049367, 0.513106917115546, 
    -1.60226498693537), value = 96.7052838517908, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6916131383703, -11.7249023006138, 
    217.021615796398, -18.4284966309178, -11.7249023006138, 26.0073101188141, 
    -30.5405711529261, -9.21438326528801, 217.021615796398, -30.5405711529261, 
    4255.65844610887, -334.338206984697, -18.4284966309178, -9.21438326528801, 
    -334.338206984697, 269.456445632699), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232745730565725, -0.180736061049367
    ), logphi = c(0.513106917115546, -1.60226498693537)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_18 = structure(list(
    par = c(-0.34131445360015, -0.565093838342104, 0.502130443979293, 
    -1.59987997600308), value = 97.0677555557925, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.5109625534515, -9.45429455612157, 
    213.099909014858, -21.4407304817144, -9.45429455612157, 14.5734008611953, 
    -29.0798872164544, -6.31449581867116, 213.099909014858, -29.0798872164544, 
    4302.31079218046, -318.633489790443, -21.4407304817144, -6.31449581867116, 
    -318.633489790443, 269.873921784125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34131445360015, -0.565093838342104
    ), logphi = c(0.502130443979293, -1.59987997600308)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_19 = structure(list(
    par = c(-0.298420225875259, 0.0833198759439089, 0.530353297149601, 
    -1.54830643344014), value = 78.8422511970975, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.7137717338883, -6.71418199971185, 
    214.98329190095, -22.3545424837823, -6.71418199971185, 42.1964036299016, 
    -31.808731780103, -11.8766752130739, 214.98329190095, -31.808731780103, 
    3626.11159037129, -369.535304024282, -22.3545424837823, -11.8766752130739, 
    -369.535304024282, 252.662354959909), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298420225875259, 0.0833198759439089
    ), logphi = c(0.530353297149601, -1.54830643344014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_20 = structure(list(
    par = c(-0.149936426720783, -0.137675089756575, 0.513791364751128, 
    -1.5352592886904), value = 102.149685973224, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.9995073402902, -11.6646562950962, 
    199.837475836517, -14.8373207302654, -11.6646562950962, 29.1950945161545, 
    -27.2936067027274, -8.84993736605111, 199.837475836517, -27.2936067027274, 
    3552.14866607767, -281.462284574374, -14.8373207302654, -8.84993736605111, 
    -281.462284574374, 235.368876655428), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.149936426720783, -0.137675089756575
    ), logphi = c(0.513791364751128, -1.5352592886904)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_21 = structure(list(
    par = c(-0.387731886292227, -0.0276554451896969, 0.521217946027879, 
    -1.60081063410607), value = 70.3115973128459, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.5859808384591, -7.13696494258897, 
    227.532231654948, -24.9210705067782, -7.13696494258897, 35.5546396271222, 
    -34.5985686607264, -11.6200827573465, 227.532231654948, -34.5985686607264, 
    4196.31797779374, -397.497476843256, -24.9210705067782, -11.6200827573465, 
    -397.497476843256, 276.765182050553), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.387731886292227, -0.0276554451896969
    ), logphi = c(0.521217946027879, -1.60081063410607)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_22 = structure(list(
    par = c(-0.125776793380266, -0.0680233371773317, 0.497806522751486, 
    -1.58559431460911), value = 87.4606262418606, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.0518784910723, -10.3580284154248, 
    207.213593718336, -10.7926641703671, -10.3580284154248, 34.7483900000611, 
    -22.9487260234862, -9.94490052264041, 207.213593718336, -22.9487260234862, 
    4023.43881092548, -263.897419117143, -10.7926641703671, -9.94490052264041, 
    -263.897419117143, 249.155930362122), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.125776793380266, -0.0680233371773317
    ), logphi = c(0.497806522751486, -1.58559431460911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_23 = structure(list(
    par = c(-0.357779112661239, -0.0414187824098479, 0.492580353664172, 
    -1.68045280413532), value = 75.0408740331841, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.7519657679309, -7.73268560294582, 
    240.301465645132, -18.8165173788946, -7.73268560294582, 32.9860109999913, 
    -25.1759865221857, -12.4439989406255, 240.301465645132, -25.1759865221857, 
    5083.67558872891, -365.162683998221, -18.8165173788946, -12.4439989406255, 
    -365.162683998221, 293.660827466624), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357779112661239, -0.0414187824098479
    ), logphi = c(0.492580353664172, -1.68045280413532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_24 = structure(list(
    par = c(-0.333358637800379, -0.0442781631260272, 0.482450227612323, 
    -1.52149105145967), value = 80.6122990865334, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.7694237548878, -1.96290376308639, 
    203.69747274529, -13.63022406764, -1.96290376308639, 39.4519607880284, 
    -19.3556809158224, -11.4459156179691, 203.69747274529, -19.3556809158224, 
    3309.67318016562, -228.253773933318, -13.63022406764, -11.4459156179691, 
    -228.253773933318, 212.272218462317), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333358637800379, -0.0442781631260272
    ), logphi = c(0.482450227612323, -1.52149105145967)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_25 = structure(list(
    par = c(-0.116841496428054, 0.149089682769642, 0.48208094139273, 
    -1.71958843101114), value = 58.6116570431256, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.822209133853, -7.81071651800858, 
    231.183805464497, -6.40128065931833, -7.81071651800858, 47.6093933254873, 
    -10.6487107238706, -12.3671787566337, 231.183805464497, -10.6487107238706, 
    5537.96635208315, -303.138385731927, -6.40128065931833, -12.3671787566337, 
    -303.138385731927, 295.451192773299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.116841496428054, 0.149089682769642
    ), logphi = c(0.48208094139273, -1.71958843101114)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_26 = structure(list(
    par = c(-0.264393692945584, -0.0783403071222918, 0.52497647564709, 
    -1.57446898164258), value = 86.3650990616359, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6721813683994, -10.0614731692872, 
    215.760182673108, -21.1990613934177, -10.0614731692872, 32.1980222466323, 
    -33.0619314432568, -9.99052033279213, 215.760182673108, -33.0619314432568, 
    3941.27942518807, -359.969880481259, -21.1990613934177, -9.99052033279213, 
    -359.969880481259, 262.880553137279), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264393692945584, -0.0783403071222918
    ), logphi = c(0.52497647564709, -1.57446898164258)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_27 = structure(list(
    par = c(-0.192792336395489, 0.286939157972542, 0.487910383439363, 
    -1.58221234953644), value = 55.9181065592545, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.632739695442, 0.421297896124884, 
    210.020931072918, -7.58716058690823, 0.421297896124884, 58.9247816424887, 
    -9.09341241239758, -13.9377742236491, 210.020931072918, -9.09341241239758, 
    3840.88254103254, -263.325394446845, -7.58716058690823, -13.9377742236491, 
    -263.325394446845, 236.600146733323), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.192792336395489, 0.286939157972542
    ), logphi = c(0.487910383439363, -1.58221234953644)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_28 = structure(list(
    par = c(-0.140195747506016, -0.020504631602627, 0.474295396747749, 
    -1.62181270630187), value = 77.4417939336202, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.926468521503, -7.4413830084552, 
    211.177600903056, -6.54239989472671, -7.4413830084552, 38.5753118123944, 
    -15.2598543614602, -10.6850386067947, 211.177600903056, -15.2598543614602, 
    4354.46883115276, -226.403154599097, -6.54239989472671, -10.6850386067947, 
    -226.403154599097, 252.312516675346), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.140195747506016, -0.020504631602627
    ), logphi = c(0.474295396747749, -1.62181270630187)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_29 = structure(list(
    par = c(-0.351889409067291, -0.289936970111794, 0.501561618156855, 
    -1.65771918814412), value = 77.9637192218888, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.2506341399339, -10.15445136332, 
    230.431225809014, -21.5113318446924, -10.15445136332, 22.2574617403382, 
    -31.8968093999672, -9.06057186256248, 230.431225809014, -31.8968093999672, 
    4915.49242148181, -365.057474244423, -21.5113318446924, -9.06057186256248, 
    -365.057474244423, 293.885706195596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351889409067291, -0.289936970111794
    ), logphi = c(0.501561618156855, -1.65771918814412)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_30 = structure(list(
    par = c(-0.320807332427536, -0.162150033732467, 0.498040644811906, 
    -1.60950655362518), value = 76.7767706665045, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.943231967254, -8.56752064137822, 
    222.252741689744, -18.5897155198234, -8.56752064137822, 27.912189377588, 
    -27.5055757974485, -10.3318638196015, 222.252741689744, -27.5055757974485, 
    4291.23864760328, -319.991842065548, -18.5897155198234, -10.3318638196015, 
    -319.991842065548, 265.730886678028), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320807332427536, -0.162150033732467
    ), logphi = c(0.498040644811906, -1.60950655362518)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_31 = structure(list(
    par = c(-0.35691432358358, -0.0478026853676081, 0.531189326761808, 
    -1.53116498595587), value = 90.235960384658, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.8227900758473, -7.0757276233735, 
    211.651074646824, -25.2390147785775, -7.0757276233735, 35.7669022257312, 
    -34.6033544005309, -10.2966575727947, 211.651074646824, -34.6033544005309, 
    3499.62540073534, -369.718665343299, -25.2390147785775, -10.2966575727947, 
    -369.718665343299, 249.08093104159), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35691432358358, -0.0478026853676081
    ), logphi = c(0.531189326761808, -1.53116498595587)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_32 = structure(list(
    par = c(-0.0939931956085622, -0.0989756096416637, 0.479400810830018, 
    -1.68314849556687), value = 67.6989368878874, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.8241188366601, -11.5456594365071, 
    219.860911698788, -7.19793101566779, -11.5456594365071, 32.4926211234811, 
    -17.8517152455981, -9.82441438779347, 219.860911698788, -17.8517152455981, 
    5145.56410302092, -259.840531374067, -7.19793101566779, -9.82441438779347, 
    -259.840531374067, 283.638194453317), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0939931956085622, -0.0989756096416637
    ), logphi = c(0.479400810830018, -1.68314849556687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_33 = structure(list(
    par = c(-0.443982194651262, 0.141160622970501, 0.528710886033849, 
    -1.50421294672226), value = 81.5243398946975, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.5721407531671, -0.281737371210511, 
    211.815255482861, -26.2325497750737, -0.281737371210511, 
    49.3913498544885, -29.7920799781082, -13.4346763367432, 211.815255482861, 
    -29.7920799781082, 3175.04029272797, -365.25790864772, -26.2325497750737, 
    -13.4346763367432, -365.25790864772, 234.672369735733), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443982194651262, 0.141160622970501
    ), logphi = c(0.528710886033849, -1.50421294672226)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_34 = structure(list(
    par = c(-0.339523160891788, -0.0387732719239483, 0.526989153730434, 
    -1.61048948268545), value = 77.0367411839743, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.0499670522138, -9.4146358691205, 
    227.385433493765, -24.4453188003035, -9.4146358691205, 33.5999578915391, 
    -36.3306134545383, -10.9957136462668, 227.385433493765, -36.3306134545383, 
    4322.09398499239, -407.37114119338, -24.4453188003035, -10.9957136462668, 
    -407.37114119338, 283.389118248323), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339523160891788, -0.0387732719239483
    ), logphi = c(0.526989153730434, -1.61048948268545)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_35 = structure(list(
    par = c(-0.24502173163724, -0.216989886737298, 0.512297251358391, 
    -1.5523230594047), value = 92.5909855690169, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.0396770637474, -10.5028558223808, 
    207.025201948596, -18.397870832132, -10.5028558223808, 25.4973086590837, 
    -29.1915185570701, -8.68512986684777, 207.025201948596, -29.1915185570701, 
    3731.10254177078, -304.37014648399, -18.397870832132, -8.68512986684777, 
    -304.37014648399, 245.814865152738), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24502173163724, -0.216989886737298
    ), logphi = c(0.512297251358391, -1.5523230594047)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_36 = structure(list(
    par = c(-0.0475298455705264, 0.0691027360397011, 0.497340363926576, 
    -1.551349220137), value = 91.7647245074972, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.617169567613, -9.50678120403836, 
    195.745853112328, -6.80803741559544, -9.50678120403836, 44.7622272901071, 
    -19.7327057165353, -10.3927101662293, 195.745853112328, -19.7327057165353, 
    3647.12433599124, -234.131377848001, -6.80803741559544, -10.3927101662293, 
    -234.131377848001, 230.201190888124), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0475298455705264, 0.0691027360397011
    ), logphi = c(0.497340363926576, -1.551349220137)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_37 = structure(list(
    par = c(-0.31379772251345, 0.0172577080287722, 0.503517746976828, 
    -1.64987737120344), value = 72.9327276959478, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.2861718609054, -7.01444478323765, 
    233.824971957119, -18.6544845952596, -7.01444478323765, 38.8145233891635, 
    -26.5913749295521, -12.5550320539958, 233.824971957119, -26.5913749295521, 
    4711.92508062046, -364.482045213776, -18.6544845952596, -12.5550320539958, 
    -364.482045213776, 284.570383634275), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31379772251345, 0.0172577080287722
    ), logphi = c(0.503517746976828, -1.64987737120344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_38 = structure(list(
    par = c(-0.170562674828462, -0.0742921178916047, 0.494154389148811, 
    -1.68570034611478), value = 75.6284888204756, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.9782510873924, -11.4442936727244, 
    229.278809335653, -12.4995436046049, -11.4442936727244, 32.1788776034282, 
    -23.3914122915735, -10.6282815739434, 229.278809335653, -23.3914122915735, 
    5191.30150811975, -320.195074184682, -12.4995436046049, -10.6282815739434, 
    -320.195074184682, 293.327869595572), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170562674828462, -0.0742921178916047
    ), logphi = c(0.494154389148811, -1.68570034611478)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_39 = structure(list(
    par = c(-0.347431002258648, 0.0788599780584522, 0.526645781502248, 
    -1.55141454868835), value = 76.3997177680792, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.4162207037111, -5.62682426163974, 
    217.534426347754, -23.3933495010774, -5.62682426163974, 41.6957659581385, 
    -31.456589322687, -12.3274364121073, 217.534426347754, -31.456589322687, 
    3648.80215621355, -372.265435220953, -23.3933495010774, -12.3274364121073, 
    -372.265435220953, 253.548900325029), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347431002258648, 0.0788599780584522
    ), logphi = c(0.526645781502248, -1.55141454868835)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_40 = structure(list(
    par = c(-0.316173235913613, -0.240305020513346, 0.480470122077112, 
    -1.76741319942594), value = 64.4500074651168, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.3580048242527, -10.8965679004314, 
    248.795531405221, -17.0443766442929, -10.8965679004314, 23.6737367238504, 
    -25.4713838998555, -9.99898405318334, 248.795531405221, -25.4713838998555, 
    6347.48159099274, -371.122033010707, -17.0443766442929, -9.99898405318334, 
    -371.122033010707, 325.284597533226), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316173235913613, -0.240305020513346
    ), logphi = c(0.480470122077112, -1.76741319942594)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_41 = structure(list(
    par = c(-0.375826219412006, -0.170801937033527, 0.489532357024398, 
    -1.55782240286399), value = 89.2789945700249, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.4055999016955, -6.22163607744142, 
    213.272720770874, -18.1060585457971, -6.22163607744142, 27.7722127997038, 
    -24.665102934307, -10.4969726635318, 213.272720770874, -24.665102934307, 
    3711.96274283392, -275.316582492025, -18.1060585457971, -10.4969726635318, 
    -275.316582492025, 236.62517520151), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375826219412006, -0.170801937033527
    ), logphi = c(0.489532357024398, -1.55782240286399)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_42 = structure(list(
    par = c(-0.220582752875724, -0.197849888087959, 0.482003046252267, 
    -1.64094590146066), value = 88.4214987827792, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.4425839891587, -10.2966138157967, 
    220.371811529674, -12.3930571511721, -10.2966138157967, 26.1050118837147, 
    -21.8072712030448, -9.71598154109188, 220.371811529674, -21.8072712030448, 
    4636.90166299457, -270.568579461283, -12.3930571511721, -9.71598154109188, 
    -270.568579461283, 269.223603975632), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220582752875724, -0.197849888087959
    ), logphi = c(0.482003046252267, -1.64094590146066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_43 = structure(list(
    par = c(-0.541976416560856, -0.195590778351614, 0.501604434975985, 
    -1.59478857977886), value = 72.5568956289764, counts = structure(c(377L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.8656286856099, -4.59370867744724, 
    227.748661647098, -27.3017887817417, -4.59370867744724, 29.4289515849755, 
    -33.2765873771734, -10.8451442635271, 227.748661647098, -33.2765873771734, 
    4138.57408365459, -373.465112332383, -27.3017887817417, -10.8451442635271, 
    -373.465112332383, 268.809382784951), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.541976416560856, -0.195590778351614
    ), logphi = c(0.501604434975985, -1.59478857977886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_44 = structure(list(
    par = c(-0.161170924676508, 0.0994206409401373, 0.484304820829533, 
    -1.66550501054365), value = 55.5760489224027, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.292429009803, -7.05493823005554, 
    224.522676905536, -8.52875516521578, -7.05493823005554, 43.7602018603656, 
    -14.6263720459672, -12.2593304912044, 224.522676905536, -14.6263720459672, 
    4850.90578124314, -287.642228263607, -8.52875516521578, -12.2593304912044, 
    -287.642228263607, 275.39439351365), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161170924676508, 0.0994206409401373
    ), logphi = c(0.484304820829533, -1.66550501054365)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_45 = structure(list(
    par = c(-0.25315440599842, 0.368893551850278, 0.498938040629794, 
    -1.67888548932637), value = 33.2532328159274, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.090872629608, 2.14885514893126, 
    238.139739209942, -11.7267656456477, 2.14885514893126, 65.7218918149738, 
    -6.05883123050432, -16.5273660215348, 238.139739209942, -6.05883123050432, 
    4907.81410184127, -366.917659162525, -11.7267656456477, -16.5273660215348, 
    -366.917659162525, 284.589866188512), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25315440599842, 0.368893551850278
    ), logphi = c(0.498938040629794, -1.67888548932637)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_46 = structure(list(
    par = c(-0.372874212977055, -0.303687534529175, 0.513000287084602, 
    -1.64599472551472), value = 80.5295411931768, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.5422139592192, -9.3765240620769, 
    228.680649623669, -24.2897668005781, -9.3765240620769, 23.4929258624561, 
    -35.805433586944, -8.52189776701096, 228.680649623669, -35.805433586944, 
    4804.66234048649, -393.767727672412, -24.2897668005781, -8.52189776701096, 
    -393.767727672412, 296.795116831561), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372874212977055, -0.303687534529175
    ), logphi = c(0.513000287084602, -1.64599472551472)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_47 = structure(list(
    par = c(-0.378726843488234, 0.0942274196975035, 0.474274748992773, 
    -1.68060139684951), value = 48.859556198869, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.2734129897028, -1.64187199480637, 
    240.794751210416, -14.473986486685, -1.64187199480637, 43.6402633763322, 
    -11.9117005965563, -14.5056448497272, 240.794751210416, -11.9117005965563, 
    4966.18934925763, -325.630311627911, -14.473986486685, -14.5056448497272, 
    -325.630311627911, 278.477228624396), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378726843488234, 0.0942274196975035
    ), logphi = c(0.474274748992773, -1.68060139684951)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_48 = structure(list(
    par = c(-0.332831294343973, -0.250251874320896, 0.531995355535976, 
    -1.62871638323479), value = 97.2349073588171, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.7373344539519, -11.330538363552, 
    224.878290907782, -25.9860944957779, -11.330538363552, 24.1249788679454, 
    -40.0804068974026, -8.10604371004331, 224.878290907782, -40.0804068974026, 
    4617.04508487415, -424.013272322554, -25.9860944957779, -8.10604371004331, 
    -424.013272322554, 298.026425515019), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332831294343973, -0.250251874320896
    ), logphi = c(0.531995355535976, -1.62871638323479)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_49 = structure(list(
    par = c(-0.364314996868359, -0.0426809096253269, 0.528935641361157, 
    -1.72475094314829), value = 60.5991677105706, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.1113258081421, -11.313609316943, 
    249.559081673567, -26.0908979665686, -11.313609316943, 33.0870654252635, 
    -43.6260828671209, -11.1993201379335, 249.559081673567, -43.6260828671209, 
    5773.73133331705, -488.339050564335, -26.0908979665686, -11.1993201379335, 
    -488.339050564335, 334.903406059794), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.364314996868359, -0.0426809096253269
    ), logphi = c(0.528935641361157, -1.72475094314829)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_50 = structure(list(
    par = c(-0.462373477569327, 0.0752087673073713, 0.515023315649994, 
    -1.58192647387053), value = 62.7906810638083, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.1583603471131, -1.72499188266784, 
    228.222981924375, -25.4694874044503, -1.72499188266784, 45.8351522354405, 
    -30.0676571143299, -13.8070468906903, 228.222981924375, -30.0676571143299, 
    3932.45172319823, -387.796147727215, -25.4694874044503, -13.8070468906903, 
    -387.796147727215, 264.213653601075), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.462373477569327, 0.0752087673073713
    ), logphi = c(0.515023315649994, -1.58192647387053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_51 = structure(list(
    par = c(-0.182343078526009, 0.234339507248677, 0.50120725596643, 
    -1.6053432600842), value = 62.5204325245442, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.198355946077, -3.84001378961329, 
    217.772011076534, -10.9178314513514, -3.84001378961329, 54.1061655887631, 
    -16.0915083515789, -13.6689035228343, 217.772011076534, -16.0915083515789, 
    4132.37168040048, -307.674585061868, -10.9178314513514, -13.6689035228343, 
    -307.674585061868, 255.848673646142), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.182343078526009, 0.234339507248677
    ), logphi = c(0.50120725596643, -1.6053432600842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_52 = structure(list(
    par = c(-0.349662473812938, 0.0647192447097538, 0.502105441601367, 
    -1.69911363991784), value = 63.7895363584204, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.0048060410936, -7.00165414357912, 
    246.624047537836, -19.7307160227922, -7.00165414357912, 39.6089860892346, 
    -25.9792733583453, -13.7201529639697, 246.624047537836, -25.9792733583453, 
    5306.19786134601, -403.474813612803, -19.7307160227922, -13.7201529639697, 
    -403.474813612803, 305.214543523391), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349662473812938, 0.0647192447097538
    ), logphi = c(0.502105441601367, -1.69911363991784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_53 = structure(list(
    par = c(-0.175492437153771, -0.0737335010626121, 0.481179801491994, 
    -1.66928065530496), value = 74.8078418032833, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.3997670904982, -8.93943509794326, 
    224.249931370935, -10.0301448089368, -8.93943509794326, 34.9305011013712, 
    -18.818201294124, -10.6841271474423, 224.249931370935, -18.818201294124, 
    4948.97169055974, -278.343946099824, -10.0301448089368, -10.6841271474423, 
    -278.343946099824, 278.804195119164), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175492437153771, -0.0737335010626121
    ), logphi = c(0.481179801491994, -1.66928065530496)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_54 = structure(list(
    par = c(-0.435460628361453, -0.153719621680589, 0.492146767461763, 
    -1.71781403716654), value = 61.6292498844484, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.4782039916458, -7.06861728261288, 
    248.689391749934, -22.7341692387029, -7.06861728261288, 30.5534580355982, 
    -30.7286925256278, -11.4963069002272, 248.689391749934, -30.7286925256278, 
    5626.6300850929, -408.816528228328, -22.7341692387029, -11.4963069002272, 
    -408.816528228328, 314.757660966336), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.435460628361453, -0.153719621680589
    ), logphi = c(0.492146767461763, -1.71781403716654)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_55 = structure(list(
    par = c(0.0097750615984227, -0.170512416573833, 0.476117166356362, 
    -1.62926618409812), value = 92.9182287382964, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.453996109617, -15.0263136546869, 
    199.787857791733, -3.3122809153241, -15.0263136546869, 26.846555847726, 
    -17.2943936043168, -8.36468046827576, 199.787857791733, -17.2943936043168, 
    4521.09848581017, -195.960849143972, -3.3122809153241, -8.36468046827576, 
    -195.960849143972, 258.923848562631), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0097750615984227, -0.170512416573833
    ), logphi = c(0.476117166356362, -1.62926618409812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_56 = structure(list(
    par = c(-0.262561478644221, -0.22239667581205, 0.501433677983966, 
    -1.5115787287888), value = 97.4954792623826, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.9968588886347, -8.32915228343722, 
    198.564251192579, -16.2931314591219, -8.32915228343722, 26.9172541962348, 
    -25.6565928431485, -8.78039232610206, 198.564251192579, -25.6565928431485, 
    3314.4630488664, -254.602118797465, -16.2931314591219, -8.78039232610206, 
    -254.602118797465, 220.163715670907), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262561478644221, -0.22239667581205
    ), logphi = c(0.501433677983966, -1.5115787287888)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_57 = structure(list(
    par = c(-0.551894647114768, 0.00930264547749431, 0.542101104800062, 
    -1.60549269433436), value = 65.712346707113, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.8183254560215, -6.35752821764868, 
    234.436903252089, -35.0621570621712, -6.35752821764868, 36.9943520652782, 
    -47.236562810582, -11.7075248855514, 234.436903252089, -47.236562810582, 
    4281.05504668252, -502.31377234411, -35.0621570621712, -11.7075248855514, 
    -502.31377234411, 301.920055001403), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.551894647114768, 0.00930264547749431
    ), logphi = c(0.542101104800062, -1.60549269433436)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_58 = structure(list(
    par = c(-0.475624384469723, -0.0431582623204049, 0.488203883199637, 
    -1.75571378836681), value = 45.039512259454, counts = structure(c(349L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.2333158295926, -7.3638451674185, 
    260.682739980922, -23.0966068812677, -7.3638451674185, 32.2886581543003, 
    -27.7116140772193, -13.4867333549948, 260.682739980922, -27.7116140772193, 
    6102.08731618655, -441.274203735631, -23.0966068812677, -13.4867333549948, 
    -441.274203735631, 326.407710243615), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475624384469723, -0.0431582623204049
    ), logphi = c(0.488203883199637, -1.75571378836681)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_59 = structure(list(
    par = c(-0.444823850716772, -0.151061980322707, 0.494677663498235, 
    -1.67396500631575), value = 63.0626255654335, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.0874440892678, -6.52168003867359, 
    240.90332733806, -23.1526101863722, -6.52168003867359, 30.2697622345249, 
    -30.5754676084291, -11.4663470647258, 240.90332733806, -30.5754676084291, 
    5047.85054922507, -387.730820197163, -23.1526101863722, -11.4663470647258, 
    -387.730820197163, 297.332425514441), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.444823850716772, -0.151061980322707
    ), logphi = c(0.494677663498235, -1.67396500631575)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_60 = structure(list(
    par = c(-0.360764834307692, 0.0982873878798515, 0.524103114991274, 
    -1.5792695482379), value = 74.6332914735654, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.5906792125438, -4.92070664392941, 
    224.34889886469, -23.4880192184761, -4.92070664392941, 43.6422441048023, 
    -31.2228197181241, -13.0308286010461, 224.34889886469, -31.2228197181241, 
    3921.42533064899, -387.528049271779, -23.4880192184761, -13.0308286010461, 
    -387.528049271779, 265.180082539729), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360764834307692, 0.0982873878798515
    ), logphi = c(0.524103114991274, -1.5792695482379)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_61 = structure(list(
    par = c(-0.224038398209821, -0.158330926304232, 0.479757277582211, 
    -1.65517252557964), value = 74.883672975334, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.4141780476996, -9.67844209753821, 
    223.602273027979, -11.9664920177343, -9.67844209753821, 28.3314581537297, 
    -20.6423340003425, -10.1854846512595, 223.602273027979, -20.6423340003425, 
    4789.94456204873, -275.420676864258, -11.9664920177343, -10.1854846512595, 
    -275.420676864258, 273.748539324714), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224038398209821, -0.158330926304232
    ), logphi = c(0.479757277582211, -1.65517252557964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_62 = structure(list(
    par = c(-0.135086385863308, -0.129098416954701, 0.496704711968285, 
    -1.63988671498327), value = 79.0690097804882, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.5729419947174, -11.6988099492232, 
    217.571673246653, -11.7624585165288, -11.6988099492232, 30.6522197170978, 
    -24.1492974204505, -9.66820633507837, 217.571673246653, -24.1492974204505, 
    4651.32351202158, -290.381497244141, -11.7624585165288, -9.66820633507837, 
    -290.381497244141, 274.766366622714), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135086385863308, -0.129098416954701
    ), logphi = c(0.496704711968285, -1.63988671498327)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_63 = structure(list(
    par = c(-0.469235716345709, -0.25011371616273, 0.506799816684801, 
    -1.46894436949011), value = 96.7446793111708, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.2307429889358, -4.44776438612848, 
    197.917467041009, -23.7839516579186, -4.44776438612848, 26.2093054352874, 
    -28.7059778045773, -8.97501091223774, 197.917467041009, -28.7059778045773, 
    2937.82437676882, -279.340105326042, -23.7839516579186, -8.97501091223774, 
    -279.340105326042, 207.924752068323), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.469235716345709, -0.25011371616273
    ), logphi = c(0.506799816684801, -1.46894436949011)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_64 = structure(list(
    par = c(-0.203316980942536, 0.0994845798980488, 0.485937450429429, 
    -1.53220592426696), value = 82.4148256905847, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.606756497816, -4.16655229784624, 
    199.874393395305, -9.00973529027738, -4.16655229784624, 43.7426960360199, 
    -16.2391401836715, -11.867790387754, 199.874393395305, -16.2391401836715, 
    3400.45036033843, -224.468841325987, -9.00973529027738, -11.867790387754, 
    -224.468841325987, 215.899333188219), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203316980942536, 0.0994845798980488
    ), logphi = c(0.485937450429429, -1.53220592426696)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_65 = structure(list(
    par = c(-0.226047599921463, -0.0638580898152013, 0.510385749928352, 
    -1.59696634054256), value = 90.1139631493609, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.4982853115446, -9.56001868246403, 
    217.461779357109, -16.9429367442575, -9.56001868246403, 33.9154767203809, 
    -28.2238066624529, -10.5159520735754, 217.461779357109, -28.2238066624529, 
    4155.82972300399, -325.978626957379, -16.9429367442575, -10.5159520735754, 
    -325.978626957379, 263.409473880927), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226047599921463, -0.0638580898152013
    ), logphi = c(0.510385749928352, -1.59696634054256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_66 = structure(list(
    par = c(-0.232927822862459, 0.0675894427069253, 0.482363086260905, 
    -1.62557028257174), value = 65.1434009181425, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.0983576372173, -4.78422325400629, 
    220.893701932567, -10.5784014863275, -4.78422325400629, 42.6574934984103, 
    -15.7657992048144, -12.457136065791, 220.893701932567, -15.7657992048144, 
    4367.78441557095, -274.731853833643, -10.5784014863275, -12.457136065791, 
    -274.731853833643, 257.728373647126), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232927822862459, 0.0675894427069253
    ), logphi = c(0.482363086260905, -1.62557028257174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_67 = structure(list(
    par = c(-0.269275493098302, -0.216074113763115, 0.480630697454975, 
    -1.62038561491834), value = 81.7834020827408, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.9512763571076, -8.700134159767, 
    218.892455833952, -13.7058550429003, -8.700134159767, 25.9945042166976, 
    -22.1244801679177, -9.79778744536475, 218.892455833952, -22.1244801679177, 
    4390.67383029013, -265.373008808467, -13.7058550429003, -9.79778744536475, 
    -265.373008808467, 259.803358993338), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269275493098302, -0.216074113763115
    ), logphi = c(0.480630697454975, -1.62038561491834)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_68 = structure(list(
    par = c(-0.19959174694546, -0.148615186272048, 0.466295367279991, 
    -1.58663315676856), value = 89.4394593190303, counts = structure(c(315L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7025544187125, -7.68367775094703, 
    205.905060820299, -7.51702294365941, -7.68367775094703, 29.7388810146515, 
    -16.179947216699, -9.86615875220309, 205.905060820299, -16.179947216699, 
    3969.02184417414, -193.011907832386, -7.51702294365941, -9.86615875220309, 
    -193.011907832386, 233.873040880184), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19959174694546, -0.148615186272048
    ), logphi = c(0.466295367279991, -1.58663315676856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_69 = structure(list(
    par = c(-0.351727795097802, -0.089414158569291, 0.480666843264022, 
    -1.63870858825368), value = 70.2928162684462, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.1340181244639, -6.54348425399576, 
    229.230240645251, -16.0235798354336, -6.54348425399576, 30.9782397813763, 
    -21.1179056819333, -11.8214648292536, 229.230240645251, -21.1179056819333, 
    4552.03947095484, -301.627203118215, -16.0235798354336, -11.8214648292536, 
    -301.627203118215, 267.44640369003), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351727795097802, -0.089414158569291
    ), logphi = c(0.480666843264022, -1.63870858825368)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_70 = structure(list(
    par = c(-0.317246702250606, 0.232529074078668, 0.516980606486482, 
    -1.68427073843023), value = 51.3284826105226, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.4334843824774, -4.83728656419657, 
    246.311103548891, -19.8847687773451, -4.83728656419657, 51.2664994509748, 
    -24.5523596937858, -15.596164595344, 246.311103548891, -24.5523596937858, 
    5067.94258934562, -428.930099333868, -19.8847687773451, -15.596164595344, 
    -428.930099333868, 302.897133297009), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317246702250606, 0.232529074078668
    ), logphi = c(0.516980606486482, -1.68427073843023)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_71 = structure(list(
    par = c(-0.250342755996113, -0.0402779613210894, 0.501753161265082, 
    -1.68365161863738), value = 71.2049613518319, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.9256293388455, -9.97696845672635, 
    235.695459927854, -16.6313597613765, -9.97696845672635, 34.0679147043943, 
    -26.9106608712377, -11.496254217036, 235.695459927854, -26.9106608712377, 
    5159.57288233793, -361.290992890062, -16.6313597613765, -11.496254217036, 
    -361.290992890062, 297.892349905737), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250342755996113, -0.0402779613210894
    ), logphi = c(0.501753161265082, -1.68365161863738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_72 = structure(list(
    par = c(-0.447158945628902, -0.432666695967493, 0.501080109054292, 
    -1.68345664697606), value = 88.1773881872239, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.0381441193181, -10.0221647763021, 
    234.554488756089, -25.4390135623339, -10.0221647763021, 16.7434193585336, 
    -35.4705844429759, -7.7951890649075, 234.554488756089, -35.4705844429759, 
    5296.51726571601, -404.6289088393, -25.4390135623339, -7.7951890649075, 
    -404.6289088393, 311.622830306391), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.447158945628902, -0.432666695967493
    ), logphi = c(0.501080109054292, -1.68345664697606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_73 = structure(list(
    par = c(-0.0935807938537741, 0.0424005409725727, 0.477978826915524, 
    -1.67670828365706), value = 71.2518850366373, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.13922564112, -9.90971653536121, 
    219.352417243357, -5.62773250933901, -9.90971653536121, 40.0210939197621, 
    -13.8513480614222, -11.0219220701424, 219.352417243357, -13.8513480614222, 
    5013.3483000323, -258.324705042057, -5.62773250933901, -11.0219220701424, 
    -258.324705042057, 277.470813848879), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0935807938537741, 0.0424005409725727
    ), logphi = c(0.477978826915524, -1.67670828365706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_74 = structure(list(
    par = c(-0.148315574104043, 0.108201977842073, 0.497192275078299, 
    -1.64210747855842), value = 68.469828309597, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.4351405481098, -8.02978308911406, 
    221.742173078354, -10.4389917918724, -8.02978308911406, 45.1404323484894, 
    -19.1714388435571, -12.1991778829766, 221.742173078354, -19.1714388435571, 
    4596.05750781122, -305.216998556901, -10.4389917918724, -12.1991778829766, 
    -305.216998556901, 272.00327478738), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148315574104043, 0.108201977842073
    ), logphi = c(0.497192275078299, -1.64210747855842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_75 = structure(list(
    par = c(-0.3794329683224, -0.106568802615114, 0.495123244582189, 
    -1.60871459734878), value = 77.3395177761541, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.9670512711166, -6.63839349712703, 
    225.715670705284, -19.7699610637869, -6.63839349712703, 31.0255565203477, 
    -26.6240395205841, -11.4269424447144, 225.715670705284, -26.6240395205841, 
    4250.83553765049, -327.321512870071, -19.7699610637869, -11.4269424447144, 
    -327.321512870071, 264.015459237044), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3794329683224, -0.106568802615114
    ), logphi = c(0.495123244582189, -1.60871459734878)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_76 = structure(list(
    par = c(-0.567464650740415, -0.336057544714249, 0.545673762844788, 
    -1.58914004981959), value = 84.4625050575491, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.6333766854352, -8.26891441363387, 
    219.813326978624, -36.3762581958582, -8.26891441363387, 22.3044043856646, 
    -48.6971405386782, -6.291481573939, 219.813326978624, -48.6971405386782, 
    4235.80486087616, -497.757468814086, -36.3762581958582, -6.291481573939, 
    -497.757468814086, 303.60444585753), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.567464650740415, -0.336057544714249
    ), logphi = c(0.545673762844788, -1.58914004981959)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_77 = structure(list(
    par = c(-0.355604771722027, 0.133639993368355, 0.508314161354146, 
    -1.59820720815602), value = 61.9393299520565, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.3505655891479, -1.76170117072161, 
    227.167953894991, -19.718202471708, -1.76170117072161, 49.3108642807272, 
    -24.1086996446427, -14.0986507783936, 227.167953894991, -24.1086996446427, 
    4078.06353684847, -357.552801537153, -19.718202471708, -14.0986507783936, 
    -357.552801537153, 262.688883374551), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355604771722027, 0.133639993368355
    ), logphi = c(0.508314161354146, -1.59820720815602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_78 = structure(list(
    par = c(-0.453812233079839, 0.0873060280255617, 0.510575021953463, 
    -1.49303532738807), value = 72.8477900949662, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.5508723348401, 1.40082184785228, 
    207.398988365526, -22.6074791456199, 1.40082184785228, 51.2664540934793, 
    -24.9445388398328, -13.2358451612191, 207.398988365526, -24.9445388398328, 
    3061.38346734741, -310.099255404594, -22.6074791456199, -13.2358451612191, 
    -310.099255404594, 219.51685213395), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.453812233079839, 0.0873060280255617
    ), logphi = c(0.510575021953463, -1.49303532738807)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_79 = structure(list(
    par = c(-0.254372021643777, -0.165779778666384, 0.500256950917652, 
    -1.61969746704324), value = 84.6263054434572, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.6958749935188, -10.1744570528695, 
    220.892466412437, -16.7627127893866, -10.1744570528695, 27.2467579200963, 
    -27.3095288321201, -9.89673548446035, 220.892466412437, -27.3095288321201, 
    4419.88206941701, -315.985048899847, -16.7627127893866, -9.89673548446035, 
    -315.985048899847, 270.346068962368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.254372021643777, -0.165779778666384
    ), logphi = c(0.500256950917652, -1.61969746704324)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_80 = structure(list(
    par = c(-0.211837415464789, -0.224434422412739, 0.511201608256889, 
    -1.64130145193221), value = 83.4891016882151, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.8959429196298, -12.257358452672, 
    222.310564485184, -17.7981601900967, -12.257358452672, 25.2373938813832, 
    -30.8961044837019, -8.84634678932628, 222.310564485184, -30.8961044837019, 
    4720.05580763124, -345.16624136316, -17.7981601900967, -8.84634678932628, 
    -345.16624136316, 286.574297152953), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211837415464789, -0.224434422412739
    ), logphi = c(0.511201608256889, -1.64130145193221)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_81 = structure(list(
    par = c(-0.438746280061077, 0.0557448873500577, 0.532319048592095, 
    -1.55291141138096), value = 74.340926976379, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.6139996143429, -5.14643828353201, 
    221.442053334187, -28.1507345771814, -5.14643828353201, 39.9238599726459, 
    -35.7885049915296, -12.3351589031984, 221.442053334187, -35.7885049915296, 
    3677.61038243231, -408.071232094187, -28.1507345771814, -12.3351589031984, 
    -408.071232094187, 262.177108844242), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438746280061077, 0.0557448873500577
    ), logphi = c(0.532319048592095, -1.55291141138096)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_82 = structure(list(
    par = c(-0.336881877444773, -0.242178636033118, 0.504327400415723, 
    -1.58501755092958), value = 84.7677189575252, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.6269554125549, -8.24766155460566, 
    216.996442517825, -20.5452366000003, -8.24766155460566, 26.2371688606322, 
    -29.7962157667087, -9.23602029700987, 216.996442517825, -29.7962157667087, 
    4059.10566203005, -322.992597133975, -20.5452366000003, -9.23602029700987, 
    -322.992597133975, 259.634413499299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336881877444773, -0.242178636033118
    ), logphi = c(0.504327400415723, -1.58501755092958)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_83 = structure(list(
    par = c(-0.359481371909572, 0.0424176538056672, 0.522750540834492, 
    -1.51017909246048), value = 82.1928827414269, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.1094882139166, -5.02942839020193, 
    208.100644080389, -22.6847304478639, -5.02942839020193, 39.250108699207, 
    -29.602137157525, -11.6874987448057, 208.100644080389, -29.602137157525, 
    3259.07244953072, -335.266877433682, -22.6847304478639, -11.6874987448057, 
    -335.266877433682, 232.015124979057), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359481371909572, 0.0424176538056672
    ), logphi = c(0.522750540834492, -1.51017909246048)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_84 = structure(list(
    par = c(-0.142006442573694, 0.220276940069647, 0.511754139393224, 
    -1.61648607213712), value = 61.3278490920333, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.889360785672, -5.45904631898964, 
    219.620052035907, -11.9874792003927, -5.45904631898964, 56.4399856539666, 
    -20.5360956258005, -13.1872528008614, 219.620052035907, -20.5360956258005, 
    4286.3769250463, -331.904977291408, -11.9874792003927, -13.1872528008614, 
    -331.904977291408, 266.384333167835), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142006442573694, 0.220276940069647
    ), logphi = c(0.511754139393224, -1.61648607213712)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_85 = structure(list(
    par = c(-0.370318032103321, 0.122706569913325, 0.516425246652219, 
    -1.50998927387503), value = 69.4419768663681, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.228116660209, -0.963043621737825, 
    208.767231349327, -21.0251906267445, -0.963043621737825, 
    48.0388285382105, -25.5766946679614, -13.0546584440339, 208.767231349327, 
    -25.5766946679614, 3219.00384466289, -322.69149637898, -21.0251906267445, 
    -13.0546584440339, -322.69149637898, 226.755007254553), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370318032103321, 0.122706569913325
    ), logphi = c(0.516425246652219, -1.50998927387503)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_86 = structure(list(
    par = c(-0.278957084073917, 0.109777233586824, 0.476665106386187, 
    -1.63379320456205), value = 58.5315633702123, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.8772272602366, -2.66703938756052, 
    224.688963456288, -10.6369627790315, -2.66703938756052, 45.1014019198226, 
    -12.1517499795942, -13.3672970275001, 224.688963456288, -12.1517499795942, 
    4421.70351118421, -276.664184441167, -10.6369627790315, -13.3672970275001, 
    -276.664184441167, 257.491403310439), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278957084073917, 0.109777233586824
    ), logphi = c(0.476665106386187, -1.63379320456205)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_87 = structure(list(
    par = c(-0.403420017854569, 0.0189273462199106, 0.502963538607426, 
    -1.69724630223049), value = 48.5048561387453, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.7715939100385, -5.86791735912584, 
    248.0867513448, -22.3194136381721, -5.86791735912584, 40.8933297819658, 
    -29.2843185611957, -13.4469476034127, 248.0867513448, -29.2843185611957, 
    5302.06213414885, -418.847460483818, -22.3194136381721, -13.4469476034127, 
    -418.847460483818, 307.967984195301), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403420017854569, 0.0189273462199106
    ), logphi = c(0.502963538607426, -1.69724630223049)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_88 = structure(list(
    par = c(-0.319226039312709, -0.0468058146047, 0.486842295641534, 
    -1.5856972263091), value = 84.373176719843, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.9831249923675, -5.54836510247014, 
    217.582310380493, -15.0946939267982, -5.54836510247014, 34.3649921070721, 
    -21.2451445946726, -11.7232359588826, 217.582310380493, -21.2451445946726, 
    3963.26221859056, -277.81400882354, -15.0946939267982, -11.7232359588826, 
    -277.81400882354, 245.307493624836), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319226039312709, -0.0468058146047
    ), logphi = c(0.486842295641534, -1.5856972263091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_89 = structure(list(
    par = c(-0.439696483225573, -0.0295551679953518, 0.508088655643301, 
    -1.56704387343266), value = 67.8450248296601, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.0484676832555, -3.31030348732497, 
    221.800395056704, -23.6424152468828, -3.31030348732497, 38.2342747649034, 
    -29.4274653391824, -12.2205010715248, 221.800395056704, -29.4274653391824, 
    3801.96737495453, -350.358071514734, -23.6424152468828, -12.2205010715248, 
    -350.358071514734, 253.191572937794), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.439696483225573, -0.0295551679953518
    ), logphi = c(0.508088655643301, -1.56704387343266)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_90 = structure(list(
    par = c(-0.28344240064034, -0.063545239022054, 0.508304362951534, 
    -1.49787537320896), value = 93.3921376976069, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.7949799443818, -6.07192903245846, 
    199.312514908456, -17.3788486197424, -6.07192903245846, 35.7257674323819, 
    -25.9173511665267, -10.2494957801014, 199.312514908456, -25.9173511665267, 
    3160.53929475402, -272.657385238517, -17.3788486197424, -10.2494957801014, 
    -272.657385238517, 216.252740035117), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28344240064034, -0.063545239022054
    ), logphi = c(0.508304362951534, -1.49787537320896)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_91 = structure(list(
    par = c(-0.130260546260388, 0.0147451171634545, 0.485611415790288, 
    -1.63927922094348), value = 69.5124281898829, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.588342288432, -8.98705143015377, 
    216.679338990389, -8.31201364803746, -8.98705143015377, 39.2879028048299, 
    -17.7712250355455, -11.0595538664882, 216.679338990389, -17.7712250355455, 
    4574.80140562438, -265.299537643315, -8.31201364803746, -11.0595538664882, 
    -265.299537643315, 265.871265998641), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130260546260388, 0.0147451171634545
    ), logphi = c(0.485611415790288, -1.63927922094348)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_92 = structure(list(
    par = c(-0.0453433757153507, 0.330456217586449, 0.48130259405203, 
    -1.50208454328963), value = 72.9960362418781, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.854192990156, -0.263562199620537, 
    180.594424037395, -0.773391848341021, -0.263562199620537, 
    64.9537091952368, -8.59121583474121, -11.7737242320004, 180.594424037395, 
    -8.59121583474121, 3095.86386823568, -178.608269060021, -0.773391848341021, 
    -11.7737242320004, -178.608269060021, 196.033434146869), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0453433757153507, 0.330456217586449
    ), logphi = c(0.48130259405203, -1.50208454328963)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_93 = structure(list(
    par = c(-0.506566318908214, -0.214779100408518, 0.527360142405374, 
    -1.54377127304386), value = 91.907519344675, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.3909455960504, -6.48716875062405, 
    215.609719187881, -30.5496184722642, -6.48716875062405, 27.0751145272641, 
    -38.5659366664015, -8.94442843524246, 215.609719187881, -38.5659366664015, 
    3669.05259199513, -397.414356390513, -30.5496184722642, -8.94442843524246, 
    -397.414356390513, 261.166759042197), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.506566318908214, -0.214779100408518
    ), logphi = c(0.527360142405374, -1.54377127304386)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_94 = structure(list(
    par = c(-0.276553905475798, -0.117274446059919, 0.487642305984867, 
    -1.55636733188247), value = 93.0899233576682, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.7884225490061, -7.11511413697963, 
    208.339409159208, -13.8837463588004, -7.11511413697963, 30.7134429533562, 
    -22.0679957436687, -10.455304691348, 208.339409159208, -22.0679957436687, 
    3688.96098461136, -249.929661851667, -13.8837463588004, -10.455304691348, 
    -249.929661851667, 232.193541496173), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276553905475798, -0.117274446059919
    ), logphi = c(0.487642305984867, -1.55636733188247)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_95 = structure(list(
    par = c(-0.0888651408922857, -0.0260270282600276, 0.490531526959012, 
    -1.53916562791386), value = 92.347226579187, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.975545393098, -10.1307957720564, 
    194.353755912147, -7.39513862058061, -10.1307957720564, 36.0498906459839, 
    -19.7807064239441, -9.8340829097765, 194.353755912147, -19.7807064239441, 
    3532.53812608401, -214.542593933942, -7.39513862058061, -9.8340829097765, 
    -214.542593933942, 222.658877262916), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0888651408922857, -0.0260270282600276
    ), logphi = c(0.490531526959012, -1.53916562791386)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_96 = structure(list(
    par = c(-0.311249539103005, 0.181114891234394, 0.489429462220091, 
    -1.6957112084996), value = 53.2570069954584, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.3823953267753, -4.29993248651783, 
    243.316328646159, -14.3927248030806, -4.29993248651783, 45.2775191206456, 
    -13.6079119421595, -14.9959521786869, 243.316328646159, -13.6079119421595, 
    5177.39361388081, -361.312952317228, -14.3927248030806, -14.9959521786869, 
    -361.312952317228, 291.792312454575), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311249539103005, 0.181114891234394
    ), logphi = c(0.489429462220091, -1.6957112084996)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_97 = structure(list(
    par = c(-0.208134232187874, 0.0121306879833677, 0.486676736028027, 
    -1.54398174690723), value = 84.5595065169418, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.698040164104, -4.62612372587046, 
    202.572404461421, -10.2237340868783, -4.62612372587046, 42.2410035412213, 
    -18.6910277939489, -11.1617826892285, 202.572404461421, -18.6910277939489, 
    3538.72194200733, -230.959098367123, -10.2237340868783, -11.1617826892285, 
    -230.959098367123, 223.202922036592), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208134232187874, 0.0121306879833677
    ), logphi = c(0.486676736028027, -1.54398174690723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_98 = structure(list(
    par = c(-0.218433670375857, 0.0314634421530174, 0.48797434657968, 
    -1.57485150365071), value = 82.9534691037634, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.1882298322366, -5.90983859183325, 
    210.129038297424, -11.0386777709692, -5.90983859183325, 39.5310288290318, 
    -18.7405981471045, -11.6538131198496, 210.129038297424, -18.7405981471045, 
    3843.93723523146, -254.772892571253, -11.0386777709692, -11.6538131198496, 
    -254.772892571253, 238.133386766037), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218433670375857, 0.0314634421530174
    ), logphi = c(0.48797434657968, -1.57485150365071)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_99 = structure(list(
    par = c(-0.248720867901672, 0.127076187302893, 0.488084802632133, 
    -1.60841105526134), value = 62.6725087860854, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7372570843424, -3.08362257150918, 
    219.758411530435, -11.5734716903404, -3.08362257150918, 47.4647868600186, 
    -15.8059089709894, -13.1741448337053, 219.758411530435, -15.8059089709894, 
    4164.41387868183, -285.249950099598, -11.5734716903404, -13.1741448337053, 
    -285.249950099598, 252.368800927272), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.248720867901672, 0.127076187302893
    ), logphi = c(0.488084802632133, -1.60841105526134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_100 = structure(list(
    par = c(-0.422095491430018, 0.0231095849299902, 0.511413366553322, 
    -1.63675349946268), value = 66.72594784014, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.4010654888998, -6.18291010212602, 
    237.130467080959, -24.2042368867601, -6.18291010212602, 37.0549401651488, 
    -31.4861967503077, -13.1623714434426, 237.130467080959, -31.4861967503077, 
    4563.68336680768, -405.775068454517, -24.2042368867601, -13.1623714434426, 
    -405.775068454517, 287.284383642117), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.422095491430018, 0.0231095849299902
    ), logphi = c(0.511413366553322, -1.63675349946268)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_101 = structure(list(
    par = c(-0.295019357825493, -0.191948865157868, 0.484826517536805, 
    -1.54325170005885), value = 87.0446136510917, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.1089379016516, -6.62108307381004, 
    205.360996083925, -14.2141197692069, -6.62108307381004, 28.3495375050791, 
    -22.3168324069434, -9.78111579463814, 205.360996083925, -22.3168324069434, 
    3569.31485523404, -235.966949102107, -14.2141197692069, -9.78111579463814, 
    -235.966949102107, 225.628553319979), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.295019357825493, -0.191948865157868
    ), logphi = c(0.484826517536805, -1.54325170005885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_102 = structure(list(
    par = c(-0.352103137829347, 0.00615325960801525, 0.52112954387417, 
    -1.5486806234866), value = 87.0073639370846, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.3144379959758, -6.56300408508059, 
    215.606509350152, -22.8161202215915, -6.56300408508059, 36.6477344648786, 
    -31.1279819378285, -11.5411056924586, 215.606509350152, -31.1279819378285, 
    3636.7793362615, -354.741271207715, -22.8161202215915, -11.5411056924586, 
    -354.741271207715, 249.798913340982), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.352103137829347, 0.00615325960801525
    ), logphi = c(0.52112954387417, -1.5486806234866)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_103 = structure(list(
    par = c(-0.595291346949169, -0.00742710900277067, 0.522184525223401, 
    -1.58858379754922), value = 63.7306701798211, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.1043209256654, -2.77149068850235, 
    232.553147494485, -32.5419325672982, -2.77149068850235, 38.6068345790136, 
    -38.8242874080902, -12.9271214994731, 232.553147494485, -38.8242874080902, 
    4054.09350171837, -444.044243426589, -32.5419325672982, -12.9271214994731, 
    -444.044243426589, 280.692662446569), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.595291346949169, -0.00742710900277067
    ), logphi = c(0.522184525223401, -1.58858379754922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_104 = structure(list(
    par = c(-0.354115738408285, -0.000229573237922149, 0.490189477675711, 
    -1.6313768874094), value = 59.4497224801802, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.7490997616425, -3.89289335700482, 
    230.309205903723, -17.2983575170704, -3.89289335700482, 40.265256718186, 
    -22.1038871330848, -12.7909871485699, 230.309205903723, -22.1038871330848, 
    4459.83821911433, -326.237922105399, -17.2983575170704, -12.7909871485699, 
    -326.237922105399, 268.750488642056), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354115738408285, -0.000229573237922149
    ), logphi = c(0.490189477675711, -1.6313768874094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_105 = structure(list(
    par = c(-0.230110509367513, 0.112753936458793, 0.487621837200059, 
    -1.6748985016037), value = 56.2617937117871, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.036152467922, -5.39985517100661, 
    232.422654638853, -11.6001338721361, -5.39985517100661, 45.4614535208009, 
    -15.7260521138625, -13.181048890587, 232.422654638853, -15.7260521138625, 
    4954.63059527523, -319.63479748498, -11.6001338721361, -13.181048890587, 
    -319.63479748498, 281.947716972653), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230110509367513, 0.112753936458793
    ), logphi = c(0.487621837200059, -1.6748985016037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_106 = structure(list(
    par = c(-0.170413548486956, -0.0940271736806275, 0.474939807407872, 
    -1.58646742040698), value = 91.1921485759913, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.376590101092, -8.62815146263074, 
    205.998094024551, -7.8864235959486, -8.62815146263074, 31.3669891873758, 
    -17.3645112901966, -10.1377688075388, 205.998094024551, -17.3645112901966, 
    3981.35672897837, -212.110462651793, -7.8864235959486, -10.1377688075388, 
    -212.110462651793, 237.733301979404), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170413548486956, -0.0940271736806275
    ), logphi = c(0.474939807407872, -1.58646742040698)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_107 = structure(list(
    par = c(-0.262184494037812, -0.103662292941744, 0.491480973740013, 
    -1.58291879140357), value = 83.7409552660934, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.4951355532878, -7.33240196026941, 
    213.789232574868, -14.4474991934374, -7.33240196026941, 32.5376932863719, 
    -23.1676620181531, -10.6018566992105, 213.789232574868, -23.1676620181531, 
    3971.28605282404, -274.269248780712, -14.4474991934374, -10.6018566992105, 
    -274.269248780712, 246.85681771075), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262184494037812, -0.103662292941744
    ), logphi = c(0.491480973740013, -1.58291879140357)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_108 = structure(list(
    par = c(-0.281738416923303, -0.111698380951057, 0.510806636328084, 
    -1.65307139972028), value = 76.9497872108743, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.278326145906, -9.9157986213072, 
    230.745115253228, -19.8001467275333, -9.9157986213072, 31.6508415636463, 
    -31.6605820600557, -10.5120907747391, 230.745115253228, -31.6605820600557, 
    4820.60763953029, -372.934786060597, -19.8001467275333, -10.5120907747391, 
    -372.934786060597, 291.903001183869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281738416923303, -0.111698380951057
    ), logphi = c(0.510806636328084, -1.65307139972028)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_109 = structure(list(
    par = c(-0.262441340196185, -0.181217929540418, 0.499182271946289, 
    -1.659362013925), value = 82.3507504617501, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.0497016508502, -10.9910401064894, 
    228.652617145997, -17.2990786726501, -10.9910401064894, 26.0940235357054, 
    -28.1851368555408, -9.92195390914219, 228.652617145997, -28.1851368555408, 
    4896.73104787158, -338.756216708092, -17.2990786726501, -9.92195390914219, 
    -338.756216708092, 288.554062642277), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262441340196185, -0.181217929540418
    ), logphi = c(0.499182271946289, -1.659362013925)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_110 = structure(list(
    par = c(-0.251939466036645, -0.0635208705000656, 0.512230207700657, 
    -1.6029791254458), value = 77.3999115512803, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.5045867683989, -9.34553133191685, 
    220.294167551316, -18.308123427957, -9.34553133191685, 34.3301237109017, 
    -29.4119184829356, -10.6684214955521, 220.294167551316, -29.4119184829356, 
    4223.20829141043, -340.817167348462, -18.308123427957, -10.6684214955521, 
    -340.817167348462, 268.06567796811), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251939466036645, -0.0635208705000656
    ), logphi = c(0.512230207700657, -1.6029791254458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_111 = structure(list(
    par = c(-0.370790360181639, 0.290714246392722, 0.500037827550938, 
    -1.4852914316512), value = 50.9699600190011, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.260017069535, 9.79493383113095, 
    200.85082525334, -15.1453313108618, 9.79493383113095, 71.2971360243841, 
    -13.1174331130524, -15.1367316938433, 200.85082525334, -13.1174331130524, 
    2917.8304638755, -268.079573791269, -15.1453313108618, -15.1367316938433, 
    -268.079573791269, 201.691157684536), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370790360181639, 0.290714246392722
    ), logphi = c(0.500037827550938, -1.4852914316512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_112 = structure(list(
    par = c(-0.475860031424406, -0.419555439164881, 0.509203494418542, 
    -1.62776166932528), value = 91.3972292491291, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.4492323707577, -8.582641328303, 
    225.835806492825, -27.392865614928, -8.582641328303, 18.4136809231461, 
    -36.3871342408117, -7.62734483750194, 225.835806492825, -36.3871342408117, 
    4614.46656951736, -396.449194598247, -27.392865614928, -7.62734483750194, 
    -396.449194598247, 291.764997481181), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475860031424406, -0.419555439164881
    ), logphi = c(0.509203494418542, -1.62776166932528)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_113 = structure(list(
    par = c(-0.294368899052705, 0.034495697472079, 0.503263207700966, 
    -1.61731439373826), value = 65.6633651253915, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.6144488748973, -6.28803556423918, 
    226.171092098326, -17.4305799411911, -6.28803556423918, 39.8491614532759, 
    -25.0633440899151, -12.4595899428925, 226.171092098326, -25.0633440899151, 
    4325.56732973666, -338.914947697333, -17.4305799411911, -12.4595899428925, 
    -338.914947697333, 268.624309946119), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294368899052705, 0.034495697472079
    ), logphi = c(0.503263207700966, -1.61731439373826)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_114 = structure(list(
    par = c(-0.0411586255502002, -0.0234020018673852, 0.515436548142174, 
    -1.59834930544722), value = 89.9378047226577, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.0920354923521, -13.745516749708, 
    207.225911914577, -11.1649191367746, -13.745516749708, 37.2951483065265, 
    -26.6014189200803, -9.63201210524289, 207.225911914577, -26.6014189200803, 
    4190.4659956451, -300.149550675144, -11.1649191367746, -9.63201210524289, 
    -300.149550675144, 262.262861923546), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0411586255502002, -0.0234020018673852
    ), logphi = c(0.515436548142174, -1.59834930544722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_115 = structure(list(
    par = c(-0.0982316040800688, 0.00397371620262061, 0.513890889431143, 
    -1.50966857462979), value = 94.1266306964842, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.6797101358027, -11.2759172985477, 
    193.096796063941, -12.0384866626466, -11.2759172985477, 36.5943997095997, 
    -24.962109037574, -9.70355933560541, 193.096796063941, -24.962109037574, 
    3281.99633162995, -262.579250019712, -12.0384866626466, -9.70355933560541, 
    -262.579250019712, 220.803148977211), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0982316040800688, 0.00397371620262061
    ), logphi = c(0.513890889431143, -1.50966857462979)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_116 = structure(list(
    par = c(-0.360995314183807, -0.202933840333929, 0.500269653403674, 
    -1.53839532961387), value = 87.1781787150649, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.3678823905236, -6.16858163127176, 
    208.947726918041, -19.7300089439523, -6.16858163127176, 29.5032681485452, 
    -27.3730547206696, -9.67147375874333, 208.947726918041, -27.3730547206696, 
    3554.78711988866, -288.196358038562, -19.7300089439523, -9.67147375874333, 
    -288.196358038562, 234.308901259084), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360995314183807, -0.202933840333929
    ), logphi = c(0.500269653403674, -1.53839532961387)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_117 = structure(list(
    par = c(-0.332776361722492, -0.0420400156497622, 0.512936473786627, 
    -1.64613514192625), value = 64.9529720836831, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.9599438831299, -8.65143053729867, 
    233.607797316182, -21.6631208527218, -8.65143053729867, 33.9732753751321, 
    -32.1801866363103, -11.6175181865685, 233.607797316182, -32.1801866363103, 
    4711.49079195854, -390.211492440784, -21.6631208527218, -11.6175181865685, 
    -390.211492440784, 290.621085156317), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332776361722492, -0.0420400156497622
    ), logphi = c(0.512936473786627, -1.64613514192625)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_118 = structure(list(
    par = c(-0.417718273456027, -0.191110701240653, 0.516052685874899, 
    -1.52529700352885), value = 87.4904522251006, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.2948554249051, -5.85859632451502, 
    209.510856851836, -24.7726573689988, -5.85859632451502, 29.7337138768228, 
    -32.2263363905506, -9.425905581395, 209.510856851836, -32.2263363905506, 
    3455.64520064556, -334.413660105781, -24.7726573689988, -9.425905581395, 
    -334.413660105781, 239.868025214918), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.417718273456027, -0.191110701240653
    ), logphi = c(0.516052685874899, -1.52529700352885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_119 = structure(list(
    par = c(-0.338972340782519, -0.0302168293653968, 0.498697958072368, 
    -1.52128700580814), value = 83.8062470630873, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.8942802634604, -4.42282996715448, 
    206.334221939386, -17.2997117662277, -4.42282996715448, 36.2082658575957, 
    -23.7979252482035, -11.4122297745212, 206.334221939386, -23.7979252482035, 
    3340.00183395844, -272.980701968351, -17.2997117662277, -11.4122297745212, 
    -272.980701968351, 222.079172335299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338972340782519, -0.0302168293653968
    ), logphi = c(0.498697958072368, -1.52128700580814)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_120 = structure(list(
    par = c(-0.229388544376141, -0.0224412577231412, 0.502287848181999, 
    -1.54468053973838), value = 90.0457056331105, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.5147337034768, -7.41267420778513, 
    206.26713547145, -14.5490531533454, -7.41267420778513, 36.6581565351964, 
    -24.039320230429, -10.8252341703974, 206.26713547145, -24.039320230429, 
    3583.63309108611, -275.75281023573, -14.5490531533454, -10.8252341703974, 
    -275.75281023573, 233.317266232547), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229388544376141, -0.0224412577231412
    ), logphi = c(0.502287848181999, -1.54468053973838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_121 = structure(list(
    par = c(-0.319486522394713, 0.0741622449691741, 0.506788027031549, 
    -1.56393161060325), value = 79.6319170043217, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.910530056083, -4.29991423445131, 
    216.875939226924, -18.1812610264842, -4.29991423445131, 42.2581000414368, 
    -24.5072416227288, -12.7292851637151, 216.875939226924, -24.5072416227288, 
    3741.90523797679, -321.175747723501, -18.1812610264842, -12.7292851637151, 
    -321.175747723501, 245.663455171297), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319486522394713, 0.0741622449691741
    ), logphi = c(0.506788027031549, -1.56393161060325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_122 = structure(list(
    par = c(-0.432840750817871, 0.0411494839423219, 0.480924814787741, 
    -1.61552721293113), value = 64.9432907213779, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.444016592528, -1.39689164768697, 
    230.217733808047, -17.5646958950892, -1.39689164768697, 39.6211082325237, 
    -17.7142931150343, -14.0348650088384, 230.217733808047, -17.7142931150343, 
    4223.76250659795, -310.058673470337, -17.5646958950892, -14.0348650088384, 
    -310.058673470337, 255.624999937254), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432840750817871, 0.0411494839423219
    ), logphi = c(0.480924814787741, -1.61552721293113)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_123 = structure(list(
    par = c(-0.2822444514511, -0.222375969149781, 0.471573389329926, 
    -1.68412037764908), value = 68.5315612754738, counts = structure(c(359L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.4158428985083, -8.57210642379869, 
    230.708803687918, -13.0468886947455, -8.57210642379869, 26.812795518083, 
    -20.1310979193181, -10.0651122316719, 230.708803687918, -20.1310979193181, 
    5142.35571784738, -284.369829515185, -13.0468886947455, -10.0651122316719, 
    -284.369829515185, 283.53415661897), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2822444514511, -0.222375969149781
    ), logphi = c(0.471573389329926, -1.68412037764908)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_124 = structure(list(
    par = c(-0.118844312002975, 0.255269738779012, 0.499663000620594, 
    -1.54508627201133), value = 64.9471864691271, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.738827053008, -2.73531989236631, 
    200.045509629376, -7.80685904189227, -2.73531989236631, 57.892110291391, 
    -15.2472788137459, -12.6703585721089, 200.045509629376, -15.2472788137459, 
    3519.77248926971, -257.498256104327, -7.80685904189227, -12.6703585721089, 
    -257.498256104327, 226.285326952791), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.118844312002975, 0.255269738779012
    ), logphi = c(0.499663000620594, -1.54508627201133)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_125 = structure(list(
    par = c(-0.0266249179663017, 0.0830763281453476, 0.511641702996699, 
    -1.52682833096318), value = 101.467361110875, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.237253052337, -12.7134927332406, 
    192.185865010686, -8.79073402515473, -12.7134927332406, 40.261921025575, 
    -23.0080002268096, -10.0909687539286, 192.185865010686, -23.0080002268096, 
    3430.22927302528, -255.016540787523, -8.79073402515473, -10.0909687539286, 
    -255.016540787523, 225.611007323323), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0266249179663017, 0.0830763281453476
    ), logphi = c(0.511641702996699, -1.52682833096318)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_126 = structure(list(
    par = c(-0.15051469342088, -0.0347694372544985, 0.52644945351532, 
    -1.5243432857708), value = 98.9555244340512, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.2824820044355, -11.4271554814138, 
    200.331169207146, -16.7935505857031, -11.4271554814138, 34.45768436805, 
    -29.5384122459552, -9.45930232809644, 200.331169207146, -29.5384122459552, 
    3437.98863085709, -311.686513233767, -16.7935505857031, -9.45930232809644, 
    -311.686513233767, 236.12277742302), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.15051469342088, -0.0347694372544985
    ), logphi = c(0.52644945351532, -1.5243432857708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_127 = structure(list(
    par = c(-0.458776156768106, -0.172419943703002, 0.510820787924663, 
    -1.64834739159728), value = 76.7531009748072, counts = structure(c(349L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.9650449845233, -8.31777092713537, 
    235.951947413326, -26.6131915243051, -8.31777092713537, 27.5484430964923, 
    -36.7678034294272, -10.5450281093766, 235.951947413326, -36.7678034294272, 
    4783.22112611451, -417.291485739213, -26.6131915243051, -10.5450281093766, 
    -417.291485739213, 297.878515659988), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.458776156768106, -0.172419943703002
    ), logphi = c(0.510820787924663, -1.64834739159728)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_128 = structure(list(
    par = c(-0.141629338947612, 0.208313680301153, 0.482939896006635, 
    -1.61686121229916), value = 65.6336044002709, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.750575186889, -3.78517162147318, 
    212.733903840245, -6.02774375835224, -3.78517162147318, 51.8284140653691, 
    -10.5224870630138, -12.7930643074592, 212.733903840245, -10.5224870630138, 
    4243.7649161613, -256.135785095424, -6.02774375835224, -12.7930643074592, 
    -256.135785095424, 250.730348167139), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.141629338947612, 0.208313680301153
    ), logphi = c(0.482939896006635, -1.61686121229916)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_129 = structure(list(
    par = c(-0.142841328248534, 0.248181049979858, 0.502415863926927, 
    -1.63312499438978), value = 53.0246145972265, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.89235768038, -5.30377510266078, 
    221.231047392578, -9.81933888510866, -5.30377510266078, 53.904910501501, 
    -15.6830491953031, -13.5788782440471, 221.231047392578, -15.6830491953031, 
    4449.02122542601, -318.1537428949, -9.81933888510866, -13.5788782440471, 
    -318.1537428949, 268.039308748413), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142841328248534, 0.248181049979858
    ), logphi = c(0.502415863926927, -1.63312499438978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_130 = structure(list(
    par = c(-0.613449674058074, -0.0988108940304633, 0.483395386029844, 
    -1.70866422622641), value = 42.1869683749347, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.8920039162185, -3.28308452068882, 
    255.507851193215, -27.3488872313266, -3.28308452068882, 33.5583620447721, 
    -29.7259124728555, -13.6818438711828, 255.507851193215, -29.7259124728555, 
    5441.3094321184, -435.396075070926, -27.3488872313266, -13.6818438711828, 
    -435.396075070926, 309.837078287245), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.613449674058074, -0.0988108940304633
    ), logphi = c(0.483395386029844, -1.70866422622641)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_131 = structure(list(
    par = c(-0.408150505904064, 0.229588267387121, 0.487225278600551, 
    -1.683991530341), value = 38.4533394854552, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.5007155309364, 2.30213335683516, 
    246.787383797908, -16.8505364399607, 2.30213335683516, 56.3956796142406, 
    -10.1886399566098, -16.7640313497586, 246.787383797908, -10.1886399566098, 
    4977.94491117531, -375.329882880138, -16.8505364399607, -16.7640313497586, 
    -375.329882880138, 286.068447747923), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.408150505904064, 0.229588267387121
    ), logphi = c(0.487225278600551, -1.683991530341)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_132 = structure(list(
    par = c(-0.377287430985064, -0.226516798928535, 0.507375092799423, 
    -1.61068662337341), value = 88.2363841423277, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.0377862444604, -8.72216407543647, 
    224.246600538436, -22.8291042727591, -8.72216407543647, 25.5921662528635, 
    -32.3845397360856, -9.57661201717031, 224.246600538436, -32.3845397360856, 
    4346.34096027153, -358.426370794973, -22.8291042727591, -9.57661201717031, 
    -358.426370794973, 275.181701368865), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377287430985064, -0.226516798928535
    ), logphi = c(0.507375092799423, -1.61068662337341)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_133 = structure(list(
    par = c(-0.328296885906527, 0.0261309234376314, 0.506329446533231, 
    -1.57857567590198), value = 77.7753277043723, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.1570862719959, -5.50082115324813, 
    219.915174941576, -18.9647714599062, -5.50082115324813, 39.0813948882851, 
    -26.0867487007488, -12.3064179256005, 219.915174941576, -26.0867487007488, 
    3908.30879926796, -329.971094625847, -18.9647714599062, -12.3064179256005, 
    -329.971094625847, 253.318007189307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328296885906527, 0.0261309234376314
    ), logphi = c(0.506329446533231, -1.57857567590198)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_134 = structure(list(
    par = c(-0.343575602894744, 0.188817339083515, 0.505511643289864, 
    -1.61563463968983), value = 56.8782612200853, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.8202640437803, -0.993221293654756, 
    230.578316980257, -18.2870163998317, -0.993221293654756, 
    52.2510579052948, -20.6742971506912, -14.9377094196268, 230.578316980257, 
    -20.6742971506912, 4242.14194216077, -360.466008967109, -18.2870163998317, 
    -14.9377094196268, -360.466008967109, 267.381686780865), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343575602894744, 0.188817339083515
    ), logphi = c(0.505511643289864, -1.61563463968983)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_135 = structure(list(
    par = c(-0.328847665660644, 0.0618512476752426, 0.485176900364956, 
    -1.62092581335748), value = 57.7591179738404, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.0851276585164, -2.28999070195357, 
    226.513666190087, -14.5983923944826, -2.28999070195357, 44.1372704447218, 
    -17.6665017743716, -13.3076726509529, 226.513666190087, -17.6665017743716, 
    4305.84035000514, -301.403367848785, -14.5983923944826, -13.3076726509529, 
    -301.403367848785, 258.752655840411), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328847665660644, 0.0618512476752426
    ), logphi = c(0.485176900364956, -1.62092581335748)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_136 = structure(list(
    par = c(-0.29173525064893, -0.0138998049299877, 0.492650382962609, 
    -1.56899955612091), value = 85.9825202336364, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.4996767831819, -5.58389816873728, 
    213.658162437014, -14.8885587520908, -5.58389816873728, 37.2016940630715, 
    -21.8801688944836, -11.703822748288, 213.658162437014, -21.8801688944836, 
    3796.14398095285, -277.592156766815, -14.8885587520908, -11.703822748288, 
    -277.592156766815, 239.972670520672), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29173525064893, -0.0138998049299877
    ), logphi = c(0.492650382962609, -1.56899955612091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_137 = structure(list(
    par = c(-0.302306223857725, -0.0546603544113128, 0.515408239903895, 
    -1.57271246204204), value = 83.8234797316373, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.4375757413095, -7.10352778909851, 
    217.01925084372, -20.4467048199319, -7.10352778909851, 36.5253808602972, 
    -30.2967609862037, -10.8159713434475, 217.01925084372, -30.2967609862037, 
    3895.51901049856, -342.729950935095, -20.4467048199319, -10.8159713434475, 
    -342.729950935095, 256.996488705141), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302306223857725, -0.0546603544113128
    ), logphi = c(0.515408239903895, -1.57271246204204)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_138 = structure(list(
    par = c(-0.0929009729203756, -0.0682437690962924, 0.492597982079724, 
    -1.58532636918629), value = 87.6014400247852, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.071227500109, -11.1520946504129, 
    203.967821370554, -8.64609878803435, -11.1520946504129, 33.8678030189499, 
    -21.1783241219621, -9.74763159078407, 203.967821370554, -21.1783241219621, 
    4016.43234803117, -243.142037145816, -8.64609878803435, -9.74763159078407, 
    -243.142037145816, 245.909831093627), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0929009729203756, -0.0682437690962924
    ), logphi = c(0.492597982079724, -1.58532636918629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_139 = structure(list(
    par = c(-0.411614434737449, -0.0806241680989221, 0.526453985417762, 
    -1.61551776952488), value = 78.4392623351414, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.6027661691073, -7.31198015913037, 
    230.193763545827, -27.2454554242074, -7.31198015913037, 35.4812669769444, 
    -38.7779817749845, -10.7887203633084, 230.193763545827, -38.7779817749845, 
    4394.01127538375, -426.576420249347, -27.2454554242074, -10.7887203633084, 
    -426.576420249347, 289.308172146008), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411614434737449, -0.0806241680989221
    ), logphi = c(0.526453985417762, -1.61551776952488)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_140 = structure(list(
    par = c(-0.307797660500818, 0.258476389850286, 0.507942476848458, 
    -1.56139854952725), value = 55.0420570772979, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.3014170624917, 0.333219826842424, 
    217.002363747554, -16.1912708529499, 0.333219826842424, 55.3420107820557, 
    -17.7270910342031, -14.9509854798779, 217.002363747554, -17.7270910342031, 
    3652.47327021834, -325.615955061309, -16.1912708529499, -14.9509854798779, 
    -325.615955061309, 241.552769812969), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.307797660500818, 0.258476389850286
    ), logphi = c(0.507942476848458, -1.56139854952725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_141 = structure(list(
    par = c(-0.221192252846939, -0.2154833618265, 0.478313176861805, 
    -1.7068782990538), value = 68.5449002130783, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.8216407684818, -10.3406857796529, 
    232.143416020847, -12.5239092287899, -10.3406857796529, 26.6693281254504, 
    -21.4285669812853, -9.70358553331607, 232.143416020847, -21.4285669812853, 
    5471.7501244177, -300.253263830541, -12.5239092287899, -9.70358553331607, 
    -300.253263830541, 296.70170376761), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221192252846939, -0.2154833618265
    ), logphi = c(0.478313176861805, -1.7068782990538)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_142 = structure(list(
    par = c(-0.170288210659065, 0.248070015000923, 0.508767002740565, 
    -1.61936943439434), value = 62.4519854017502, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.422222551051, -5.31100198664092, 
    221.668062000191, -12.0711539848273, -5.31100198664092, 53.456215395542, 
    -18.3183166857503, -13.8228993744605, 221.668062000191, -18.3183166857503, 
    4297.28218150949, -333.108692142758, -12.0711539848273, -13.8228993744605, 
    -333.108692142758, 265.971417524824), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170288210659065, 0.248070015000923
    ), logphi = c(0.508767002740565, -1.61936943439434)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_143 = structure(list(
    par = c(-0.250723486422484, 0.0519574723791694, 0.500769544047988, 
    -1.57682752240598), value = 85.272116741967, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.9156639649118, -6.79378747037163, 
    214.866810765102, -14.7485462669295, -6.79378747037163, 39.0029057122376, 
    -22.595313819096, -12.0774004095381, 214.866810765102, -22.595313819096, 
    3879.70920269964, -297.794503239857, -14.7485462669295, -12.0774004095381, 
    -297.794503239857, 246.872129018527), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250723486422484, 0.0519574723791694
    ), logphi = c(0.500769544047988, -1.57682752240598)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_144 = structure(list(
    par = c(-0.124315021365774, -0.181429461414828, 0.49665285382555, 
    -1.6401794484329), value = 92.2136734986477, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.6291588382023, -13.4448529145459, 
    216.076152579348, -11.7068367089246, -13.4448529145459, 25.6556749036463, 
    -24.5453821783315, -9.10363703354733, 216.076152579348, -24.5453821783315, 
    4671.968012957, -285.960444799116, -11.7068367089246, -9.10363703354733, 
    -285.960444799116, 275.511763142333), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.124315021365774, -0.181429461414828
    ), logphi = c(0.49665285382555, -1.6401794484329)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_145 = structure(list(
    par = c(-0.224493627031525, -0.124166383221324, 0.48236122080055, 
    -1.63086930689657), value = 81.4624813465446, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.8216044044916, -9.45222517145794, 
    219.677929280238, -11.9762349726216, -9.45222517145794, 28.9929424894808, 
    -20.7188002718794, -10.4353610286267, 219.677929280238, -20.7188002718794, 
    4495.22076227282, -268.9054967, -11.9762349726216, -10.4353610286267, 
    -268.9054967, 263.573761937863), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224493627031525, -0.124166383221324
    ), logphi = c(0.48236122080055, -1.63086930689657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_146 = structure(list(
    par = c(-0.257658613467642, -0.202426011165487, 0.523936507940391, 
    -1.68902892086239), value = 86.6847658587223, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.0008367507983, -13.0371183963973, 
    233.957727850509, -21.8483554679239, -13.0371183963973, 25.7779597951924, 
    -37.9196248054825, -8.91212085463167, 233.957727850509, -37.9196248054825, 
    5339.76801927238, -417.614148492618, -21.8483554679239, -8.91212085463167, 
    -417.614148492618, 315.861106724213), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257658613467642, -0.202426011165487
    ), logphi = c(0.523936507940391, -1.68902892086239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_147 = structure(list(
    par = c(-0.301457988469621, -0.287398656250303, 0.478040147521561, 
    -1.62385844870611), value = 89.1971857172252, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.9761241187584, -8.25480688249058, 
    220.045852206141, -14.8001171549339, -8.25480688249058, 23.9199036187188, 
    -22.7019749807766, -9.32936328368328, 220.045852206141, -22.7019749807766, 
    4440.35241534024, -265.935888219104, -14.8001171549339, -9.32936328368328, 
    -265.935888219104, 261.402207478056), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301457988469621, -0.287398656250303
    ), logphi = c(0.478040147521561, -1.62385844870611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_148 = structure(list(
    par = c(-0.249377406848533, 0.0749377366351844, 0.517742946848098, 
    -1.5856144053472), value = 81.2740804271685, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.6592500271586, -7.92980148034417, 
    219.233756471482, -18.2474766532437, -7.92980148034417, 41.2580447175515, 
    -28.0341363847469, -12.098226878976, 219.233756471482, -28.0341363847469, 
    3996.61339356783, -348.710524221474, -18.2474766532437, -12.098226878976, 
    -348.710524221474, 260.864966300289), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249377406848533, 0.0749377366351844
    ), logphi = c(0.517742946848098, -1.5856144053472)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_149 = structure(list(
    par = c(-0.455177554425349, 0.111241564463167, 0.505743554062388, 
    -1.61476294656265), value = 70.445189680282, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.3031250791503, -2.51004266971222, 
    235.049180805191, -23.2727444693381, -2.51004266971222, 43.0151534089873, 
    -25.6100076896359, -14.8616180233319, 235.049180805191, -25.6100076896359, 
    4253.3827624105, -385.33852722189, -23.2727444693381, -14.8616180233319, 
    -385.33852722189, 272.200847653892), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.455177554425349, 0.111241564463167
    ), logphi = c(0.505743554062388, -1.61476294656265)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_150 = structure(list(
    par = c(-0.199243686536799, -0.288052094411417, 0.470165282420571, 
    -1.6935330683736), value = 82.2138913066793, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.0089614823685, -11.2304405774921, 
    225.751167892696, -10.574222518045, -11.2304405774921, 21.9494296942457, 
    -19.3840175839455, -8.91853711593171, 225.751167892696, -19.3840175839455, 
    5294.39204169435, -262.107188522265, -10.574222518045, -8.91853711593171, 
    -262.107188522265, 286.921655039407), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199243686536799, -0.288052094411417
    ), logphi = c(0.470165282420571, -1.6935330683736)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_151 = structure(list(
    par = c(-0.197208451152258, -0.114242621438949, 0.492295942109681, 
    -1.6306426989988), value = 85.7364138927825, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.6271852986483, -10.3578256620551, 
    219.502796682036, -12.9177860710428, -10.3578256620551, 30.5542483651777, 
    -23.344339609821, -10.2532178924974, 219.502796682036, -23.344339609821, 
    4518.59433914237, -289.242322651262, -12.9177860710428, -10.2532178924974, 
    -289.242322651262, 268.804111723142), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197208451152258, -0.114242621438949
    ), logphi = c(0.492295942109681, -1.6306426989988)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_152 = structure(list(
    par = c(-0.289444720382951, -0.0615794721049866, 0.47497888635642, 
    -1.69397107913269), value = 61.9576849083699, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.8163621495817, -6.44583452569236, 
    236.223244030498, -13.0436201040141, -6.44583452569236, 35.5737725090677, 
    -17.6113968901603, -11.8343726356329, 236.223244030498, -17.6113968901603, 
    5222.50920203504, -307.393839356962, -13.0436201040141, -11.8343726356329, 
    -307.393839356962, 286.992131016461), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289444720382951, -0.0615794721049866
    ), logphi = c(0.47497888635642, -1.69397107913269)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_153 = structure(list(
    par = c(-0.33725677424349, 0.257694455654718, 0.498608069836429, 
    -1.61879548583134), value = 49.5707758285907, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.7511739748138, 0.0774605268816231, 
    230.088876307377, -15.7364776036673, 0.0774605268816231, 
    52.6678446082229, -13.9996824550792, -15.8484079868515, 230.088876307377, 
    -13.9996824550792, 4232.98543997497, -345.052093034148, -15.7364776036673, 
    -15.8484079868515, -345.052093034148, 262.582615629725), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33725677424349, 0.257694455654718
    ), logphi = c(0.498608069836429, -1.61879548583134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_154 = structure(list(
    par = c(-0.251666027486682, -0.220034810532321, 0.48685724475448, 
    -1.68071678123908), value = 75.077046035098, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.8951994072422, -9.90485881047221, 
    230.186367698337, -14.9935092395026, -9.90485881047221, 26.8331191648485, 
    -24.6673859507496, -9.72002832533292, 230.186367698337, -24.6673859507496, 
    5148.66585473328, -314.998715012393, -14.9935092395026, -9.72002832533292, 
    -314.998715012393, 291.082201101744), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251666027486682, -0.220034810532321
    ), logphi = c(0.48685724475448, -1.68071678123908)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_155 = structure(list(
    par = c(-0.242384324756311, -0.203775811326836, 0.496325995460075, 
    -1.49632843901808), value = 95.6674355773372, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.352931126527, -7.73885825466891, 
    194.05147263285, -14.2409899908102, -7.73885825466891, 28.2752446381096, 
    -23.789908105698, -8.86658424015252, 194.05147263285, -23.789908105698, 
    3163.29182445685, -229.070175603141, -14.2409899908102, -8.86658424015252, 
    -229.070175603141, 209.379183463199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242384324756311, -0.203775811326836
    ), logphi = c(0.496325995460075, -1.49632843901808)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_156 = structure(list(
    par = c(-0.363608371629709, 0.0363869630741166, 0.507354776353252, 
    -1.5607564695224), value = 73.5475834217271, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.840077239638, -4.66815832567136, 
    217.981650557419, -20.159815196763, -4.66815832567136, 38.8282594130374, 
    -26.2035351319412, -12.5537266661979, 217.981650557419, -26.2035351319412, 
    3718.95122846411, -329.123217643001, -20.159815196763, -12.5537266661979, 
    -329.123217643001, 246.238293254208), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363608371629709, 0.0363869630741166
    ), logphi = c(0.507354776353252, -1.5607564695224)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_157 = structure(list(
    par = c(-0.265553056834716, 0.170597499040817, 0.513120512090778, 
    -1.51244904094795), value = 73.8543905574302, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.5987167680946, -2.20904433589908, 
    204.151157447541, -16.2327980959276, -2.20904433589908, 50.5497758496176, 
    -22.378611774343, -12.8460170945033, 204.151157447541, -22.378611774343, 
    3234.08529857971, -297.382802846968, -16.2327980959276, -12.8460170945033, 
    -297.382802846968, 222.572377857944), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265553056834716, 0.170597499040817
    ), logphi = c(0.513120512090778, -1.51244904094795)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_158 = structure(list(
    par = c(-0.357391319744469, 0.0335553065776642, 0.461807840847377, 
    -1.63872953828035), value = 61.7676348995247, counts = structure(c(309L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.6589496382019, -0.757634921910721, 
    227.340088958528, -11.0605783456563, -0.757634921910721, 
    41.2256641091346, -9.99959391201344, -13.2332336679752, 227.340088958528, 
    -9.99959391201344, 4444.95044774484, -254.975602993035, -11.0605783456563, 
    -13.2332336679752, -254.975602993035, 252.232904069061), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357391319744469, 0.0335553065776642
    ), logphi = c(0.461807840847377, -1.63872953828035)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_159 = structure(list(
    par = c(-0.167586856732119, -0.0197269685239185, 0.50665924873949, 
    -1.54859421901772), value = 85.3121759831908, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9447327417706, -8.47316054830571, 
    204.152711077654, -13.3659330785463, -8.47316054830571, 38.1189386828851, 
    -24.6887169197407, -10.3684331946852, 204.152711077654, -24.6887169197407, 
    3638.12058160917, -277.275840883107, -13.3659330785463, -10.3684331946852, 
    -277.275840883107, 236.578411968225), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.167586856732119, -0.0197269685239185
    ), logphi = c(0.50665924873949, -1.54859421901772)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_160 = structure(list(
    par = c(-0.519268978454079, 0.0353507915048213, 0.532187393421769, 
    -1.61733428379934), value = 75.266127383786, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.6630867120548, -5.78514753257764, 
    237.178105489733, -31.8802378203031, -5.78514753257764, 38.4003782016862, 
    -41.954736438754, -12.8044853724418, 237.178105489733, -41.954736438754, 
    4380.85620933748, -475.180092426086, -31.8802378203031, -12.8044853724418, 
    -475.180092426086, 297.476510095152), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.519268978454079, 0.0353507915048213
    ), logphi = c(0.532187393421769, -1.61733428379934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_161 = structure(list(
    par = c(-0.136593873559202, -0.138303711365008, 0.487474541129983, 
    -1.61083861890892), value = 93.3588808087912, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.163254845294, -11.9864698859828, 
    210.447757130083, -9.83181677582934, -11.9864698859828, 27.6871102649068, 
    -21.3064826297682, -9.5674811433355, 210.447757130083, -21.3064826297682, 
    4297.01158621754, -250.045092077045, -9.83181677582934, -9.5674811433355, 
    -250.045092077045, 256.476415437135), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.136593873559202, -0.138303711365008
    ), logphi = c(0.487474541129983, -1.61083861890892)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_162 = structure(list(
    par = c(-0.284444368017823, 0.227864927228323, 0.502207756999215, 
    -1.63106640337998), value = 49.5933030161461, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.992610336244, -1.92997727488375, 
    230.264187988993, -15.0796575617562, -1.92997727488375, 53.4504938816127, 
    -16.9949466375385, -14.9452128255234, 230.264187988993, -16.9949466375385, 
    4402.77114225651, -348.783538606234, -15.0796575617562, -14.9452128255234, 
    -348.783538606234, 269.962257952727), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284444368017823, 0.227864927228323
    ), logphi = c(0.502207756999215, -1.63106640337998)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_163 = structure(list(
    par = c(-0.279493756690477, -0.130859997650086, 0.508800547814753, 
    -1.6977287491309), value = 68.37242684155, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.8134338378654, -11.2153371354395, 
    238.451527824424, -19.7028436694779, -11.2153371354395, 29.3591535935889, 
    -32.4794767401215, -10.4192970038497, 238.451527824424, -32.4794767401215, 
    5395.21426504308, -392.722835018233, -19.7028436694779, -10.4192970038497, 
    -392.722835018233, 310.643514840336), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279493756690477, -0.130859997650086
    ), logphi = c(0.508800547814753, -1.6977287491309)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_164 = structure(list(
    par = c(-0.228133003914212, 0.0557888650755148, 0.488321853501121, 
    -1.58489797338705), value = 77.334814939574, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.0631874664416, -5.37760762853168, 
    213.090637640079, -11.3421618834764, -5.37760762853168, 41.6982781317188, 
    -18.2499196021979, -12.057840962143, 213.090637640079, -18.2499196021979, 
    3940.18944600205, -264.641439841284, -11.3421618834764, -12.057840962143, 
    -264.641439841284, 242.716531282383), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228133003914212, 0.0557888650755148
    ), logphi = c(0.488321853501121, -1.58489797338705)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_165 = structure(list(
    par = c(-0.134222651065173, -0.126985883880698, 0.476390915173298, 
    -1.65992123942881), value = 88.3561105594939, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.7058998614666, -10.9051667003257, 
    217.790998835454, -8.00779983123334, -10.9051667003257, 29.7315814279386, 
    -17.9399256090562, -9.83238153828836, 217.790998835454, -17.9399256090562, 
    4845.4809950087, -248.042435860185, -8.00779983123334, -9.83238153828836, 
    -248.042435860185, 272.515528212836), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.134222651065173, -0.126985883880698
    ), logphi = c(0.476390915173298, -1.65992123942881)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_166 = structure(list(
    par = c(-0.433113077857828, 0.0362183420130435, 0.519445084150773, 
    -1.5000116812686), value = 75.0344676036166, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.6849571110606, -1.91082057554581, 
    208.433449493839, -24.4209317692423, -1.91082057554581, 42.021990385166, 
    -29.2439759412844, -12.1296627870748, 208.433449493839, -29.2439759412844, 
    3157.0260143674, -333.738568802033, -24.4209317692423, -12.1296627870748, 
    -333.738568802033, 227.141004973674), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.433113077857828, 0.0362183420130435
    ), logphi = c(0.519445084150773, -1.5000116812686)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_167 = structure(list(
    par = c(-0.227503830180302, -0.118425243743266, 0.534645639321208, 
    -1.53010167444702), value = 95.6211890604475, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.1134812503697, -10.2534379067265, 
    204.695972033875, -21.6584796497443, -10.2534379067265, 32.018712285975, 
    -33.6867399859386, -8.69937254144304, 204.695972033875, -33.6867399859386, 
    3520.13556573283, -349.464590245319, -21.6584796497443, -8.69937254144304, 
    -349.464590245319, 246.866147325164), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227503830180302, -0.118425243743266
    ), logphi = c(0.534645639321208, -1.53010167444702)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_168 = structure(list(
    par = c(-0.211666000915159, 0.233842774031855, 0.498809479197005, 
    -1.56711936205926), value = 63.7624583435504, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.346843281533, -1.87896612047211, 
    210.789340401973, -11.1008098091503, -1.87896612047211, 54.08300168952, 
    -15.4644597536446, -13.6510937140955, 210.789340401973, -15.4644597536446, 
    3721.2952436505, -284.97287283713, -11.1008098091503, -13.6510937140955, 
    -284.97287283713, 237.340147407394), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211666000915159, 0.233842774031855
    ), logphi = c(0.498809479197005, -1.56711936205926)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_169 = structure(list(
    par = c(-0.306873461604769, -0.31276552799965, 0.516733439817007, 
    -1.64230472812404), value = 86.3017075341517, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.5244910323729, -11.2498560440599, 
    225.058450343596, -22.571652884551, -11.2498560440599, 21.8039539809922, 
    -35.051472210057, -8.08142126373923, 225.058450343596, -35.051472210057, 
    4769.35508778453, -382.806672178049, -22.571652884551, -8.08142126373923, 
    -382.806672178049, 294.871733757418), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306873461604769, -0.31276552799965
    ), logphi = c(0.516733439817007, -1.64230472812404)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_170 = structure(list(
    par = c(-0.358623741111129, -0.102715225329154, 0.510486106638041, 
    -1.61489697420347), value = 70.0956672765082, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.4162804577402, -7.34417807279897, 
    227.110741970904, -22.2111337553343, -7.34417807279897, 32.8808658984769, 
    -31.8339740879026, -10.922606195507, 227.110741970904, -31.8339740879026, 
    4360.18785897119, -368.449081459943, -22.2111337553343, -10.922606195507, 
    -368.449081459943, 276.533522235667), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358623741111129, -0.102715225329154
    ), logphi = c(0.510486106638041, -1.61489697420347)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_171 = structure(list(
    par = c(-0.339840549354992, -0.184168767753156, 0.491890383122594, 
    -1.57734169293374), value = 79.2403791385429, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.870274471489, -6.7254195954547, 
    215.688868959063, -17.7139669368387, -6.7254195954547, 28.8190435746571, 
    -25.4321725492446, -10.1893183455104, 215.688868959063, -25.4321725492446, 
    3928.3386088762, -286.415390316819, -17.7139669368387, -10.1893183455104, 
    -286.415390316819, 247.05426177718), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339840549354992, -0.184168767753156
    ), logphi = c(0.491890383122594, -1.57734169293374)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_172 = structure(list(
    par = c(-0.263635481678643, 0.465593702831964, 0.516819152525128, 
    -1.672106432611), value = 29.6771823113107, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.051459940355, 4.72318549604722, 
    241.47186331902, -14.6933828855111, 4.72318549604722, 75.2695131875925, 
    -7.58367841058316, -18.148590869238, 241.47186331902, -7.58367841058316, 
    4802.46513492766, -414.597570065567, -14.6933828855111, -18.148590869238, 
    -414.597570065567, 289.940918042575), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263635481678643, 0.465593702831964
    ), logphi = c(0.516819152525128, -1.672106432611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_173 = structure(list(
    par = c(-0.137601302226391, -0.0398431392973074, 0.502211846065442, 
    -1.65877080768607), value = 76.9426240148034, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.7185419392629, -11.9287058240047, 
    223.541946006378, -12.4243143240221, -11.9287058240047, 34.3675854637127, 
    -24.7856142365777, -10.5902369078592, 223.541946006378, -24.7856142365777, 
    4861.644993575, -319.304784834884, -12.4243143240221, -10.5902369078592, 
    -319.304784834884, 284.715519708101), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137601302226391, -0.0398431392973074
    ), logphi = c(0.502211846065442, -1.65877080768607)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_174 = structure(list(
    par = c(-0.208650198409092, -0.118416868270262, 0.507887849194745, 
    -1.70478027706985), value = 89.8854087167035, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.5962925077306, -13.6675497515171, 
    235.995392092292, -16.8647696945357, -13.6675497515171, 27.7545959619374, 
    -30.373336333156, -10.2076978798493, 235.995392092292, -30.373336333156, 
    5486.59149049513, -374.325721171687, -16.8647696945357, -10.2076978798493, 
    -374.325721171687, 310.597803796497), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208650198409092, -0.118416868270262
    ), logphi = c(0.507887849194745, -1.70478027706985)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_175 = structure(list(
    par = c(-0.231579838855112, -0.262920968709696, 0.480113325130813, 
    -1.60061068521451), value = 88.7260189649533, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.3119115278628, -8.99207112325939, 
    211.75490035219, -12.3148708990328, -8.99207112325939, 25.2775930285054, 
    -21.9351897534636, -9.05683134355684, 211.75490035219, -21.9351897534636, 
    4183.91078644476, -241.613163058929, -12.3148708990328, -9.05683134355684, 
    -241.613163058929, 250.362258885417), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231579838855112, -0.262920968709696
    ), logphi = c(0.480113325130813, -1.60061068521451)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_176 = structure(list(
    par = c(-0.238061511504927, 0.0773793533497857, 0.506733628846619, 
    -1.55312597174454), value = 73.6083921144116, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9115189402837, -4.42381685772375, 
    210.135661347977, -15.1271646089413, -4.42381685772375, 46.5490856242923, 
    -23.4602109401294, -11.9983870199292, 210.135661347977, -23.4602109401294, 
    3643.51559970544, -297.312512294923, -15.1271646089413, -11.9983870199292, 
    -297.312512294923, 238.619139512508), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238061511504927, 0.0773793533497857
    ), logphi = c(0.506733628846619, -1.55312597174454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_177 = structure(list(
    par = c(-0.389473691492488, -0.242435517199446, 0.512469088914923, 
    -1.55504567664183), value = 87.8550307921826, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.0591739619751, -7.59474803757598, 
    213.46277831924, -23.6697631290639, -7.59474803757598, 25.7807897590112, 
    -32.1309987434404, -9.02496164201239, 213.46277831924, -32.1309987434404, 
    3759.44463239364, -337.545764523384, -23.6697631290639, -9.02496164201239, 
    -337.545764523384, 251.963785068199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389473691492488, -0.242435517199446
    ), logphi = c(0.512469088914923, -1.55504567664183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_178 = structure(list(
    par = c(-0.541510449081765, 0.00128526417383771, 0.530487923522892, 
    -1.62933776083334), value = 67.6036598014447, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.2933401974803, -6.02462532839354, 
    239.25928816837, -32.6089399784735, -6.02462532839354, 37.2437459432717, 
    -43.5067577662096, -12.4424850582727, 239.25928816837, -43.5067577662096, 
    4533.85259614336, -485.089954096907, -32.6089399784735, -12.4424850582727, 
    -485.089954096907, 303.879733454693), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.541510449081765, 0.00128526417383771
    ), logphi = c(0.530487923522892, -1.62933776083334)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_179 = structure(list(
    par = c(-0.100906877975002, 0.0303585182254889, 0.483269788639465, 
    -1.69275618515848), value = 62.8836783056421, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.085886459629, -11.1896440149195, 
    224.323006365879, -7.12311199890792, -11.1896440149195, 37.5251759923145, 
    -15.9275100202194, -11.0874551992879, 224.323006365879, -15.9275100202194, 
    5233.61106533216, -282.143800871104, -7.12311199890792, -11.0874551992879, 
    -282.143800871104, 287.479829079729), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.100906877975002, 0.0303585182254889
    ), logphi = c(0.483269788639465, -1.69275618515848)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_180 = structure(list(
    par = c(-0.374980270761962, 0.0594456652446161, 0.524308364974848, 
    -1.62736227192101), value = 66.6510753369434, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.6031623916681, -6.7416899582895, 
    234.508280282597, -24.7732216358543, -6.7416899582895, 40.6469874008053, 
    -34.6362379985976, -12.8463981035054, 234.508280282597, -34.6362379985976, 
    4469.48908356504, -422.519038199454, -24.7732216358543, -12.8463981035054, 
    -422.519038199454, 289.07175793691), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374980270761962, 0.0594456652446161
    ), logphi = c(0.524308364974848, -1.62736227192101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_181 = structure(list(
    par = c(-0.335191197067074, 0.0167795436996135, 0.524252584044594, 
    -1.49666442265077), value = 80.6928973663526, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.5490270157163, -4.03396846948567, 
    203.858072488572, -22.1394142947418, -4.03396846948567, 41.578425864941, 
    -29.7478341906299, -11.014220206107, 203.858072488572, -29.7478341906299, 
    3149.20919365136, -325.199294643141, -22.1394142947418, -11.014220206107, 
    -325.199294643141, 226.114823309587), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335191197067074, 0.0167795436996135
    ), logphi = c(0.524252584044594, -1.49666442265077)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_182 = structure(list(
    par = c(-0.0986986992542913, -0.0100957617970411, 0.490858132560533, 
    -1.63585230275392), value = 79.1674648101054, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.9576571665273, -10.5006014692322, 
    214.519973038563, -8.4529334802852, -10.5006014692322, 38.1281707397818, 
    -19.8165419860175, -10.555893993569, 214.519973038563, -19.8165419860175, 
    4560.55977696934, -268.957999161046, -8.4529334802852, -10.555893993569, 
    -268.957999161046, 267.355762762378), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0986986992542913, -0.0100957617970411
    ), logphi = c(0.490858132560533, -1.63585230275392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_183 = structure(list(
    par = c(-0.292563335601049, -0.0650686163869783, 0.490914090936375, 
    -1.59256715669088), value = 69.506112984108, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.0624699557161, -5.64709702999266, 
    217.927514462701, -15.246927922874, -5.64709702999266, 36.6180758284429, 
    -22.7683794911115, -11.3039728368847, 217.927514462701, -22.7683794911115, 
    4057.21180734631, -286.301148724633, -15.246927922874, -11.3039728368847, 
    -286.301148724633, 250.926746971913), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292563335601049, -0.0650686163869783
    ), logphi = c(0.490914090936375, -1.59256715669088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_184 = structure(list(
    par = c(-0.371635503914647, -0.00640727486003147, 0.487017959471566, 
    -1.75234677516333), value = 48.287722019872, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.9472725197556, -6.59642760503232, 
    255.515821798724, -18.5743214062839, -6.59642760503232, 38.1631723627152, 
    -22.8302869462738, -13.236379218462, 255.515821798724, -22.8302869462738, 
    6034.76379039236, -403.285234312101, -18.5743214062839, -13.236379218462, 
    -403.285234312101, 319.662437513912), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371635503914647, -0.00640727486003147
    ), logphi = c(0.487017959471566, -1.75234677516333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_185 = structure(list(
    par = c(-0.288660290532888, -0.741126655476133, 0.47526814754809, 
    -1.6978765285602), value = 94.3963047903827, counts = structure(c(301L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.6202065532154, -9.96910302220044, 
    223.59197934918, -16.4751621625214, -9.96910302220044, 10.1053647689753, 
    -23.1059259228061, -5.64588557949719, 223.59197934918, -23.1059259228061, 
    5481.81360405309, -289.316392494854, -16.4751621625214, -5.64588557949719, 
    -289.316392494854, 300.0767953516), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288660290532888, -0.741126655476133
    ), logphi = c(0.47526814754809, -1.6978765285602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_186 = structure(list(
    par = c(-0.245870818441507, -0.120278966635077, 0.488218206823757, 
    -1.6569598672768), value = 84.2681945993382, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.9565581587703, -9.67035348864442, 
    227.162366982725, -14.1594218163732, -9.67035348864442, 29.9635196654435, 
    -23.1148138070125, -10.6675248012778, 227.162366982725, -23.1148138070125, 
    4819.28411202759, -305.987713449696, -14.1594218163732, -10.6675248012778, 
    -305.987713449696, 279.359748390107), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245870818441507, -0.120278966635077
    ), logphi = c(0.488218206823757, -1.6569598672768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_187 = structure(list(
    par = c(-0.294329339463166, 0.0166979912334191, 0.483293285703468, 
    -1.55138905208524), value = 70.6268664757891, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.8076954858409, -2.99493805044904, 
    208.674210547599, -12.4483922299135, -2.99493805044904, 40.7343203967514, 
    -18.0565613021599, -12.0034465211916, 208.674210547599, -18.0565613021599, 
    3586.46026120013, -243.278839272776, -12.4483922299135, -12.0034465211916, 
    -243.278839272776, 225.420537393717), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294329339463166, 0.0166979912334191
    ), logphi = c(0.483293285703468, -1.55138905208524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_188 = structure(list(
    par = c(-0.201173751010871, -0.0740276671525337, 0.503753969984548, 
    -1.62435539606623), value = 76.5341230792456, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.7266446528988, -9.71650374381738, 
    220.624588155971, -15.0071858122658, -9.71650374381738, 34.2788224259039, 
    -26.3893169929474, -10.513438605031, 220.624588155971, -26.3893169929474, 
    4457.27545988461, -318.13388590507, -15.0071858122658, -10.513438605031, 
    -318.13388590507, 271.848257437313), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201173751010871, -0.0740276671525337
    ), logphi = c(0.503753969984548, -1.62435539606623)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_189 = structure(list(
    par = c(-0.275592619918874, -0.324223414436845, 0.485165084757194, 
    -1.62012634717351), value = 82.3292866282929, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.4560271389128, -9.62012896366105, 
    217.972007174438, -15.4233888558508, -9.62012896366105, 21.7117233773934, 
    -24.5073387112882, -8.71041562788832, 217.972007174438, -24.5073387112882, 
    4431.01378877131, -275.548722244778, -15.4233888558508, -8.71041562788832, 
    -275.548722244778, 264.204363261911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275592619918874, -0.324223414436845
    ), logphi = c(0.485165084757194, -1.62012634717351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_190 = structure(list(
    par = c(-0.414777819055883, -0.0371765297248435, 0.533825096255063, 
    -1.56761819586323), value = 81.8178530462437, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.9863180174468, -6.50291826076455, 
    221.730942058684, -28.2401120283993, -6.50291826076455, 36.7934079008592, 
    -38.4251217155906, -10.8140498227272, 221.730942058684, -38.4251217155906, 
    3866.36260951789, -415.163696082743, -28.2401120283993, -10.8140498227272, 
    -415.163696082743, 270.852175969338), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.414777819055883, -0.0371765297248435
    ), logphi = c(0.533825096255063, -1.56761819586323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_191 = structure(list(
    par = c(-0.254865285074669, -0.186840618156142, 0.474480613245744, 
    -1.62233359824611), value = 78.57715207559, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.1152757342725, -8.09925444755777, 
    217.897426423974, -11.7996502151385, -8.09925444755777, 28.2818892358705, 
    -19.6861183958674, -10.0498415136485, 217.897426423974, -19.6861183958674, 
    4388.57995118624, -247.436471262574, -11.7996502151385, -10.0498415136485, 
    -247.436471262574, 256.176625981652), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.254865285074669, -0.186840618156142
    ), logphi = c(0.474480613245744, -1.62233359824611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_192 = structure(list(
    par = c(-0.302385941734282, -0.166971406193688, 0.499937456498159, 
    -1.67740582439914), value = 68.7784421257928, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.3216931757333, -9.377176567682, 
    234.604979581832, -18.9794502603036, -9.377176567682, 29.3731576590517, 
    -29.5844414281987, -10.3270689191248, 234.604979581832, -29.5844414281987, 
    5119.26223163783, -363.183918761223, -18.9794502603036, -10.3270689191248, 
    -363.183918761223, 298.084665658394), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302385941734282, -0.166971406193688
    ), logphi = c(0.499937456498159, -1.67740582439914)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_193 = structure(list(
    par = c(-0.229294566510094, -0.0753057355800179, 0.490574865225522, 
    -1.61002838700418), value = 78.9301085639593, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.8098263948129, -8.61555649223078, 
    217.641176952554, -13.2155818057811, -8.61555649223078, 32.7094040883935, 
    -22.3044412095419, -10.8174828010732, 217.641176952554, -22.3044412095419, 
    4261.21296789717, -281.442365105633, -13.2155818057811, -10.8174828010732, 
    -281.442365105633, 258.037351319018), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229294566510094, -0.0753057355800179
    ), logphi = c(0.490574865225522, -1.61002838700418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_194 = structure(list(
    par = c(-0.256294925338824, 0.147652713467234, 0.509208514841212, 
    -1.54861362772206), value = 63.9291809987945, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.2932596816634, -3.74327544427899, 
    211.048390825752, -15.6480106001666, -3.74327544427899, 47.7615089007344, 
    -22.3056238244368, -12.9098740533351, 211.048390825752, -22.3056238244368, 
    3577.37363779798, -307.168270197167, -15.6480106001666, -12.9098740533351, 
    -307.168270197167, 237.275164412409), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256294925338824, 0.147652713467234
    ), logphi = c(0.509208514841212, -1.54861362772206)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_195 = structure(list(
    par = c(-0.136309429410787, -0.0387969463067682, 0.524797500371692, 
    -1.55748035733594), value = 92.2949000216741, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.5268388794743, -11.8866392071482, 
    206.143932700797, -16.226887430193, -11.8866392071482, 35.2239306522506, 
    -29.8866334418335, -9.62076147281721, 206.143932700797, -29.8866334418335, 
    3763.55282370966, -322.862495531595, -16.226887430193, -9.62076147281721, 
    -322.862495531595, 250.444580089493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.136309429410787, -0.0387969463067682
    ), logphi = c(0.524797500371692, -1.55748035733594)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_196 = structure(list(
    par = c(-0.159056003270073, 0.177455156876068, 0.484014026627935, 
    -1.587398514659), value = 75.5556740068094, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.629754438676, -5.0814496077578, 
    208.222587676943, -6.92392471712822, -5.0814496077578, 46.5148895827383, 
    -12.6025306528277, -12.5483263637705, 208.222587676943, -12.6025306528277, 
    3932.88543270742, -244.82159474104, -6.92392471712822, -12.5483263637705, 
    -244.82159474104, 238.616811451209), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159056003270073, 0.177455156876068
    ), logphi = c(0.484014026627935, -1.587398514659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_197 = structure(list(
    par = c(-0.418818177575174, 0.159757249618595, 0.490886487380117, 
    -1.62043471283668), value = 53.7731606295054, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.5407271523682, 1.09502758149915, 
    233.173635660222, -18.1447456544248, 1.09502758149915, 50.1138763198128, 
    -16.3559108337097, -15.4900729079088, 233.173635660222, -16.3559108337097, 
    4260.40890858914, -341.192825690229, -18.1447456544248, -15.4900729079088, 
    -341.192825690229, 262.069780404772), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418818177575174, 0.159757249618595
    ), logphi = c(0.490886487380117, -1.62043471283668)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_198 = structure(list(
    par = c(-0.160567930764849, 0.183592488004091, 0.495431983936264, 
    -1.57950050887515), value = 71.5778989383244, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.961106845991, -4.24535111065438, 
    209.381025921829, -9.27001014083828, -4.24535111065438, 52.3287749913948, 
    -16.2174421589611, -12.683597919505, 209.381025921829, -16.2174421589611, 
    3870.17911393883, -271.03702742437, -9.27001014083828, -12.683597919505, 
    -271.03702742437, 241.348971304234), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.160567930764849, 0.183592488004091
    ), logphi = c(0.495431983936264, -1.57950050887515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_199 = structure(list(
    par = c(-0.253579206874294, -0.0301238928120488, 0.494262356652561, 
    -1.67582945748065), value = 71.8001780581918, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.7575783536931, -9.27389169547155, 
    233.637292900823, -15.1380955681901, -9.27389169547155, 34.3323034819321, 
    -23.6233513319917, -11.7319145971351, 233.637292900823, -23.6233513319917, 
    5036.58399566831, -338.471195268752, -15.1380955681901, -11.7319145971351, 
    -338.471195268752, 289.841732758589), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253579206874294, -0.0301238928120488
    ), logphi = c(0.494262356652561, -1.67582945748065)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_200 = structure(list(
    par = c(-0.0783469469562995, 0.169153721002621, 0.466949717502379, 
    -1.57968018135677), value = 66.9235572123866, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.965402748941, -3.98500510101485, 
    195.801452605338, -0.963192853475903, -3.98500510101485, 
    50.7704866024028, -8.2787729240863, -11.2399050529177, 195.801452605338, 
    -8.2787729240863, 3841.29684712065, -178.837284972033, -0.963192853475903, 
    -11.2399050529177, -178.837284972033, 226.033565436268), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0783469469562995, 0.169153721002621
    ), logphi = c(0.466949717502379, -1.57968018135677)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_1 = structure(list(
    par = c(-0.229273456918774, 0.0865294101742081, 0.493506387247323, 
    -1.639736867878), value = 73.8019524968874, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.770503264883, -8.0226339598255, 
    258.272959307249, -14.5723196673941, -8.0226339598255, 46.6150884008698, 
    -21.9007518573733, -14.5455762758928, 258.272959307249, -21.9007518573733, 
    5202.74866795489, -357.54737355731, -14.5723196673941, -14.5455762758928, 
    -357.54737355731, 309.147952652467), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229273456918774, 0.0865294101742081
    ), logphi = c(0.493506387247323, -1.639736867878)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_2 = structure(list(
    par = c(-0.362103982826657, 0.184408813326795, 0.490645159201045, 
    -1.60185000249886), value = 62.0867162945961, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.701926484325, 0.672474492091624, 
    258.180343426062, -17.7027011893927, 0.672474492091624, 57.4731977316389, 
    -16.7879929442449, -17.1788850167331, 258.180343426062, -16.7879929442449, 
    4633.40568532544, -360.396516676076, -17.7027011893927, -17.1788850167331, 
    -360.396516676076, 287.525011163581), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362103982826657, 0.184408813326795
    ), logphi = c(0.490645159201045, -1.60185000249886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_3 = structure(list(
    par = c(-0.323998574402838, 0.175559848597143, 0.499005219741918, 
    -1.54994059200524), value = 68.6850951189024, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.39724723211, 1.18710431706859, 
    243.960274607602, -17.6760204180226, 1.18710431706859, 61.8253425948012, 
    -20.6515918783623, -16.0183500206301, 243.960274607602, -20.6515918783623, 
    4056.88118575398, -337.420420272849, -17.6760204180226, -16.0183500206301, 
    -337.420420272849, 265.468187059525), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323998574402838, 0.175559848597143
    ), logphi = c(0.499005219741918, -1.54994059200524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_4 = structure(list(
    par = c(-0.394014533408427, 0.194346765255017, 0.476157588332439, 
    -1.64569215666751), value = 45.9682942808822, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.923335101238, 3.90298770014397, 
    268.34292140876, -15.7746348552479, 3.90298770014397, 60.9977738825762, 
    -8.72641804505747, -17.9855070125967, 268.34292140876, -8.72641804505747, 
    5140.78792436479, -358.358082063859, -15.7746348552479, -17.9855070125967, 
    -358.358082063859, 299.440690564978), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394014533408427, 0.194346765255017
    ), logphi = c(0.476157588332439, -1.64569215666751)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_5 = structure(list(
    par = c(-0.28144934227536, -0.179158674442343, 0.481888533776503, 
    -1.59211945261408), value = 91.0723834408664, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.426571829601, -8.38024029903295, 
    245.194056340381, -15.7353769587587, -8.38024029903295, 33.2245101652973, 
    -24.9502215723396, -11.5638440565391, 245.194056340381, -24.9502215723396, 
    4646.34851041978, -291.952049296995, -15.7353769587587, -11.5638440565391, 
    -291.952049296995, 282.107149811139), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28144934227536, -0.179158674442343
    ), logphi = c(0.481888533776503, -1.59211945261408)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_6 = structure(list(
    par = c(-0.2630086114684, -0.0614836498265328, 0.513294050686265, 
    -1.60963182947275), value = 99.6710997256944, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.623000300473, -10.6557003540786, 
    254.129370169665, -21.6837825099958, -10.6557003540786, 38.8960200261579, 
    -34.4288611060506, -12.3037676420523, 254.129370169665, -34.4288611060506, 
    4912.12517260209, -400.432705850662, -21.6837825099958, -12.3037676420523, 
    -400.432705850662, 310.935588949235), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2630086114684, -0.0614836498265328
    ), logphi = c(0.513294050686265, -1.60963182947275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_7 = structure(list(
    par = c(-0.333063983512565, 0.158345007232175, 0.513823109524973, 
    -1.60504290766473), value = 68.5003762726684, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.177307440916, -4.41929466887814, 
    261.143329431945, -22.7946390758405, -4.41929466887814, 54.7019094945256, 
    -28.8990305712389, -16.2080569943157, 261.143329431945, -28.8990305712389, 
    4750.7763948893, -425.476876943165, -22.7946390758405, -16.2080569943157, 
    -425.476876943165, 306.622627267217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333063983512565, 0.158345007232175
    ), logphi = c(0.513823109524973, -1.60504290766473)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_8 = structure(list(
    par = c(-0.358037542888965, -0.0616018787675928, 0.515756499037211, 
    -1.65786459744246), value = 83.9425103902565, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.8284299058739, -11.5935390248012, 
    270.547161907331, -26.6994034561208, -11.5935390248012, 34.8390578217561, 
    -39.7127607918435, -13.0626110426135, 270.547161907331, -39.7127607918435, 
    5564.1528914947, -470.601656969549, -26.6994034561208, -13.0626110426135, 
    -470.601656969549, 341.755874952554), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358037542888965, -0.0616018787675928
    ), logphi = c(0.515756499037211, -1.65786459744246)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_9 = structure(list(
    par = c(-0.198003472591427, 0.126445232914451, 0.502553962562224, 
    -1.56858090039041), value = 80.129379510818, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.017683429779, -6.41537340584364, 
    240.860746242078, -14.3379413302114, -6.41537340584364, 52.9378627796007, 
    -23.5467750933083, -14.1349426137083, 240.860746242078, -23.5467750933083, 
    4322.4594807576, -330.585156696372, -14.3379413302114, -14.1349426137083, 
    -330.585156696372, 276.507629376255), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198003472591427, 0.126445232914451
    ), logphi = c(0.502553962562224, -1.56858090039041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_10 = structure(list(
    par = c(-0.173975701372925, -0.0483034171549306, 0.46998131273883, 
    -1.61990180036894), value = 87.6039510237468, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.203149804761, -8.50799008489389, 
    242.50170989859, -8.02378428588213, -8.50799008489389, 40.8414756947195, 
    -16.9424222420389, -12.2183021638023, 242.50170989859, -16.9424222420389, 
    4939.51610718213, -251.656277917789, -8.02378428588213, -12.2183021638023, 
    -251.656277917789, 285.20347455796), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173975701372925, -0.0483034171549306
    ), logphi = c(0.46998131273883, -1.61990180036894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_11 = structure(list(
    par = c(-0.115729694618974, 0.240740663556748, 0.516541606084309, 
    -1.59460222007905), value = 87.1685481154852, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.15709504756, -9.05111103932654, 
    244.793255244957, -13.4467178156683, -9.05111103932654, 59.3979287550894, 
    -24.4036552956572, -14.8107103665751, 244.793255244957, -24.4036552956572, 
    4630.58852754017, -373.699589502507, -13.4467178156683, -14.8107103665751, 
    -373.699589502507, 295.300499036699), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.115729694618974, 0.240740663556748
    ), logphi = c(0.516541606084309, -1.59460222007905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_12 = structure(list(
    par = c(-0.302756673017622, -0.00484004208951038, 0.494541519149409, 
    -1.57276098095067), value = 82.6155401315656, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.877278468114, -5.47913733228711, 
    246.220386866725, -17.9005935336818, -5.47913733228711, 44.7227434463571, 
    -25.6377521132833, -13.5971926678025, 246.220386866725, -25.6377521132833, 
    4382.71119393363, -328.980621036479, -17.9005935336818, -13.5971926678025, 
    -328.980621036479, 277.675248263165), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302756673017622, -0.00484004208951038
    ), logphi = c(0.494541519149409, -1.57276098095067)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_13 = structure(list(
    par = c(-0.35752402578899, 0.0965220228168643, 0.50482259531876, 
    -1.61529211910625), value = 61.6737535812265, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.5598707923, -4.49856466033793, 
    263.032617368708, -22.3436041579816, -4.49856466033793, 49.6413836792442, 
    -27.9407792262987, -15.7555627566808, 263.032617368708, -27.9407792262987, 
    4884.50642059135, -410.372871915143, -22.3436041579816, -15.7555627566808, 
    -410.372871915143, 307.556413762455), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35752402578899, 0.0965220228168643
    ), logphi = c(0.50482259531876, -1.61529211910625)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_14 = structure(list(
    par = c(-0.384515145310081, -0.177438668196812, 0.521117925464695, 
    -1.62999541013675), value = 96.6404085171057, counts = structure(c(283L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.7647036817657, -11.6167297647962, 
    262.228803091347, -29.3690905301958, -11.6167297647962, 30.0721976351781, 
    -43.1500517805716, -11.0613666066683, 262.228803091347, -43.1500517805716, 
    5242.67968673797, -470.873549737405, -29.3690905301958, -11.0613666066683, 
    -470.873549737405, 334.818568529016), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.384515145310081, -0.177438668196812
    ), logphi = c(0.521117925464695, -1.62999541013675)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_15 = structure(list(
    par = c(-0.286333884819419, -0.105309174864486, 0.499297671168854, 
    -1.61380918103602), value = 99.0483644606621, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.0117925852019, -9.59170763081829, 
    254.191426840578, -19.7664830015043, -9.59170763081829, 36.2164500984363, 
    -30.378795797148, -12.3029115979278, 254.191426840578, -30.378795797148, 
    4945.6372121206, -365.392736259906, -19.7664830015043, -12.3029115979278, 
    -365.392736259906, 304.923973587279), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286333884819419, -0.105309174864486
    ), logphi = c(0.499297671168854, -1.61380918103602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_16 = structure(list(
    par = c(-0.229018814281662, 0.0967075795105896, 0.500072977000708, 
    -1.67771505974959), value = 69.2599206451344, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.790602646039, -8.39365922900015, 
    268.719425580599, -16.3593020836572, -8.39365922900015, 50.0738829458669, 
    -24.6605691849311, -14.855174946149, 268.719425580599, -24.6605691849311, 
    5744.15847936294, -403.186288423285, -16.3593020836572, -14.855174946149, 
    -403.186288423285, 332.483782166548), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229018814281662, 0.0967075795105896
    ), logphi = c(0.500072977000708, -1.67771505974959)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_17 = structure(list(
    par = c(-0.36545838215335, -0.384062738596678, 0.501157301561446, 
    -1.62611190802713), value = 98.2814186383101, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.8025423749732, -10.3614424773468, 
    254.779688628304, -25.0880645609186, -10.3614424773468, 23.5066440268383, 
    -35.5578774673404, -9.22824070137551, 254.779688628304, -35.5578774673404, 
    5209.34868091771, -393.247794470142, -25.0880645609186, -9.22824070137551, 
    -393.247794470142, 320.636189051982), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36545838215335, -0.384062738596678
    ), logphi = c(0.501157301561446, -1.62611190802713)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_18 = structure(list(
    par = c(-0.25753235026534, 0.094061262551201, 0.489309975663898, 
    -1.67365055385997), value = 63.3133099189485, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.103963720296, -6.0584030432409, 
    267.725029120314, -15.009455212045, -6.0584030432409, 52.2874393258377, 
    -19.934286534351, -15.1462217683473, 267.725029120314, -19.934286534351, 
    5651.95123112794, -377.04105044245, -15.009455212045, -15.1462217683473, 
    -377.04105044245, 323.764364463131), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25753235026534, 0.094061262551201
    ), logphi = c(0.489309975663898, -1.67365055385997)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_19 = structure(list(
    par = c(-0.191482479393371, 0.00579330484818893, 0.472507308993231, 
    -1.6285119686998), value = 93.7585385842217, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.084874132838, -8.46189828962451, 
    246.936671526754, -8.83538727336486, -8.46189828962451, 41.1929306451952, 
    -16.1903863542534, -13.0204434363179, 246.936671526754, -16.1903863542534, 
    5035.72073085934, -272.182691940515, -8.83538727336486, -13.0204434363179, 
    -272.182691940515, 290.297445552312), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191482479393371, 0.00579330484818893
    ), logphi = c(0.472507308993231, -1.6285119686998)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_20 = structure(list(
    par = c(-0.0984676092436196, -0.0581357051460774, 0.513935338207703, 
    -1.46789906662073), value = 119.189139665685, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.901668640892, -11.8540014995006, 
    210.164724130379, -13.8115561281182, -11.8540014995006, 40.4413967842743, 
    -28.2640987485649, -10.0507787781368, 210.164724130379, -28.2640987485649, 
    3349.15295276872, -272.872396458013, -13.8115561281182, -10.0507787781368, 
    -272.872396458013, 230.918705252492), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0984676092436196, -0.0581357051460774
    ), logphi = c(0.513935338207703, -1.46789906662073)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_21 = structure(list(
    par = c(-0.2675665619815, 0.0248860224893586, 0.475999222195242, 
    -1.61567187352653), value = 83.4587599471662, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.343073706, -5.24726346284865, 
    250.913879760617, -12.2705682059632, -5.24726346284865, 44.3226271258368, 
    -17.3961549059243, -14.01075165397, 250.913879760617, -17.3961549059243, 
    4853.42905560415, -294.699902728013, -12.2705682059632, -14.01075165397, 
    -294.699902728013, 286.118791219536), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2675665619815, 0.0248860224893586
    ), logphi = c(0.475999222195242, -1.61567187352653)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_22 = structure(list(
    par = c(-0.231641453220459, -0.0250887107261234, 0.520892667320913, 
    -1.6329826866954), value = 90.589236237661, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.659775099539, -12.5655262692703, 
    259.038452970373, -22.0371145296383, -12.5655262692703, 39.9624800273557, 
    -36.9543846758802, -12.460144004578, 259.038452970373, -36.9543846758802, 
    5223.54155316407, -431.592063872444, -22.0371145296383, -12.460144004578, 
    -431.592063872444, 326.500586439238), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231641453220459, -0.0250887107261234
    ), logphi = c(0.520892667320913, -1.6329826866954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_23 = structure(list(
    par = c(-0.0764051160606807, -0.168033772004221, 0.487813939692179, 
    -1.55171508382674), value = 115.628638139848, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.056771115007, -13.7801276487437, 
    222.208013909153, -8.61459022871713, -13.7801276487437, 32.3444281313812, 
    -23.6483632463091, -9.88830679737873, 222.208013909153, -23.6483632463091, 
    4214.20994191024, -235.775371244529, -8.61459022871713, -9.88830679737873, 
    -235.775371244529, 261.597432906768), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0764051160606807, -0.168033772004221
    ), logphi = c(0.487813939692179, -1.55171508382674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_24 = structure(list(
    par = c(-0.331327723016885, -0.306797688780509, 0.49941524262203, 
    -1.63775128243649), value = 100.770364032872, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.5540384665262, -11.6365857287803, 
    257.566455864833, -23.1445478604542, -11.6365857287803, 24.4442377415055, 
    -34.4531533329473, -10.0940605793909, 257.566455864833, -34.4531533329473, 
    5337.26461193496, -389.006741331244, -23.1445478604542, -10.0940605793909, 
    -389.006741331244, 323.072754767395), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331327723016885, -0.306797688780509
    ), logphi = c(0.49941524262203, -1.63775128243649)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_25 = structure(list(
    par = c(-0.237105235644743, -0.151941523841823, 0.526034234984222, 
    -1.5092956272816), value = 115.051961525678, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.3651610795278, -11.0940821613781, 
    228.383283165101, -23.0460301420266, -11.0940821613781, 34.1438054363152, 
    -35.3251786577857, -9.81629586860322, 228.383283165101, -35.3251786577857, 
    3793.90782748601, -360.086319730613, -23.0460301420266, -9.81629586860322, 
    -360.086319730613, 265.486533496784), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237105235644743, -0.151941523841823
    ), logphi = c(0.526034234984222, -1.5092956272816)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_26 = structure(list(
    par = c(-0.317949711686014, -0.0920701557318942, 0.502259237006294, 
    -1.6486719788575), value = 89.0763774377529, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.7279679337498, -10.7393079993301, 
    264.722451280619, -22.0781984108243, -10.7393079993301, 34.6186881010624, 
    -32.9104412415404, -12.7974379235951, 264.722451280619, -32.9104412415404, 
    5413.528698611, -409.184261302542, -22.0781984108243, -12.7974379235951, 
    -409.184261302542, 326.261579036924), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317949711686014, -0.0920701557318942
    ), logphi = c(0.502259237006294, -1.6486719788575)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_27 = structure(list(
    par = c(-0.0881442489803305, 0.302918591593389, 0.52231181169195, 
    -1.51850698360665), value = 79.4566316915702, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.399042031735, -5.50829301459999, 
    225.233194068863, -12.6646994864643, -5.50829301459999, 68.9410823078163, 
    -23.5611580876594, -14.3622454906733, 225.233194068863, -23.5611580876594, 
    3760.9069261002, -339.555643211753, -12.6646994864643, -14.3622454906733, 
    -339.555643211753, 257.611947393599), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0881442489803305, 0.302918591593389
    ), logphi = c(0.52231181169195, -1.51850698360665)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_28 = structure(list(
    par = c(-0.303764855979616, 0.044390530978935, 0.510229204310401, 
    -1.6186454023106), value = 81.1012127284048, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.027950974635, -6.93406903806704, 
    260.47293587439, -21.9258870508554, -6.93406903806704, 48.1519164630129, 
    -31.5780894304396, -14.3155428524722, 260.47293587439, -31.5780894304396, 
    4972.70223930712, -412.617839202767, -21.9258870508554, -14.3155428524722, 
    -412.617839202767, 312.77077463443), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303764855979616, 0.044390530978935
    ), logphi = c(0.510229204310401, -1.6186454023106)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_29 = structure(list(
    par = c(-0.159497680231797, 0.120789335275641, 0.456568393829782, 
    -1.61042366907761), value = 71.7999160920151, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.493344924152, -1.88182366755996, 
    234.873824421555, -2.41223502150945, -1.88182366755996, 56.5137552257511, 
    -6.44042612663043, -13.2627751661119, 234.873824421555, -6.44042612663043, 
    4723.05289159181, -208.109666051115, -2.41223502150945, -13.2627751661119, 
    -208.109666051115, 267.998076829201), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159497680231797, 0.120789335275641
    ), logphi = c(0.456568393829782, -1.61042366907761)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_30 = structure(list(
    par = c(-0.402541907577305, -0.221908952631668, 0.509603455860234, 
    -1.59656595178134), value = 103.250816838078, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.2744342146348, -9.4157489947122, 
    254.44659792484, -27.432976779096, -9.4157489947122, 29.8353405554508, 
    -37.8336895998643, -10.9719553744725, 254.44659792484, -37.8336895998643, 
    4789.19853532034, -413.326324880003, -27.432976779096, -10.9719553744725, 
    -413.326324880003, 309.339204932257), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.402541907577305, -0.221908952631668
    ), logphi = c(0.509603455860234, -1.59656595178134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_31 = structure(list(
    par = c(-0.0526999906153704, 0.163298915024602, 0.476037489231652, 
    -1.54208169702275), value = 86.8969244920256, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.110032964761, -5.33271269986813, 
    216.059708844085, -2.05930212970884, -5.33271269986813, 60.4316693397777, 
    -13.5823975533356, -12.5065076250763, 216.059708844085, -13.5823975533356, 
    3993.13233870302, -204.306391058395, -2.05930212970884, -12.5065076250763, 
    -204.306391058395, 244.484990020055), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0526999906153704, 0.163298915024602
    ), logphi = c(0.476037489231652, -1.54208169702275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_32 = structure(list(
    par = c(-0.171372013332932, -0.185452556451429, 0.475039514372714, 
    -1.56733231923721), value = 95.941745162287, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.480439241835, -8.81243883554816, 
    230.32038904347, -9.55754597598002, -8.81243883554816, 35.7675284554659, 
    -21.3999764433481, -10.5859991350599, 230.32038904347, -21.3999764433481, 
    4348.43075550972, -227.089264228653, -9.55754597598002, -10.5859991350599, 
    -227.089264228653, 263.09874088426), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.171372013332932, -0.185452556451429
    ), logphi = c(0.475039514372714, -1.56733231923721)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_33 = structure(list(
    par = c(-0.234115089084831, -0.279996659226251, 0.474766044399298, 
    -1.64448788024634), value = 100.962007032549, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.129660429995, -11.1551539561106, 
    251.097256732891, -13.7428688198327, -11.1551539561106, 26.615496889093, 
    -23.8565972061622, -10.397627441705, 251.097256732891, -23.8565972061622, 
    5349.75669384607, -289.988174930755, -13.7428688198327, -10.397627441705, 
    -289.988174930755, 306.243515733939), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234115089084831, -0.279996659226251
    ), logphi = c(0.474766044399298, -1.64448788024634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_34 = structure(list(
    par = c(-0.267849853020744, 0.0315213293777188, 0.508460250129866, 
    -1.67917443148341), value = 75.4712432098631, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.0842023494688, -10.6117215850077, 
    271.932499540384, -20.6185296818262, -10.6117215850077, 42.5777956571949, 
    -32.0179230364204, -14.1656629573106, 271.932499540384, -32.0179230364204, 
    5812.60488860025, -438.31231726088, -20.6185296818262, -14.1656629573106, 
    -438.31231726088, 341.59018723301), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267849853020744, 0.0315213293777188
    ), logphi = c(0.508460250129866, -1.67917443148341)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_35 = structure(list(
    par = c(-0.309281854552937, -0.192694315774791, 0.486715037143775, 
    -1.6795060327371), value = 82.2065771701286, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.8189756151407, -9.84304106310674, 
    267.301510010753, -19.3049298768955, -9.84304106310674, 32.5728214498611, 
    -28.9534776918288, -11.8457273892147, 267.301510010753, -28.9534776918288, 
    5848.74676423297, -377.652146449137, -19.3049298768955, -11.8457273892147, 
    -377.652146449137, 332.824257714748), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309281854552937, -0.192694315774791
    ), logphi = c(0.486715037143775, -1.6795060327371)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_36 = structure(list(
    par = c(-0.544293898427992, 0.0989339375189268, 0.504556415700831, 
    -1.71961901393801), value = 46.7390626220883, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.660851723901, -4.40396059531167, 
    298.085392131497, -31.5529942760406, -4.40396059531167, 47.5397634502883, 
    -35.4423650819058, -18.1697271557368, 298.085392131497, -35.4423650819058, 
    6356.7872434156, -553.33986124495, -31.5529942760406, -18.1697271557368, 
    -553.33986124495, 368.37043416682), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.544293898427992, 0.0989339375189268
    ), logphi = c(0.504556415700831, -1.71961901393801)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_37 = structure(list(
    par = c(-0.305826434076071, 0.232968594950907, 0.512330853652277, 
    -1.58999559542795), value = 61.8961049711191, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.279535088547, -0.277452432584369, 
    256.119863561111, -20.232192829539, -0.277452432584369, 65.15014288766, 
    -23.899218650314, -16.96783616012, 256.119863561111, -23.899218650314, 
    4530.98718429601, -404.995248286966, -20.232192829539, -16.96783616012, 
    -404.995248286966, 294.833716345977), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305826434076071, 0.232968594950907
    ), logphi = c(0.512330853652277, -1.58999559542795)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_38 = structure(list(
    par = c(-0.136012164137076, 0.0722671204517688, 0.494653020461404, 
    -1.50956609990241), value = 96.7865007166732, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.197707261127, -8.18346042308349, 
    220.049399459299, -9.95639948442317, -8.18346042308349, 47.6645557974109, 
    -21.8859320781917, -12.3861765430888, 220.049399459299, -21.8859320781917, 
    3689.68972063044, -253.504704687657, -9.95639948442317, -12.3861765430888, 
    -253.504704687657, 240.144528717678), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.136012164137076, 0.0722671204517688
    ), logphi = c(0.494653020461404, -1.50956609990241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_39 = structure(list(
    par = c(-0.0936664948845476, 0.0461782347167625, 0.506002759653854, 
    -1.50202686667016), value = 111.349033257562, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.357567387761, -10.1616641465796, 
    217.440439971739, -11.2948930670598, -10.1616641465796, 47.4728158863513, 
    -25.4537515651521, -11.5648212464237, 217.440439971739, -25.4537515651521, 
    3648.51586539316, -273.094576073163, -11.2948930670598, -11.5648212464237, 
    -273.094576073163, 242.816181600602), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0936664948845476, 0.0461782347167625
    ), logphi = c(0.506002759653854, -1.50202686667016)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_40 = structure(list(
    par = c(-0.373719076469521, -0.0044120149064151, 0.505571408578169, 
    -1.68229890513301), value = 74.090814807962, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.8724619651812, -8.5550634381093, 
    278.008808294317, -24.8748270124111, -8.5550634381093, 41.8311474703614, 
    -34.4583164491041, -14.5921307801444, 278.008808294317, -34.4583164491041, 
    5858.90172315828, -464.924517581622, -24.8748270124111, -14.5921307801444, 
    -464.924517581622, 345.98336233671), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.373719076469521, -0.0044120149064151
    ), logphi = c(0.505571408578169, -1.68229890513301)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_41 = structure(list(
    par = c(-0.380926060436379, -0.105121361090767, 0.493914335423287, 
    -1.58528552679906), value = 90.9937192911803, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.815104769694, -6.43339636141604, 
    252.299294956515, -21.9779388963559, -6.43339636141604, 36.8551331924039, 
    -29.3174290888487, -12.9836004578721, 252.299294956515, -29.3174290888487, 
    4559.32150757832, -352.613573394223, -21.9779388963559, -12.9836004578721, 
    -352.613573394223, 287.903158579184), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.380926060436379, -0.105121361090767
    ), logphi = c(0.493914335423287, -1.58528552679906)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_42 = structure(list(
    par = c(-0.343230096671098, -0.201998050941437, 0.509192314786353, 
    -1.6283449818351), value = 92.5742337161915, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.768856933541, -10.4868632675448, 
    259.204589507789, -25.1524456480468, -10.4868632675448, 30.8828228305913, 
    -37.3352362927903, -11.0951590457375, 259.204589507789, -37.3352362927903, 
    5198.44463763164, -419.327147225701, -25.1524456480468, -11.0951590457375, 
    -419.327147225701, 323.67808933742), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343230096671098, -0.201998050941437
    ), logphi = c(0.509192314786353, -1.6283449818351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_43 = structure(list(
    par = c(-0.145568069660671, 0.104412714282662, 0.502240586032255, 
    -1.52410466703463), value = 92.052281364639, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.052134535418, -8.00790389732242, 
    226.018683669338, -11.9974407972734, -8.00790389732242, 50.5756288333714, 
    -23.5259966281376, -12.9200253198292, 226.018683669338, -23.5259966281376, 
    3844.49722523428, -287.95323608577, -11.9974407972734, -12.9200253198292, 
    -287.95323608577, 252.105503342648), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.145568069660671, 0.104412714282662
    ), logphi = c(0.502240586032255, -1.52410466703463)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_44 = structure(list(
    par = c(-0.354794930950243, 0.0254073421352149, 0.492831615264433, 
    -1.5900068436198), value = 82.2072545717997, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.118351703875, -3.8640933013312, 
    253.786719067506, -19.5797743014481, -3.8640933013312, 47.0721321441658, 
    -24.8877704649431, -14.6697874292556, 253.786719067506, -24.8877704649431, 
    4565.38474666957, -350.395764867173, -19.5797743014481, -14.6697874292556, 
    -350.395764867173, 286.318704251443), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354794930950243, 0.0254073421352149
    ), logphi = c(0.492831615264433, -1.5900068436198)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_45 = structure(list(
    par = c(-0.255547492004218, -0.0417963960468969, 0.506588852786091, 
    -1.61435755183599), value = 89.8686691675264, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.55866234282, -10.878099541145, 
    254.431850191139, -19.7100954348883, -10.878099541145, 37.8826350555528, 
    -31.3709336730028, -12.7400669303057, 254.431850191139, -31.3709336730028, 
    4950.41812241936, -381.83312587492, -19.7100954348883, -12.7400669303057, 
    -381.83312587492, 308.178910248813), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255547492004218, -0.0417963960468969
    ), logphi = c(0.506588852786091, -1.61435755183599)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_46 = structure(list(
    par = c(-0.220237249793364, -0.167539840896037, 0.487397001240229, 
    -1.61988998695928), value = 96.7996943800073, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.802762748018, -11.0417585545974, 
    248.454200264092, -14.8656663814251, -11.0417585545974, 32.4214812152945, 
    -26.0707004038352, -11.2978357478255, 248.454200264092, -26.0707004038352, 
    5023.13575827529, -312.589980662636, -14.8656663814251, -11.2978357478255, 
    -312.589980662636, 299.629461093076), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220237249793364, -0.167539840896037
    ), logphi = c(0.487397001240229, -1.61988998695928)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_47 = structure(list(
    par = c(-0.301437583353802, 0.251165858713973, 0.528802060406086, 
    -1.54350123505006), value = 77.0980874133907, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.139366286508, -2.15587439811316, 
    246.56902445841, -23.6153368273762, -2.15587439811316, 63.0527132798875, 
    -29.4415132593429, -16.30501819605, 246.56902445841, -29.4415132593429, 
    4017.33836793738, -419.654527512137, -23.6153368273762, -16.30501819605, 
    -419.654527512137, 282.04267717058), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301437583353802, 0.251165858713973
    ), logphi = c(0.528802060406086, -1.54350123505006)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_48 = structure(list(
    par = c(-0.394011073351052, 0.0183486676887648, 0.51623313392853, 
    -1.53774888737033), value = 84.4142498031001, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.3108317420545, -4.37003524922375, 
    245.518440884496, -26.3181331465745, -4.37003524922375, 45.4188442340353, 
    -33.6531398268392, -13.799078468324, 245.518440884496, -33.6531398268392, 
    4014.20689579979, -392.216127490741, -26.3181331465745, -13.799078468324, 
    -392.216127490741, 277.031236525005), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394011073351052, 0.0183486676887648
    ), logphi = c(0.51623313392853, -1.53774888737033)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_49 = structure(list(
    par = c(-0.333021810041432, -0.0445248116678327, 0.507162978416097, 
    -1.60714023806777), value = 86.8455498081733, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.8441593407476, -9.06519947818651, 
    257.401287484527, -23.0297554359993, -9.06519947818651, 37.8493017407777, 
    -32.9535720879903, -13.2423803762549, 257.401287484527, -32.9535720879903, 
    4851.67321314961, -399.678045560847, -23.0297554359993, -13.2423803762549, 
    -399.678045560847, 307.271243162432), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333021810041432, -0.0445248116678327
    ), logphi = c(0.507162978416097, -1.60714023806777)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_50 = structure(list(
    par = c(-0.241902504965705, -0.134752574634457, 0.501034657811336, 
    -1.68498751091251), value = 90.7214802148211, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.4343265497926, -13.1913465004629, 
    266.785692740967, -19.2199136002102, -13.1913465004629, 32.4874251305118, 
    -32.3945083664512, -11.8172431058383, 266.785692740967, -32.3945083664512, 
    5956.94728633944, -405.313517656936, -19.2199136002102, -11.8172431058383, 
    -405.313517656936, 342.420634421359), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241902504965705, -0.134752574634457
    ), logphi = c(0.501034657811336, -1.68498751091251)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_51 = structure(list(
    par = c(-0.0874176544554272, 0.00432825520292867, 0.507612252653268, 
    -1.54719993628181), value = 94.4325569127722, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.44869854671, -11.8732187424087, 
    227.644898469492, -12.1915154878138, -11.8732187424087, 45.2446456904454, 
    -27.2216352215082, -11.4417966834424, 227.644898469492, -27.2216352215082, 
    4150.40010153689, -301.638531942316, -12.1915154878138, -11.4417966834424, 
    -301.638531942316, 268.45948384846), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0874176544554272, 0.00432825520292867
    ), logphi = c(0.507612252653268, -1.54719993628181)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_52 = structure(list(
    par = c(-0.467832324554623, -0.282996350298234, 0.519072641001026, 
    -1.61445671908653), value = 94.5443627115485, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.2675436461489, -9.5157687312053, 
    258.854177030088, -32.5830436480601, -9.5157687312053, 27.2950861415211, 
    -44.5051966124765, -9.89384407112937, 258.854177030088, -44.5051966124765, 
    5073.60152161596, -475.075529669411, -32.5830436480601, -9.89384407112937, 
    -475.075529669411, 331.15801346284), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467832324554623, -0.282996350298234
    ), logphi = c(0.519072641001026, -1.61445671908653)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_53 = structure(list(
    par = c(-0.362347913725378, 0.084596158721898, 0.51055134610685, 
    -1.5401410729086), value = 82.2533761714764, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.041597148414, -3.20548607390947, 
    244.810491764724, -23.030175963612, -3.20548607390947, 51.4581678565662, 
    -29.0864833409898, -14.7677498745225, 244.810491764724, -29.0864833409898, 
    4006.31495981329, -372.323163849941, -23.030175963612, -14.7677498745225, 
    -372.323163849941, 272.72839486514), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362347913725378, 0.084596158721898
    ), logphi = c(0.51055134610685, -1.5401410729086)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_54 = structure(list(
    par = c(-0.291443867742258, 0.347394508456002, 0.498811856069704, 
    -1.51795542021915), value = 63.4128757625528, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.653146779645, 7.63850183105319, 
    232.960247871006, -13.6792495606386, 7.63850183105319, 76.3706045994184, 
    -11.536035621873, -17.4181545506968, 232.960247871006, -11.536035621873, 
    3653.11337754903, -312.911500609303, -13.6792495606386, -17.4181545506968, 
    -312.911500609303, 244.25653754534), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291443867742258, 0.347394508456002
    ), logphi = c(0.498811856069704, -1.51795542021915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_55 = structure(list(
    par = c(-0.38867101819397, -0.167930830883271, 0.513562130255003, 
    -1.59648044220564), value = 88.5277613992281, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.528431380297, -9.43465968106239, 
    255.277695458744, -27.4955112278263, -9.43465968106239, 32.3162964832591, 
    -38.4732537206389, -11.4796343204659, 255.277695458744, -38.4732537206389, 
    4778.9128003366, -423.290323599446, -27.4955112278263, -11.4796343204659, 
    -423.290323599446, 310.789763155128), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38867101819397, -0.167930830883271
    ), logphi = c(0.513562130255003, -1.59648044220564)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_56 = structure(list(
    par = c(-0.265133561858251, 0.0604261435140076, 0.506322576689615, 
    -1.73894243245145), value = 54.7736167594161, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.3165487384288, -10.9499181633055, 
    285.555017104144, -20.0964023822081, -10.9499181633055, 45.6871812097859, 
    -31.0470266136065, -14.7894674835669, 285.555017104144, -31.0470266136065, 
    6711.74112740403, -471.246465229669, -20.0964023822081, -14.7894674835669, 
    -471.246465229669, 367.000536066087), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265133561858251, 0.0604261435140076
    ), logphi = c(0.506322576689615, -1.73894243245145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_57 = structure(list(
    par = c(-0.196360718851436, -0.0272237202119182, 0.486900723026589, 
    -1.56890550248537), value = 89.973623764977, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.878717821729, -7.55134907493016, 
    236.445376224026, -11.9812135839226, -7.55134907493016, 43.5419795152825, 
    -22.4207275287824, -12.4000063621565, 236.445376224026, -22.4207275287824, 
    4345.09170897002, -276.59163374949, -11.9812135839226, -12.4000063621565, 
    -276.59163374949, 269.05857042081), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196360718851436, -0.0272237202119182
    ), logphi = c(0.486900723026589, -1.56890550248537)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_58 = structure(list(
    par = c(-0.369890218630902, 0.173859552778015, 0.49383310390062, 
    -1.58463800086933), value = 64.5495463094902, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.856365575922, 2.59552745518477, 
    254.801418329009, -18.7312679003071, 2.59552745518477, 62.8946751888293, 
    -18.8638306788391, -16.950366260815, 254.801418329009, -18.8638306788391, 
    4436.14442531981, -358.611478169735, -18.7312679003071, -16.950366260815, 
    -358.611478169735, 281.167212310862), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369890218630902, 0.173859552778015
    ), logphi = c(0.49383310390062, -1.58463800086933)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_59 = structure(list(
    par = c(-0.280566411536598, -0.0317324449625958, 0.5045736958189, 
    -1.58944223408523), value = 93.2499921005609, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.808572260609, -8.90507766371229, 
    250.009965135689, -19.9029949428109, -8.90507766371229, 39.6878957502622, 
    -30.1681797587605, -12.9678767386565, 250.009965135689, -30.1681797587605, 
    4623.59797622724, -365.247641571642, -19.9029949428109, -12.9678767386565, 
    -365.247641571642, 293.894730148736), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280566411536598, -0.0317324449625958
    ), logphi = c(0.5045736958189, -1.58944223408523)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_60 = structure(list(
    par = c(-0.2875158430415, -0.0202950019326366, 0.500773033332749, 
    -1.60306621180331), value = 79.254402632075, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.282574754753, -6.95699930375326, 
    253.392279084608, -19.3517563591428, -6.95699930375326, 44.3004429229177, 
    -28.817551758209, -13.3614225905632, 253.392279084608, -28.817551758209, 
    4778.54247886711, -365.607608335594, -19.3517563591428, -13.3614225905632, 
    -365.607608335594, 298.537411008937), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2875158430415, -0.0202950019326366
    ), logphi = c(0.500773033332749, -1.60306621180331)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_61 = structure(list(
    par = c(-0.394857893127557, -0.024498730381585, 0.507034200923905, 
    -1.73976145052466), value = 58.9533319484168, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.50890301251, -10.1820435922662, 
    291.144779929198, -26.6294455624205, -10.1820435922662, 39.9745619326097, 
    -38.8103406514517, -14.4303431657278, 291.144779929198, -38.8103406514517, 
    6768.53162599755, -517.706204453461, -26.6294455624205, -14.4303431657278, 
    -517.706204453461, 375.801985406099), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394857893127557, -0.024498730381585
    ), logphi = c(0.507034200923905, -1.73976145052466)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_62 = structure(list(
    par = c(-0.277274976745516, -0.0989632685557975, 0.463446220088408, 
    -1.73459455039064), value = 63.2633050417777, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.904251754689, -8.0823933910068, 
    275.216587525051, -12.7021003564209, -8.0823933910068, 37.2904292529341, 
    -15.9844809548559, -12.9779689199694, 275.216587525051, -15.9844809548559, 
    6576.58516443505, -341.645585880457, -12.7021003564209, -12.9779689199694, 
    -341.645585880457, 339.73287126976), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277274976745516, -0.0989632685557975
    ), logphi = c(0.463446220088408, -1.73459455039064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_63 = structure(list(
    par = c(-0.361571619375783, -0.293896358896902, 0.480664006616499, 
    -1.70571613580829), value = 87.3766011450132, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.0200756309412, -10.8354800900656, 
    273.161959519541, -21.1627919401991, -10.8354800900656, 25.2913930651744, 
    -30.0017408072506, -11.0587774244664, 273.161959519541, -30.0017408072506, 
    6261.21569763782, -392.589458055426, -21.1627919401991, -11.0587774244664, 
    -392.589458055426, 345.299476396832), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361571619375783, -0.293896358896902
    ), logphi = c(0.480664006616499, -1.70571613580829)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_64 = structure(list(
    par = c(-0.591091664475537, -0.114141168920524, 0.521823508696818, 
    -1.68716282351576), value = 58.3089214647264, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.9688275836461, -8.36667486225906, 
    283.11066800768, -38.2301970560661, -8.36667486225906, 35.3760201221576, 
    -54.2964157332904, -12.7868277779442, 283.11066800768, -54.2964157332904, 
    6053.8624550901, -591.409630809281, -38.2301970560661, -12.7868277779442, 
    -591.409630809281, 376.863857031395), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.591091664475537, -0.114141168920524
    ), logphi = c(0.521823508696818, -1.68716282351576)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_65 = structure(list(
    par = c(-0.403890468363047, 0.0424217086021421, 0.512795761689432, 
    -1.63818197807597), value = 84.005760448894, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.9792233854698, -8.16578942774981, 
    270.980220708594, -27.0629784999699, -8.16578942774981, 41.6044570741292, 
    -35.604083091556, -15.1844845319715, 270.980220708594, -35.604083091556, 
    5230.33110584592, -464.11453602957, -27.0629784999699, -15.1844845319715, 
    -464.11453602957, 328.854399747058), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403890468363047, 0.0424217086021421
    ), logphi = c(0.512795761689432, -1.63818197807597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_66 = structure(list(
    par = c(-0.133447233868045, -0.0692177013285258, 0.490285700513858, 
    -1.68220561654821), value = 89.5774669611714, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.885137644814, -13.455281223429, 
    257.527339527996, -11.8528721291256, -13.455281223429, 37.513775541953, 
    -24.3934265462542, -11.9005955596663, 257.527339527996, -24.3934265462542, 
    5876.12619430899, -341.339251459516, -11.8528721291256, -11.9005955596663, 
    -341.339251459516, 330.29541819829), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.133447233868045, -0.0692177013285258
    ), logphi = c(0.490285700513858, -1.68220561654821)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_67 = structure(list(
    par = c(0.0306452228905479, 0.0627234172827747, 0.491815629966398, 
    -1.71580802651007), value = 73.7987271096296, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.957409954769, -15.9572090652205, 
    250.42602861447, -4.69734442809511, -15.9572090652205, 48.5345605198972, 
    -19.1873368500239, -11.7542342490395, 250.42602861447, -19.1873368500239, 
    6376.84773725766, -322.161272798382, -4.69734442809511, -11.7542342490395, 
    -322.161272798382, 342.587245778958), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0306452228905479, 0.0627234172827747
    ), logphi = c(0.491815629966398, -1.71580802651007)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_68 = structure(list(
    par = c(-0.207923165975685, -0.211337127305257, 0.516271450060322, 
    -1.59941157415235), value = 112.324962745624, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.208039496697, -13.7160421616045, 
    245.422905379655, -20.8788415978489, -13.7160421616045, 29.8475495625894, 
    -35.454552143932, -9.91063288857674, 245.422905379655, -35.454552143932, 
    4845.8783493075, -381.709566125821, -20.8788415978489, -9.91063288857674, 
    -381.709566125821, 308.164987895765), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207923165975685, -0.211337127305257
    ), logphi = c(0.516271450060322, -1.59941157415235)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_69 = structure(list(
    par = c(-0.143342874649836, -0.00798790998558401, 0.485171240659336, 
    -1.62346645184123), value = 92.0291825424402, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.263780009338, -10.3631379495539, 
    244.842690474201, -9.97517550871407, -10.3631379495539, 42.233236719369, 
    -20.9597474025713, -12.4463899418004, 244.842690474201, -20.9597474025713, 
    5022.56921853217, -294.225585635743, -9.97517550871407, -12.4463899418004, 
    -294.225585635743, 295.959761562159), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143342874649836, -0.00798790998558401
    ), logphi = c(0.485171240659336, -1.62346645184123)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_70 = structure(list(
    par = c(-0.130044694422076, 0.366687540900655, 0.492168304389651, 
    -1.59935206524723), value = 61.3393696861548, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.99737813324, 1.40965482842148, 
    239.655899344271, -6.3775752403572, 1.40965482842148, 76.2627973944774, 
    -7.49255367438195, -16.0726239473163, 239.655899344271, -7.49255367438195, 
    4591.50745686543, -314.058096846814, -6.3775752403572, -16.0726239473163, 
    -314.058096846814, 279.76105058336), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130044694422076, 0.366687540900655
    ), logphi = c(0.492168304389651, -1.59935206524723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_71 = structure(list(
    par = c(-0.207596898989627, -0.280183483511153, 0.50356922568307, 
    -1.61553658879009), value = 105.946681241693, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.0938767136099, -13.4884387534839, 
    246.424833093783, -18.5976205049343, -13.4884387534839, 26.1869032698314, 
    -32.0921350152048, -9.60152293316696, 246.424833093783, -32.0921350152048, 
    5048.13041092689, -351.48809085328, -18.5976205049343, -9.60152293316696, 
    -351.48809085328, 309.707934981418), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207596898989627, -0.280183483511153
    ), logphi = c(0.50356922568307, -1.61553658879009)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_72 = structure(list(
    par = c(-0.239505271215579, -0.0343868686993999, 0.48122153699569, 
    -1.55709431529711), value = 96.395524704093, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.781087310054, -6.62140353213658, 
    235.43331947451, -12.1754861499568, -6.62140353213658, 41.4315542158761, 
    -21.0045921740232, -12.6511689391151, 235.43331947451, -21.0045921740232, 
    4186.55603974827, -260.925262002942, -12.1754861499568, -12.6511689391151, 
    -260.925262002942, 259.553044738681), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239505271215579, -0.0343868686993999
    ), logphi = c(0.48122153699569, -1.55709431529711)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_73 = structure(list(
    par = c(-0.138660664293873, 0.116370344518498, 0.478544393246673, 
    -1.51093484743452), value = 89.7417407921387, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.416220524561, -4.83346705948406, 
    216.665532519755, -5.76410811170547, -4.83346705948406, 52.461916780544, 
    -15.9442346863159, -12.8056720782865, 216.665532519755, -15.9442346863159, 
    3656.97271251264, -208.926334609671, -5.76410811170547, -12.8056720782865, 
    -208.926334609671, 230.580083105281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138660664293873, 0.116370344518498
    ), logphi = c(0.478544393246673, -1.51093484743452)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_74 = structure(list(
    par = c(-0.405314509183077, -0.170361951238429, 0.52736415881611, 
    -1.6345937952043), value = 92.7800544533014, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.7747229387701, -11.6211530283294, 
    264.032554177618, -31.5612816965682, -11.6211530283294, 30.6822169555687, 
    -46.6494894446612, -10.8862597958392, 264.032554177618, -46.6494894446612, 
    5319.02735939127, -500.452389509576, -31.5612816965682, -10.8862597958392, 
    -500.452389509576, 342.994193651691), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.405314509183077, -0.170361951238429
    ), logphi = c(0.52736415881611, -1.6345937952043)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_75 = structure(list(
    par = c(-0.300853832339665, -0.0252569079115412, 0.487570922743945, 
    -1.55498958483814), value = 94.6383955420226, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.335018239814, -5.67062581424693, 
    240.286768793396, -16.0057498987953, -5.67062581424693, 41.577289415784, 
    -23.4156775995586, -13.2627354290094, 240.286768793396, -23.4156775995586, 
    4164.85439938796, -293.611973036789, -16.0057498987953, -13.2627354290094, 
    -293.611973036789, 263.400980266226), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300853832339665, -0.0252569079115412
    ), logphi = c(0.487570922743945, -1.55498958483814)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_76 = structure(list(
    par = c(-0.239136114892237, -0.22613598361919, 0.494017833568617, 
    -1.5594036413842), value = 107.053011731754, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.215884837165, -10.0149917514614, 
    235.84001725041, -16.7147015055491, -10.0149917514614, 30.7306180111766, 
    -28.0864671999836, -10.3490462439737, 235.84001725041, -28.0864671999836, 
    4307.19479351183, -294.872037143179, -16.7147015055491, -10.3490462439737, 
    -294.872037143179, 272.51569322928), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239136114892237, -0.22613598361919
    ), logphi = c(0.494017833568617, -1.5594036413842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_77 = structure(list(
    par = c(-0.198615937736356, 0.128077808961294, 0.468906345229059, 
    -1.6271876414417), value = 74.4099450680983, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.992038700114, -3.75557468856869, 
    246.365029681783, -6.82776343019498, -3.75557468856869, 52.9862482636645, 
    -9.92874185357095, -14.2749663254449, 246.365029681783, -9.92874185357095, 
    4958.89404706062, -267.488749033262, -6.82776343019498, -14.2749663254449, 
    -267.488749033262, 284.479382102631), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198615937736356, 0.128077808961294
    ), logphi = c(0.468906345229059, -1.6271876414417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_78 = structure(list(
    par = c(-0.134472687517997, 0.188438939483824, 0.478011004743483, 
    -1.65025710184569), value = 62.6503075712997, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.968233641136, -5.25074289292604, 
    248.789861261756, -6.00778961334925, -5.25074289292604, 57.1857966527034, 
    -10.1885517285183, -14.3996488510822, 248.789861261756, -10.1885517285183, 
    5287.47332664636, -296.768286236926, -6.00778961334925, -14.3996488510822, 
    -296.768286236926, 300.705676160362), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.134472687517997, 0.188438939483824
    ), logphi = c(0.478011004743483, -1.65025710184569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_79 = structure(list(
    par = c(-0.285939727306341, -0.0951420269655041, 0.496447342942591, 
    -1.67692343329046), value = 83.8994353996969, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.4226646473776, -10.8535536611498, 
    268.442484717468, -19.7201965992377, -10.8535536611498, 35.8298647604727, 
    -30.4391389285286, -12.7584302145323, 268.442484717468, -30.4391389285286, 
    5803.21994753064, -401.79519548289, -19.7201965992377, -12.7584302145323, 
    -401.79519548289, 335.712411445144), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285939727306341, -0.0951420269655041
    ), logphi = c(0.496447342942591, -1.67692343329046)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_80 = structure(list(
    par = c(-0.29144825311435, -0.151783982047598, 0.510008385768277, 
    -1.77591534213265), value = 71.8562130960239, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.2195327156171, -15.2707313674227, 
    287.869183875245, -23.5857071722023, -15.2707313674227, 30.2851959510519, 
    -41.3986952807477, -11.5919974366108, 287.869183875245, -41.3986952807477, 
    7461.02281499716, -507.073918283751, -23.5857071722023, -11.5919974366108, 
    -507.073918283751, 391.701040577175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29144825311435, -0.151783982047598
    ), logphi = c(0.510008385768277, -1.77591534213265)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_81 = structure(list(
    par = c(-0.159506343526537, 0.0323816976262313, 0.491965573783555, 
    -1.59933917014518), value = 88.2771168690857, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.925526960656, -9.97617069486978, 
    242.453517117269, -11.5408202034928, -9.97617069486978, 43.6324949220079, 
    -22.4443410736797, -12.9123600842718, 242.453517117269, -22.4443410736797, 
    4713.06676088545, -305.262605701628, -11.5408202034928, -12.9123600842718, 
    -305.262605701628, 287.04160648374), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159506343526537, 0.0323816976262313
    ), logphi = c(0.491965573783555, -1.59933917014518)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_82 = structure(list(
    par = c(-0.166274250931001, -0.130143386084078, 0.50537003452343, 
    -1.5396686052338), value = 109.893583704258, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.776502139638, -12.2309835930423, 
    229.492587344282, -15.6311290773203, -12.2309835930423, 34.2604388876566, 
    -29.0688115427429, -10.5478382401714, 229.492587344282, -29.0688115427429, 
    4088.82026746582, -303.129942983205, -15.6311290773203, -10.5478382401714, 
    -303.129942983205, 266.310950788551), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.166274250931001, -0.130143386084078
    ), logphi = c(0.50537003452343, -1.5396686052338)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_83 = structure(list(
    par = c(-0.225654630617229, -0.271680307772856, 0.492902640329192, 
    -1.63341864808263), value = 92.3972392979301, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.6517112043496, -11.2044083060425, 
    250.647181008645, -17.1678256339902, -11.2044083060425, 29.7184962221309, 
    -29.4335435775395, -10.1178833844529, 250.647181008645, -29.4335435775395, 
    5254.07482695428, -335.570728161372, -17.1678256339902, -10.1178833844529, 
    -335.570728161372, 312.425340130318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225654630617229, -0.271680307772856
    ), logphi = c(0.492902640329192, -1.63341864808263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_84 = structure(list(
    par = c(-0.34490048155999, -0.0088984355632147, 0.520078615375946, 
    -1.5163094936571), value = 95.5809063583358, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.6911319397498, -4.88283845001547, 
    237.634149744537, -25.1422288268799, -4.88283845001547, 46.5024780815781, 
    -34.0275944914481, -12.6580321229142, 237.634149744537, -34.0275944914481, 
    3803.75312657222, -375.396862136057, -25.1422288268799, -12.6580321229142, 
    -375.396862136057, 266.778795623424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34490048155999, -0.0088984355632147
    ), logphi = c(0.520078615375946, -1.5163094936571)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_85 = structure(list(
    par = c(-0.172655177034169, -0.0227646583584812, 0.502636713350695, 
    -1.615501195211), value = 91.6885347121428, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.849109236862, -11.9809886349742, 
    248.717138752852, -15.2276021765374, -11.9809886349742, 40.123528133762, 
    -28.0740099576349, -12.3907242475241, 248.717138752852, -28.0740099576349, 
    4960.75531509987, -348.775999455597, -15.2276021765374, -12.3907242475241, 
    -348.775999455597, 303.760257288843), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.172655177034169, -0.0227646583584812
    ), logphi = c(0.502636713350695, -1.615501195211)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_86 = structure(list(
    par = c(-0.105276812595597, -0.270419302782354, 0.489113356662145, 
    -1.64284051769918), value = 106.204790366393, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.45241614679, -14.9538124638582, 
    243.179321749665, -11.6377932570799, -14.9538124638582, 27.0358845178009, 
    -26.0806221774601, -9.48202662875985, 243.179321749665, -26.0806221774601, 
    5388.43727332505, -296.92650392299, -11.6377932570799, -9.48202662875985, 
    -296.92650392299, 312.906135988555), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.105276812595597, -0.270419302782354
    ), logphi = c(0.489113356662145, -1.64284051769918)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_87 = structure(list(
    par = c(-0.218964465016272, -0.0342771923180295, 0.486402438624656, 
    -1.6198017311456), value = 85.6705169733605, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.940965148463, -7.8826935698828, 
    250.004922506264, -13.4646330440802, -7.8826935698828, 43.093981734188, 
    -22.877916787678, -12.8493523945394, 250.004922506264, -22.877916787678, 
    4971.18540951291, -314.447380528549, -13.4646330440802, -12.8493523945394, 
    -314.447380528549, 296.309109881321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218964465016272, -0.0342771923180295
    ), logphi = c(0.486402438624656, -1.6198017311456)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_88 = structure(list(
    par = c(-0.423006440811863, -0.0916089552617375, 0.493429501221656, 
    -1.6717646451934), value = 80.3362611227191, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.7748425085231, -7.09511895280457, 
    275.271212764494, -24.8079197735507, -7.09511895280457, 37.6253790186354, 
    -32.1182382982954, -13.9275217971857, 275.271212764494, -32.1182382982954, 
    5704.85462690939, -432.397973510135, -24.8079197735507, -13.9275217971857, 
    -432.397973510135, 335.304602817388), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423006440811863, -0.0916089552617375
    ), logphi = c(0.493429501221656, -1.6717646451934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_89 = structure(list(
    par = c(-0.401854927909102, 0.135243061115399, 0.523295638971442, 
    -1.630086858295), value = 67.6058508481293, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.2173838289762, -5.64541390701834, 
    271.773485302162, -28.6235748170327, -5.64541390701834, 51.3395221659607, 
    -36.871058071597, -16.3642328221414, 271.773485302162, -36.871058071597, 
    5101.06272917099, -492.363273721708, -28.6235748170327, -16.3642328221414, 
    -492.363273721708, 330.383773878395), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.401854927909102, 0.135243061115399
    ), logphi = c(0.523295638971442, -1.630086858295)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_90 = structure(list(
    par = c(-0.231920047269954, -0.050114567605245, 0.4901359165215, 
    -1.68517942732215), value = 81.2715257021583, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.741312375088, -10.7404335913941, 
    266.488284548672, -15.7309104515946, -10.7404335913941, 38.9217906473505, 
    -25.4817051654754, -13.0243778819761, 266.488284548672, -25.4817051654754, 
    5893.11580607443, -373.424286486568, -15.7309104515946, -13.0243778819761, 
    -373.424286486568, 333.079347548448), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231920047269954, -0.050114567605245
    ), logphi = c(0.4901359165215, -1.68517942732215)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_91 = structure(list(
    par = c(-0.279375891592329, 0.026273374332256, 0.514232174414487, 
    -1.58254669084963), value = 89.3110639726412, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.524344767512, -8.32121530436325, 
    250.419705736249, -21.6326358639662, -8.32121530436325, 45.9185323649081, 
    -32.3389045107092, -13.4569608363222, 250.419705736249, -32.3389045107092, 
    4538.98458797042, -391.525275915683, -21.6326358639662, -13.4569608363222, 
    -391.525275915683, 295.918573350207), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279375891592329, 0.026273374332256
    ), logphi = c(0.514232174414487, -1.58254669084963)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_92 = structure(list(
    par = c(-0.245504655024061, 0.0665380787128225, 0.485880607365103, 
    -1.63506485071865), value = 80.2889454860874, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.886110341823, -5.2879304988096, 
    256.52628897177, -13.5717583784611, -5.2879304988096, 50.2153805754801, 
    -19.5677349594803, -14.4379290603069, 256.52628897177, -19.5677349594803, 
    5124.44178778182, -334.506861401351, -13.5717583784611, -14.4379290603069, 
    -334.506861401351, 302.192684248581), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245504655024061, 0.0665380787128225
    ), logphi = c(0.485880607365103, -1.63506485071865)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_93 = structure(list(
    par = c(-0.361003955916851, 0.131746173246067, 0.489579592385472, 
    -1.66807354591976), value = 55.0735428448178, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.673788115406, -3.01786426248896, 
    274.380615216785, -18.9519627635804, -3.01786426248896, 51.9232442925954, 
    -19.2436987660471, -16.8965291340584, 274.380615216785, -19.2436987660471, 
    5533.36818497385, -406.041511533672, -18.9519627635804, -16.8965291340584, 
    -406.041511533672, 322.540920222991), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361003955916851, 0.131746173246067
    ), logphi = c(0.489579592385472, -1.66807354591976)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_94 = structure(list(
    par = c(-0.13755551093766, -0.0373067964686085, 0.488756125151367, 
    -1.69518255572368), value = 71.3304805312036, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.653929252966, -11.9522937893635, 
    260.863468266592, -11.5033394170183, -11.9522937893635, 42.356239298158, 
    -23.0317876841468, -12.3362932065163, 260.863468266592, -23.0317876841468, 
    6050.86265978372, -347.607146974127, -11.5033394170183, -12.3362932065163, 
    -347.607146974127, 335.052516298617), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.13755551093766, -0.0373067964686085
    ), logphi = c(0.488756125151367, -1.69518255572368)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_95 = structure(list(
    par = c(-0.189651751920276, 0.024597889864095, 0.525762819400518, 
    -1.5625448574372), value = 108.913331976789, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.56468245476, -12.5587347454825, 
    241.416012009665, -20.5283807410694, -12.5587347454825, 41.5335796368765, 
    -34.63481992938, -12.189758145098, 241.416012009665, -34.63481992938, 
    4333.63004897203, -390.317395629225, -20.5283807410694, -12.189758145098, 
    -390.317395629225, 290.232891977382), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189651751920276, 0.024597889864095
    ), logphi = c(0.525762819400518, -1.5625448574372)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_96 = structure(list(
    par = c(-0.516306883357069, -0.165999072313291, 0.531868075990439, 
    -1.72077898172458), value = 70.8722340406086, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.8386504517903, -11.27520036448, 
    283.28170151326, -36.9796963219926, -11.27520036448, 32.4553571786623, 
    -59.7524526568805, -10.7668840563235, 283.28170151326, -59.7524526568805, 
    6630.91990779918, -618.468105908931, -36.9796963219926, -10.7668840563235, 
    -618.468105908931, 396.856436672977), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.516306883357069, -0.165999072313291
    ), logphi = c(0.531868075990439, -1.72077898172458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_97 = structure(list(
    par = c(-0.182832784423848, -0.0118824894734142, 0.502563318474324, 
    -1.6217473240887), value = 88.7591273237905, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.36385218632, -12.2636801300757, 
    251.063131795348, -15.5897528575366, -12.2636801300757, 39.1549245470912, 
    -28.039114170042, -12.6499204764485, 251.063131795348, -28.039114170042, 
    5035.96958634489, -356.025306377461, -15.5897528575366, -12.6499204764485, 
    -356.025306377461, 306.98620524916), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.182832784423848, -0.0118824894734142
    ), logphi = c(0.502563318474324, -1.6217473240887)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_98 = structure(list(
    par = c(-0.310871360623628, 0.213104133154182, 0.50753606758385, 
    -1.57993077180052), value = 72.9734526800772, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.278532432062, -1.45878113499975, 
    252.799968468054, -19.3217960440251, -1.45878113499975, 59.6077665697692, 
    -22.6516772627861, -16.6721018217686, 252.799968468054, -22.6516772627861, 
    4408.17410001415, -384.130693426243, -19.3217960440251, -16.6721018217686, 
    -384.130693426243, 286.715051402098), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310871360623628, 0.213104133154182
    ), logphi = c(0.50753606758385, -1.57993077180052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_99 = structure(list(
    par = c(-0.262021282163878, 0.16318280567819, 0.491123114240019, 
    -1.59093419518279), value = 79.3697474718088, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.865778542139, -2.54346316452825, 
    248.609483108453, -13.873186230029, -2.54346316452825, 56.6381767050927, 
    -17.8186273380732, -15.5376375374772, 248.609483108453, -17.8186273380732, 
    4533.1575718528, -327.774278837012, -13.873186230029, -15.5376375374772, 
    -327.774278837012, 280.784857487504), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262021282163878, 0.16318280567819
    ), logphi = c(0.491123114240019, -1.59093419518279)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_100 = structure(list(
    par = c(-0.368816227418424, -0.149333129454107, 0.481624870404988, 
    -1.60223372026862), value = 85.8494805461592, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.558567036695, -6.66750637279279, 
    253.461028478341, -19.1417089041579, -6.66750637279279, 34.0221346100122, 
    -25.7909681025126, -12.6589521869391, 253.461028478341, -25.7909681025126, 
    4749.03468170496, -322.177352268582, -19.1417089041579, -12.6589521869391, 
    -322.177352268582, 288.362536569053), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368816227418424, -0.149333129454107
    ), logphi = c(0.481624870404988, -1.60223372026862)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_101 = structure(list(
    par = c(-0.300133662653217, 0.0788528387545605, 0.541518288064283, 
    -1.45325489427673), value = 100.152272736536, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.1471579509, -5.53306627537609, 
    222.617572539718, -27.1595592842289, -5.53306627537609, 51.0511026838856, 
    -35.9259767925835, -11.9383684094032, 222.617572539718, -35.9259767925835, 
    3186.73481818621, -383.526212221597, -27.1595592842289, -11.9383684094032, 
    -383.526212221597, 245.970288183628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300133662653217, 0.0788528387545605
    ), logphi = c(0.541518288064283, -1.45325489427673)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_102 = structure(list(
    par = c(-0.309785629596119, 0.249221348493062, 0.500368636323205, 
    -1.62415309076973), value = 59.1721567004457, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.683321875944, 0.54180447506269, 
    262.84843461255, -17.4686403102697, 0.54180447506269, 64.8801444604885, 
    -17.3290598901588, -17.6657213035725, 262.84843461255, -17.3290598901588, 
    4921.22043081977, -395.727801588919, -17.4686403102697, -17.6657213035725, 
    -395.727801588919, 303.715522640857), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309785629596119, 0.249221348493062
    ), logphi = c(0.500368636323205, -1.62415309076973)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_103 = structure(list(
    par = c(-0.112156476146729, 0.0475473576208084, 0.523451167748256, 
    -1.52790195067366), value = 105.170646101352, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.042757438895, -12.888139291789, 
    228.002208064737, -16.3995097466341, -12.888139291789, 44.8073252599102, 
    -31.3218299154983, -11.6380930279547, 228.002208064737, -31.3218299154983, 
    3943.14707645904, -344.069221386079, -16.3995097466341, -11.6380930279547, 
    -344.069221386079, 267.633978268123), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.112156476146729, 0.0475473576208084
    ), logphi = c(0.523451167748256, -1.52790195067366)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_104 = structure(list(
    par = c(-0.259715496346646, -0.360109325496908, 0.47943259561957, 
    -1.57241243576175), value = 114.107560296024, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.772114699055, -10.6440607581249, 
    236.099329750772, -15.1675085291458, -10.6440607581249, 22.7887352615141, 
    -25.3231294351508, -9.4260710774563, 236.099329750772, -25.3231294351508, 
    4455.461625259, -258.712460759369, -15.1675085291458, -9.4260710774563, 
    -258.712460759369, 272.198345829366), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259715496346646, -0.360109325496908
    ), logphi = c(0.47943259561957, -1.57241243576175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_105 = structure(list(
    par = c(-0.454282573602443, 0.0344853181276998, 0.506511214604195, 
    -1.61516856569459), value = 72.9055784889347, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.9673003159669, -2.93053043165514, 
    267.280539308246, -27.4852975881146, -2.93053043165514, 49.2771643827439, 
    -33.0141808859707, -15.5769138601158, 267.280539308246, -33.0141808859707, 
    4907.16913975575, -440.791572616561, -27.4852975881146, -15.5769138601158, 
    -440.791572616561, 313.824580953082), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.454282573602443, 0.0344853181276998
    ), logphi = c(0.506511214604195, -1.61516856569459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_106 = structure(list(
    par = c(-0.334779759405672, 0.175361083702865, 0.545893499021238, 
    -1.60021120765408), value = 74.0232063302361, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.0425393736177, -7.66941945329336, 
    263.313779971242, -30.6622304986348, -7.66941945329336, 55.6395220137063, 
    -43.8212786981751, -15.1259731957509, 263.313779971242, -43.8212786981751, 
    4743.90460265539, -520.284097895285, -30.6622304986348, -15.1259731957509, 
    -520.284097895285, 327.672175501448), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334779759405672, 0.175361083702865
    ), logphi = c(0.545893499021238, -1.60021120765408)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_107 = structure(list(
    par = c(-0.34536207477078, 0.0502546801866766, 0.518760313833866, 
    -1.68324404828233), value = 65.6850596755369, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.0371090370177, -9.59991453797215, 
    278.880340950138, -26.1948547670698, -9.59991453797215, 45.4308342341392, 
    -38.7641529719929, -14.7995508292809, 278.880340950138, -38.7641529719929, 
    5882.66006836946, -497.156388449937, -26.1948547670698, -14.7995508292809, 
    -497.156388449937, 353.220464241133), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34536207477078, 0.0502546801866766
    ), logphi = c(0.518760313833866, -1.68324404828233)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_108 = structure(list(
    par = c(-0.415028314521615, -0.0388008716632377, 0.497910742153521, 
    -1.55934607444818), value = 81.7237912250475, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.1800716505509, -3.72079106369938, 
    249.218366153769, -23.3892132541769, -3.72079106369938, 42.0983217317428, 
    -29.1033625714476, -13.9103286223019, 249.218366153769, -29.1033625714476, 
    4232.23054015409, -355.658911594503, -23.3892132541769, -13.9103286223019, 
    -355.658911594503, 276.266448075546), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.415028314521615, -0.0388008716632377
    ), logphi = c(0.497910742153521, -1.55934607444818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_109 = structure(list(
    par = c(-0.388284357844752, 0.0604459261724702, 0.500894163388888, 
    -1.68470525636796), value = 61.9725298472167, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.2170720083245, -6.58144588427945, 
    280.613541772112, -23.8667451455399, -6.58144588427945, 45.6199008098679, 
    -29.7512428062419, -15.9661838878833, 280.613541772112, -29.7512428062419, 
    5843.88693620497, -459.175930069833, -23.8667451455399, -15.9661838878833, 
    -459.175930069833, 342.424274567321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.388284357844752, 0.0604459261724702
    ), logphi = c(0.500894163388888, -1.68470525636796)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_110 = structure(list(
    par = c(-0.372567681776349, 0.217173948471039, 0.50766536897958, 
    -1.56738134255491), value = 68.5365766737982, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.457449638166, 1.3323944827448, 
    253.267376336908, -21.6929812850708, 1.3323944827448, 62.1765603447955, 
    -22.7004104509376, -17.3439478921011, 253.267376336908, -22.7004104509376, 
    4248.32757342486, -389.877716152398, -21.6929812850708, -17.3439478921011, 
    -389.877716152398, 281.649704472642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372567681776349, 0.217173948471039
    ), logphi = c(0.50766536897958, -1.56738134255491)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_111 = structure(list(
    par = c(-0.440066677509692, 0.140358695137056, 0.513841633331304, 
    -1.61895030549566), value = 56.4247262862863, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.5723091042037, -1.139619747903, 
    270.265933743019, -27.7586594084056, -1.139619747903, 57.6519897030892, 
    -31.9110464204186, -17.1327384581588, 270.265933743019, -31.9110464204186, 
    4924.61408117961, -465.608847690646, -27.7586594084056, -17.1327384581588, 
    -465.608847690646, 318.570360704484), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.440066677509692, 0.140358695137056
    ), logphi = c(0.513841633331304, -1.61895030549566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_112 = structure(list(
    par = c(-0.302819028275882, 0.0220445378204955, 0.526986449705678, 
    -1.48568006628087), value = 118.321735093337, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.739485871695, -7.89187984651107, 
    228.932908292734, -24.4926300201342, -7.89187984651107, 42.1547019406887, 
    -33.88294179274, -12.1961650592084, 228.932908292734, -33.88294179274, 
    3494.52684390172, -364.836524740397, -24.4926300201342, -12.1961650592084, 
    -364.836524740397, 253.333831309988), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302819028275882, 0.0220445378204955
    ), logphi = c(0.526986449705678, -1.48568006628087)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_113 = structure(list(
    par = c(0.0353495352211456, 0.212155364959355, 0.482681589251735, 
    -1.52222480568883), value = 88.5017783612069, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.176339254808, -8.04650115071581, 
    205.716203851125, -0.0861616094027795, -8.04650115071581, 
    64.0681048977854, -14.8638247026156, -11.9324331695481, 205.716203851125, 
    -14.8638247026156, 3806.03707091609, -197.98652851577, -0.0861616094027795, 
    -11.9324331695481, -197.98652851577, 237.309173861888), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0353495352211456, 0.212155364959355
    ), logphi = c(0.482681589251735, -1.52222480568883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_114 = structure(list(
    par = c(-0.323133465587283, -0.0177412807123436, 0.504266706033654, 
    -1.61249792302085), value = 79.4836763418458, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.9150907528824, -6.36478995730272, 
    258.324628532591, -21.7747646775734, -6.36478995730272, 45.280014827398, 
    -31.0226607318498, -13.675819213077, 258.324628532591, -31.0226607318498, 
    4902.59639616752, -392.893923418569, -21.7747646775734, -13.675819213077, 
    -392.893923418569, 307.093496392241), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323133465587283, -0.0177412807123436
    ), logphi = c(0.504266706033654, -1.61249792302085)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_115 = structure(list(
    par = c(-0.411391512220712, 0.0493592426146174, 0.505600045394638, 
    -1.50822157365512), value = 89.4717459878384, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.865805577641, -1.37660913424043, 
    238.006901614796, -23.4881091074612, -1.37660913424043, 48.6203518939021, 
    -27.9613272233803, -14.4786638198724, 238.006901614796, -27.9613272233803, 
    3658.60116960448, -341.346861322478, -23.4881091074612, -14.4786638198724, 
    -341.346861322478, 252.273086491783), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411391512220712, 0.0493592426146174
    ), logphi = c(0.505600045394638, -1.50822157365512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_116 = structure(list(
    par = c(-0.422795343128206, -0.137586163918793, 0.507363675599175, 
    -1.6221733450514), value = 87.0287747084899, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.074504027702, -7.9128360539471, 
    263.338708116123, -27.6683864193217, -7.9128360539471, 34.7281332473415, 
    -37.6208207306661, -12.5066839729016, 263.338708116123, -37.6208207306661, 
    5082.18965053331, -434.677568399877, -27.6683864193217, -12.5066839729016, 
    -434.677568399877, 320.948787443598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.422795343128206, -0.137586163918793
    ), logphi = c(0.507363675599175, -1.6221733450514)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_117 = structure(list(
    par = c(-0.256082667580595, -0.0276763188877416, 0.487328152051379, 
    -1.5762268163762), value = 98.0543769947941, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.332113797933, -6.22734126665137, 
    242.502622981533, -14.5233169668302, -6.22734126665137, 43.5506519345097, 
    -23.1601938480708, -12.9902159624606, 242.502622981533, -23.1601938480708, 
    4421.06693821742, -297.050557369616, -14.5233169668302, -12.9902159624606, 
    -297.050557369616, 274.132694695339), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256082667580595, -0.0276763188877416
    ), logphi = c(0.487328152051379, -1.5762268163762)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_118 = structure(list(
    par = c(-0.380196502919037, -0.00900903933911446, 0.498172951211097, 
    -1.65843366156663), value = 74.0318798263718, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.424280466716, -7.15473526469168, 
    272.127719117776, -23.2343492729825, -7.15473526469168, 40.7857153703617, 
    -30.3326953314809, -14.7054819894521, 272.127719117776, -30.3326953314809, 
    5493.68385348359, -425.869020467928, -23.2343492729825, -14.7054819894521, 
    -425.869020467928, 328.562974935664), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.380196502919037, -0.00900903933911446
    ), logphi = c(0.498172951211097, -1.65843366156663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_119 = structure(list(
    par = c(-0.407440100978701, -0.114554468077867, 0.52081153874738, 
    -1.68005103744058), value = 81.4172341466486, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.263049914071, -12.0120654969469, 
    275.803673620345, -30.2991490332971, -12.0120654969469, 32.418049812577, 
    -45.896667099754, -12.2454189970256, 275.803673620345, -45.896667099754, 
    5926.13118547192, -516.636846839447, -30.2991490332971, -12.2454189970256, 
    -516.636846839447, 360.48591306681), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407440100978701, -0.114554468077867
    ), logphi = c(0.52081153874738, -1.68005103744058)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_120 = structure(list(
    par = c(-0.164774211395683, -0.0735552861755988, 0.481218905935414, 
    -1.64908735907508), value = 83.580282805845, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.696355871909, -10.8238331861799, 
    250.876526678212, -10.8187508605084, -10.8238331861799, 38.3812170170472, 
    -21.3949506751021, -12.0444515800955, 250.876526678212, -21.3949506751021, 
    5374.72761102364, -301.942787642062, -10.8187508605084, -12.0444515800955, 
    -301.942787642062, 308.283177957946), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.164774211395683, -0.0735552861755988
    ), logphi = c(0.481218905935414, -1.64908735907508)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_121 = structure(list(
    par = c(-0.138824096606514, 0.193137704053548, 0.530877166116797, 
    -1.51977786379786), value = 97.9749371236564, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.685671298214, -8.60676747294065, 
    230.390570543193, -17.9384731815446, -8.60676747294065, 58.6465326399832, 
    -30.5576994712453, -13.4082940697056, 230.390570543193, -30.5576994712453, 
    3812.73921875191, -371.477473819937, -17.9384731815446, -13.4082940697056, 
    -371.477473819937, 266.800674509682), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138824096606514, 0.193137704053548
    ), logphi = c(0.530877166116797, -1.51977786379786)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_122 = structure(list(
    par = c(-0.450972630409631, -0.138000616435808, 0.508024721787506, 
    -1.59062964509108), value = 96.4297566612082, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.7690717199519, -7.45707108151805, 
    257.299927941546, -28.5664950059328, -7.45707108151805, 33.6178501783024, 
    -37.1883616843149, -12.4859538974675, 257.299927941546, -37.1883616843149, 
    4676.03552945661, -419.435786373157, -28.5664950059328, -12.4859538974675, 
    -419.435786373157, 305.178882300083), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.450972630409631, -0.138000616435808
    ), logphi = c(0.508024721787506, -1.59062964509108)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_123 = structure(list(
    par = c(-0.106756756628716, -0.0117799649102438, 0.497378494500487, 
    -1.61238975945917), value = 99.2216310238954, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.732559600204, -13.1839228352248, 
    241.998474901806, -11.262203402751, -13.1839228352248, 40.4467499102168, 
    -25.035703679066, -11.9810793393071, 241.998474901806, -25.035703679066, 
    4917.6995380833, -314.445927383389, -11.262203402751, -11.9810793393071, 
    -314.445927383389, 297.425751060842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106756756628716, -0.0117799649102438
    ), logphi = c(0.497378494500487, -1.61238975945917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_124 = structure(list(
    par = c(-0.281986412625324, 0.11462838109494, 0.509856292714416, 
    -1.57636126420871), value = 87.4117144003374, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.739426826152, -6.65533416110975, 
    249.657955563976, -19.7718007513004, -6.65533416110975, 48.9630059021806, 
    -27.6807316694772, -14.8217696143149, 249.657955563976, -27.6807316694772, 
    4418.71596714805, -377.812176111547, -19.7718007513004, -14.8217696143149, 
    -377.812176111547, 287.808488344865), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281986412625324, 0.11462838109494
    ), logphi = c(0.509856292714416, -1.57636126420871)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_125 = structure(list(
    par = c(-0.305745418669667, -0.0482565571198149, 0.497442275880515, 
    -1.57608512140085), value = 94.7780618211206, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.986150956497, -6.80151792309402, 
    247.094816430149, -19.1615565352521, -6.80151792309402, 41.2717359452586, 
    -27.9392182527261, -13.0180891346754, 247.094816430149, -27.9392182527261, 
    4445.83320035008, -339.433837581282, -19.1615565352521, -13.0180891346754, 
    -339.433837581282, 282.460302813092), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305745418669667, -0.0482565571198149
    ), logphi = c(0.497442275880515, -1.57608512140085)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_126 = structure(list(
    par = c(-0.237686697512223, 0.133350580253435, 0.500178749973436, 
    -1.550704885369), value = 77.1923306117979, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.076519629691, -2.33969056395722, 
    238.682783635369, -15.0339957283308, -2.33969056395722, 58.8368896536906, 
    -22.499032827028, -14.4875210423834, 238.682783635369, -22.499032827028, 
    4102.07244487637, -320.505441486318, -15.0339957283308, -14.4875210423834, 
    -320.505441486318, 265.879560217286), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237686697512223, 0.133350580253435
    ), logphi = c(0.500178749973436, -1.550704885369)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_127 = structure(list(
    par = c(-0.253086999103151, 0.0502792673949991, 0.485268092620046, 
    -1.53956453844021), value = 90.7839893114623, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.039585686816, -3.37848597808943, 
    233.402187795662, -12.6123714068171, -3.37848597808943, 50.2695655804075, 
    -20.0291342302705, -13.5930275853013, 233.402187795662, -20.0291342302705, 
    3969.66593153536, -267.170080913814, -12.6123714068171, -13.5930275853013, 
    -267.170080913814, 251.498092399771), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253086999103151, 0.0502792673949991
    ), logphi = c(0.485268092620046, -1.53956453844021)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_128 = structure(list(
    par = c(-0.169152090423344, 0.21322628636531, 0.509796487536307, 
    -1.70960741357282), value = 65.3828538854888, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.966034044755, -9.64357703381324, 
    274.938558423088, -14.9234928645825, -9.64357703381324, 57.4182523536138, 
    -23.2066955376808, -15.8955137052885, 274.938558423088, -23.2066955376808, 
    6191.04930928316, -437.821861655863, -14.9234928645825, -15.8955137052885, 
    -437.821861655863, 348.963155936133), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.169152090423344, 0.21322628636531
    ), logphi = c(0.509796487536307, -1.70960741357282)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_129 = structure(list(
    par = c(-0.255409647861594, 0.00736451565289814, 0.507636164644834, 
    -1.76646496765869), value = 58.9700140589325, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.5080107201381, -12.6266366500261, 
    289.344078105103, -20.5183227421912, -12.6266366500261, 42.3647332716826, 
    -34.2769135599497, -13.8572087067246, 289.344078105103, -34.2769135599497, 
    7204.6965238215, -485.831617071497, -20.5183227421912, -13.8572087067246, 
    -485.831617071497, 380.492766399954), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255409647861594, 0.00736451565289814
    ), logphi = c(0.507636164644834, -1.76646496765869)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_130 = structure(list(
    par = c(-0.371691254184813, 0.0419207679408427, 0.49192363924696, 
    -1.6328077956854), value = 62.8798651639502, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.636440799524, -3.08972119356099, 
    265.552410898096, -20.5366382211025, -3.08972119356099, 49.3170749891192, 
    -24.698535117551, -15.4047545386504, 265.552410898096, -24.698535117551, 
    5099.58884524053, -385.6845648329, -20.5366382211025, -15.4047545386504, 
    -385.6845648329, 308.61096666257), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371691254184813, 0.0419207679408427
    ), logphi = c(0.49192363924696, -1.6328077956854)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_131 = structure(list(
    par = c(-0.139200956112907, -0.0712777764499162, 0.499571981780475, 
    -1.70993319442237), value = 91.90667845448, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.756737895504, -16.1627612094151, 
    265.62273815145, -14.2932236322224, -16.1627612094151, 34.2060425424506, 
    -28.591464406702, -11.9153112301262, 265.62273815145, -28.591464406702, 
    6317.29630706346, -386.583919958383, -14.2932236322224, -11.9153112301262, 
    -386.583919958383, 349.389192962235), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.139200956112907, -0.0712777764499162
    ), logphi = c(0.499571981780475, -1.70993319442237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_132 = structure(list(
    par = c(-0.152364190251274, -0.0331990995421343, 0.494964582823089, 
    -1.61558294978971), value = 89.5610730909754, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.091725893824, -12.2911952118443, 
    245.639607285852, -12.7321551879334, -12.2911952118443, 38.3307735809524, 
    -25.2033690308906, -12.17953783339, 245.639607285852, -25.2033690308906, 
    4951.6430499672, -319.305929691538, -12.7321551879334, -12.17953783339, 
    -319.305929691538, 298.740033294109), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.152364190251274, -0.0331990995421343
    ), logphi = c(0.494964582823089, -1.61558294978971)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_133 = structure(list(
    par = c(-0.242866282325121, 0.271410305292447, 0.505635734103326, 
    -1.71223536835638), value = 50.2164827534487, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.042505771484, -4.33620907536181, 
    281.281638503827, -16.3389351666154, -4.33620907536181, 63.8880195609204, 
    -17.8830719317347, -17.7092138962109, 281.281638503827, -17.8830719317347, 
    6172.19075200026, -453.835408417369, -16.3389351666154, -17.7092138962109, 
    -453.835408417369, 347.831515819408), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242866282325121, 0.271410305292447
    ), logphi = c(0.505635734103326, -1.71223536835638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_134 = structure(list(
    par = c(-0.0676637585311056, -0.00252698125712245, 0.507751901199946, 
    -1.55126546677879), value = 107.529955703188, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.029417891321, -14.4077969359557, 
    227.041055502752, -11.5617825429126, -14.4077969359557, 40.5314819822422, 
    -27.2350629479945, -11.2373909217922, 227.041055502752, -27.2350629479945, 
    4202.57559328974, -300.11589621104, -11.5617825429126, -11.2373909217922, 
    -300.11589621104, 270.458524219919), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0676637585311056, -0.00252698125712245
    ), logphi = c(0.507751901199946, -1.55126546677879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_135 = structure(list(
    par = c(-0.403572680791669, -0.227614123599562, 0.513145144801567, 
    -1.54592039054512), value = 109.831270192476, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.4625535536875, -7.89758230723692, 
    242.811587348513, -27.5692424587248, -7.89758230723692, 30.6821206876862, 
    -36.7749023304498, -10.4875058362097, 242.811587348513, -36.7749023304498, 
    4186.88430819358, -384.798832097744, -27.5692424587248, -10.4875058362097, 
    -384.798832097744, 283.571311491926), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403572680791669, -0.227614123599562
    ), logphi = c(0.513145144801567, -1.54592039054512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_136 = structure(list(
    par = c(-0.230749908365371, 0.00481695998291256, 0.478849241887066, 
    -1.57470381746901), value = 84.4930113058549, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.555746627332, -5.23097448024146, 
    238.802869723997, -11.1440337846602, -5.23097448024146, 46.0519737330856, 
    -19.0852690629129, -13.1353505263831, 238.802869723997, -19.0852690629129, 
    4373.49890444594, -264.837718649602, -11.1440337846602, -13.1353505263831, 
    -264.837718649602, 266.5247228677), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230749908365371, 0.00481695998291256
    ), logphi = c(0.478849241887066, -1.57470381746901)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_137 = structure(list(
    par = c(-0.0457465044608638, 0.0531367926251951, 0.500461759736437, 
    -1.47944536761174), value = 108.870557867548, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.564718705893, -11.1382469043519, 
    207.504496305688, -8.02581572045824, -11.1382469043519, 47.7437526313906, 
    -23.3753972551654, -11.0736171077264, 207.504496305688, -23.3753972551654, 
    3422.52309267721, -235.009677618692, -8.02581572045824, -11.0736171077264, 
    -235.009677618692, 227.220803896699), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0457465044608638, 0.0531367926251951
    ), logphi = c(0.500461759736437, -1.47944536761174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_138 = structure(list(
    par = c(-0.406311390320934, -0.105140254607591, 0.519914579754936, 
    -1.59457671835356), value = 92.0171724555126, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.1110811405961, -9.05228930037083, 
    257.395941517302, -29.3419636747672, -9.05228930037083, 35.0570930223171, 
    -40.573161189883, -12.1827326147184, 257.395941517302, -40.573161189883, 
    4746.01601249702, -448.606074906266, -29.3419636747672, -12.1827326147184, 
    -448.606074906266, 314.264436777734), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.406311390320934, -0.105140254607591
    ), logphi = c(0.519914579754936, -1.59457671835356)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_139 = structure(list(
    par = c(-0.461229704466654, -0.108302157675271, 0.545082239130502, 
    -1.49332825519563), value = 115.411220178599, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.9532512151873, -7.64708870448771, 
    235.608290338973, -36.0988746397339, -7.64708870448771, 36.1785048887953, 
    -44.9623954388301, -10.1463678969793, 235.608290338973, -44.9623954388301, 
    3639.35054681974, -457.506133278329, -36.0988746397339, -10.1463678969793, 
    -457.506133278329, 280.871578059561), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.461229704466654, -0.108302157675271
    ), logphi = c(0.545082239130502, -1.49332825519563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_140 = structure(list(
    par = c(-0.367708078112226, -0.217277278930629, 0.497781153809522, 
    -1.68677323083662), value = 81.4003235971128, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.7046530146354, -10.3269512088389, 
    272.309045804775, -24.3749642052649, -10.3269512088389, 30.3590301768963, 
    -35.779768936095, -11.5790990875553, 272.309045804775, -35.779768936095, 
    6001.87551036058, -434.888953019907, -24.3749642052649, -11.5790990875553, 
    -434.888953019907, 347.241873818405), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.367708078112226, -0.217277278930629
    ), logphi = c(0.497781153809522, -1.68677323083662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_141 = structure(list(
    par = c(-0.205419679013337, 0.184032513267089, 0.524878761919211, 
    -1.58347890860052), value = 84.1775907380265, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.197857759507, -8.83044906174746, 
    249.693324136047, -19.7237132830708, -8.83044906174746, 53.6561686494963, 
    -30.7479746837203, -14.7937003607268, 249.693324136047, -30.7479746837203, 
    4515.08385882704, -411.51398719208, -19.7237132830708, -14.7937003607268, 
    -411.51398719208, 298.413416459198), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205419679013337, 0.184032513267089
    ), logphi = c(0.524878761919211, -1.58347890860052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_142 = structure(list(
    par = c(-0.320117024625013, -0.0258928383349053, 0.502457013976945, 
    -1.5496560801017), value = 90.9515768634467, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.228324807247, -5.66440222371511, 
    242.432670191306, -20.3949691375271, -5.66440222371511, 43.6953496958381, 
    -28.8500812217762, -13.1131968075238, 242.432670191306, -28.8500812217762, 
    4140.07444573983, -340.064006209673, -20.3949691375271, -13.1131968075238, 
    -340.064006209673, 271.605197724512), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320117024625013, -0.0258928383349053
    ), logphi = c(0.502457013976945, -1.5496560801017)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_143 = structure(list(
    par = c(-0.389904500638468, 0.00369319986804141, 0.470689506005691, 
    -1.71639416576404), value = 53.7567930284824, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.183251658199, -3.42296479871607, 
    282.886108379898, -17.7550466755605, -3.42296479871607, 45.9494617643941, 
    -16.7155177521749, -15.5393007368332, 282.886108379898, -16.7155177521749, 
    6244.21616884874, -390.226563508733, -17.7550466755605, -15.5393007368332, 
    -390.226563508733, 335.843712807815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389904500638468, 0.00369319986804141
    ), logphi = c(0.470689506005691, -1.71639416576404)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_144 = structure(list(
    par = c(-0.390500673442305, 0.0233967996383467, 0.474838767667728, 
    -1.52295135015601), value = 78.4043080129305, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.739400008304, 1.97687698744176, 
    235.428381184732, -15.1993075832024, 1.97687698744176, 49.5787713497009, 
    -17.902309018325, -14.5228120835839, 235.428381184732, -17.902309018325, 
    3742.4945002158, -253.322682981505, -15.1993075832024, -14.5228120835839, 
    -253.322682981505, 237.50563687841), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.390500673442305, 0.0233967996383467
    ), logphi = c(0.474838767667728, -1.52295135015601)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_145 = structure(list(
    par = c(-0.274016709762738, 0.169602570024364, 0.475863822537812, 
    -1.61711513991028), value = 57.1065147412538, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.17957553717, 0.432235133018821, 
    252.096775517074, -10.7726640923289, 0.432235133018821, 58.4486298755849, 
    -10.7451879500786, -15.7834390162037, 252.096775517074, -10.7451879500786, 
    4810.55095921512, -302.863718582458, -10.7726640923289, -15.7834390162037, 
    -302.863718582458, 283.558526854577), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274016709762738, 0.169602570024364
    ), logphi = c(0.475863822537812, -1.61711513991028)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_146 = structure(list(
    par = c(-0.328576572548452, 0.203070166883262, 0.516898556517296, 
    -1.59996079614666), value = 61.8454415232928, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.745591936961, -1.94179490264901, 
    260.588111050453, -22.8366062735574, -1.94179490264901, 61.3125493806876, 
    -28.0402220944609, -16.7771563539532, 260.588111050453, -28.0402220944609, 
    4673.30279688483, -431.460549954465, -22.8366062735574, -16.7771563539532, 
    -431.460549954465, 305.075263394627), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328576572548452, 0.203070166883262
    ), logphi = c(0.516898556517296, -1.59996079614666)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_147 = structure(list(
    par = c(-0.303565992893845, 0.097185949256524, 0.520424176628978, 
    -1.50589872304948), value = 88.749990029491, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.244086843787, -3.9562245461866, 
    234.30837488192, -22.559266035671, -3.9562245461866, 52.3608488478544, 
    -30.6976510238144, -13.7459885500846, 234.30837488192, -30.6976510238144, 
    3662.36320767754, -362.529343433948, -22.559266035671, -13.7459885500846, 
    -362.529343433948, 258.314406973881), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303565992893845, 0.097185949256524
    ), logphi = c(0.520424176628978, -1.50589872304948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_148 = structure(list(
    par = c(-0.404346353992967, -0.149077968056164, 0.52038804327044, 
    -1.63573885160273), value = 95.3789546391982, counts = structure(c(315L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.5689860139155, -10.6039237834921, 
    265.208176323029, -29.9722174617045, -10.6039237834921, 32.0700187224077, 
    -43.5188453025148, -11.6258997451268, 265.208176323029, -43.5188453025148, 
    5307.68719200481, -479.977948234733, -29.9722174617045, -11.6258997451268, 
    -479.977948234733, 337.846254041096), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404346353992967, -0.149077968056164
    ), logphi = c(0.52038804327044, -1.63573885160273)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_149 = structure(list(
    par = c(-0.342042093867129, 0.012860291985025, 0.506145178231379, 
    -1.65433921786339), value = 80.9991372252144, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.8552613319341, -8.39276295749869, 
    270.188918175762, -23.233437330461, -8.39276295749869, 42.8196601340858, 
    -32.4984671458139, -14.4810930216011, 270.188918175762, -32.4984671458139, 
    5453.40190758736, -436.041720988101, -23.233437330461, -14.4810930216011, 
    -436.041720988101, 330.510728545619), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342042093867129, 0.012860291985025
    ), logphi = c(0.506145178231379, -1.65433921786339)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_150 = structure(list(
    par = c(-0.252204400950992, 0.066237302946076, 0.524165579985399, 
    -1.67324442007958), value = 71.6961608683189, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.3746266461053, -12.3742805477889, 
    271.936141036377, -23.181379100734, -12.3742805477889, 44.4344411398845, 
    -38.1274013676602, -14.0719823154001, 271.936141036377, -38.1274013676602, 
    5746.96345992365, -476.718326389403, -23.181379100734, -14.0719823154001, 
    -476.718326389403, 347.476172400718), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252204400950992, 0.066237302946076
    ), logphi = c(0.524165579985399, -1.67324442007958)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_151 = structure(list(
    par = c(-0.168992347573905, 0.141879049709181, 0.507843467695477, 
    -1.51239995485935), value = 86.3765148928802, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.375179240042, -4.63149883600522, 
    226.056548100928, -13.7734871330508, -4.63149883600522, 59.4031400034112, 
    -24.2705565085544, -13.4052505860183, 226.056548100928, -24.2705565085544, 
    3714.32882208822, -303.363444679405, -13.7734871330508, -13.4052505860183, 
    -303.363444679405, 249.213611365207), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168992347573905, 0.141879049709181
    ), logphi = c(0.507843467695477, -1.51239995485935)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_152 = structure(list(
    par = c(-0.219426373322594, 0.0178804708489655, 0.47877998349936, 
    -1.64966483408726), value = 84.1461127603573, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.904991655365, -7.75528387109148, 
    255.874381174692, -11.5365488753127, -7.75528387109148, 43.9070982807266, 
    -18.1973999033858, -13.6111924931015, 255.874381174692, -18.1973999033858, 
    5327.10047734497, -314.052987782532, -11.5365488753127, -13.6111924931015, 
    -314.052987782532, 305.537839953018), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219426373322594, 0.0178804708489655
    ), logphi = c(0.47877998349936, -1.64966483408726)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_153 = structure(list(
    par = c(-0.282126840285406, 0.0969087288892897, 0.486846632984338, 
    -1.67730884831371), value = 66.3434779815905, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.561296118774, -5.37418541313173, 
    269.991084053345, -15.4587614584756, -5.37418541313173, 50.640207973629, 
    -18.8564063350327, -15.4843756199341, 269.991084053345, -18.8564063350327, 
    5690.43324923868, -379.263659027629, -15.4587614584756, -15.4843756199341, 
    -379.263659027629, 324.233099568971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282126840285406, 0.0969087288892897
    ), logphi = c(0.486846632984338, -1.67730884831371)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_154 = structure(list(
    par = c(-0.350763511434596, 0.00116721075987271, 0.504381105843666, 
    -1.70206898151227), value = 61.7883472942145, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.3440072817527, -9.8014363736354, 
    281.213795922497, -23.718250002247, -9.8014363736354, 40.9664600198312, 
    -33.6609089295337, -14.5864044505117, 281.213795922497, -33.6609089295337, 
    6150.43400824078, -468.033210939467, -23.718250002247, -14.5864044505117, 
    -468.033210939467, 353.671614536921), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350763511434596, 0.00116721075987271
    ), logphi = c(0.504381105843666, -1.70206898151227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_155 = structure(list(
    par = c(-0.29051808208391, 0.0569057433848362, 0.492555440194439, 
    -1.6030556750552), value = 84.7214319287907, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.815842277148, -6.13840808938448, 
    253.240495595719, -16.7390646979015, -6.13840808938448, 45.6774216139877, 
    -23.0707362902649, -14.5633989134808, 253.240495595719, -23.0707362902649, 
    4724.40134612384, -344.004095047978, -16.7390646979015, -14.5633989134808, 
    -344.004095047978, 291.047641269415), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29051808208391, 0.0569057433848362
    ), logphi = c(0.492555440194439, -1.6030556750552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_156 = structure(list(
    par = c(-0.348423514267782, 0.1144860390601, 0.499939028441791, 
    -1.68382503213363), value = 58.4791370310174, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.9660039973094, -3.85944701264407, 
    278.895760320808, -21.3227884984235, -3.85944701264407, 54.9629440200761, 
    -25.7154563811923, -16.4697534188463, 278.895760320808, -25.7154563811923, 
    5803.28336801728, -444.811395869493, -21.3227884984235, -16.4697534188463, 
    -444.811395869493, 338.332023225973), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348423514267782, 0.1144860390601
    ), logphi = c(0.499939028441791, -1.68382503213363)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_157 = structure(list(
    par = c(-0.337013804770157, 0.12664807073243, 0.521101025786105, 
    -1.54946616233535), value = 83.5942998138505, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.011272010178, -2.63848373904807, 
    247.73011190149, -24.4487748446431, -2.63848373904807, 57.3819823621591, 
    -31.8715647900092, -14.9677994940589, 247.73011190149, -31.8715647900092, 
    4118.20101022897, -405.84786167841, -24.4487748446431, -14.9677994940589, 
    -405.84786167841, 283.122221780729), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337013804770157, 0.12664807073243
    ), logphi = c(0.521101025786105, -1.54946616233535)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_158 = structure(list(
    par = c(-0.319559537338134, -0.0553055099045097, 0.487444290067588, 
    -1.69005124967994), value = 79.1923347900256, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.3427294798389, -8.7834196662584, 
    273.421549678687, -18.9231883833685, -8.7834196662584, 38.4638021593275, 
    -26.1443723559296, -13.7967785143189, 273.421549678687, -26.1443723559296, 
    5945.86931238794, -396.090267003046, -18.9231883833685, -13.7967785143189, 
    -396.090267003046, 335.790769405264), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319559537338134, -0.0553055099045097
    ), logphi = c(0.487444290067588, -1.69005124967994)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_159 = structure(list(
    par = c(-0.0530130342212317, 0.0513495420140889, 0.506250348627094, 
    -1.63419948288944), value = 89.7353076472107, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.150269610036, -15.3120805563844, 
    245.013313119102, -10.7263681847769, -15.3120805563844, 44.1874430947564, 
    -26.3258555719403, -12.2561258546483, 245.013313119102, -26.3258555719403, 
    5209.2933389396, -342.837314134314, -10.7263681847769, -12.2561258546483, 
    -342.837314134314, 311.981236176706), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0530130342212317, 0.0513495420140889
    ), logphi = c(0.506250348627094, -1.63419948288944)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_160 = structure(list(
    par = c(-0.157784367694169, -0.151312761643413, 0.496186085881197, 
    -1.64522384181813), value = 102.677966546666, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.6202668665, -13.5881052933939, 
    251.116536972518, -14.4586236370259, -13.5881052933939, 32.6082522192905, 
    -28.205360148803, -10.9957751561751, 251.116536972518, -28.205360148803, 
    5391.84148631122, -339.225934739673, -14.4586236370259, -10.9957751561751, 
    -339.225934739673, 317.279871463683), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.157784367694169, -0.151312761643413
    ), logphi = c(0.496186085881197, -1.64522384181813)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_161 = structure(list(
    par = c(-0.349890137775686, -0.111821739144872, 0.495238240533983, 
    -1.71417516198094), value = 82.4123654244673, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.3670845673332, -10.4004562970772, 
    280.095957233328, -22.6501153548497, -10.4004562970772, 34.3351374034739, 
    -32.8669048563768, -13.100475092287, 280.095957233328, -32.8669048563768, 
    6366.09905027186, -445.378491585657, -22.6501153548497, -13.100475092287, 
    -445.378491585657, 355.807998460023), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349890137775686, -0.111821739144872
    ), logphi = c(0.495238240533983, -1.71417516198094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_162 = structure(list(
    par = c(-0.340637348022226, -0.196383603152101, 0.501651004666487, 
    -1.63741717007303), value = 86.6243967540054, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.8666837382555, -9.85844664924684, 
    260.917044705877, -23.4491403379167, -9.85844664924684, 31.9179574717054, 
    -34.6167194607006, -11.4733575955484, 260.917044705877, -34.6167194607006, 
    5297.93003452994, -402.245356829312, -23.4491403379167, -11.4733575955484, 
    -402.245356829312, 322.853000916723), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340637348022226, -0.196383603152101
    ), logphi = c(0.501651004666487, -1.63741717007303)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_163 = structure(list(
    par = c(-0.316784799865914, 0.0503981837839181, 0.492464534101959, 
    -1.65549477711824), value = 65.1493028841323, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.143629178959, -5.83576198209812, 
    267.739108519294, -18.5480730614529, -5.83576198209812, 47.0746092346985, 
    -24.0657762482499, -15.0865671724176, 267.739108519294, -24.0657762482499, 
    5414.70157572732, -389.139798230076, -18.5480730614529, -15.0865671724176, 
    -389.139798230076, 319.263345385679), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316784799865914, 0.0503981837839181
    ), logphi = c(0.492464534101959, -1.65549477711824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_164 = structure(list(
    par = c(-0.449722002773698, -0.0648031091482312, 0.500936373196931, 
    -1.70332597706665), value = 64.6206813548996, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.7915772982665, -8.62226108466757, 
    284.729994614707, -27.7727477069334, -8.62226108466757, 36.8885319268486, 
    -37.0552354311826, -14.3535681029761, 284.729994614707, -37.0552354311826, 
    6189.77144719324, -490.577672977111, -27.7727477069334, -14.3535681029761, 
    -490.577672977111, 357.844876386793), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449722002773698, -0.0648031091482312
    ), logphi = c(0.500936373196931, -1.70332597706665)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_165 = structure(list(
    par = c(-0.350147902942394, -0.160663636099488, 0.511850809039937, 
    -1.63372730265071), value = 84.7327543571721, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.8089129205127, -10.2279884970358, 
    261.911563701034, -25.863254933256, -10.2279884970358, 33.7021599676746, 
    -38.3837148270061, -11.5974499763638, 261.911563701034, -38.3837148270061, 
    5262.28125365336, -434.867329744293, -25.863254933256, -11.5974499763638, 
    -434.867329744293, 328.225830017459), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350147902942394, -0.160663636099488
    ), logphi = c(0.511850809039937, -1.63372730265071)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_166 = structure(list(
    par = c(-0.328950045791227, -0.110408859253835, 0.499296669895327, 
    -1.66117329847766), value = 78.3797374418053, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.6401688882427, -9.78606071910804, 
    267.523208407283, -22.1388225281061, -9.78606071910804, 35.055017203689, 
    -32.649854226463, -12.745000198322, 267.523208407283, -32.649854226463, 
    5587.48922708574, -412.054105520809, -22.1388225281061, -12.745000198322, 
    -412.054105520809, 331.3336200641), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328950045791227, -0.110408859253835
    ), logphi = c(0.499296669895327, -1.66117329847766)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_167 = structure(list(
    par = c(-0.263162648984534, -0.0613391262415182, 0.520887484411868, 
    -1.65848955637939), value = 87.6674558646723, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.0085887408106, -12.6300166485294, 
    265.699091638538, -23.7673343512768, -12.6300166485294, 37.7565140183833, 
    -39.3964794476176, -12.2561647799557, 265.699091638538, -39.3964794476176, 
    5588.86202589548, -456.256265584543, -23.7673343512768, -12.2561647799557, 
    -456.256265584543, 341.41994951753), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263162648984534, -0.0613391262415182
    ), logphi = c(0.520887484411868, -1.65848955637939)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_168 = structure(list(
    par = c(-0.146570825994835, 0.165461040276238, 0.490527569559944, 
    -1.57249737214975), value = 87.4449301484469, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.745062266143, -6.20489663916146, 
    235.195761057128, -9.01455620194724, -6.20489663916146, 54.7707756233251, 
    -17.4971849631333, -14.0351439981146, 235.195761057128, -17.4971849631333, 
    4340.62485771847, -286.3756862439, -9.01455620194724, -14.0351439981146, 
    -286.3756862439, 269.24107427817), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.146570825994835, 0.165461040276238
    ), logphi = c(0.490527569559944, -1.57249737214975)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_169 = structure(list(
    par = c(-0.36511286221014, -0.0941478761599151, 0.502167890406745, 
    -1.64345102616063), value = 92.0876176095183, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.6041682411949, -8.62941471879708, 
    266.16843869931, -24.016957745232, -8.62941471879708, 36.9546019562961, 
    -33.8672710604726, -13.0868061702927, 266.16843869931, -33.8672710604726, 
    5338.34016204082, -418.891530799215, -24.016957745232, -13.0868061702927, 
    -418.891530799215, 325.146548814104), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36511286221014, -0.0941478761599151
    ), logphi = c(0.502167890406745, -1.64345102616063)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_170 = structure(list(
    par = c(-0.310159262280214, -0.084433556230888, 0.520204060578398, 
    -1.67500284780098), value = 83.1841037132502, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.8166793292223, -12.4533248602177, 
    271.175282595237, -25.8470328855509, -12.4533248602177, 35.9045620257348, 
    -41.5817498620186, -12.2663049886285, 271.175282595237, -41.5817498620186, 
    5833.92896310286, -479.505716349138, -25.8470328855509, -12.2663049886285, 
    -479.505716349138, 351.81929921535), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310159262280214, -0.084433556230888
    ), logphi = c(0.520204060578398, -1.67500284780098)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_171 = structure(list(
    par = c(-0.310098828484033, -0.0195734484311595, 0.510518771788153, 
    -1.78451382626717), value = 55.9035230422081, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.0657327663716, -13.7302777964976, 
    295.688230082192, -23.7012481072441, -13.7302777964976, 38.0733494615981, 
    -39.3827834841431, -13.7290643067445, 295.688230082192, -39.3827834841431, 
    7540.77592420899, -524.272580655349, -23.7012481072441, -13.7290643067445, 
    -524.272580655349, 392.504707573238), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310098828484033, -0.0195734484311595
    ), logphi = c(0.510518771788153, -1.78451382626717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_172 = structure(list(
    par = c(-0.348431724094181, -0.430868847602571, 0.515984790546987, 
    -1.63171723993105), value = 112.54878810018, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.629384540425, -11.8278505532032, 
    253.401511223217, -27.5709197463669, -11.8278505532032, 21.3327564928534, 
    -39.9517380671455, -8.01491343516147, 253.401511223217, -39.9517380671455, 
    5342.91318930258, -437.493326788996, -27.5709197463669, -8.01491343516147, 
    -437.493326788996, 334.669623665462), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348431724094181, -0.430868847602571
    ), logphi = c(0.515984790546987, -1.63171723993105)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_173 = structure(list(
    par = c(-0.270232189744181, 0.0986404285438121, 0.48645727728684, 
    -1.54832312259095), value = 81.1744513204656, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.42257993824, -1.56889529989712, 
    237.181610696524, -13.1882516782866, -1.56889529989712, 53.4636047859749, 
    -18.8638128157947, -14.4255079135291, 237.181610696524, -18.8638128157947, 
    4048.87833420275, -283.101073835113, -13.1882516782866, -14.4255079135291, 
    -283.101073835113, 256.303348308506), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270232189744181, 0.0986404285438121
    ), logphi = c(0.48645727728684, -1.54832312259095)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_174 = structure(list(
    par = c(-0.121200795720388, -0.109932422609215, 0.482217888139929, 
    -1.66385695671263), value = 96.3923766008104, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.866031651113, -13.0785685499291, 
    250.157455038647, -9.80176657705556, -13.0785685499291, 35.5504662650219, 
    -22.0484866346737, -11.3170807161111, 250.157455038647, -22.0484866346737, 
    5607.26171051584, -300.566256587587, -9.80176657705556, -11.3170807161111, 
    -300.566256587587, 316.675116145859), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.121200795720388, -0.109932422609215
    ), logphi = c(0.482217888139929, -1.66385695671263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_175 = structure(list(
    par = c(-0.276129041655561, 0.172167000532312, 0.522524109633786, 
    -1.68515052442039), value = 60.1135089922829, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.3877225984031, -8.64252591981085, 
    278.578064815349, -22.9271288496591, -8.64252591981085, 54.3016848979505, 
    -33.9343184663221, -16.170811841576, 278.578064815349, -33.9343184663221, 
    5857.4995263001, -491.622328793184, -22.9271288496591, -16.170811841576, 
    -491.622328793184, 350.354662934649), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276129041655561, 0.172167000532312
    ), logphi = c(0.522524109633786, -1.68515052442039)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_176 = structure(list(
    par = c(-0.10181085433901, -0.137872869905896, 0.494372510279097, 
    -1.60396539076016), value = 107.362353790562, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.04076887744, -14.0014655407583, 
    237.52197832394, -11.3458523642862, -14.0014655407583, 33.6773867566365, 
    -26.0086441770113, -10.5789993263272, 237.52197832394, -26.0086441770113, 
    4846.32055342615, -293.681164015069, -11.3458523642862, -10.5789993263272, 
    -293.681164015069, 293.292838488668), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.10181085433901, -0.137872869905896
    ), logphi = c(0.494372510279097, -1.60396539076016)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_177 = structure(list(
    par = c(-0.337629460686124, -0.207558088181181, 0.491995801134919, 
    -1.61218137308807), value = 92.2032948164386, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.2857126357287, -8.90174119305698, 
    254.091289658476, -20.8786406705741, -8.90174119305698, 31.2273935243468, 
    -30.2765285624673, -11.507789036358, 254.091289658476, -30.2765285624673, 
    4935.80420523543, -352.223787228212, -20.8786406705741, -11.507789036358, 
    -352.223787228212, 302.057967633829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337629460686124, -0.207558088181181
    ), logphi = c(0.491995801134919, -1.61218137308807)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_178 = structure(list(
    par = c(-0.138672072335958, -0.128632835954527, 0.503759236806743, 
    -1.62804623041188), value = 99.9807600033071, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.963696624021, -14.3452407144196, 
    247.442099212236, -15.0342470419673, -14.3452407144196, 33.39913680378, 
    -29.9370889749184, -10.9198033975133, 247.442099212236, -29.9370889749184, 
    5171.77565137672, -346.893360537948, -15.0342470419673, -10.9198033975133, 
    -346.893360537948, 312.264777758031), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138672072335958, -0.128632835954527
    ), logphi = c(0.503759236806743, -1.62804623041188)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_179 = structure(list(
    par = c(-0.570076546288344, 0.0145023093566716, 0.522637567623895, 
    -1.61399208580801), value = 69.7236703063136, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.2855701027313, -4.80910590994199, 
    271.628230823495, -36.4604481557507, -4.80910590994199, 43.5205519053738, 
    -44.9358949445866, -15.1700416015643, 271.628230823495, -44.9358949445866, 
    4948.16992371128, -524.951157043319, -36.4604481557507, -15.1700416015643, 
    -524.951157043319, 333.418814296493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.570076546288344, 0.0145023093566716
    ), logphi = c(0.522637567623895, -1.61399208580801)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_180 = structure(list(
    par = c(-0.282269026961241, -0.108145959256942, 0.514622177346638, 
    -1.56704868075921), value = 99.4941917583955, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.3050674062392, -9.69328931788027, 
    244.454247624759, -22.6379919752162, -9.69328931788027, 37.4881788367531, 
    -34.5329583382181, -11.4894977070179, 244.454247624759, -34.5329583382181, 
    4403.78172903877, -378.074976834952, -22.6379919752162, -11.4894977070179, 
    -378.074976834952, 290.235397006455), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282269026961241, -0.108145959256942
    ), logphi = c(0.514622177346638, -1.56704868075921)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_181 = structure(list(
    par = c(-0.313891504706299, -0.00212241728364116, 0.497014088796977, 
    -1.50671916174676), value = 101.777906438839, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.536456341568, -3.82470420490222, 
    230.758657011165, -17.8733654720986, -3.82470420490222, 45.0391279755991, 
    -25.4305291988999, -13.0864511866946, 230.758657011165, -25.4305291988999, 
    3654.62600768751, -292.236105542187, -17.8733654720986, -13.0864511866946, 
    -292.236105542187, 243.773118906887), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313891504706299, -0.00212241728364116
    ), logphi = c(0.497014088796977, -1.50671916174676)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_182 = structure(list(
    par = c(-0.342148608248306, 0.143998631002836, 0.503248754688513, 
    -1.60973100206099), value = 67.1444687027068, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.21418115772, -3.25420452895742, 
    261.072100492754, -20.7121454955939, -3.25420452895742, 53.8254472139954, 
    -24.736850413376, -16.3244738544677, 261.072100492754, -24.736850413376, 
    4789.2763730033, -398.618045753807, -20.7121454955939, -16.3244738544677, 
    -398.618045753807, 301.822625790038), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342148608248306, 0.143998631002836
    ), logphi = c(0.503248754688513, -1.60973100206099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_183 = structure(list(
    par = c(-0.121382988662962, 0.320155770445417, 0.522013365281302, 
    -1.57674146717956), value = 87.8814925350872, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.680683852152, -7.04647455052054, 
    242.258656133032, -13.9793135520705, -7.04647455052054, 65.0381341031903, 
    -22.9634816939495, -15.6706900380499, 242.258656133032, -22.9634816939495, 
    4389.92281573292, -383.658082519389, -13.9793135520705, -15.6706900380499, 
    -383.658082519389, 288.016101197996), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.121382988662962, 0.320155770445417
    ), logphi = c(0.522013365281302, -1.57674146717956)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_184 = structure(list(
    par = c(-0.164803452900983, -0.299768263260084, 0.474735155120958, 
    -1.61364021709676), value = 119.07837700183, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.131065774979, -12.0275269388515, 
    238.743978915323, -10.7149704486886, -12.0275269388515, 26.5317372161178, 
    -22.7123562872578, -9.63990239633006, 238.743978915323, -22.7123562872578, 
    4954.50821963317, -249.647593010494, -10.7149704486886, -9.63990239633006, 
    -249.647593010494, 289.478054313008), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.164803452900983, -0.299768263260084
    ), logphi = c(0.474735155120958, -1.61364021709676)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_185 = structure(list(
    par = c(-0.355256334226327, 0.0841596992989697, 0.5168992642006, 
    -1.64686259690928), value = 64.9687931869448, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.1009367220479, -6.70389586687747, 
    271.729491831962, -25.6571173835596, -6.70389586687747, 50.160389907461, 
    -35.3079829338299, -15.3843086803107, 271.729491831962, -35.3079829338299, 
    5341.91238902082, -469.893127682752, -25.6571173835596, -15.3843086803107, 
    -469.893127682752, 333.379059632932), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355256334226327, 0.0841596992989697
    ), logphi = c(0.5168992642006, -1.64686259690928)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_186 = structure(list(
    par = c(-0.2054916208373, -0.119677563759228, 0.487797615024328, 
    -1.69298412652499), value = 82.7492972983713, counts = structure(c(435L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.081064753179, -12.4470107678576, 
    264.483550708405, -14.7935134844346, -12.4470107678576, 34.5017019505178, 
    -25.8917287396798, -11.9726033851464, 264.483550708405, -25.8917287396798, 
    6036.30340367545, -360.813817650296, -14.7935134844346, -11.9726033851464, 
    -360.813817650296, 336.365891417501), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2054916208373, -0.119677563759228
    ), logphi = c(0.487797615024328, -1.69298412652499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_187 = structure(list(
    par = c(-0.186485773768273, -0.422691621602641, 0.501572889427292, 
    -1.63757505268776), value = 112.852337709825, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.7309698361967, -13.8643097109536, 
    246.266908479953, -18.1761023085869, -13.8643097109536, 21.2122396305858, 
    -31.5108309649759, -8.16932866065656, 246.266908479953, -31.5108309649759, 
    5384.1455885788, -348.34797463823, -18.1761023085869, -8.16932866065656, 
    -348.34797463823, 321.796516697503), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186485773768273, -0.422691621602641
    ), logphi = c(0.501572889427292, -1.63757505268776)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_188 = structure(list(
    par = c(-0.246049257464996, 0.218587213799553, 0.481018058746066, 
    -1.64472310941653), value = 63.8490450528159, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.721247373443, -1.30001919096401, 
    258.131128386907, -10.6071361276605, -1.30001919096401, 58.8348038039754, 
    -9.6292091260608, -16.2723850802848, 258.131128386907, -9.6292091260608, 
    5172.26599283482, -333.263247153326, -10.6071361276605, -16.2723850802848, 
    -333.263247153326, 299.963273143078), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.246049257464996, 0.218587213799553
    ), logphi = c(0.481018058746066, -1.64472310941653)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_189 = structure(list(
    par = c(-0.273531901083154, -0.038767452137361, 0.502365545471288, 
    -1.62252631441945), value = 87.8417439798116, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.593067632104, -10.5042915627962, 
    257.028087780498, -19.5340560509294, -10.5042915627962, 37.5952841231708, 
    -30.1194507947855, -13.0740221635506, 257.028087780498, -30.1194507947855, 
    5042.89369968802, -379.86936741774, -19.5340560509294, -13.0740221635506, 
    -379.86936741774, 310.078913706491), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273531901083154, -0.038767452137361
    ), logphi = c(0.502365545471288, -1.62252631441945)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_190 = structure(list(
    par = c(-0.277909886990648, -0.165796616051781, 0.508184789368299, 
    -1.60675435903142), value = 97.4750310135653, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.006204389847, -11.532447274476, 
    251.665808889356, -21.7794445163122, -11.532447274476, 31.6000184170662, 
    -34.2002663700214, -11.1649123404334, 251.665808889356, -34.2002663700214, 
    4901.04563056093, -383.250263004342, -21.7794445163122, -11.1649123404334, 
    -383.250263004342, 308.296580850964), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277909886990648, -0.165796616051781
    ), logphi = c(0.508184789368299, -1.60675435903142)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_191 = structure(list(
    par = c(-0.353574122572941, 0.0438670745617141, 0.49036808611436, 
    -1.5641159788754), value = 80.9436552085971, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.249258775255, -2.75830695528612, 
    246.946685518168, -18.300620448386, -2.75830695528612, 47.0857697862925, 
    -22.8945277562786, -14.7274618207405, 246.946685518168, -22.8945277562786, 
    4242.60484196637, -323.851520150242, -18.300620448386, -14.7274618207405, 
    -323.851520150242, 269.98656612065), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353574122572941, 0.0438670745617141
    ), logphi = c(0.49036808611436, -1.5641159788754)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_192 = structure(list(
    par = c(-0.383520166178211, 0.121642405752374, 0.499693247280716, 
    -1.62644273134013), value = 72.579730989995, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.385051750531, -2.93702734310841, 
    266.989402604167, -22.0387144995726, -2.93702734310841, 52.8375119408508, 
    -24.865799446161, -16.6248129893631, 266.989402604167, -24.865799446161, 
    4998.84232533532, -411.036885250127, -22.0387144995726, -16.6248129893631, 
    -411.036885250127, 309.69827340499), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383520166178211, 0.121642405752374
    ), logphi = c(0.499693247280716, -1.62644273134013)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_193 = structure(list(
    par = c(-0.0549967943447619, -0.388334355124207, 0.48955651467221, 
    -1.68925087987668), value = 107.26106521443, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.947863084069, -16.3462226474564, 
    246.014243437287, -10.8580656466017, -16.3462226474564, 22.5528210151538, 
    -26.2006302484963, -8.18253892198584, 246.014243437287, -26.2006302484963, 
    6101.76217329084, -306.314574551436, -10.8580656466017, -8.18253892198584, 
    -306.314574551436, 338.046503731704), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0549967943447619, -0.388334355124207
    ), logphi = c(0.48955651467221, -1.68925087987668)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_194 = structure(list(
    par = c(-0.11616988253507, 0.165713210631144, 0.505936925442665, 
    -1.53740035007096), value = 98.8201944950325, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.182724700157, -8.52857973399068, 
    228.145860361906, -11.3007629742867, -8.52857973399068, 54.6916920249885, 
    -22.9312789628011, -13.4193558913864, 228.145860361906, -22.9312789628011, 
    3980.64842805468, -303.707023327604, -11.3007629742867, -13.4193558913864, 
    -303.707023327604, 260.055566005946), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.11616988253507, 0.165713210631144
    ), logphi = c(0.505936925442665, -1.53740035007096)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_195 = structure(list(
    par = c(-0.202291065644541, 0.223047992934604, 0.492140108391797, 
    -1.5465054901041), value = 78.5030105892265, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.319471948629, -0.0829289561465885, 
    233.345544309316, -10.563461234625, -0.0829289561465885, 
    64.9251663524808, -15.8231736087089, -15.0891568466704, 233.345544309316, 
    -15.8231736087089, 4013.231613051, -289.323216682291, -10.563461234625, 
    -15.0891568466704, -289.323216682291, 256.032764522018), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202291065644541, 0.223047992934604
    ), logphi = c(0.492140108391797, -1.5465054901041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_196 = structure(list(
    par = c(-0.109206376738921, 0.156635879775084, 0.476237856985066, 
    -1.65423242561737), value = 71.0823040258202, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.414105361126, -6.24472897570172, 
    246.799543209164, -5.09344417487512, -6.24472897570172, 56.3211212103454, 
    -10.979456305904, -13.7496772634194, 246.799543209164, -10.979456305904, 
    5358.59684883278, -285.74673745041, -5.09344417487512, -13.7496772634194, 
    -285.74673745041, 302.278732547734), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.109206376738921, 0.156635879775084
    ), logphi = c(0.476237856985066, -1.65423242561737)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_197 = structure(list(
    par = c(-0.104780409671096, 0.232733555076757, 0.486095861411207, 
    -1.69551864803935), value = 58.0938463732845, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.770434224151, -7.44391302198721, 
    258.965183494553, -6.47219815519406, -7.44391302198721, 60.2029668677062, 
    -10.0776454541318, -14.8498151739673, 258.965183494553, -10.0776454541318, 
    5939.28997402671, -343.345097648218, -6.47219815519406, -14.8498151739673, 
    -343.345097648218, 326.666589105074), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.104780409671096, 0.232733555076757
    ), logphi = c(0.486095861411207, -1.69551864803935)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_198 = structure(list(
    par = c(-0.238103124734915, -0.15385917548244, 0.48740334536593, 
    -1.63329492730834), value = 94.8505219508969, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.530012895841, -10.6941798279081, 
    252.99644785548, -15.6571716427578, -10.6941798279081, 32.8386657670876, 
    -26.3204939727757, -11.6472450670813, 252.99644785548, -26.3204939727757, 
    5193.66195971216, -327.138365088686, -15.6571716427578, -11.6472450670813, 
    -327.138365088686, 306.816295491785), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238103124734915, -0.15385917548244
    ), logphi = c(0.48740334536593, -1.63329492730834)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_199 = structure(list(
    par = c(-0.350953278209126, -0.226088865167001, 0.492961263049579, 
    -1.61476613947505), value = 94.5496666404366, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.5322236905733, -8.58785606538959, 
    255.123292543402, -21.8020136966146, -8.58785606538959, 30.8323085285167, 
    -31.2167365024152, -11.3381055690809, 255.123292543402, -31.2167365024152, 
    4978.18667505001, -360.088487980192, -21.8020136966146, -11.3381055690809, 
    -360.088487980192, 304.897109291602), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350953278209126, -0.226088865167001
    ), logphi = c(0.492961263049579, -1.61476613947505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_200 = structure(list(
    par = c(-0.222050983183812, -0.0430815542258432, 0.450217324326285, 
    -1.61682643434369), value = 85.0071088744789, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.384979688026, -4.45186905650985, 
    240.292378322238, -5.15530972577949, -4.45186905650985, 42.4505461822378, 
    -10.2784608948525, -12.4298021706437, 240.292378322238, -10.2784608948525, 
    4817.7064190007, -200.394181295138, -5.15530972577949, -12.4298021706437, 
    -200.394181295138, 270.126682721639), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222050983183812, -0.0430815542258432
    ), logphi = c(0.450217324326285, -1.61682643434369)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_1 = structure(list(
    par = c(-0.2946807419583, -0.148509764654672, 0.525430519696265, 
    -1.55572254724469), value = 123.599434364295, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.500547749353, -12.6026355395936, 
    272.557165288845, -28.984118053188, -12.6026355395936, 37.3735100929196, 
    -43.1760830821304, -11.812662346955, 272.557165288845, -43.1760830821304, 
    4843.66791615542, -455.631832350534, -28.984118053188, -11.812662346955, 
    -455.631832350534, 329.452097272309), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2946807419583, -0.148509764654672
    ), logphi = c(0.525430519696265, -1.55572254724469)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_2 = structure(list(
    par = c(-0.317571548028206, -0.0653120813466501, 0.490588313671793, 
    -1.70166764893932), value = 81.8505554112752, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.29723151673, -10.9992194765596, 
    310.601789468734, -22.2301716839013, -10.9992194765596, 42.6344835027237, 
    -31.6280550016756, -15.3169646672779, 310.601789468734, -31.6280550016756, 
    6903.93029113423, -464.860015158663, -22.2301716839013, -15.3169646672779, 
    -464.860015158663, 387.085854391955), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317571548028206, -0.0653120813466501
    ), logphi = c(0.490588313671793, -1.70166764893932)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_3 = structure(list(
    par = c(-0.293980955921027, 0.0224291419482332, 0.478492332778453, 
    -1.51620729732009), value = 102.360380652207, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.690794683057, -2.67911351414796, 
    257.240296509309, -13.9161279459898, -2.67911351414796, 51.8675269169933, 
    -21.1325982668598, -15.1513110999701, 257.240296509309, -21.1325982668598, 
    4165.43611988729, -269.765834158164, -13.9161279459898, -15.1513110999701, 
    -269.765834158164, 265.073878786382), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293980955921027, 0.0224291419482332
    ), logphi = c(0.478492332778453, -1.51620729732009)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_4 = structure(list(
    par = c(-0.229425995841352, 0.0320652355720109, 0.506198696005221, 
    -1.64980105418722), value = 97.9846447013661, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.565224760417, -11.7028589556867, 
    295.010665638529, -20.5044016876599, -11.7028589556867, 49.5268549585148, 
    -33.2559929105969, -15.4579664375376, 295.010665638529, -33.2559929105969, 
    6069.96349924316, -450.350484063833, -20.5044016876599, -15.4579664375376, 
    -450.350484063833, 364.636261082296), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229425995841352, 0.0320652355720109
    ), logphi = c(0.506198696005221, -1.64980105418722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_5 = structure(list(
    par = c(-0.25949497914425, -0.26804693222383, 0.499213054460571, 
    -1.66081598414602), value = 116.692570879942, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.741275481184, -14.7516913351353, 
    291.732014822799, -22.6959568863094, -14.7516913351353, 29.1562818475199, 
    -37.1952364943695, -11.5434326843911, 291.732014822799, -37.1952364943695, 
    6356.34033472954, -432.088081961268, -22.6959568863094, -11.5434326843911, 
    -432.088081961268, 373.654288431169), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25949497914425, -0.26804693222383
    ), logphi = c(0.499213054460571, -1.66081598414602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_6 = structure(list(
    par = c(-0.416330256794506, -0.0541278601781733, 0.515771260107556, 
    -1.52680741127096), value = 98.4369634248335, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.405233148228, -4.88554421806953, 
    272.808275905589, -30.8776178297165, -4.88554421806953, 48.1027496626041, 
    -39.4124559086606, -14.3542415891318, 272.808275905589, -39.4124559086606, 
    4407.82572270493, -433.788306743565, -30.8776178297165, -14.3542415891318, 
    -433.788306743565, 306.62385701774), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416330256794506, -0.0541278601781733
    ), logphi = c(0.515771260107556, -1.52680741127096)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_7 = structure(list(
    par = c(-0.292780634361466, -0.143914989762654, 0.49620001700587, 
    -1.58570433397478), value = 108.842682029938, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.507687614283, -9.50567090285404, 
    277.801147934298, -21.6089321103397, -9.50567090285404, 40.2436966240316, 
    -33.0130740309187, -13.2425902279465, 277.801147934298, -33.0130740309187, 
    5169.84344435656, -377.571567092616, -21.6089321103397, -13.2425902279465, 
    -377.571567092616, 324.22907317553), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292780634361466, -0.143914989762654
    ), logphi = c(0.49620001700587, -1.58570433397478)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_8 = structure(list(
    par = c(-0.178846921177918, 0.0583428386850422, 0.495743978677782, 
    -1.56571412646714), value = 91.6968925097606, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.76995881328, -7.2410948206425, 
    266.519515658814, -14.1550229990628, -7.2410948206425, 58.4475744531687, 
    -25.9595219986863, -14.7807172865555, 266.519515658814, -25.9595219986863, 
    4841.23095733935, -338.358980586762, -14.1550229990628, -14.7807172865555, 
    -338.358980586762, 305.322563150412), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178846921177918, 0.0583428386850422
    ), logphi = c(0.495743978677782, -1.56571412646714)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_9 = structure(list(
    par = c(-0.209745587305698, -0.0331511413428028, 0.481817125859317, 
    -1.62883519305041), value = 95.1290132122584, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.302108211793, -9.27182414400818, 
    281.767090815066, -13.6391531189162, -9.27182414400818, 47.0204321452172, 
    -23.663416431674, -14.4366404803975, 281.767090815066, -23.663416431674, 
    5712.741336378, -342.018594826854, -13.6391531189162, -14.4366404803975, 
    -342.018594826854, 335.029464466174), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209745587305698, -0.0331511413428028
    ), logphi = c(0.481817125859317, -1.62883519305041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_10 = structure(list(
    par = c(-0.224451362949008, -0.0611663734673268, 0.513083494593174, 
    -1.58570417114659), value = 113.197465415372, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.794996131844, -11.6642036225301, 
    276.923980955246, -22.2694912288546, -11.6642036225301, 46.1585061906078, 
    -36.9541403770768, -13.3789798688611, 276.923980955246, -36.9541403770768, 
    5191.59637735456, -419.653627087513, -22.2694912288546, -13.3789798688611, 
    -419.653627087513, 333.806848015428), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224451362949008, -0.0611663734673268
    ), logphi = c(0.513083494593174, -1.58570417114659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_11 = structure(list(
    par = c(-0.47951173316803, -0.0148591935855577, 0.490290718723519, 
    -1.60328425814354), value = 88.5589766669409, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.839270431815, -3.0152092449498, 
    295.963994616955, -27.8434205682743, -3.0152092449498, 47.7222818737744, 
    -30.7571350823821, -17.3095108095822, 295.963994616955, -30.7571350823821, 
    5313.38732358577, -432.930612475957, -27.8434205682743, -17.3095108095822, 
    -432.930612475957, 332.817922839013), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.47951173316803, -0.0148591935855577
    ), logphi = c(0.490290718723519, -1.60328425814354)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_12 = structure(list(
    par = c(-0.237587134014005, -0.31318833383718, 0.516487409620729, 
    -1.64090453349968), value = 117.83481330452, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.9157568014321, -16.2038219784222, 
    285.000599422602, -25.7465903423792, -16.2038219784222, 27.3096016769614, 
    -42.6353707538851, -10.1285232716464, 285.000599422602, -42.6353707538851, 
    6109.23377022488, -466.517186774595, -25.7465903423792, -10.1285232716464, 
    -466.517186774595, 374.781002630442), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237587134014005, -0.31318833383718
    ), logphi = c(0.516487409620729, -1.64090453349968)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_13 = structure(list(
    par = c(-0.288994085536782, 0.036829929529824, 0.503112612888978, 
    -1.6181815212652), value = 90.0591157118283, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.622268399562, -8.41134760776185, 
    290.656421920943, -22.102495377041, -8.41134760776185, 51.4662822723722, 
    -31.9898822773723, -16.0108023337102, 290.656421920943, -31.9898822773723, 
    5573.38862444467, -434.349516396537, -22.102495377041, -16.0108023337102, 
    -434.349516396537, 345.518492064656), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288994085536782, 0.036829929529824
    ), logphi = c(0.503112612888978, -1.6181815212652)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_14 = structure(list(
    par = c(-0.325732452430041, -0.111316639394731, 0.505614560553837, 
    -1.57713715299861), value = 103.593091212138, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.303935275307, -8.69242354184507, 
    279.445145405788, -25.2461530987347, -8.69242354184507, 42.8672761216831, 
    -36.6254592805149, -13.6207359258123, 279.445145405788, -36.6254592805149, 
    5063.35396834956, -414.666245115214, -25.2461530987347, -13.6207359258123, 
    -414.666245115214, 327.072443045751), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325732452430041, -0.111316639394731
    ), logphi = c(0.505614560553837, -1.57713715299861)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_15 = structure(list(
    par = c(-0.48926916938379, -0.300794200241666, 0.494380452837419, 
    -1.6466867605204), value = 100.965989475422, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.0688410381842, -9.53878315002044, 
    300.290541790815, -32.27045313281, -9.53878315002044, 29.2567971982294, 
    -41.9385807504113, -12.4572124313715, 300.290541790815, -41.9385807504113, 
    6121.22614719368, -483.203448238712, -32.27045313281, -12.4572124313715, 
    -483.203448238712, 371.260842161547), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.48926916938379, -0.300794200241666
    ), logphi = c(0.494380452837419, -1.6466867605204)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_16 = structure(list(
    par = c(-0.251169431520384, -0.0460868074103062, 0.483936257455261, 
    -1.56709566600971), value = 100.142732916582, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.221127066448, -8.03735902721314, 
    269.012170083016, -15.2337156933413, -8.03735902721314, 45.0647752074929, 
    -25.1304110925332, -14.2709281849562, 269.012170083016, -25.1304110925332, 
    4850.14813785511, -313.430592006725, -15.2337156933413, -14.2709281849562, 
    -313.430592006725, 300.484103942011), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251169431520384, -0.0460868074103062
    ), logphi = c(0.483936257455261, -1.56709566600971)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_17 = structure(list(
    par = c(-0.358520209349887, 0.0897851419869714, 0.518395590772283, 
    -1.62427553916913), value = 84.6797597789618, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.283875881909, -7.07440544545079, 
    300.056095060341, -29.1394658642474, -7.07440544545079, 55.945725183193, 
    -39.4481355669996, -17.2265212405875, 300.056095060341, -39.4481355669996, 
    5669.05662928718, -516.018724425749, -29.1394658642474, -17.2265212405875, 
    -516.018724425749, 363.108072349405), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358520209349887, 0.0897851419869714
    ), logphi = c(0.518395590772283, -1.62427553916913)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_18 = structure(list(
    par = c(-0.332782317163898, -0.111852277877764, 0.519694804528722, 
    -1.53816966806725), value = 118.569167107689, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.003919886495, -10.7968387617063, 
    270.579089935552, -28.7424061209407, -10.7968387617063, 38.4807900317696, 
    -40.6807198736203, -12.7492643784421, 270.579089935552, -40.6807198736203, 
    4588.32856097402, -432.944500857957, -28.7424061209407, -12.7492643784421, 
    -432.944500857957, 314.650792596183), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332782317163898, -0.111852277877764
    ), logphi = c(0.519694804528722, -1.53816966806725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_19 = structure(list(
    par = c(-0.173729299422668, 0.0700277956077748, 0.485826492332656, 
    -1.52277761491058), value = 106.341903080211, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.303430450762, -5.85735154245981, 
    251.930806488332, -10.536229684277, -5.85735154245981, 56.6564853237139, 
    -21.8164910421592, -14.4689847232371, 251.930806488332, -21.8164910421592, 
    4276.84452556676, -273.221300002291, -10.536229684277, -14.4689847232371, 
    -273.221300002291, 272.254786779058), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173729299422668, 0.0700277956077748
    ), logphi = c(0.485826492332656, -1.52277761491058)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_20 = structure(list(
    par = c(-0.0994677000415907, 0.073571025135008, 0.46614049036772, 
    -1.6228323582336), value = 85.2694067124266, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.948650856705, -8.40505104804379, 
    265.037612162899, -3.54932171653388, -8.40505104804379, 56.1578699027621, 
    -12.9483905162431, -14.0734685079025, 265.037612162899, -12.9483905162431, 
    5564.71656506474, -257.10059458639, -3.54932171653388, -14.0734685079025, 
    -257.10059458639, 316.97655500551), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0994677000415907, 0.073571025135008
    ), logphi = c(0.46614049036772, -1.6228323582336)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_21 = structure(list(
    par = c(-0.512999305228847, -0.113205603928685, 0.522893473672933, 
    -1.57830793494197), value = 101.372370118888, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.8998932795698, -8.17942479613976, 
    289.753421910177, -38.5899661310418, -8.17942479613976, 39.1460774729069, 
    -49.4281543446107, -13.8445216801841, 289.753421910177, -49.4281543446107, 
    5124.13235912845, -533.926146751185, -38.5899661310418, -13.8445216801841, 
    -533.926146751185, 352.341372490628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.512999305228847, -0.113205603928685
    ), logphi = c(0.522893473672933, -1.57830793494197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_22 = structure(list(
    par = c(-0.291076962055908, -0.05573497258605, 0.496004412008901, 
    -1.51684821392597), value = 102.915456170608, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.692450757076, -6.67655481834117, 
    260.229103648868, -19.5231640809368, -6.67655481834117, 45.9268741686003, 
    -29.519568055747, -13.885753293863, 260.229103648868, -29.519568055747, 
    4251.15298926571, -325.593201388585, -19.5231640809368, -13.885753293863, 
    -325.593201388585, 279.982221371711), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291076962055908, -0.05573497258605
    ), logphi = c(0.496004412008901, -1.51684821392597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_23 = structure(list(
    par = c(-0.0541222948351958, 0.00894441025741582, 0.487988747890003, 
    -1.69704024379669), value = 87.5369295138278, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.151094090536, -16.3404535022948, 
    285.531628168911, -8.52985144383922, -16.3404535022948, 47.5171782454709, 
    -22.8561135244831, -13.5246496562047, 285.531628168911, -22.8561135244831, 
    6838.40806833302, -364.07087092627, -8.52985144383922, -13.5246496562047, 
    -364.07087092627, 375.180066768621), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0541222948351958, 0.00894441025741582
    ), logphi = c(0.487988747890003, -1.69704024379669)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_24 = structure(list(
    par = c(-0.282978496160916, 0.11122514590937, 0.515231173555167, 
    -1.59095335391636), value = 88.6184575487199, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.950028502316, -7.11307583145526, 
    285.903343296923, -24.0269373108504, -7.11307583145526, 57.893857171365, 
    -34.2388524394721, -16.6404755415073, 285.903343296923, -34.2388524394721, 
    5183.67451946844, -455.210377307225, -24.0269373108504, -16.6404755415073, 
    -455.210377307225, 337.052023816398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282978496160916, 0.11122514590937
    ), logphi = c(0.515231173555167, -1.59095335391636)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_25 = structure(list(
    par = c(-0.329977334197568, -0.087508388596485, 0.491706395680086, 
    -1.51198647480764), value = 120.765159051628, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.085121429663, -6.29759114545436, 
    260.246741198955, -20.2000701747806, -6.29759114545436, 42.8694916863037, 
    -29.0488617551432, -13.8371881348576, 260.246741198955, -29.0488617551432, 
    4186.21349396986, -315.520718388029, -20.2000701747806, -13.8371881348576, 
    -315.520718388029, 275.13813544644), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329977334197568, -0.087508388596485
    ), logphi = c(0.491706395680086, -1.51198647480764)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_26 = structure(list(
    par = c(-0.287452080992365, -0.22336062215452, 0.489787320491736, 
    -1.60562862728147), value = 106.494836775541, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.727155995249, -11.4970770432876, 
    280.183720725802, -20.6162333356019, -11.4970770432876, 32.6868165210215, 
    -32.1283470334777, -12.392111106152, 280.183720725802, -32.1283470334777, 
    5462.01266164203, -366.684048639598, -20.6162333356019, -12.392111106152, 
    -366.684048639598, 332.890789383811), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287452080992365, -0.22336062215452
    ), logphi = c(0.489787320491736, -1.60562862728147)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_27 = structure(list(
    par = c(-0.208214003270236, -0.00634775695636298, 0.497063317873114, 
    -1.62258875250387), value = 102.918764358999, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.340226203552, -12.0192938659613, 
    283.77219001996, -17.2171601207083, -12.0192938659613, 45.7817578585207, 
    -29.3870137504371, -14.6499570270464, 283.77219001996, -29.3870137504371, 
    5655.604778525, -390.612748949692, -17.2171601207083, -14.6499570270464, 
    -390.612748949692, 342.180046072116), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208214003270236, -0.00634775695636298
    ), logphi = c(0.497063317873114, -1.62258875250387)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_28 = structure(list(
    par = c(-0.411317638084869, -0.0389326500251356, 0.506561353967969, 
    -1.61219169467752), value = 85.5868356307603, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.836981286383, -6.63100048470255, 
    295.697589386634, -29.4934630193922, -6.63100048470255, 47.2338468497924, 
    -38.6900236470922, -15.7169746479724, 295.697589386634, -38.6900236470922, 
    5519.49421662812, -477.050533863377, -29.4934630193922, -15.7169746479724, 
    -477.050533863377, 351.277299170505), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411317638084869, -0.0389326500251356
    ), logphi = c(0.506561353967969, -1.61219169467752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_29 = structure(list(
    par = c(-0.179941599965576, 0.104168820018665, 0.494635605585734, 
    -1.57820202474435), value = 99.5266882579802, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.441534768266, -8.28175131317721, 
    270.043216723082, -13.5275641746091, -8.28175131317721, 56.072289158493, 
    -23.9521167806345, -15.5114984519145, 270.043216723082, -23.9521167806345, 
    4984.86551344612, -346.039493194894, -13.5275641746091, -15.5114984519145, 
    -346.039493194894, 311.020464931033), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.179941599965576, 0.104168820018665
    ), logphi = c(0.494635605585734, -1.57820202474435)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_30 = structure(list(
    par = c(-0.24466189244202, -0.38083493673026, 0.519866741945413, 
    -1.63611701723719), value = 121.341675526201, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.6131171143682, -15.6761971545905, 
    282.163791126777, -27.0415983170125, -15.6761971545905, 25.0643779580173, 
    -43.4949981098498, -9.15710930193825, 282.163791126777, -43.4949981098498, 
    6067.5441237592, -474.382455404765, -27.0415983170125, -9.15710930193825, 
    -474.382455404765, 375.862745496391), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24466189244202, -0.38083493673026
    ), logphi = c(0.519866741945413, -1.63611701723719)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_31 = structure(list(
    par = c(-0.180563168006577, 0.0667263688705132, 0.51529573815202, 
    -1.56407356140681), value = 106.931369311301, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.355909923044, -10.5333602391511, 
    270.398608961386, -19.4620319042826, -10.5333602391511, 54.9427881644249, 
    -33.5722208752998, -14.6001344756286, 270.398608961386, -33.5722208752998, 
    4859.85765048014, -404.173841495492, -19.4620319042826, -14.6001344756286, 
    -404.173841495492, 318.640140704929), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180563168006577, 0.0667263688705132
    ), logphi = c(0.51529573815202, -1.56407356140681)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_32 = structure(list(
    par = c(-0.157155543876588, -0.00677216179965258, 0.500108010650447, 
    -1.56583621239712), value = 114.171264271875, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.696466302117, -10.6921067306587, 
    265.131854533251, -15.0567084560294, -10.6921067306587, 50.2431699160866, 
    -29.2204278800057, -13.6683369440505, 265.131854533251, -29.2204278800057, 
    4883.35008790841, -344.617296436311, -15.0567084560294, -13.6683369440505, 
    -344.617296436311, 309.473030412732), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.157155543876588, -0.00677216179965258
    ), logphi = c(0.500108010650447, -1.56583621239712)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_33 = structure(list(
    par = c(-0.356354491537592, -0.0756794443620262, 0.477014190780594, 
    -1.61024914718361), value = 96.9204557177355, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.85152151486, -5.20575385110078, 
    286.876834522332, -19.1539604550428, -5.20575385110078, 45.4606681969949, 
    -24.7914705369112, -15.3202930626151, 286.876834522332, -24.7914705369112, 
    5409.8608057167, -352.082277498056, -19.1539604550428, -15.3202930626151, 
    -352.082277498056, 323.352603874838), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356354491537592, -0.0756794443620262
    ), logphi = c(0.477014190780594, -1.61024914718361)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_34 = structure(list(
    par = c(-0.201111178885147, -0.258664161786835, 0.50169744246176, 
    -1.540372123417), value = 129.784707985115, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.740072639563, -12.9446631547125, 
    258.150164846427, -19.0397802555253, -12.9446631547125, 32.5242733083542, 
    -33.0116283038251, -10.6730151614443, 258.150164846427, -33.0116283038251, 
    4635.54544249689, -332.735862425437, -19.0397802555253, -10.6730151614443, 
    -332.735862425437, 300.162915905844), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201111178885147, -0.258664161786835
    ), logphi = c(0.50169744246176, -1.540372123417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_35 = structure(list(
    par = c(-0.271067144796003, -0.153179934607492, 0.501725310968145, 
    -1.59801051293924), value = 120.533253368454, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.639506722521, -12.7089930295199, 
    280.057218148499, -22.318513286379, -12.7089930295199, 35.7494450895501, 
    -35.2509773513532, -12.8635908325236, 280.057218148499, -35.2509773513532, 
    5365.37698123141, -400.390768570347, -22.318513286379, -12.8635908325236, 
    -400.390768570347, 335.901429544094), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271067144796003, -0.153179934607492
    ), logphi = c(0.501725310968145, -1.59801051293924)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_36 = structure(list(
    par = c(-0.202056955253712, -0.0885344474419417, 0.491186051877674, 
    -1.61813224475766), value = 107.891174541286, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.707741291109, -12.2683930250389, 
    279.633357656905, -16.1497820130307, -12.2683930250389, 41.0264516332859, 
    -28.9159375448378, -13.5144990167646, 279.633357656905, -28.9159375448378, 
    5609.10331131126, -361.312375904532, -16.1497820130307, -13.5144990167646, 
    -361.312375904532, 336.881758428831), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202056955253712, -0.0885344474419417
    ), logphi = c(0.491186051877674, -1.61813224475766)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_37 = structure(list(
    par = c(-0.261349580005804, -0.0628924874945544, 0.510993761357811, 
    -1.59987545645485), value = 97.1334087393037, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.380149725449, -11.2543720547365, 
    282.938472565775, -23.6136335320936, -11.2543720547365, 43.5518581021199, 
    -37.370264266201, -13.8237288602738, 282.938472565775, -37.370264266201, 
    5381.1086168345, -434.359925986172, -23.6136335320936, -13.8237288602738, 
    -434.359925986172, 342.073692443989), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261349580005804, -0.0628924874945544
    ), logphi = c(0.510993761357811, -1.59987545645485)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_38 = structure(list(
    par = c(-0.253335627378886, 0.0227232055641167, 0.463126490935435, 
    -1.58870666046037), value = 93.0711832727456, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.197603112478, -2.96148411749186, 
    269.976439557951, -9.24377980915381, -2.96148411749186, 53.0767209525607, 
    -14.5839988654473, -15.1989889545234, 269.976439557951, -14.5839988654473, 
    5041.47094181206, -260.887502193441, -9.24377980915381, -15.1989889545234, 
    -260.887502193441, 295.924974679451), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253335627378886, 0.0227232055641167
    ), logphi = c(0.463126490935435, -1.58870666046037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_39 = structure(list(
    par = c(-0.318924673264243, -0.0470420793321149, 0.491156512067075, 
    -1.68402841456101), value = 73.0922499613946, counts = structure(c(321L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.005331329432, -8.68012521948458, 
    306.743139290688, -22.0532719694688, -8.68012521948458, 47.5690491690273, 
    -30.9534117803878, -15.5629873965779, 306.743139290688, -30.9534117803878, 
    6598.19620874558, -453.613815755816, -22.0532719694688, -15.5629873965779, 
    -453.613815755816, 377.278043714568), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318924673264243, -0.0470420793321149
    ), logphi = c(0.491156512067075, -1.68402841456101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_40 = structure(list(
    par = c(-0.111547722784489, -0.193595894936611, 0.489589647807843, 
    -1.61846601209004), value = 117.972314855005, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.050990992051, -16.3903935401777, 
    269.785898176167, -12.6250698855301, -16.3903935401777, 33.4949955700381, 
    -28.607685134574, -11.4705247984404, 269.785898176167, -28.607685134574, 
    5667.19311949626, -324.269940525923, -12.6250698855301, -11.4705247984404, 
    -324.269940525923, 336.550960156501), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.111547722784489, -0.193595894936611
    ), logphi = c(0.489589647807843, -1.61846601209004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_41 = structure(list(
    par = c(-0.240364097830326, -0.11343547407869, 0.483705400243991, 
    -1.62314290800297), value = 97.4413085365259, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.797204383014, -10.2693516552677, 
    282.198615440876, -16.2488435186958, -10.2693516552677, 41.3222214952214, 
    -27.1127856770192, -13.6560912764594, 282.198615440876, -27.1127856770192, 
    5661.37180173953, -349.780615863438, -16.2488435186958, -13.6560912764594, 
    -349.780615863438, 335.354938474808), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240364097830326, -0.11343547407869
    ), logphi = c(0.483705400243991, -1.62314290800297)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_42 = structure(list(
    par = c(-0.203872316852163, 0.0569964447842313, 0.48525639610232, 
    -1.65903353036582), value = 74.9381081375874, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.601237442652, -8.99896077655171, 
    291.02327029662, -13.6178132272846, -8.99896077655171, 53.0252993193869, 
    -21.6349318549192, -15.7334031261058, 291.02327029662, -21.6349318549192, 
    6145.88106462577, -379.450824461003, -13.6178132272846, -15.7334031261058, 
    -379.450824461003, 352.840994015224), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203872316852163, 0.0569964447842313
    ), logphi = c(0.48525639610232, -1.65903353036582)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_43 = structure(list(
    par = c(-0.0697376451060719, 0.0174995928817549, 0.462863495416644, 
    -1.66339024435987), value = 96.6721086211268, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.92899150242, -11.7630579445915, 
    270.469250708061, -2.72780150289975, -11.7630579445915, 49.3987887928427, 
    -12.7537120597765, -13.2276016966415, 270.469250708061, -12.7537120597765, 
    6203.16528504361, -263.025794032146, -2.72780150289975, -13.2276016966415, 
    -263.025794032146, 339.213255870163), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0697376451060719, 0.0174995928817549
    ), logphi = c(0.462863495416644, -1.66339024435987)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_44 = structure(list(
    par = c(-0.0528418807559365, -0.0901138749364418, 0.49100063487204, 
    -1.70017243017882), value = 102.044222653516, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.871453991204, -19.2446804980761, 
    285.528701464699, -10.241898131369, -19.2446804980761, 38.5974215149076, 
    -26.9074904828415, -12.3885693934511, 285.528701464699, -26.9074904828415, 
    6943.22029357863, -369.810229155831, -10.241898131369, -12.3885693934511, 
    -369.810229155831, 381.125888729628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0528418807559365, -0.0901138749364418
    ), logphi = c(0.49100063487204, -1.70017243017882)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_45 = structure(list(
    par = c(-0.328803456722888, 0.0931191000515165, 0.492373094967914, 
    -1.59447794571412), value = 84.2302543868155, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.558097475827, -2.74998644655966, 
    285.657084521773, -19.9772365085948, -2.74998644655966, 60.2747094369249, 
    -24.5836754686479, -17.3298607748507, 285.657084521773, -24.5836754686479, 
    5169.32724944752, -391.945162574459, -19.9772365085948, -17.3298607748507, 
    -391.945162574459, 322.126996397998), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328803456722888, 0.0931191000515165
    ), logphi = c(0.492373094967914, -1.59447794571412)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_46 = structure(list(
    par = c(-0.34712278423591, 0.181230203773675, 0.473001030099362, 
    -1.67020200588548), value = 64.2036567614309, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.417536358365, 0.797969700983003, 
    304.096790628705, -15.2554505916669, 0.797969700983003, 63.094001472308, 
    -8.39215440251451, -19.390230166394, 304.096790628705, -8.39215440251451, 
    6172.02190694144, -398.303461297544, -15.2554505916669, -19.390230166394, 
    -398.303461297544, 347.707935095087), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34712278423591, 0.181230203773675
    ), logphi = c(0.473001030099362, -1.67020200588548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_47 = structure(list(
    par = c(-0.198280127978403, -0.143448363393671, 0.48739495902885, 
    -1.54834756834877), value = 116.082156154605, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.280517936308, -10.8973874404228, 
    259.504143851785, -14.4611611236911, -10.8973874404228, 39.0322078054339, 
    -27.5964711597965, -12.3806194025633, 259.504143851785, -27.5964711597965, 
    4663.05076475138, -293.335455603838, -14.4611611236911, -12.3806194025633, 
    -293.335455603838, 292.816588018496), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198280127978403, -0.143448363393671
    ), logphi = c(0.48739495902885, -1.54834756834877)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_48 = structure(list(
    par = c(-0.267062304281952, 0.0230596304217509, 0.484473381841298, 
    -1.5881922032618), value = 93.7422268793493, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.882276210769, -6.60201886759637, 
    276.809789578891, -15.6860553346405, -6.60201886759637, 49.3284158800122, 
    -23.3755474887687, -15.541986561729, 276.809789578891, -23.3755474887687, 
    5103.5087476663, -338.865324861715, -15.6860553346405, -15.541986561729, 
    -338.865324861715, 312.371952240653), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267062304281952, 0.0230596304217509
    ), logphi = c(0.484473381841298, -1.5881922032618)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_49 = structure(list(
    par = c(-0.513694350253364, 0.0336235159734601, 0.496944391768851, 
    -1.71474791554167), value = 56.5128307839752, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.0887273023257, -5.22306442363174, 
    330.03570578316, -32.6270118105043, -5.22306442363174, 51.3301036697555, 
    -37.1721720817675, -18.96655140321, 330.03570578316, -37.1721720817675, 
    7080.44711943145, -577.559724929344, -32.6270118105043, -18.96655140321, 
    -577.559724929344, 405.281006649716), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.513694350253364, 0.0336235159734601
    ), logphi = c(0.496944391768851, -1.71474791554167)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_50 = structure(list(
    par = c(-0.311334213395062, -0.132258418808922, 0.47990424120781, 
    -1.59515944566821), value = 107.087110414505, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.973978986579, -7.42856647661938, 
    279.22788767043, -18.1588895742379, -7.42856647661938, 40.923981298846, 
    -26.8198476867099, -13.9459436692135, 279.22788767043, -26.8198476867099, 
    5239.01956432482, -334.384224636608, -18.1588895742379, -13.9459436692135, 
    -334.384224636608, 317.069167731887), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311334213395062, -0.132258418808922
    ), logphi = c(0.47990424120781, -1.59515944566821)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_51 = structure(list(
    par = c(-0.144454069026102, 0.167575084281235, 0.49822079748238, 
    -1.49082627714065), value = 103.937190661599, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.838930730856, -5.44097771992824, 
    244.117976269109, -11.2457938499233, -5.44097771992824, 63.9557041068883, 
    -22.8349759083812, -14.9162862950192, 244.117976269109, -22.8349759083812, 
    3911.31004023393, -290.151664474436, -11.2457938499233, -14.9162862950192, 
    -290.151664474436, 259.999328960703), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144454069026102, 0.167575084281235
    ), logphi = c(0.49822079748238, -1.49082627714065)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_52 = structure(list(
    par = c(-0.389497023374015, -0.0235570830180392, 0.512093914584847, 
    -1.68893942997957), value = 80.6239013344924, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.6532345770286, -11.0662416510365, 
    315.067529498947, -30.614766343362, -11.0662416510365, 44.2086356748916, 
    -44.1212078712283, -15.9162715522854, 315.067529498947, -44.1212078712283, 
    6735.05773048788, -555.405663520858, -30.614766343362, -15.9162715522854, 
    -555.405663520858, 399.665402362359), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389497023374015, -0.0235570830180392
    ), logphi = c(0.512093914584847, -1.68893942997957)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_53 = structure(list(
    par = c(-0.216444092652799, -0.366726728193903, 0.505230023147513, 
    -1.60563463325144), value = 129.216816519323, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.896448391401, -14.7819244133984, 
    273.418050227292, -22.0614805712671, -14.7819244133984, 26.0059851555638, 
    -36.5662186680993, -9.73161113293486, 273.418050227292, -36.5662186680993, 
    5566.90732482679, -393.058418449499, -22.0614805712671, -9.73161113293486, 
    -393.058418449499, 345.272300464217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216444092652799, -0.366726728193903
    ), logphi = c(0.505230023147513, -1.60563463325144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_54 = structure(list(
    par = c(-0.256020400775645, -0.0162744756054389, 0.471852761828437, 
    -1.70810855945031), value = 73.8997718191823, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.271026831238, -8.81360083582194, 
    304.249980931814, -14.069053641208, -8.81360083582194, 46.7794969196689, 
    -18.5056834425268, -15.4756806729495, 304.249980931814, -18.5056834425268, 
    6928.16943139718, -386.828283152951, -14.069053641208, -15.4756806729495, 
    -386.828283152951, 372.393738430787), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256020400775645, -0.0162744756054389
    ), logphi = c(0.471852761828437, -1.70810855945031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_55 = structure(list(
    par = c(-0.229442445570196, 0.134373386435558, 0.51691719730604, 
    -1.53366337997572), value = 98.6956335180519, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.217157427609, -6.35310330920902, 
    266.558245343163, -21.0612641069474, -6.35310330920902, 61.0819692177245, 
    -31.9195752602752, -15.7427476263905, 266.558245343163, -31.9195752602752, 
    4440.98905552792, -401.940845845772, -21.0612641069474, -15.7427476263905, 
    -401.940845845772, 301.622837557858), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229442445570196, 0.134373386435558
    ), logphi = c(0.51691719730604, -1.53366337997572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_56 = structure(list(
    par = c(-0.270791049099997, -0.186738673986869, 0.492750500568537, 
    -1.53599470086961), value = 119.621094584931, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.519949731497, -9.27628158464699, 
    261.778637423049, -19.1732065992767, -9.27628158464699, 37.512806986939, 
    -30.7395975056579, -12.2284532864114, 261.778637423049, -30.7395975056579, 
    4523.93759557879, -319.219425058748, -19.1732065992767, -12.2284532864114, 
    -319.219425058748, 291.132423871687), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270791049099997, -0.186738673986869
    ), logphi = c(0.492750500568537, -1.53599470086961)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_57 = structure(list(
    par = c(-0.150068761798196, -0.156513033686359, 0.485220333494531, 
    -1.59423338450803), value = 112.265685087041, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.853531651008, -13.0348699904914, 
    266.816039474094, -12.6002113383095, -13.0348699904914, 38.258447837336, 
    -26.936063569849, -12.1379479232075, 266.816039474094, -26.936063569849, 
    5285.14846356032, -305.254695110335, -12.6002113383095, -12.1379479232075, 
    -305.254695110335, 318.726824016125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.150068761798196, -0.156513033686359
    ), logphi = c(0.485220333494531, -1.59423338450803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_58 = structure(list(
    par = c(-0.400914310553449, 0.178990248062517, 0.534971966463275, 
    -1.57423364223771), value = 99.2051204310465, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.677617305375, -5.36735554490519, 
    291.893076251881, -34.3416176757927, -5.36735554490519, 60.8596172106957, 
    -42.9455146147006, -18.1632032774104, 291.893076251881, -42.9455146147006, 
    4952.84174233035, -545.715955533765, -34.3416176757927, -18.1632032774104, 
    -545.715955533765, 347.628220549012), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400914310553449, 0.178990248062517
    ), logphi = c(0.534971966463275, -1.57423364223771)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_59 = structure(list(
    par = c(-0.262555988157984, -0.415962738291837, 0.470406055300341, 
    -1.59620235229717), value = 122.102678409513, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.098104304044, -11.621224107472, 
    269.453517063312, -15.7160326548222, -11.621224107472, 23.8610525542526, 
    -26.4542778651844, -10.2682047149472, 269.453517063312, -26.4542778651844, 
    5325.21933559593, -276.286064888609, -15.7160326548222, -10.2682047149472, 
    -276.286064888609, 314.878281155728), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262555988157984, -0.415962738291837
    ), logphi = c(0.470406055300341, -1.59620235229717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_60 = structure(list(
    par = c(-0.416065023634164, 0.092948516104246, 0.505201855475401, 
    -1.54379149644881), value = 99.2263516392461, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.247746330345, 0.602936637505991, 
    278.951758545531, -26.8080969494378, 0.602936637505991, 63.6323775573544, 
    -30.7137717392436, -17.5608582111408, 278.951758545531, -30.7137717392436, 
    4524.86343529301, -416.464277749995, -26.8080969494378, -17.5608582111408, 
    -416.464277749995, 304.62842289225), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416065023634164, 0.092948516104246
    ), logphi = c(0.505201855475401, -1.54379149644881)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_61 = structure(list(
    par = c(-0.159053637983331, 0.0794190261705029, 0.452020285143177, 
    -1.65179040964034), value = 74.5919826889991, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.572296542909, -3.68957905294565, 
    273.191119937621, -2.67357146910285, -3.68957905294565, 58.3545718768619, 
    -5.85286217358316, -14.5444863264288, 273.191119937621, -5.85286217358316, 
    5922.64050232671, -246.69520786702, -2.67357146910285, -14.5444863264288, 
    -246.69520786702, 322.482559855786), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159053637983331, 0.0794190261705029
    ), logphi = c(0.452020285143177, -1.65179040964034)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_62 = structure(list(
    par = c(-0.221079213299078, 0.00853334996612866, 0.509516540798394, 
    -1.59305307770015), value = 105.765569360239, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.650006558279, -10.6988000716512, 
    279.428305315577, -20.6371332929223, -10.6988000716512, 49.4607410317371, 
    -34.0630870070413, -14.5416770873652, 279.428305315577, -34.0630870070413, 
    5256.2505679461, -414.894442434033, -20.6371332929223, -14.5416770873652, 
    -414.894442434033, 334.049997281483), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221079213299078, 0.00853334996612866
    ), logphi = c(0.509516540798394, -1.59305307770015)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_63 = structure(list(
    par = c(-0.230230995478568, 0.135356444849308, 0.495824295494744, 
    -1.61864730788251), value = 86.7566892624153, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.224696572308, -6.37836056682772, 
    285.904365327383, -16.2051149779074, -6.37836056682772, 60.0097234055852, 
    -23.4583868667926, -16.9253767889899, 285.904365327383, -23.4583868667926, 
    5523.79329208108, -396.485962607329, -16.2051149779074, -16.9253767889899, 
    -396.485962607329, 336.098857587785), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230230995478568, 0.135356444849308
    ), logphi = c(0.495824295494744, -1.61864730788251)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_64 = structure(list(
    par = c(-0.261252992124504, 0.201256155388889, 0.48673900300116, 
    -1.64759536886893), value = 71.4782219516256, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.424339789352, -1.09043913454343, 
    294.418662509344, -14.5251573933081, -1.09043913454343, 69.0392192304046, 
    -14.9297240135127, -18.4631361435095, 294.418662509344, -14.9297240135127, 
    5884.17101362992, -400.695952443186, -14.5251573933081, -18.4631361435095, 
    -400.695952443186, 344.387771182397), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261252992124504, 0.201256155388889
    ), logphi = c(0.48673900300116, -1.64759536886893)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_65 = structure(list(
    par = c(-0.260933648314979, -0.0687041423134146, 0.50161021265078, 
    -1.71165073286641), value = 86.9756314347311, counts = structure(c(289L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.725407089669, -13.7125515529135, 
    309.958083676065, -22.3396809246879, -13.7125515529135, 41.9415141124091, 
    -36.3728136854036, -14.502747237799, 309.958083676065, -36.3728136854036, 
    7124.08007015597, -487.783252694385, -22.3396809246879, -14.502747237799, 
    -487.783252694385, 399.184830520483), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260933648314979, -0.0687041423134146
    ), logphi = c(0.50161021265078, -1.71165073286641)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_66 = structure(list(
    par = c(-0.170953166055946, 0.229174481534186, 0.515628155164745, 
    -1.67152989842932), value = 73.9481545493525, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.470973470319, -11.3188721861945, 
    300.986137034442, -18.0268033442843, -11.3188721861945, 62.7559568648905, 
    -28.4944885962091, -17.9173659322629, 300.986137034442, -28.4944885962091, 
    6339.06335225731, -487.120176934752, -18.0268033442843, -17.9173659322629, 
    -487.120176934752, 376.302093528125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170953166055946, 0.229174481534186
    ), logphi = c(0.515628155164745, -1.67152989842932)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_67 = structure(list(
    par = c(-0.292738229560563, 0.130452202117614, 0.489002074351858, 
    -1.62536841200302), value = 75.9804875592447, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.558657933704, -3.99747433377229, 
    291.162889851648, -17.3414486699386, -3.99747433377229, 59.0904306818629, 
    -20.7728344108205, -17.7256608484555, 291.162889851648, -20.7728344108205, 
    5588.00440592933, -396.726413811166, -17.3414486699386, -17.7256608484555, 
    -396.726413811166, 335.901826257867), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292738229560563, 0.130452202117614
    ), logphi = c(0.489002074351858, -1.62536841200302)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_68 = structure(list(
    par = c(-0.338974851722037, 0.052297532836335, 0.523949499947629, 
    -1.60068763982417), value = 91.700297286049, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.436506855407, -8.49359624410795, 
    292.042040225482, -29.7997936939964, -8.49359624410795, 52.9373271334066, 
    -42.2565285589371, -15.886915900154, 292.042040225482, -42.2565285589371, 
    5363.52105341464, -507.84518090552, -29.7997936939964, -15.886915900154, 
    -507.84518090552, 353.815510518274), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338974851722037, 0.052297532836335
    ), logphi = c(0.523949499947629, -1.60068763982417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_69 = structure(list(
    par = c(-0.3208173324265, 0.120786387944756, 0.499723421522815, 
    -1.61179762338897), value = 84.1857961572828, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.514515581898, -5.72657614483774, 
    291.811551228705, -21.6109892967609, -5.72657614483774, 55.0022204244272, 
    -26.9721703638481, -17.7686638931362, 291.811551228705, -26.9721703638481, 
    5423.29936374841, -430.780524775187, -21.6109892967609, -17.7686638931362, 
    -430.780524775187, 337.746543191741), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3208173324265, 0.120786387944756
    ), logphi = c(0.499723421522815, -1.61179762338897)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_70 = structure(list(
    par = c(-0.280893195554157, -0.0990794881159036, 0.485911216948308, 
    -1.58051642061147), value = 108.086240536737, counts = structure(c(397L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.846757523272, -8.54153591589579, 
    274.658659787264, -17.8369443535331, -8.54153591589579, 42.1157351162549, 
    -27.7525640690612, -13.936160470962, 274.658659787264, -27.7525640690612, 
    5050.31759405483, -336.327622715515, -17.8369443535331, -13.936160470962, 
    -336.327622715515, 311.76243636466), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280893195554157, -0.0990794881159036
    ), logphi = c(0.485911216948308, -1.58051642061147)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_71 = structure(list(
    par = c(-0.148040834477258, 0.0567638708258785, 0.479748608419803, 
    -1.62970223489277), value = 88.7069456843283, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.77582093707, -9.48574075110287, 
    276.414304000383, -9.345355667989, -9.48574075110287, 53.3198362440146, 
    -19.0399003123787, -14.8234151406967, 276.414304000383, -19.0399003123787, 
    5698.0003463778, -321.673618119078, -9.345355667989, -14.8234151406967, 
    -321.673618119078, 331.196826795832), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148040834477258, 0.0567638708258785
    ), logphi = c(0.479748608419803, -1.62970223489277)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_72 = structure(list(
    par = c(-0.464196446436205, 0.0408100597969371, 0.498016207009123, 
    -1.66077068632894), value = 71.3238740938267, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.006910914085, -4.47610617726468, 
    313.188344634341, -29.7052947715315, -4.47610617726468, 51.7010425831188, 
    -33.9066039849456, -18.3724331641599, 313.188344634341, -33.9066039849456, 
    6179.43134931664, -511.903610432185, -29.7052947715315, -18.3724331641599, 
    -511.903610432185, 372.834375635733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.464196446436205, 0.0408100597969371
    ), logphi = c(0.498016207009123, -1.66077068632894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_73 = structure(list(
    par = c(-0.163115351934591, -0.121566289475722, 0.494320890088588, 
    -1.62846400823559), value = 105.110241202062, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.084689575999, -13.4133277036597, 
    279.027569948909, -15.6104880417729, -13.4133277036597, 40.29053185306, 
    -30.3265998411462, -12.7481174256872, 279.027569948909, -30.3265998411462, 
    5792.23015938979, -366.412148377293, -15.6104880417729, -12.7481174256872, 
    -366.412148377293, 345.260398379565), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.163115351934591, -0.121566289475722
    ), logphi = c(0.494320890088588, -1.62846400823559)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_74 = structure(list(
    par = c(-0.206537116413162, -0.302106777690616, 0.48941166862128, 
    -1.66971137758761), value = 114.634250701786, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.996099548619, -15.6900802608106, 
    288.013552758315, -18.2475075050093, -15.6900802608106, 27.3274206605834, 
    -32.3955620409322, -11.0616568278488, 288.013552758315, -32.3955620409322, 
    6486.48626028248, -385.972125632961, -18.2475075050093, -11.0616568278488, 
    -385.972125632961, 370.569205976778), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206537116413162, -0.302106777690616
    ), logphi = c(0.48941166862128, -1.66971137758761)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_75 = structure(list(
    par = c(-0.506839369462987, 0.239790992130608, 0.522157142311202, 
    -1.57946827641317), value = 67.9378671460754, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.961938890597, 2.5777802861171, 
    298.807088487507, -35.0617617446147, 2.5777802861171, 70.1021033329141, 
    -34.0557445355216, -21.5204011109194, 298.807088487507, -34.0557445355216, 
    4944.93671116913, -538.727836794095, -35.0617617446147, -21.5204011109194, 
    -538.727836794095, 342.826016982656), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.506839369462987, 0.239790992130608
    ), logphi = c(0.522157142311202, -1.57946827641317)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_76 = structure(list(
    par = c(-0.352076547736855, -0.00300182153225507, 0.486019544128603, 
    -1.62747486430842), value = 86.7759845725898, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.880928746037, -5.92132412435831, 
    294.106400790639, -20.9647184252759, -5.92132412435831, 48.4908172069254, 
    -26.3759742225034, -16.4102029032165, 294.106400790639, -26.3759742225034, 
    5662.53500025482, -400.602521787974, -20.9647184252759, -16.4102029032165, 
    -400.602521787974, 339.568619494912), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.352076547736855, -0.00300182153225507
    ), logphi = c(0.486019544128603, -1.62747486430842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_77 = structure(list(
    par = c(-0.270392023588377, 0.0107541504507205, 0.487740679218229, 
    -1.65247284597971), value = 88.1137049750359, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.919724663158, -9.35007972913127, 
    295.133078875409, -17.8234516798881, -9.35007972913127, 47.1597981679395, 
    -25.6397381406259, -15.8375203902494, 295.133078875409, -25.6397381406259, 
    6058.03594060461, -402.060239082402, -17.8234516798881, -15.8375203902494, 
    -402.060239082402, 353.449497300318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270392023588377, 0.0107541504507205
    ), logphi = c(0.487740679218229, -1.65247284597971)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_78 = structure(list(
    par = c(-0.476244521474086, -0.375639969310032, 0.482143060374929, 
    -1.59656438690247), value = 118.224886246007, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.1593205438003, -8.21356860214451, 
    284.781163465198, -28.026715602536, -8.21356860214451, 26.2663325187873, 
    -34.8959152773887, -11.6904548050911, 284.781163465198, -34.8959152773887, 
    5343.40113273402, -384.05468809799, -28.026715602536, -11.6904548050911, 
    -384.05468809799, 329.139698052927), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476244521474086, -0.375639969310032
    ), logphi = c(0.482143060374929, -1.59656438690247)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_79 = structure(list(
    par = c(-0.267106134220594, -0.00654117383262834, 0.485990289439953, 
    -1.64043954727872), value = 86.1903057641716, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.758458296815, -6.91073234548867, 
    291.026116002513, -17.2321264795272, -6.91073234548867, 52.2225002690391, 
    -25.3604237308025, -15.4888499857009, 291.026116002513, -25.3604237308025, 
    5876.03486451727, -384.519827647978, -17.2321264795272, -15.4888499857009, 
    -384.519827647978, 345.379103634968), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267106134220594, -0.00654117383262834
    ), logphi = c(0.485990289439953, -1.64043954727872)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_80 = structure(list(
    par = c(-0.341549078665678, -0.000990393443811648, 0.515461421600853, 
    -1.62667729289101), value = 89.7405658181692, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.950334891247, -9.67247155969631, 
    297.137686054327, -28.3944785710588, -9.67247155969631, 47.8952604581195, 
    -40.8835852141465, -15.5184777490547, 297.137686054327, -40.8835852141465, 
    5746.61497199003, -499.157560694741, -28.3944785710588, -15.5184777490547, 
    -499.157560694741, 363.634951849434), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341549078665678, -0.000990393443811648
    ), logphi = c(0.515461421600853, -1.62667729289101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_81 = structure(list(
    par = c(-0.164304428944403, -0.0158213816880203, 0.504628036040986, 
    -1.64434451238116), value = 102.969120930987, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.432514497613, -14.1514300295853, 
    287.036388208151, -17.4682556206562, -14.1514300295853, 45.4049214013708, 
    -32.6199475537692, -14.0941967678998, 287.036388208151, -32.6199475537692, 
    6015.9613375319, -417.667369603691, -17.4682556206562, -14.0941967678998, 
    -417.667369603691, 359.606906091159), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.164304428944403, -0.0158213816880203
    ), logphi = c(0.504628036040986, -1.64434451238116)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_82 = structure(list(
    par = c(-0.27977461310232, 0.0103183584539302, 0.499875137460294, 
    -1.70109548212117), value = 78.8161502053596, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.38946891162, -12.0110257277872, 
    310.728446763164, -21.9824721394701, -12.0110257277872, 45.6265036987702, 
    -32.8860581131352, -15.9870833087439, 310.728446763164, -32.8860581131352, 
    6890.03745413785, -484.731100877767, -21.9824721394701, -15.9870833087439, 
    -484.731100877767, 390.730993210298), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.27977461310232, 0.0103183584539302
    ), logphi = c(0.499875137460294, -1.70109548212117)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_83 = structure(list(
    par = c(-0.227795326906157, -0.0629487984049437, 0.477606678730023, 
    -1.60842567542787), value = 98.6207219099005, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.691170675817, -9.25977350973994, 
    276.586914097265, -13.3478181290059, -9.25977350973994, 44.2653076540012, 
    -23.0408397072779, -14.1297213822611, 276.586914097265, -23.0408397072779, 
    5408.79805045691, -315.790044499664, -13.3478181290059, -14.1297213822611, 
    -315.790044499664, 320.514184373621), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227795326906157, -0.0629487984049437
    ), logphi = c(0.477606678730023, -1.60842567542787)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_84 = structure(list(
    par = c(-0.398674279653055, -0.072788583443587, 0.507061554206318, 
    -1.56161561029312), value = 100.509853591723, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.723848511654, -6.8713258762898, 
    280.441228028394, -28.4531614447303, -6.8713258762898, 44.0949373015087, 
    -37.3979367935817, -14.6228161241879, 280.441228028394, -37.3979367935817, 
    4836.1852996095, -428.825660465648, -28.4531614447303, -14.6228161241879, 
    -428.825660465648, 320.423025861771), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.398674279653055, -0.072788583443587
    ), logphi = c(0.507061554206318, -1.56161561029312)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_85 = structure(list(
    par = c(-0.373640728305224, -0.357548451833114, 0.50889371225944, 
    -1.62343316037117), value = 118.095134225279, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.3495336710166, -12.659332398357, 
    287.159408010496, -30.2827531655225, -12.659332398357, 25.9338573940227, 
    -43.1726048084613, -10.3857721782674, 287.159408010496, -43.1726048084613, 
    5835.97411560177, -471.437529460772, -30.2827531655225, -10.3857721782674, 
    -471.437529460772, 365.381656923347), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.373640728305224, -0.357548451833114
    ), logphi = c(0.50889371225944, -1.62343316037117)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_86 = structure(list(
    par = c(-0.217641778980977, -0.0215276132580937, 0.477088623457255, 
    -1.56110591547328), value = 95.649302083243, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.847479094281, -6.30506373155981, 
    263.267084115171, -11.5687899402417, -6.30506373155981, 49.3176683278307, 
    -21.5918244457214, -14.1954006007694, 263.267084115171, -21.5918244457214, 
    4749.56539828497, -277.196857206619, -11.5687899402417, -14.1954006007694, 
    -277.196857206619, 290.896866982138), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.217641778980977, -0.0215276132580937
    ), logphi = c(0.477088623457255, -1.56110591547328)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_87 = structure(list(
    par = c(-0.399460965468922, 0.00481855971750551, 0.524997291941837, 
    -1.54063068336098), value = 108.566025944328, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.644681483914, -6.30401230239386, 
    277.765493187587, -32.4961255397938, -6.30401230239386, 50.3882173745751, 
    -42.3489230385599, -14.9097356185734, 277.765493187587, -42.3489230385599, 
    4579.58933433744, -475.381770050021, -32.4961255397938, -14.9097356185734, 
    -475.381770050021, 321.71029775796), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399460965468922, 0.00481855971750551
    ), logphi = c(0.524997291941837, -1.54063068336098)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_88 = structure(list(
    par = c(-0.294110701132744, -0.364730536689601, 0.523750822049796, 
    -1.6744443618418), value = 118.914411646109, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.9056813093703, -16.2686584417315, 
    293.407986443839, -30.2356738544063, -16.2686584417315, 24.3918969644596, 
    -48.8356240175847, -9.32476925541437, 293.407986443839, -48.8356240175847, 
    6691.0591287801, -534.873456357943, -30.2356738544063, -9.32476925541437, 
    -534.873456357943, 403.440099049135), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294110701132744, -0.364730536689601
    ), logphi = c(0.523750822049796, -1.6744443618418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_89 = structure(list(
    par = c(-0.253709897044281, -0.0964894704421312, 0.497357290170832, 
    -1.61904095951052), value = 99.6408377142241, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.988266214449, -11.6215123213692, 
    284.880969065426, -20.208457552684, -11.6215123213692, 40.6164530382114, 
    -32.6107805861398, -13.7700068520985, 284.880969065426, -32.6107805861398, 
    5635.41315322169, -398.68352462058, -20.208457552684, -13.7700068520985, 
    -398.68352462058, 343.54137924808), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253709897044281, -0.0964894704421312
    ), logphi = c(0.497357290170832, -1.61904095951052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_90 = structure(list(
    par = c(-0.0751094380018145, -0.120779349586502, 0.496360433836231, 
    -1.64598698700209), value = 117.128594359241, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.099754674172, -17.3529154423591, 
    275.729803568936, -12.3388021346926, -17.3529154423591, 38.9885997407191, 
    -29.7613553428278, -12.0470835476283, 275.729803568936, -29.7613553428278, 
    6082.34812436947, -358.102933844862, -12.3388021346926, -12.0470835476283, 
    -358.102933844862, 355.31474516759), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0751094380018145, -0.120779349586502
    ), logphi = c(0.496360433836231, -1.64598698700209)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_91 = structure(list(
    par = c(-0.262865815012461, 0.0445804221525989, 0.502655856504329, 
    -1.65350091985097), value = 94.8813659011014, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.199794407772, -9.18509681469004, 
    298.25005255546, -21.0675060934307, -9.18509681469004, 53.107175997269, 
    -31.7035237848984, -16.1026248228779, 298.25005255546, -31.7035237848984, 
    6105.50162405943, -452.579676418097, -21.0675060934307, -16.1026248228779, 
    -452.579676418097, 364.777535146743), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262865815012461, 0.0445804221525989
    ), logphi = c(0.502655856504329, -1.65350091985097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_92 = structure(list(
    par = c(-0.236335530166665, 0.0916014092907592, 0.501129796121043, 
    -1.64543090693101), value = 83.1695874137547, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.066139238872, -9.86468819874631, 
    294.469682032172, -18.7808199605399, -9.86468819874631, 52.6800166191776, 
    -28.3634225510809, -16.5182858946622, 294.469682032172, -28.3634225510809, 
    5957.32224237011, -434.825499768365, -18.7808199605399, -16.5182858946622, 
    -434.825499768365, 356.989505675642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236335530166665, 0.0916014092907592
    ), logphi = c(0.501129796121043, -1.64543090693101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_93 = structure(list(
    par = c(-0.107089444576721, -0.231692699982357, 0.487162170428023, 
    -1.61085661480343), value = 120.57704839933, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.331010242505, -16.4151866037798, 
    266.388178410182, -12.0450199645461, -16.4151866037798, 31.7833463867601, 
    -28.0184566712194, -11.0091961786907, 266.388178410182, -28.0184566712194, 
    5562.68088319811, -307.65389587728, -12.0450199645461, -11.0091961786907, 
    -307.65389587728, 330.916681846816), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.107089444576721, -0.231692699982357
    ), logphi = c(0.487162170428023, -1.61085661480343)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_94 = structure(list(
    par = c(-0.203691947367341, 0.0595194417096758, 0.474979638897784, 
    -1.65501842662073), value = 81.9144694063865, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.894267839603, -7.72604613885619, 
    286.986448355009, -10.8204826627656, -7.72604613885619, 52.6646893561633, 
    -16.7043238015196, -15.6254527663435, 286.986448355009, -16.7043238015196, 
    6048.20276101137, -341.460820235895, -10.8204826627656, -15.6254527663435, 
    -341.460820235895, 342.564110237475), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203691947367341, 0.0595194417096758
    ), logphi = c(0.474979638897784, -1.65501842662073)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_95 = structure(list(
    par = c(-0.385226834096206, -0.132977511862674, 0.511708197545798, 
    -1.56108408094267), value = 113.992994876632, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.451690024376, -8.92567128474298, 
    278.559871130568, -29.5204395168724, -8.92567128474298, 39.1103590473563, 
    -40.1579283533238, -13.3275997917792, 278.559871130568, -40.1579283533238, 
    4869.04432981916, -438.628818072218, -29.5204395168724, -13.3275997917792, 
    -438.628818072218, 324.904772003975), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385226834096206, -0.132977511862674
    ), logphi = c(0.511708197545798, -1.56108408094267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_96 = structure(list(
    par = c(-0.317426500192677, -0.268457196863712, 0.464100503153221, 
    -1.57428039887626), value = 113.343016665757, counts = structure(c(287L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.198208237885, -7.89091721387081, 
    269.082210330396, -14.9499358066407, -7.89091721387081, 32.7829774242616, 
    -23.6141039842153, -12.2957396015977, 269.082210330396, -23.6141039842153, 
    4940.6600546682, -257.663647211359, -14.9499358066407, -12.2957396015977, 
    -257.663647211359, 294.558724679206), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317426500192677, -0.268457196863712
    ), logphi = c(0.464100503153221, -1.57428039887626)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_97 = structure(list(
    par = c(-0.285446121134375, 0.0887996136001048, 0.489654696396637, 
    -1.62623200068843), value = 84.5338360004001, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.640691419207, -5.3502159396146, 
    290.621493032717, -17.7430178958105, -5.3502159396146, 55.8209061658488, 
    -23.1913424002528, -17.0080930335104, 290.621493032717, -23.1913424002528, 
    5625.4123229067, -396.004747594603, -17.7430178958105, -17.0080930335104, 
    -396.004747594603, 337.976260841089), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285446121134375, 0.0887996136001048
    ), logphi = c(0.489654696396637, -1.62623200068843)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_98 = structure(list(
    par = c(-0.370389994807884, 0.02882032092402, 0.522600211310064, 
    -1.63010248697967), value = 92.9419471039959, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.880947931538, -10.0344385955964, 
    301.010652730582, -31.4582328755364, -10.0344385955964, 48.381492547378, 
    -44.6800934703617, -15.9865680569027, 301.010652730582, -44.6800934703617, 
    5800.10876863568, -537.272918240461, -31.4582328755364, -15.9865680569027, 
    -537.272918240461, 372.297774887898), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370389994807884, 0.02882032092402
    ), logphi = c(0.522600211310064, -1.63010248697967)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_99 = structure(list(
    par = c(-0.316571667561485, 0.126514078617947, 0.503505777309036, 
    -1.54018592704135), value = 97.9203113795788, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.511791436215, -2.8181812190553, 
    271.767663875266, -21.3165246485403, -2.8181812190553, 59.8264774893664, 
    -27.4078857991356, -16.9745869325055, 271.767663875266, -27.4078857991356, 
    4477.67504849494, -383.236372657692, -21.3165246485403, -16.9745869325055, 
    -383.236372657692, 297.373191294525), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316571667561485, 0.126514078617947
    ), logphi = c(0.503505777309036, -1.54018592704135)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_100 = structure(list(
    par = c(-0.225589713842642, -0.222191588492999, 0.500973859827515, 
    -1.61865584531624), value = 116.691617299831, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.691789848654, -13.6169303353029, 
    280.433542016567, -20.7860496423962, -13.6169303353029, 33.482349852676, 
    -35.3415761402687, -11.7374112065249, 280.433542016567, -35.3415761402687, 
    5694.86946660902, -396.933518167941, -20.7860496423962, -11.7374112065249, 
    -396.933518167941, 347.782597359014), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225589713842642, -0.222191588492999
    ), logphi = c(0.500973859827515, -1.61865584531624)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_101 = structure(list(
    par = c(-0.311835755006842, -0.141034931867375, 0.499498430380544, 
    -1.64095456431885), value = 103.906329407387, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.507875511141, -11.6878843101631, 
    293.907570309671, -24.1357080330573, -11.6878843101631, 37.7066480581334, 
    -36.4019670886506, -13.6381790216689, 293.907570309671, -36.4019670886506, 
    5984.90835207954, -440.391893887337, -24.1357080330573, -13.6381790216689, 
    -440.391893887337, 361.143303642564), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311835755006842, -0.141034931867375
    ), logphi = c(0.499498430380544, -1.64095456431885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_102 = structure(list(
    par = c(-0.20562915883362, 0.0765967119494685, 0.480003908938212, 
    -1.55751234162625), value = 91.0879108245172, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.020296531645, -4.66439184165779, 
    262.471985735147, -10.6826611272481, -4.66439184165779, 57.0052944688371, 
    -19.3517525808318, -15.2232440182587, 262.471985735147, -19.3517525808318, 
    4678.69774707808, -286.202636312183, -10.6826611272481, -15.2232440182587, 
    -286.202636312183, 288.815382159413), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.20562915883362, 0.0765967119494685
    ), logphi = c(0.480003908938212, -1.55751234162625)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_103 = structure(list(
    par = c(-0.359308316906572, 0.0913761855635267, 0.506724256254231, 
    -1.64944436324931), value = 71.2833975658983, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.684617553147, -6.83382457111747, 
    305.685572968173, -26.2553190388815, -6.83382457111747, 54.3772706294021, 
    -33.6826194029527, -17.8645505588548, 305.685572968173, -33.6826194029527, 
    6014.52262870694, -497.664405354925, -26.2553190388815, -17.8645505588548, 
    -497.664405354925, 367.956018830995), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359308316906572, 0.0913761855635267
    ), logphi = c(0.506724256254231, -1.64944436324931)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_104 = structure(list(
    par = c(-0.299014038292576, -0.369826043283995, 0.490085101968712, 
    -1.61048375629933), value = 113.18723960045, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.630419869522, -12.8489021022915, 
    278.880380598423, -22.2198059951495, -12.8489021022915, 24.9658054052304, 
    -33.7339534759451, -10.6178087726505, 278.880380598423, -33.7339534759451, 
    5585.5613885889, -369.568945130183, -22.2198059951495, -10.6178087726505, 
    -369.568945130183, 339.204934597603), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299014038292576, -0.369826043283995
    ), logphi = c(0.490085101968712, -1.61048375629933)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_105 = structure(list(
    par = c(-0.173817946827465, 0.0588669883205818, 0.501002178711984, 
    -1.59794789195902), value = 99.5418264337576, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.336107362983, -11.6438318578105, 
    276.049156934022, -15.7261126005892, -11.6438318578105, 50.4645993544273, 
    -28.3084637615616, -14.9706515735204, 276.049156934022, -28.3084637615616, 
    5291.34600018821, -378.461693070875, -15.7261126005892, -14.9706515735204, 
    -378.461693070875, 328.277439781033), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173817946827465, 0.0588669883205818
    ), logphi = c(0.501002178711984, -1.59794789195902)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_106 = structure(list(
    par = c(-0.423056340910981, -0.270887529774247, 0.493854535282873, 
    -1.58747385845687), value = 111.0057204307, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.313371306588, -8.77179599356737, 
    283.029328816298, -27.8737725967204, -8.77179599356737, 31.1799408763136, 
    -36.8076907548698, -12.3972711918441, 283.029328816298, -36.8076907548698, 
    5223.83180553376, -405.182271990157, -27.8737725967204, -12.3972711918441, 
    -405.182271990157, 330.021640223777), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423056340910981, -0.270887529774247
    ), logphi = c(0.493854535282873, -1.58747385845687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_107 = structure(list(
    par = c(-0.34493051746519, -0.0229698265034476, 0.512746874869724, 
    -1.52814785397066), value = 106.181670671591, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.091816047017, -6.01846537051642, 
    269.629259086912, -26.550035858719, -6.01846537051642, 49.5257663288839, 
    -36.2001497329345, -14.4529537333682, 269.629259086912, -36.2001497329345, 
    4410.87315953581, -406.794469775207, -26.550035858719, -14.4529537333682, 
    -406.794469775207, 301.515485691795), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34493051746519, -0.0229698265034476
    ), logphi = c(0.512746874869724, -1.52814785397066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_108 = structure(list(
    par = c(-0.177953263845628, -0.0134262786843266, 0.495601989609601, 
    -1.58133794628634), value = 106.81246345128, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.863659692664, -10.9322431782743, 
    269.927346828069, -15.0284580531235, -10.9322431782743, 48.0199288901417, 
    -28.0918140020958, -13.9682411024467, 269.927346828069, -28.0918140020958, 
    5077.46222569594, -345.635545746958, -15.0284580531235, -13.9682411024467, 
    -345.635545746958, 316.058555529963), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.177953263845628, -0.0134262786843266
    ), logphi = c(0.495601989609601, -1.58133794628634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_109 = structure(list(
    par = c(-0.302120992466087, -0.286439481091818, 0.494346135288686, 
    -1.6640162037131), value = 110.014568177973, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.983878710854, -13.4801505637938, 
    294.545429500914, -23.6773571558047, -13.4801505637938, 28.7405938124152, 
    -36.658631412223, -11.7141511086771, 294.545429500914, -36.658631412223, 
    6396.17086895683, -431.874255999887, -23.6773571558047, -11.7141511086771, 
    -431.874255999887, 373.575054869235), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302120992466087, -0.286439481091818
    ), logphi = c(0.494346135288686, -1.6640162037131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_110 = structure(list(
    par = c(-0.440450513359398, 0.164971532741653, 0.51826849301203, 
    -1.52138521080362), value = 88.0662161967515, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.999454809668, 1.51119153457557, 
    276.381462164466, -30.5429826266135, 1.51119153457557, 65.7867453313088, 
    -33.0654509710371, -18.444246617122, 276.381462164466, -33.0654509710371, 
    4248.44540600944, -449.680348227233, -30.5429826266135, -18.444246617122, 
    -449.680348227233, 301.983219596735), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.440450513359398, 0.164971532741653
    ), logphi = c(0.51826849301203, -1.52138521080362)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_111 = structure(list(
    par = c(-0.524639723940622, -0.35286467643001, 0.516219766713842, 
    -1.61401932052697), value = 106.86994239891, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.8868353412181, -9.70735272787238, 
    290.710725519006, -38.7194939559521, -9.70735272787238, 28.1920427092075, 
    -50.8297348353892, -10.3724922855264, 290.710725519006, -50.8297348353892, 
    5726.16756513611, -541.892582241132, -38.7194939559521, -10.3724922855264, 
    -541.892582241132, 374.769570118616), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.524639723940622, -0.35286467643001
    ), logphi = c(0.516219766713842, -1.61401932052697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_112 = structure(list(
    par = c(-0.183246192408282, -0.0915790237045453, 0.504030215436931, 
    -1.68733885408554), value = 107.306936947088, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.56663892109, -16.5353683101443, 
    297.537289139171, -19.2370122853447, -16.5353683101443, 38.2864145223039, 
    -35.459018665307, -13.3760933564986, 297.537289139171, -35.459018665307, 
    6736.40302624889, -448.769213381439, -19.2370122853447, -13.3760933564986, 
    -448.769213381439, 385.722575806824), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183246192408282, -0.0915790237045453
    ), logphi = c(0.504030215436931, -1.68733885408554)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_113 = structure(list(
    par = c(-0.211256894405147, 0.136877283427624, 0.50808099499581, 
    -1.64672439464726), value = 81.599088174467, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.992557771871, -10.3138386862156, 
    294.856522462084, -18.9345473060598, -10.3138386862156, 57.4011706255817, 
    -29.5448889815475, -16.8583538755485, 294.856522462084, -29.5448889815475, 
    5977.02099047837, -453.421508497698, -18.9345473060598, -16.8583538755485, 
    -453.421508497698, 361.06145793724), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211256894405147, 0.136877283427624
    ), logphi = c(0.50808099499581, -1.64672439464726)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_114 = structure(list(
    par = c(-0.390691567936664, 0.0323879100145045, 0.505506104730522, 
    -1.67528695991454), value = 71.1277626315944, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.63324278831, -7.62450061486675, 
    313.064905142824, -28.3778787846245, -7.62450061486675, 51.5437326953361, 
    -37.3983864143668, -17.2534519293777, 313.064905142824, -37.3983864143668, 
    6452.55959456747, -524.049664976545, -28.3778787846245, -17.2534519293777, 
    -524.049664976545, 384.827475102156), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.390691567936664, 0.0323879100145045
    ), logphi = c(0.505506104730522, -1.67528695991454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_115 = structure(list(
    par = c(-0.269592704678067, -0.0123730533157644, 0.485975340315998, 
    -1.7109130173592), value = 81.1401873156175, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.77454174269, -11.6738598912036, 
    309.518423325272, -18.3074890216517, -11.6738598912036, 43.4993355291624, 
    -26.0291086284781, -15.726921086312, 309.518423325272, -26.0291086284781, 
    7025.5098035652, -441.512996340876, -18.3074890216517, -15.726921086312, 
    -441.512996340876, 385.469783335424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269592704678067, -0.0123730533157644
    ), logphi = c(0.485975340315998, -1.7109130173592)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_116 = structure(list(
    par = c(-0.283594417340928, -0.433313497819769, 0.50527186527155, 
    -1.60668144629994), value = 122.228279719144, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.7276534409887, -13.3973268283683, 
    276.128665188224, -25.3990908731794, -13.3973268283683, 23.6788375467256, 
    -38.1239560063307, -9.25397731776911, 276.128665188224, -38.1239560063307, 
    5600.89267411001, -412.731293801372, -25.3990908731794, -9.25397731776911, 
    -412.731293801372, 349.405228458721), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283594417340928, -0.433313497819769
    ), logphi = c(0.50527186527155, -1.60668144629994)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_117 = structure(list(
    par = c(-0.270262597641937, 0.0480566876406678, 0.515202939996612, 
    -1.62415222684939), value = 94.8662770737573, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.37831422406, -10.5684586841903, 
    292.930661242252, -24.430133011677, -10.5684586841903, 50.5991763652958, 
    -37.3709227474706, -15.7181802045159, 292.930661242252, -37.3709227474706, 
    5690.92050994158, -475.130474253405, -24.430133011677, -15.7181802045159, 
    -475.130474253405, 357.711342036993), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270262597641937, 0.0480566876406678
    ), logphi = c(0.515202939996612, -1.62415222684939)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_118 = structure(list(
    par = c(-0.289546213399128, -0.155511285284625, 0.497507939351213, 
    -1.59665999037128), value = 103.430048334759, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.019978994875, -10.1680192017284, 
    280.405535956874, -22.0681940241718, -10.1680192017284, 39.067559850281, 
    -33.9612370012787, -13.0863609726362, 280.405535956874, -33.9612370012787, 
    5332.20779314192, -389.629448159567, -22.0681940241718, -13.0863609726362, 
    -389.629448159567, 332.264802217708), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289546213399128, -0.155511285284625
    ), logphi = c(0.497507939351213, -1.59665999037128)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_119 = structure(list(
    par = c(-0.369606629353373, 0.133620818472207, 0.509214163079057, 
    -1.56591228930413), value = 81.3031907118321, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.480814221693, -1.78160616570722, 
    283.786654573959, -25.766741401867, -1.78160616570722, 61.8448300215846, 
    -30.8116775507017, -17.9144071541515, 283.786654573959, -30.8116775507017, 
    4807.08408160879, -438.971232608054, -25.766741401867, -17.9144071541515, 
    -438.971232608054, 319.300646605569), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369606629353373, 0.133620818472207
    ), logphi = c(0.509214163079057, -1.56591228930413)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_120 = structure(list(
    par = c(-0.20972986244834, 0.0109024294922975, 0.520756038289151, 
    -1.53106704433192), value = 116.610691707676, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.69594047198, -11.9071722330943, 
    263.506526447799, -22.4122793017756, -11.9071722330943, 47.4616551429108, 
    -36.4616007644258, -13.5531412546186, 263.506526447799, -36.4616007644258, 
    4468.48203316108, -403.093075449945, -22.4122793017756, -13.5531412546186, 
    -403.093075449945, 304.642456057991), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.20972986244834, 0.0109024294922975
    ), logphi = c(0.520756038289151, -1.53106704433192)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_121 = structure(list(
    par = c(-0.249044572292211, 0.109612809160465, 0.485133386809749, 
    -1.57655313280026), value = 87.1234300697909, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.319768256726, -3.07882521610736, 
    272.816970507961, -13.8425579834234, -3.07882521610736, 60.4041161658131, 
    -20.024569121091, -16.3951536436002, 272.816970507961, -20.024569121091, 
    4916.35567978577, -331.087223742088, -13.8425579834234, -16.3951536436002, 
    -331.087223742088, 303.759888549138), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249044572292211, 0.109612809160465
    ), logphi = c(0.485133386809749, -1.57655313280026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_122 = structure(list(
    par = c(-0.250391853914366, -0.35216783548594, 0.507633087102891, 
    -1.61189732364874), value = 121.767590999932, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.009665141622, -14.7972604764846, 
    277.654401756422, -24.1809001728654, -14.7972604764846, 25.5788264880152, 
    -38.5334130719173, -9.98913870731144, 277.654401756422, -38.5334130719173, 
    5658.75785445158, -417.367173085381, -24.1809001728654, -9.98913870731144, 
    -417.367173085381, 351.887523102334), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250391853914366, -0.35216783548594
    ), logphi = c(0.507633087102891, -1.61189732364874)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_123 = structure(list(
    par = c(-0.0948865150919426, 0.173490956272182, 0.521610101557311, 
    -1.59652558735964), value = 99.0637007879624, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.8186599869, -13.161986444743, 
    274.79402037045, -16.4035358398706, -13.161986444743, 61.3455670155361, 
    -32.4813062135831, -15.4158828458151, 274.79402037045, -32.4813062135831, 
    5279.87047486889, -429.784242914621, -16.4035358398706, -15.4158828458151, 
    -429.784242914621, 337.697940665294), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0948865150919426, 0.173490956272182
    ), logphi = c(0.521610101557311, -1.59652558735964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_124 = structure(list(
    par = c(-0.21615569614404, 0.141812156147015, 0.483926922847336, 
    -1.63988074703922), value = 73.9582022640324, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.533554475676, -5.4698193920899, 
    287.211420573641, -12.4716621954235, -5.4698193920899, 60.3709995452562, 
    -17.093290129111, -16.8942926528359, 287.211420573641, -17.093290129111, 
    5802.98721631323, -368.303657563018, -12.4716621954235, -16.8942926528359, 
    -368.303657563018, 338.741297898792), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21615569614404, 0.141812156147015
    ), logphi = c(0.483926922847336, -1.63988074703922)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_125 = structure(list(
    par = c(-0.235879675430386, -0.100274656147915, 0.497359309339608, 
    -1.56371357883603), value = 119.654438758403, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.462198624769, -10.9973712021372, 
    268.863911433215, -18.6375753692403, -10.9973712021372, 40.5477297107382, 
    -31.1587415282588, -13.1880899996162, 268.863911433215, -31.1587415282588, 
    4868.20990893477, -350.387962196663, -18.6375753692403, -13.1880899996162, 
    -350.387962196663, 309.405667433538), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.235879675430386, -0.100274656147915
    ), logphi = c(0.497359309339608, -1.56371357883603)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_126 = structure(list(
    par = c(-0.287859838966766, 0.349406453763345, 0.514931589260328, 
    -1.65007636869536), value = 49.2996556807924, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.126799414232, 0.0974077245530225, 
    305.595367564138, -21.4946003502803, 0.0974077245530225, 
    80.587260615772, -20.185686988583, -21.5440958193369, 305.595367564138, 
    -20.185686988583, 5902.48745837485, -512.825358825353, -21.4946003502803, 
    -21.5440958193369, -512.825358825353, 364.382615426706), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287859838966766, 0.349406453763345
    ), logphi = c(0.514931589260328, -1.65007636869536)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_127 = structure(list(
    par = c(-0.19131602898129, -0.0125153348493054, 0.495998050374107, 
    -1.58560375917614), value = 105.61399550564, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.736362034776, -9.51676195626305, 
    272.257044656499, -15.7737970791771, -9.51676195626305, 50.2006224394336, 
    -28.4324233064126, -14.1429454920683, 272.257044656499, -28.4324233064126, 
    5133.4275667223, -354.032182858788, -15.7737970791771, -14.1429454920683, 
    -354.032182858788, 319.131264081562), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19131602898129, -0.0125153348493054
    ), logphi = c(0.495998050374107, -1.58560375917614)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_128 = structure(list(
    par = c(-0.243321414513344, -0.0394968811010605, 0.503079472135188, 
    -1.56754873670395), value = 99.0793956654838, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.294820698139, -10.2042836189753, 
    272.335497093934, -20.0366205476143, -10.2042836189753, 45.1498202664879, 
    -32.3162762931872, -13.994484675095, 272.335497093934, -32.3162762931872, 
    4909.69304446409, -377.766729490858, -20.0366205476143, -13.994484675095, 
    -377.766729490858, 315.218828369268), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243321414513344, -0.0394968811010605
    ), logphi = c(0.503079472135188, -1.56754873670395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_129 = structure(list(
    par = c(-0.4255320625799, -0.315063528059286, 0.493240839367281, 
    -1.70780685174008), value = 87.1285880186352, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.768991661605, -11.4767908634406, 
    310.910591799995, -29.8349453675684, -11.4767908634406, 28.6596648670923, 
    -42.2261985839611, -12.0186121854715, 310.910591799995, -42.2261985839611, 
    7145.81134993963, -510.594569259837, -29.8349453675684, -12.0186121854715, 
    -510.594569259837, 403.972018052201), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4255320625799, -0.315063528059286
    ), logphi = c(0.493240839367281, -1.70780685174008)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_130 = structure(list(
    par = c(-0.0828420899898733, 0.17873908842629, 0.499277828710296, 
    -1.53630485836308), value = 98.7823076938063, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.00017092286, -8.74478640966458, 
    251.707838287984, -9.35265185475487, -8.74478640966458, 64.4714198863028, 
    -22.8046137671356, -14.8498362264604, 251.707838287984, -22.8046137671356, 
    4456.37439563384, -311.765779416717, -9.35265185475487, -14.8498362264604, 
    -311.765779416717, 286.591450187501), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0828420899898733, 0.17873908842629
    ), logphi = c(0.499277828710296, -1.53630485836308)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_131 = structure(list(
    par = c(-0.211797864521785, 0.048785657196757, 0.494364346964649, 
    -1.63735492798399), value = 78.826811074669, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.606015548143, -9.17653838783394, 
    288.176181285849, -16.238306963956, -9.17653838783394, 53.1566132657701, 
    -26.4274608170467, -15.591980517371, 288.176181285849, -26.4274608170467, 
    5841.95381481578, -396.091517766095, -16.238306963956, -15.591980517371, 
    -396.091517766095, 347.640353563605), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211797864521785, 0.048785657196757
    ), logphi = c(0.494364346964649, -1.63735492798399)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_132 = structure(list(
    par = c(-0.19564056774428, -0.154901065795841, 0.486090840138529, 
    -1.64682558713884), value = 98.4077064183056, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.62329839371, -12.7797243436589, 
    284.254089418567, -15.5366168499427, -12.7797243436589, 38.5050267759368, 
    -28.4801020562497, -12.7938086897927, 284.254089418567, -28.4801020562497, 
    6054.11756759366, -360.144070176815, -15.5366168499427, -12.7938086897927, 
    -360.144070176815, 351.382484833351), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19564056774428, -0.154901065795841
    ), logphi = c(0.486090840138529, -1.64682558713884)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_133 = structure(list(
    par = c(-0.277459656093586, 0.0258256176522409, 0.501813612270697, 
    -1.59245048184257), value = 95.3185371815531, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.994555186129, -8.47289569705367, 
    282.381622831451, -20.9755289475311, -8.47289569705367, 49.8158184285558, 
    -31.0359331194832, -15.5369846250863, 282.381622831451, -31.0359331194832, 
    5210.66122325209, -405.419536166463, -20.9755289475311, -15.5369846250863, 
    -405.419536166463, 328.898029497537), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277459656093586, 0.0258256176522409
    ), logphi = c(0.501813612270697, -1.59245048184257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_134 = structure(list(
    par = c(-0.393055498235946, -0.0170412896286522, 0.524539483929533, 
    -1.53463890120557), value = 102.388397913121, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.616892885825, -7.49463119120719, 
    275.251831954648, -32.1323968943688, -7.49463119120719, 46.7076982566539, 
    -42.1886978401176, -14.4368791286098, 275.251831954648, -42.1886978401176, 
    4513.13018198718, -466.107037794927, -32.1323968943688, -14.4368791286098, 
    -466.107037794927, 317.671819395571), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.393055498235946, -0.0170412896286522
    ), logphi = c(0.524539483929533, -1.53463890120557)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_135 = structure(list(
    par = c(-0.309105209719143, 0.0831209197359334, 0.49413878443589, 
    -1.655320174043), value = 71.8269656904616, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.415933335252, -6.45615239847075, 
    301.4098620433, -20.5576966472165, -6.45615239847075, 54.6978550914901, 
    -26.2460487050475, -17.3982455873301, 301.4098620433, -26.2460487050475, 
    6078.30920785801, -442.300360921521, -20.5576966472165, -17.3982455873301, 
    -442.300360921521, 359.393281115672), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309105209719143, 0.0831209197359334
    ), logphi = c(0.49413878443589, -1.655320174043)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_136 = structure(list(
    par = c(-0.347807876110781, -0.275704841364805, 0.482859762400151, 
    -1.69928631148752), value = 88.2657882790887, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.271651541168, -10.8405543386425, 
    305.549395179128, -23.4719986575982, -10.8405543386425, 32.6531039824829, 
    -33.8891130517993, -12.5438558207236, 305.549395179128, -33.8891130517993, 
    6934.04541902609, -439.091809600001, -23.4719986575982, -12.5438558207236, 
    -439.091809600001, 385.784101695208), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347807876110781, -0.275704841364805
    ), logphi = c(0.482859762400151, -1.69928631148752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_137 = structure(list(
    par = c(-0.487591866555305, 0.131459968606537, 0.498386591599688, 
    -1.63180976206856), value = 66.7840675143252, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.440194479366, 0.663482435214746, 
    308.417312236742, -29.4203535187165, 0.663482435214746, 61.9275054241086, 
    -28.429302517452, -20.2944026543861, 308.417312236742, -28.429302517452, 
    5676.69507998048, -496.249418004524, -29.4203535187165, -20.2944026543861, 
    -496.249418004524, 354.087117408142), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.487591866555305, 0.131459968606537
    ), logphi = c(0.498386591599688, -1.63180976206856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_138 = structure(list(
    par = c(-0.255102801505879, -0.023101639540692, 0.481657612342261, 
    -1.57510831090082), value = 94.5765646529256, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.294845673807, -7.94163387496383, 
    271.205758476611, -14.6786394523701, -7.94163387496383, 45.1821053708557, 
    -23.6546406000571, -14.6897118540323, 271.205758476611, -23.6546406000571, 
    4939.39073611216, -313.537094697836, -14.6786394523701, -14.6897118540323, 
    -313.537094697836, 303.19659828848), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255102801505879, -0.023101639540692
    ), logphi = c(0.481657612342261, -1.57510831090082)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_139 = structure(list(
    par = c(-0.318566364321447, -0.107367080599826, 0.487523187472294, 
    -1.66302473491885), value = 102.248508680636, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.313055390776, -10.0188664404754, 
    299.410653305188, -21.4041290274025, -10.0188664404754, 39.9255378695784, 
    -30.6973522512521, -14.6062240187206, 299.410653305188, -30.6973522512521, 
    6272.78600805425, -420.772224758892, -21.4041290274025, -14.6062240187206, 
    -420.772224758892, 363.730967247733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318566364321447, -0.107367080599826
    ), logphi = c(0.487523187472294, -1.66302473491885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_140 = structure(list(
    par = c(-0.379868845193943, 0.119862867197762, 0.509376084070206, 
    -1.76718270773027), value = 49.9336955428774, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.803426533957, -10.6546916711636, 
    338.802920470727, -28.5223296003778, -10.6546916711636, 53.4116701231824, 
    -38.2141317984974, -18.9733594080366, 338.802920470727, -38.2141317984974, 
    8037.50711489215, -610.439627791948, -28.5223296003778, -18.9733594080366, 
    -610.439627791948, 431.785050299283), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379868845193943, 0.119862867197762
    ), logphi = c(0.509376084070206, -1.76718270773027)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_141 = structure(list(
    par = c(-0.190094003112281, 0.0809296258606257, 0.508915258320379, 
    -1.5750683290475), value = 107.264678847327, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.975628536499, -10.0611884974455, 
    273.104258411649, -18.11967245402, -10.0611884974455, 53.7291912579008, 
    -30.8337671555137, -15.1472937197639, 273.104258411649, -30.8337671555137, 
    4984.15829980203, -394.132875323194, -18.11967245402, -15.1472937197639, 
    -394.132875323194, 320.426652503869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190094003112281, 0.0809296258606257
    ), logphi = c(0.508915258320379, -1.5750683290475)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_142 = structure(list(
    par = c(-0.329607858599557, -0.229657513354268, 0.507662930289204, 
    -1.64052730138455), value = 102.862819553657, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.2973356588323, -13.0901994310761, 
    292.906295836559, -27.5699216700787, -13.0901994310761, 32.1211518183873, 
    -41.736251766622, -12.1020588039755, 292.906295836559, -41.736251766622, 
    6042.93307584669, -470.553550934838, -27.5699216700787, -12.1020588039755, 
    -470.553550934838, 370.227258908784), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329607858599557, -0.229657513354268
    ), logphi = c(0.507662930289204, -1.64052730138455)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_143 = structure(list(
    par = c(-0.327109036190582, 0.336573644496452, 0.499075375978538, 
    -1.68602542273692), value = 48.048422280473, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.989370243218, 1.65119571704508, 
    314.940131771024, -19.3097171283796, 1.65119571704508, 76.8693382084962, 
    -10.6450237939981, -22.1831031623765, 314.940131771024, -10.6450237939981, 
    6422.56283743237, -501.168126147533, -19.3097171283796, -22.1831031623765, 
    -501.168126147533, 372.866470520705), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.327109036190582, 0.336573644496452
    ), logphi = c(0.499075375978538, -1.68602542273692)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_144 = structure(list(
    par = c(-0.123134208094813, 0.150242478492512, 0.492762702822611, 
    -1.62415831038889), value = 92.4002872566877, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.053189299266, -9.64288198446184, 
    276.938666655013, -10.4347847607045, -9.64288198446184, 59.7825673409602, 
    -20.7145978166068, -15.7544326366832, 276.938666655013, -20.7145978166068, 
    5618.97255931854, -359.540751725618, -10.4347847607045, -15.7544326366832, 
    -359.540751725618, 334.854481824465), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.123134208094813, 0.150242478492512
    ), logphi = c(0.492762702822611, -1.62415831038889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_145 = structure(list(
    par = c(-0.238709924308704, -0.0902121021122819, 0.490247928619465, 
    -1.55429600280118), value = 105.490432555561, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.713649360089, -8.18015842085629, 
    265.396009382357, -16.6116020512419, -8.18015842085629, 45.5088025326233, 
    -28.2372609632375, -13.4011992827254, 265.396009382357, -28.2372609632375, 
    4721.23969024807, -320.06550252639, -16.6116020512419, -13.4011992827254, 
    -320.06550252639, 298.17325523851), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238709924308704, -0.0902121021122819
    ), logphi = c(0.490247928619465, -1.55429600280118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_146 = structure(list(
    par = c(-0.151495041713429, 0.016521921859172, 0.498492837851583, 
    -1.5914311376365), value = 104.438059726521, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.08639878664, -11.0486579707469, 
    271.371116109975, -14.4374667314651, -11.0486579707469, 51.4932068078622, 
    -28.2351032545591, -14.1385338050526, 271.371116109975, -28.2351032545591, 
    5217.17164076208, -356.829271360937, -14.4374667314651, -14.1385338050526, 
    -356.829271360937, 323.061990432194), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.151495041713429, 0.016521921859172
    ), logphi = c(0.498492837851583, -1.5914311376365)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_147 = structure(list(
    par = c(-0.177238722530247, 0.154936188721646, 0.488897434612206, 
    -1.55687205499898), value = 91.1654649950659, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.166428404749, -2.09152051766637, 
    262.508534977002, -10.9494651319153, -2.09152051766637, 70.4590396978233, 
    -19.6314860261282, -15.8875587956686, 262.508534977002, -19.6314860261282, 
    4672.11433879555, -312.756622921739, -10.9494651319153, -15.8875587956686, 
    -312.756622921739, 292.952217524345), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.177238722530247, 0.154936188721646
    ), logphi = c(0.488897434612206, -1.55687205499898)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_148 = structure(list(
    par = c(-0.000662252210342185, 0.037980128312927, 0.499497209244411, 
    -1.59924009785107), value = 112.426587224745, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.576519710412, -17.5618258744237, 
    259.666586789109, -8.04290466227542, -17.5618258744237, 49.4125738761397, 
    -26.6266820361238, -12.8911309857926, 259.666586789109, -26.6266820361238, 
    5358.54993974638, -324.997521637727, -8.04290466227542, -12.8911309857926, 
    -324.997521637727, 325.911596544159), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.000662252210342185, 0.037980128312927
    ), logphi = c(0.499497209244411, -1.59924009785107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_149 = structure(list(
    par = c(-0.242703113462205, -0.160216851311606, 0.501089493888799, 
    -1.60726539881574), value = 118.687356894168, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.631680429269, -13.8159597327103, 
    280.220637979056, -21.0238276565633, -13.8159597327103, 34.3748289530765, 
    -34.7536725762154, -12.6261349517875, 280.220637979056, -34.7536725762154, 
    5502.39185884038, -396.353936062965, -21.0238276565633, -12.6261349517875, 
    -396.353936062965, 340.299715404058), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242703113462205, -0.160216851311606
    ), logphi = c(0.501089493888799, -1.60726539881574)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_150 = structure(list(
    par = c(-0.296614147648367, 0.271294311764525, 0.497522391418151, 
    -1.58410840535718), value = 74.81039251094, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.152915002986, 2.83747747431562, 
    282.236945263747, -17.3498795259519, 2.83747747431562, 74.9824743522254, 
    -16.7050626060927, -19.5365813411286, 282.236945263747, -16.7050626060927, 
    4963.21078610507, -399.494556555524, -17.3498795259519, -19.5365813411286, 
    -399.494556555524, 314.841231055851), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296614147648367, 0.271294311764525
    ), logphi = c(0.497522391418151, -1.58410840535718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_151 = structure(list(
    par = c(-0.0664242421715037, 0.173374328216893, 0.500600919417639, 
    -1.60445347921822), value = 99.6934660459244, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.716141053483, -11.7889251498582, 
    268.699881225132, -9.59720441606748, -11.7889251498582, 61.9042419529592, 
    -23.1421542764565, -15.2316344603776, 268.699881225132, -23.1421542764565, 
    5361.31031189058, -357.547828466309, -9.59720441606748, -15.2316344603776, 
    -357.547828466309, 327.626481126941), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0664242421715037, 0.173374328216893
    ), logphi = c(0.500600919417639, -1.60445347921822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_152 = structure(list(
    par = c(-0.185278454773063, 0.150474474284687, 0.516551717367969, 
    -1.56561419472549), value = 91.3783876663236, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.355230899515, -8.6275273609715, 
    272.406908973011, -19.1466705814491, -8.6275273609715, 62.3116480547026, 
    -31.4639908225445, -15.8789569368878, 272.406908973011, -31.4639908225445, 
    4846.02187081507, -414.457206009189, -19.1466705814491, -15.8789569368878, 
    -414.457206009189, 318.910095192138), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.185278454773063, 0.150474474284687
    ), logphi = c(0.516551717367969, -1.56561419472549)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_153 = structure(list(
    par = c(-0.296670243662425, 0.176919473054411, 0.494159035621994, 
    -1.65400323311841), value = 75.4391406875345, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.888631935325, -4.74144851736469, 
    301.165706940054, -18.6997459081795, -4.74144851736469, 59.9820377154003, 
    -20.7062739967512, -18.7510560163417, 301.165706940054, -20.7062739967512, 
    6008.73999146145, -441.324847642477, -18.6997459081795, -18.7510560163417, 
    -441.324847642477, 355.525315445249), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296670243662425, 0.176919473054411
    ), logphi = c(0.494159035621994, -1.65400323311841)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_154 = structure(list(
    par = c(-0.226448378081493, 0.102753877512606, 0.503828195822345, 
    -1.56806962210351), value = 100.316547983322, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.176055583154, -6.96718437609434, 
    273.146715034756, -18.0303811632143, -6.96718437609434, 57.4675904907451, 
    -28.165535081115, -15.875370522167, 273.146715034756, -28.165535081115, 
    4862.82109655534, -382.110878764053, -18.0303811632143, -15.875370522167, 
    -382.110878764053, 312.740608393369), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226448378081493, 0.102753877512606
    ), logphi = c(0.503828195822345, -1.56806962210351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_155 = structure(list(
    par = c(-0.122587222827719, 0.283369152182045, 0.496119253599595, 
    -1.60877244413814), value = 68.8567340463229, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.274462751222, -2.25681075249895, 
    273.726830080534, -9.32034406631033, -2.25681075249895, 82.0148254838671, 
    -15.4981398452492, -17.2726604699136, 273.726830080534, -15.4981398452492, 
    5345.6337072646, -366.852545333529, -9.32034406631033, -17.2726604699136, 
    -366.852545333529, 325.051001841103), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122587222827719, 0.283369152182045
    ), logphi = c(0.496119253599595, -1.60877244413814)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_156 = structure(list(
    par = c(-0.348255064298609, -0.000667454559608332, 0.493577911553112, 
    -1.66618595057552), value = 83.6852675911998, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.691956020759, -8.54988293852443, 
    305.622059777022, -23.3920695240641, -8.54988293852443, 46.2754998196147, 
    -30.728710143535, -16.5136958543144, 305.622059777022, -30.728710143535, 
    6286.84989782968, -458.932414289848, -23.3920695240641, -16.5136958543144, 
    -458.932414289848, 368.699442919507), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348255064298609, -0.000667454559608332
    ), logphi = c(0.493577911553112, -1.66618595057552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_157 = structure(list(
    par = c(-0.259864853409013, -0.0361005946534165, 0.504963821779521, 
    -1.55153700621652), value = 104.945363961976, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.939675515544, -8.19845211097459, 
    269.48665253812, -21.032260679732, -8.19845211097459, 48.8145666288631, 
    -32.8284071926532, -14.0028117652236, 269.48665253812, -32.8284071926532, 
    4701.6021804076, -376.409591254401, -21.032260679732, -14.0028117652236, 
    -376.409591254401, 307.250115664459), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259864853409013, -0.0361005946534165
    ), logphi = c(0.504963821779521, -1.55153700621652)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_158 = structure(list(
    par = c(-0.265231500652155, 0.0137817115223881, 0.503342583096717, 
    -1.65151475447578), value = 87.0252174505788, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.55821362713, -10.2965614097172, 
    297.405553009611, -21.664331729454, -10.2965614097172, 49.4378166493448, 
    -33.2240350537916, -15.6052706561383, 297.405553009611, -33.2240350537916, 
    6091.98121222221, -453.050954636325, -21.664331729454, -15.6052706561383, 
    -453.050954636325, 365.10715692728), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265231500652155, 0.0137817115223881
    ), logphi = c(0.503342583096717, -1.65151475447578)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_159 = structure(list(
    par = c(-0.343032373127666, 0.18052028956445, 0.495105675194829, 
    -1.55605903747377), value = 84.3685724266458, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.699944001274, 1.43937037577757, 
    276.689347526116, -19.6333404538507, 1.43937037577757, 67.4889031273551, 
    -21.2625794127064, -18.4516890779918, 276.689347526116, -21.2625794127064, 
    4623.80317132727, -376.277229813482, -19.6333404538507, -18.4516890779918, 
    -376.277229813482, 299.406972210647), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343032373127666, 0.18052028956445
    ), logphi = c(0.495105675194829, -1.55605903747377)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_160 = structure(list(
    par = c(-0.193763629267969, -0.0119036036095164, 0.488685848861385, 
    -1.57920963016289), value = 97.3643004705114, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.565669027912, -9.97700660931855, 
    269.114719063879, -13.8329148349214, -9.97700660931855, 47.3625279973078, 
    -25.5152835215711, -14.1885672277908, 269.114719063879, -25.5152835215711, 
    5025.64701798747, -324.894882256288, -13.8329148349214, -14.1885672277908, 
    -324.894882256288, 309.792842017487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.193763629267969, -0.0119036036095164
    ), logphi = c(0.488685848861385, -1.57920963016289)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_161 = structure(list(
    par = c(-0.4136852901507, -0.0705368401915372, 0.52124430229526, 
    -1.59682013753736), value = 110.953784264269, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.5056187029775, -9.13297375504385, 
    291.57459148621, -33.5221988727596, -9.13297375504385, 43.5311514266346, 
    -45.9889153070492, -14.3024455869778, 291.57459148621, -45.9889153070492, 
    5358.50748618927, -514.744573717252, -33.5221988727596, -14.3024455869778, 
    -514.744573717252, 355.7592635417), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4136852901507, -0.0705368401915372
    ), logphi = c(0.52124430229526, -1.59682013753736)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_162 = structure(list(
    par = c(-0.349332254731917, -0.0394441112749689, 0.504222776675855, 
    -1.59302366866535), value = 100.830217592398, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.3353413896, -8.39074316871802, 
    286.569820847404, -25.6296934129097, -8.39074316871802, 44.5331002225657, 
    -35.4373483695269, -15.1239581906992, 286.569820847404, -35.4373483695269, 
    5244.76820358188, -432.73959411394, -25.6296934129097, -15.1239581906992, 
    -432.73959411394, 335.036055265192), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349332254731917, -0.0394441112749689
    ), logphi = c(0.504222776675855, -1.59302366866535)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_163 = structure(list(
    par = c(-0.238013498889156, -0.0932238513095422, 0.497918032455544, 
    -1.60215055216053), value = 108.341554777908, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.96036907946, -11.515239677351, 
    279.433796368522, -19.3758972990565, -11.515239677351, 40.9882437253373, 
    -32.1050189455718, -13.5643271583774, 279.433796368522, -32.1050189455718, 
    5393.62114837161, -382.762212224108, -19.3758972990565, -13.5643271583774, 
    -382.762212224108, 333.302841109884), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238013498889156, -0.0932238513095422
    ), logphi = c(0.497918032455544, -1.60215055216053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_164 = structure(list(
    par = c(-0.540184497324824, -0.12719829244624, 0.520978102503941, 
    -1.62940209685672), value = 90.0435280126208, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.2879155170713, -9.02116986978285, 
    303.176268754868, -40.1078649421294, -9.02116986978285, 38.1411189493974, 
    -53.5791463391888, -14.0253092499876, 303.176268754868, -53.5791463391888, 
    5871.51930381324, -585.7685690831, -40.1078649421294, -14.0253092499876, 
    -585.7685690831, 384.96755920292), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.540184497324824, -0.12719829244624
    ), logphi = c(0.520978102503941, -1.62940209685672)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_165 = structure(list(
    par = c(-0.357703965041085, -0.0923753763692018, 0.492621530572781, 
    -1.58171975261978), value = 100.362382702678, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.500784361202, -7.15342241974781, 
    281.478047217121, -23.1211999874859, -7.15342241974781, 42.2104047004268, 
    -31.5748928727544, -14.611417359589, 281.478047217121, -31.5748928727544, 
    5073.52047847576, -382.882300392851, -23.1211999874859, -14.611417359589, 
    -382.882300392851, 319.609892422079), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357703965041085, -0.0923753763692018
    ), logphi = c(0.492621530572781, -1.58171975261978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_166 = structure(list(
    par = c(-0.189586147232349, -0.0871067879227393, 0.496075915779758, 
    -1.65850865360321), value = 107.302221248716, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.196195932616, -13.9371160017276, 
    289.819789220047, -17.2846006059046, -13.9371160017276, 41.1966728997015, 
    -31.2989721429346, -13.5469297095625, 289.819789220047, -31.2989721429346, 
    6240.99373821707, -403.955078146723, -17.2846006059046, -13.5469297095625, 
    -403.955078146723, 363.89721365282), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189586147232349, -0.0871067879227393
    ), logphi = c(0.496075915779758, -1.65850865360321)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_167 = structure(list(
    par = c(-0.232291638811965, 0.0108795962638832, 0.499690317740117, 
    -1.61424972958208), value = 100.913824039906, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.22871892267, -11.2350998584532, 
    284.275911063503, -18.748241958022, -11.2350998584532, 46.4377963638185, 
    -30.2750854856981, -15.0525387070388, 284.275911063503, -30.2750854856981, 
    5528.76708050221, -401.137075712654, -18.748241958022, -15.0525387070388, 
    -401.137075712654, 339.53243258722), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232291638811965, 0.0108795962638832
    ), logphi = c(0.499690317740117, -1.61424972958208)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_168 = structure(list(
    par = c(-0.235398019860633, 0.358865286608343, 0.4817089004858, 
    -1.54365218436113), value = 69.3751553870421, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.800968877869, 9.0025255907733, 
    259.630659957821, -8.18883051323382, 9.0025255907733, 86.1231291153786, 
    -4.87403966431543, -18.7136049376591, 259.630659957821, -4.87403966431543, 
    4387.04318118255, -302.54608877911, -8.18883051323382, -18.7136049376591, 
    -302.54608877911, 275.693470054961), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.235398019860633, 0.358865286608343
    ), logphi = c(0.4817089004858, -1.54365218436113)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_169 = structure(list(
    par = c(-0.233315756015023, 0.0849591363171759, 0.514346884511489, 
    -1.65019427212514), value = 86.5690408970813, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.631479966931, -11.63889421818, 
    297.804264118184, -22.2845290966944, -11.63889421818, 53.0822449000823, 
    -35.5666608378158, -16.1693173073019, 297.804264118184, -35.5666608378158, 
    6069.01908338742, -481.63699039705, -22.2845290966944, -16.1693173073019, 
    -481.63699039705, 369.736206536686), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233315756015023, 0.0849591363171759
    ), logphi = c(0.514346884511489, -1.65019427212514)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_170 = structure(list(
    par = c(-0.250056157524398, 0.0830954770430454, 0.502299979520365, 
    -1.59062799494729), value = 95.1690848312407, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.047536606829, -7.97729716950357, 
    280.703467630872, -19.1969145024729, -7.97729716950357, 54.1628360721802, 
    -28.7895357757861, -16.0932894033294, 280.703467630872, -28.7895357757861, 
    5166.03747538724, -399.957986237709, -19.1969145024729, -16.0932894033294, 
    -399.957986237709, 326.15172721151), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250056157524398, 0.0830954770430454
    ), logphi = c(0.502299979520365, -1.59062799494729)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_171 = structure(list(
    par = c(-0.237577604482496, 0.0331181988945375, 0.524100169150369, 
    -1.51468254544464), value = 109.665787596531, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.179077375657, -8.97559857904184, 
    261.611169143805, -24.1847760520386, -8.97559857904184, 53.3164605585057, 
    -37.0791068320386, -13.8154906537125, 261.611169143805, -37.0791068320386, 
    4264.35824995863, -409.201828077244, -24.1847760520386, -13.8154906537125, 
    -409.201828077244, 297.741550863151), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237577604482496, 0.0331181988945375
    ), logphi = c(0.524100169150369, -1.51468254544464)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_172 = structure(list(
    par = c(-0.423150352398925, -0.342974838378491, 0.501805577667656, 
    -1.62861576935099), value = 113.269993309106, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.0648778876275, -11.4177441830066, 
    291.382767070303, -30.9033527905456, -11.4177441830066, 26.3504045747709, 
    -42.2603335010763, -11.1388396639711, 291.382767070303, -42.2603335010763, 
    5885.84442047235, -468.176531626341, -30.9033527905456, -11.1388396639711, 
    -468.176531626341, 364.617092852626), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423150352398925, -0.342974838378491
    ), logphi = c(0.501805577667656, -1.62861576935099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_173 = structure(list(
    par = c(-0.381062637072149, 0.0356154991830413, 0.498534185895764, 
    -1.64306709589955), value = 84.9816080494296, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.374579271877, -6.47556714383768, 
    303.112440899866, -25.6029979208705, -6.47556714383768, 50.3191215699417, 
    -32.0154968882491, -17.257694565842, 303.112440899866, -32.0154968882491, 
    5917.69558809929, -468.968875724229, -25.6029979208705, -17.257694565842, 
    -468.968875724229, 359.61154932096), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381062637072149, 0.0356154991830413
    ), logphi = c(0.498534185895764, -1.64306709589955)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_174 = structure(list(
    par = c(-0.011203516435033, 0.0924217801604997, 0.497400239275299, 
    -1.65835930634727), value = 96.9385227252476, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.009125099117, -17.557462250295, 
    275.19317780289, -7.72921777070223, -17.557462250295, 52.9422696118331, 
    -24.0901104540114, -13.9340872316041, 275.19317780289, -24.0901104540114, 
    6207.63930743351, -361.062362575382, -7.72921777070223, -13.9340872316041, 
    -361.062362575382, 357.569570272886), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.011203516435033, 0.0924217801604997
    ), logphi = c(0.497400239275299, -1.65835930634727)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_175 = structure(list(
    par = c(-0.03761300920238, 0.0950159465476048, 0.542963585074397, 
    -1.4134057534459), value = 141.259368941147, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.698694652016, -15.2287304899801, 
    223.431937655505, -19.1390784429757, -15.2287304899801, 55.9593990487883, 
    -35.6316244207733, -10.9680988593652, 223.431937655505, -35.6316244207733, 
    3217.77802708567, -354.101106413651, -19.1390784429757, -10.9680988593652, 
    -354.101106413651, 245.240106067968), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.03761300920238, 0.0950159465476048
    ), logphi = c(0.542963585074397, -1.4134057534459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_176 = structure(list(
    par = c(-0.283981200966631, -0.193296282653003, 0.501577656707063, 
    -1.70742488067257), value = 94.4831766583244, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.688463998466, -13.9023220384615, 
    306.729754132817, -24.3482553603513, -13.9023220384615, 35.5197586294764, 
    -39.7347006106941, -12.7435694547984, 306.729754132817, -39.7347006106941, 
    7112.27537072645, -487.660645127619, -24.3482553603513, -12.7435694547984, 
    -487.660645127619, 401.045705046954), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283981200966631, -0.193296282653003
    ), logphi = c(0.501577656707063, -1.70742488067257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_177 = structure(list(
    par = c(-0.197954087872453, 0.135921514133435, 0.48026169699411, 
    -1.5500362092332), value = 97.0783715340072, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.480571844151, -3.41113254265224, 
    259.846778224215, -9.59149882184818, -3.41113254265224, 61.0809084591324, 
    -17.1330476028686, -15.7587751274946, 259.846778224215, -17.1330476028686, 
    4564.35884547091, -282.523065845197, -9.59149882184818, -15.7587751274946, 
    -282.523065845197, 283.257623546973), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197954087872453, 0.135921514133435
    ), logphi = c(0.48026169699411, -1.5500362092332)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_178 = structure(list(
    par = c(-0.208509319306162, 0.00354678600110788, 0.494079867966699, 
    -1.62684271870415), value = 95.1831032616262, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.566930214811, -11.0331252471951, 
    284.440513024009, -16.3901565617408, -11.0331252471951, 47.1409763385111, 
    -27.7981768732616, -14.8513934270511, 284.440513024009, -27.7981768732616, 
    5705.45271721201, -384.117017151908, -16.3901565617408, -14.8513934270511, 
    -384.117017151908, 342.290115238342), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208509319306162, 0.00354678600110788
    ), logphi = c(0.494079867966699, -1.62684271870415)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_179 = structure(list(
    par = c(-0.24278113820199, -0.027352618976989, 0.460734088607229, 
    -1.60485631352529), value = 89.8190306132178, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.63357895607, -5.68133761191802, 
    272.545947847647, -9.0429534580494, -5.68133761191802, 46.385319862452, 
    -15.3005270782103, -14.5622281735314, 272.545947847647, -15.3005270782103, 
    5278.69086275956, -259.72369067162, -9.0429534580494, -14.5622281735314, 
    -259.72369067162, 304.643390112602), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24278113820199, -0.027352618976989
    ), logphi = c(0.460734088607229, -1.60485631352529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_180 = structure(list(
    par = c(-0.476277309394323, 0.0245796878579097, 0.535891200357551, 
    -1.55267567295677), value = 92.5920047188797, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.3488154357181, -7.00086033944558, 
    285.554587577508, -39.1662780909741, -7.00086033944558, 48.7995963389665, 
    -49.676591494574, -15.2253947192094, 285.554587577508, -49.676591494574, 
    4748.34452309025, -547.357738327037, -39.1662780909741, -15.2253947192094, 
    -547.357738327037, 343.316181041331), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476277309394323, 0.0245796878579097
    ), logphi = c(0.535891200357551, -1.55267567295677)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_181 = structure(list(
    par = c(-0.24787143856138, 0.039686336603831, 0.504897319485811, 
    -1.42897162484038), value = 123.233286688305, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.390586941724, -4.78450663266017, 
    235.054240832255, -17.7206097689009, -4.78450663266017, 53.2259304080185, 
    -27.9980415704983, -13.5024830569819, 235.054240832255, -27.9980415704983, 
    3298.90828790624, -283.929226711166, -17.7206097689009, -13.5024830569819, 
    -283.929226711166, 232.346883201728), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24787143856138, 0.039686336603831
    ), logphi = c(0.504897319485811, -1.42897162484038)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_182 = structure(list(
    par = c(-0.289305838430485, 0.137222276548797, 0.507127019982857, 
    -1.63058317691218), value = 78.4262089707257, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.99702821591, -5.39865338922141, 
    296.409652928986, -22.2255623789636, -5.39865338922141, 62.7636663672604, 
    -29.9036871318492, -17.709866849458, 296.409652928986, -29.9036871318492, 
    5715.60519992786, -462.250938166875, -22.2255623789636, -17.709866849458, 
    -462.250938166875, 353.511014733243), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289305838430485, 0.137222276548797
    ), logphi = c(0.507127019982857, -1.63058317691218)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_183 = structure(list(
    par = c(-0.236126452269069, 0.157240244036035, 0.512259135493811, 
    -1.61501956902962), value = 80.9810396167442, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.129424286437, -8.21291270014513, 
    289.309543845206, -20.7164907823909, -8.21291270014513, 59.9262499001441, 
    -30.62108075369, -17.1684113645654, 289.309543845206, -30.62108075369, 
    5500.93510949878, -452.01569457376, -20.7164907823909, -17.1684113645654, 
    -452.01569457376, 346.23111046983), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236126452269069, 0.157240244036035
    ), logphi = c(0.512259135493811, -1.61501956902962)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_184 = structure(list(
    par = c(-0.247029366427615, -0.0203698183234242, 0.493313190978852, 
    -1.50859022676777), value = 105.752648610897, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.828465943556, -6.33420454931866, 
    254.793563623679, -16.3944092719248, -6.33420454931866, 50.0071766289523, 
    -27.1818271109225, -13.9126685887447, 254.793563623679, -27.1818271109225, 
    4142.75945545839, -301.286608722862, -16.3944092719248, -13.9126685887447, 
    -301.286608722862, 271.611947475492), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247029366427615, -0.0203698183234242
    ), logphi = c(0.493313190978852, -1.50859022676777)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_185 = structure(list(
    par = c(-0.182428644144076, 0.174671597841731, 0.51048059121342, 
    -1.56813079268519), value = 96.7495256563689, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.619454368817, -7.95111553841821, 
    271.767509097742, -17.0598892150764, -7.95111553841821, 62.3836289150859, 
    -27.8474561419273, -16.3232282517356, 271.767509097742, -27.8474561419273, 
    4856.92003248417, -396.112246862756, -17.0598892150764, -16.3232282517356, 
    -396.112246862756, 315.289964206045), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.182428644144076, 0.174671597841731
    ), logphi = c(0.51048059121342, -1.56813079268519)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_186 = structure(list(
    par = c(-0.10469402053178, 0.0418354782757932, 0.476537133856925, 
    -1.56462944478025), value = 104.930931743433, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(139.115483470675, -9.46465312523515, 
    254.301385766098, -6.10705949100065, -9.46465312523515, 52.760321281653, 
    -19.0465668339357, -13.6834175457068, 254.301385766098, -19.0465668339357, 
    4803.34489596146, -252.408857726039, -6.10705949100065, -13.6834175457068, 
    -252.408857726039, 290.907344826508), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.10469402053178, 0.0418354782757932
    ), logphi = c(0.476537133856925, -1.56462944478025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_187 = structure(list(
    par = c(-0.344662989826121, 0.0710732542501813, 0.51967350783732, 
    -1.57486090895554), value = 101.394660659948, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.497079277711, -7.35147644448375, 
    285.25278269953, -28.3920130570436, -7.35147644448375, 52.6678021515181, 
    -38.4350368740627, -16.247372078837, 285.25278269953, -38.4350368740627, 
    4986.75034361184, -473.631789935425, -28.3920130570436, -16.247372078837, 
    -473.631789935425, 334.316144080304), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344662989826121, 0.0710732542501813
    ), logphi = c(0.51967350783732, -1.57486090895554)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_188 = structure(list(
    par = c(-0.301307742000711, 0.212787226971442, 0.49374150822448, 
    -1.63588504343301), value = 67.2981874484474, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.848120134719, -0.500678556392131, 
    296.53636614313, -18.0467304637943, -0.500678556392131, 70.1405947403089, 
    -18.2312948631136, -19.2353160564096, 296.53636614313, -18.2312948631136, 
    5711.89213273371, -427.948350012031, -18.0467304637943, -19.2353160564096, 
    -427.948350012031, 343.872215243124), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301307742000711, 0.212787226971442
    ), logphi = c(0.49374150822448, -1.63588504343301)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_189 = structure(list(
    par = c(-0.339666537449053, 0.0717944592953839, 0.481742439600442, 
    -1.5804614111564), value = 82.4228284467487, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.63604507218, -0.820087304731487, 
    279.863351824616, -17.4595995297011, -0.820087304731487, 
    59.4177223405268, -20.6813624643587, -17.0395456553507, 279.863351824616, 
    -20.6813624643587, 4951.27326436773, -345.13918918222, -17.4595995297011, 
    -17.0395456553507, -345.13918918222, 305.495670165357), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339666537449053, 0.0717944592953839
    ), logphi = c(0.481742439600442, -1.5804614111564)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_190 = structure(list(
    par = c(-0.460531450277488, -0.195252656014202, 0.4864079224646, 
    -1.58838527263004), value = 101.342066644134, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.629428626879, -6.65561083934563, 
    286.527599271835, -27.1372190638886, -6.65561083934563, 35.2104333778414, 
    -33.5807064857363, -14.0740838503461, 286.527599271835, -33.5807064857363, 
    5174.40746601849, -393.259484145148, -27.1372190638886, -14.0740838503461, 
    -393.259484145148, 323.605836339169), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.460531450277488, -0.195252656014202
    ), logphi = c(0.4864079224646, -1.58838527263004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_191 = structure(list(
    par = c(-0.310782647259585, -0.362848157337453, 0.504707881749469, 
    -1.68709208758849), value = 116.277648667971, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.5834124149437, -14.8970839468632, 
    298.065902200051, -27.0248513185578, -14.8970839468632, 25.0114207851482, 
    -42.4145779298613, -10.3603042411748, 298.065902200051, -42.4145779298613, 
    6847.78385737061, -485.311078346484, -27.0248513185578, -10.3603042411748, 
    -485.311078346484, 397.133985703846), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310782647259585, -0.362848157337453
    ), logphi = c(0.504707881749469, -1.68709208758849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_192 = structure(list(
    par = c(-0.319884846297924, 0.103513128583106, 0.500774252381985, 
    -1.57243800172801), value = 91.3401291557467, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.03816786535, -4.10742974210621, 
    280.556256996078, -21.481828319736, -4.10742974210621, 57.1110880294157, 
    -27.7316394772242, -17.0647709047955, 280.556256996078, -27.7316394772242, 
    4893.01104996187, -400.58503282836, -21.481828319736, -17.0647709047955, 
    -400.58503282836, 315.287961729638), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319884846297924, 0.103513128583106
    ), logphi = c(0.500774252381985, -1.57243800172801)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_193 = structure(list(
    par = c(-0.425882840712895, 0.13559325689474, 0.515446791705052, 
    -1.63270654854742), value = 73.1334300244288, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.431982819151, -3.80692997836718, 
    307.176869483783, -31.2261400008396, -3.80692997836718, 60.6402999565603, 
    -37.4003028476011, -19.0627659417686, 307.176869483783, -37.4003028476011, 
    5752.812281969, -537.154694587372, -31.2261400008396, -19.0627659417686, 
    -537.154694587372, 367.483691526616), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.425882840712895, 0.13559325689474
    ), logphi = c(0.515446791705052, -1.63270654854742)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_194 = structure(list(
    par = c(-0.0746028506057615, -0.00927816546952072, 0.459988198123173, 
    -1.62220605762855), value = 103.726487222176, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.275721145779, -11.590226723257, 
    259.978869081579, -2.04572931750135, -11.590226723257, 46.9608466175941, 
    -13.7472788743764, -12.8386335767061, 259.978869081579, -13.7472788743764, 
    5575.14437220519, -224.000904561095, -2.04572931750135, -12.8386335767061, 
    -224.000904561095, 314.398961524631), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0746028506057615, -0.00927816546952072
    ), logphi = c(0.459988198123173, -1.62220605762855)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_195 = structure(list(
    par = c(-0.508646936765479, -0.0828005079664245, 0.496154965420571, 
    -1.6484449516384), value = 82.348357284922, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.7279344535352, -6.94868823103434, 
    308.715404532478, -32.3188770074978, -6.94868823103434, 40.862880066328, 
    -38.9164904461836, -16.3440067719733, 308.715404532478, -38.9164904461836, 
    6046.35364779682, -505.070974693211, -32.3188770074978, -16.3440067719733, 
    -505.070974693211, 369.430118009717), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508646936765479, -0.0828005079664245
    ), logphi = c(0.496154965420571, -1.6484449516384)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_196 = structure(list(
    par = c(-0.319040655711373, 0.0229942356639938, 0.498128775007356, 
    -1.71306973475823), value = 77.7201642720764, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.384084551716, -11.5239823834656, 
    316.86495484351, -23.4220123047635, -11.5239823834656, 46.0049944308594, 
    -32.5680068655743, -16.6886373929032, 316.86495484351, -32.5680068655743, 
    7078.19205370086, -503.554827108843, -23.4220123047635, -16.6886373929032, 
    -503.554827108843, 396.788864474473), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319040655711373, 0.0229942356639938
    ), logphi = c(0.498128775007356, -1.71306973475823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_197 = structure(list(
    par = c(-0.36053713341685, -0.199096510461372, 0.495897936511809, 
    -1.67324656715122), value = 86.3751619152144, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.384346339411, -10.7267594131599, 
    303.187965780438, -26.364739078133, -10.7267594131599, 36.3084180321493, 
    -38.2859318364126, -13.3166346252267, 303.187965780438, -38.2859318364126, 
    6510.57989476911, -469.390329620012, -26.364739078133, -13.3166346252267, 
    -469.390329620012, 380.482286306716), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36053713341685, -0.199096510461372
    ), logphi = c(0.495897936511809, -1.67324656715122)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_198 = structure(list(
    par = c(-0.0161217486506858, 0.0787598276902175, 0.501582623135678, 
    -1.56254382627056), value = 106.863840260022, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.375335572898, -13.5069394247012, 
    252.80713011, -8.54521272586339, -13.5069394247012, 58.5425737114065, 
    -26.4544186059368, -13.2268340067299, 252.80713011, -26.4544186059368, 
    4846.73936353985, -315.200990446129, -8.54521272586339, -13.2268340067299, 
    -315.200990446129, 304.923080452824), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0161217486506858, 0.0787598276902175
    ), logphi = c(0.501582623135678, -1.56254382627056)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_199 = structure(list(
    par = c(-0.294232293051962, -0.022466340878304, 0.491946280751756, 
    -1.65675345482492), value = 90.0512293400591, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.157366592593, -9.76962208198984, 
    298.410284102602, -20.4823399680976, -9.76962208198984, 45.2509782320476, 
    -29.4644888647611, -15.5712299108046, 298.410284102602, -29.4644888647611, 
    6151.26278285061, -426.358206018662, -20.4823399680976, -15.5712299108046, 
    -426.358206018662, 360.819456446393), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294232293051962, -0.022466340878304
    ), logphi = c(0.491946280751756, -1.65675345482492)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_200 = structure(list(
    par = c(-0.121913815047161, 0.158646302381319, 0.478959961601794, 
    -1.62981244742494), value = 81.2579466067108, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(139.39751008607, -7.41347571775464, 
    273.692919297019, -6.69777533524041, -7.41347571775464, 61.650372206401, 
    -14.109009107699, -15.6133481876708, 273.692919297019, -14.109009107699, 
    5662.3170172756, -317.01202311929, -6.69777533524041, -15.6133481876708, 
    -317.01202311929, 328.043135368716), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.121913815047161, 0.158646302381319
    ), logphi = c(0.478959961601794, -1.62981244742494)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_1 = structure(list(
    par = c(-0.363365525225787, 0.24965905616119, 0.511767316137885, 
    -1.60698427762771), value = 86.5229703392147, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.199255774485, -0.0106729594051558, 
    330.145647293278, -28.130271008564, -0.0106729594051558, 
    79.6278978540954, -29.1316475227177, -22.6885276894961, 330.145647293278, 
    -29.1316475227177, 5900.01132389517, -539.607244625984, -28.130271008564, 
    -22.6885276894961, -539.607244625984, 381.086241485917), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363365525225787, 0.24965905616119
    ), logphi = c(0.511767316137885, -1.60698427762771)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_2 = structure(list(
    par = c(-0.313199458989394, 0.176629346936762, 0.514959840817048, 
    -1.52997984829392), value = 106.915944948232, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.621356055855, -2.55639942992048, 
    301.246977421954, -26.3844750705289, -2.55639942992048, 72.4822791653423, 
    -33.3479582614871, -19.3139126238862, 301.246977421954, -33.3479582614871, 
    4842.89820066763, -460.706561060675, -26.3844750705289, -19.3139126238862, 
    -460.706561060675, 332.772601190356), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313199458989394, 0.176629346936762
    ), logphi = c(0.514959840817048, -1.52997984829392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_3 = structure(list(
    par = c(-0.224032282892642, -0.422978465234822, 0.487042879890979, 
    -1.68560765527955), value = 127.018797738734, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.397671116568, -16.9395162608055, 
    321.77813696066, -21.548870018151, -16.9395162608055, 25.2422937343511, 
    -36.5052422139911, -10.9294448975561, 321.77813696066, -36.5052422139911, 
    7539.64744004776, -434.620055230539, -21.548870018151, -10.9294448975561, 
    -434.620055230539, 423.078470092264), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224032282892642, -0.422978465234822
    ), logphi = c(0.487042879890979, -1.68560765527955)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_4 = structure(list(
    par = c(-0.233135052470562, -0.00418559053669094, 0.469731170451913, 
    -1.63178699571723), value = 102.052589249455, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.745023637758, -8.30519977412791, 
    312.951404463746, -12.4419275593368, -8.30519977412791, 52.4119305858051, 
    -19.5988183016027, -16.6789242257437, 312.951404463746, -19.5988183016027, 
    6328.69305302464, -345.220678568126, -12.4419275593368, -16.6789242257437, 
    -345.220678568126, 363.152993177351), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233135052470562, -0.00418559053669094
    ), logphi = c(0.469731170451913, -1.63178699571723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_5 = structure(list(
    par = c(-0.251518117499675, 0.141093689771022, 0.496358749453778, 
    -1.71766584542082), value = 65.1391653707475, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.817471135776, -8.26130803233127, 
    349.64681611882, -20.3060768786401, -8.26130803233127, 68.5019419357502, 
    -26.2577558522992, -19.8904911279385, 349.64681611882, -26.2577558522992, 
    7880.84517381904, -534.848289980516, -20.3060768786401, -19.8904911279385, 
    -534.848289980516, 435.3962439545), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251518117499675, 0.141093689771022
    ), logphi = c(0.496358749453778, -1.71766584542082)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_6 = structure(list(
    par = c(-0.322653350932206, 0.136472858213509, 0.511923847662502, 
    -1.57075667054144), value = 96.2298072606747, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.873120420067, -5.09266723014434, 
    314.070889444906, -27.1089322438911, -5.09266723014434, 66.3193758470015, 
    -35.0544966210009, -19.3326834114771, 314.070889444906, -35.0544966210009, 
    5426.91336925927, -488.296873083272, -27.1089322438911, -19.3326834114771, 
    -488.296873083272, 358.781243917861), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.322653350932206, 0.136472858213509
    ), logphi = c(0.511923847662502, -1.57075667054144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_7 = structure(list(
    par = c(-0.250737862509199, -0.0524737145923977, 0.499130796845403, 
    -1.52141207890545), value = 130.560360838901, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.141266937922, -9.54297488675593, 
    288.186950342606, -20.7590437284466, -9.54297488675593, 50.4149538826937, 
    -33.5205992030296, -15.0513888002024, 288.186950342606, -33.5205992030296, 
    4799.74622533064, -366.871642015099, -20.7590437284466, -15.0513888002024, 
    -366.871642015099, 315.965502572624), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250737862509199, -0.0524737145923977
    ), logphi = c(0.499130796845403, -1.52141207890545)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_8 = structure(list(
    par = c(-0.303925367302536, 0.080585967113211, 0.503909022535346, 
    -1.62010416602493), value = 103.168304019502, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.316917760747, -8.23770264801738, 
    325.699080143238, -25.0820800573592, -8.23770264801738, 59.335870474797, 
    -34.3511858424961, -18.7721675679597, 325.699080143238, -34.3511858424961, 
    6199.34121229093, -494.576774478617, -25.0820800573592, -18.7721675679597, 
    -494.576774478617, 385.205117837017), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303925367302536, 0.080585967113211
    ), logphi = c(0.503909022535346, -1.62010416602493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_9 = structure(list(
    par = c(-0.236530202641268, 0.0836074544647405, 0.502078321574528, 
    -1.62000039485576), value = 92.7137765602865, counts = structure(c(91L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.434610512102, -9.89718672528284, 
    319.651872345617, -20.9583428887328, -9.89718672528284, 59.6307013722708, 
    -32.1000705341135, -18.000491060377, 319.651872345617, -32.1000705341135, 
    6204.53278559552, -464.647361308579, -20.9583428887328, -18.000491060377, 
    -464.647361308579, 381.265240694262), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236530202641268, 0.0836074544647405
    ), logphi = c(0.502078321574528, -1.62000039485576)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_10 = structure(list(
    par = c(-0.356705333945392, -0.0922010323765106, 0.526807474913562, 
    -1.63928149317027), value = 106.187903265229, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.996625085287, -13.9447982725471, 
    331.944067763601, -36.3887214387404, -13.9447982725471, 45.409545911923, 
    -55.4140667539116, -14.9357802534666, 331.944067763601, -55.4140667539116, 
    6683.18618758335, -611.521031416373, -36.3887214387404, -14.9357802534666, 
    -611.521031416373, 425.994457767587), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356705333945392, -0.0922010323765106
    ), logphi = c(0.526807474913562, -1.63928149317027)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_11 = structure(list(
    par = c(-0.292541294704257, 0.0517872505887823, 0.491777796030718, 
    -1.55624086976203), value = 104.249840067253, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.019580909088, -4.73401620126879, 
    301.878879728434, -20.0126489033892, -4.73401620126879, 60.2256102517629, 
    -28.2339067183557, -17.6644264193726, 301.878879728434, -28.2339067183557, 
    5205.19563851352, -385.400883928355, -20.0126489033892, -17.6644264193726, 
    -385.400883928355, 331.857179784123), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292541294704257, 0.0517872505887823
    ), logphi = c(0.491777796030718, -1.55624086976203)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_12 = structure(list(
    par = c(-0.388279001910373, -0.0108157741475505, 0.507829485521524, 
    -1.51644465292721), value = 110.346978386987, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.621781049607, -3.00403948472194, 
    298.171208637399, -29.7568241443003, -3.00403948472194, 59.8267877123249, 
    -37.9882888665861, -16.7627980989238, 298.171208637399, -37.9882888665861, 
    4718.32033514374, -434.730920154891, -29.7568241443003, -16.7627980989238, 
    -434.730920154891, 323.654755106872), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.388279001910373, -0.0108157741475505
    ), logphi = c(0.507829485521524, -1.51644465292721)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_13 = structure(list(
    par = c(-0.283390208958262, 0.128855819928766, 0.505186366037723, 
    -1.59235373632601), value = 95.5946856013999, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.72618295296, -6.94076310026048, 
    316.411050860665, -23.3718531461591, -6.94076310026048, 63.2794550270432, 
    -31.7917317325112, -19.0852658814578, 316.411050860665, -31.7917317325112, 
    5743.45736634285, -469.866138359976, -23.3718531461591, -19.0852658814578, 
    -469.866138359976, 365.947979169334), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283390208958262, 0.128855819928766
    ), logphi = c(0.505186366037723, -1.59235373632601)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_14 = structure(list(
    par = c(-0.0125583926144617, -0.142282709856213, 0.490445777676432, 
    -1.59405087956582), value = 133.532184697848, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.071002660619, -19.8817037642129, 
    283.634312218339, -8.83367457049644, -19.8817037642129, 42.8742222027267, 
    -29.6469387066622, -12.319606085498, 283.634312218339, -29.6469387066622, 
    5915.81270033004, -317.641418696724, -8.83367457049644, -12.319606085498, 
    -317.641418696724, 356.210139877078), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0125583926144617, -0.142282709856213
    ), logphi = c(0.490445777676432, -1.59405087956582)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_15 = structure(list(
    par = c(-0.369425382047529, 0.103608167894287, 0.503486735445148, 
    -1.62815311561492), value = 96.1228952102576, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.116629441952, -5.14000861429054, 
    333.58972403974, -28.2579398813709, -5.14000861429054, 63.959188143059, 
    -34.2979784697661, -20.1493773523964, 333.58972403974, -34.2979784697661, 
    6303.93410107288, -524.552724192162, -28.2579398813709, -20.1493773523964, 
    -524.552724192162, 392.020768856582), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369425382047529, 0.103608167894287
    ), logphi = c(0.503486735445148, -1.62815311561492)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_16 = structure(list(
    par = c(-0.222048196606527, 0.129692419792603, 0.479974785069102, 
    -1.60261461044726), value = 96.8493712104367, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(147.967994340803, -6.16793146690497, 
    307.024593503513, -12.5976229448099, -6.16793146690497, 62.0389414471845, 
    -18.3255704264695, -18.3060266198964, 307.024593503513, -18.3255704264695, 
    5838.56696205132, -363.329700761028, -12.5976229448099, -18.3060266198964, 
    -363.329700761028, 349.324250247918), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222048196606527, 0.129692419792603
    ), logphi = c(0.479974785069102, -1.60261461044726)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_17 = structure(list(
    par = c(-0.0727360395391192, -0.129518422341967, 0.469059766820945, 
    -1.58907092836631), value = 130.453974928338, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(150.911498778328, -14.9282646901838, 
    282.580503743191, -5.5782561112494, -14.9282646901838, 45.0965167075879, 
    -22.5928132380204, -12.9989219388449, 282.580503743191, -22.5928132380204, 
    5750.31149656979, -252.120910111842, -5.5782561112494, -12.9989219388449, 
    -252.120910111842, 337.50603380156), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0727360395391192, -0.129518422341967
    ), logphi = c(0.469059766820945, -1.58907092836631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_18 = structure(list(
    par = c(-0.351576863588965, 0.16650347263993, 0.486087259360382, 
    -1.6096520263765), value = 83.9510098847031, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(139.208867356189, 0.714607171659054, 
    323.03442941739, -20.5414609339982, 0.714607171659054, 72.6290374082339, 
    -19.5194178331803, -21.0513112506305, 323.03442941739, -19.5194178331803, 
    5910.02696341647, -436.018220502987, -20.5414609339982, -21.0513112506305, 
    -436.018220502987, 360.482798271278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351576863588965, 0.16650347263993
    ), logphi = c(0.486087259360382, -1.6096520263765)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_19 = structure(list(
    par = c(-0.368999838842604, -0.0926875691905812, 0.506029387925837, 
    -1.63059406387251), value = 108.809237856654, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.137177129299, -11.806466403641, 
    329.631570092914, -31.1387048341771, -11.806466403641, 44.0987230767576, 
    -43.951980877921, -16.1818665738167, 329.631570092914, -43.951980877921, 
    6467.42023961266, -528.165407480685, -31.1387048341771, -16.1818665738167, 
    -528.165407480685, 401.714824715071), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368999838842604, -0.0926875691905812
    ), logphi = c(0.506029387925837, -1.63059406387251)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_20 = structure(list(
    par = c(-0.245268590936812, 0.215290663391099, 0.498252884670573, 
    -1.67952743020795), value = 79.1609556633548, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.436256509777, -4.94714503318505, 
    339.136491412262, -18.9941832307028, -4.94714503318505, 76.4070946104312, 
    -22.1781655618258, -20.895406930066, 339.136491412262, -22.1781655618258, 
    7127.71476816698, -511.228474582737, -18.9941832307028, -20.895406930066, 
    -511.228474582737, 411.787147275078), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245268590936812, 0.215290663391099
    ), logphi = c(0.498252884670573, -1.67952743020795)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_21 = structure(list(
    par = c(-0.306747077451502, 0.0500800025590592, 0.503153118242098, 
    -1.63112336882823), value = 97.0789687196989, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.008574857257, -9.15687911628993, 
    328.557187046385, -25.5321891504678, -9.15687911628993, 56.8774450258047, 
    -35.667574852738, -18.3479709008338, 328.557187046385, -35.667574852738, 
    6394.61116838902, -501.368178600359, -25.5321891504678, -18.3479709008338, 
    -501.368178600359, 392.757988382897), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306747077451502, 0.0500800025590592
    ), logphi = c(0.503153118242098, -1.63112336882823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_22 = structure(list(
    par = c(-0.472933970255022, -0.0618639743999932, 0.496954061223817, 
    -1.65724333798118), value = 80.7240775304135, counts = structure(c(295L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.69785675591, -7.26695044406256, 
    344.258780316409, -34.1933852894272, -7.26695044406256, 49.4798038239708, 
    -42.1516233508612, -18.2828083321596, 344.258780316409, -42.1516233508612, 
    6865.10116854322, -560.394660872987, -34.1933852894272, -18.2828083321596, 
    -560.394660872987, 414.751203720698), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.472933970255022, -0.0618639743999932
    ), logphi = c(0.496954061223817, -1.65724333798118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_23 = structure(list(
    par = c(0.00604451747567523, 0.0281402698547711, 0.480605004195952, 
    -1.60474900751964), value = 114.855413355537, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(158.044715877992, -15.9379234148105, 
    282.598207334672, -3.6540164281007, -15.9379234148105, 60.2493554708872, 
    -22.3026118071346, -14.0228230876005, 282.598207334672, -22.3026118071346, 
    6000.1574695292, -292.179355646738, -3.6540164281007, -14.0228230876005, 
    -292.179355646738, 352.776366945307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00604451747567523, 0.0281402698547711
    ), logphi = c(0.480605004195952, -1.60474900751964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_24 = structure(list(
    par = c(-0.155201760411724, 0.0842773311427427, 0.514670071813658, 
    -1.59386246583476), value = 110.210165866863, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.543568459047, -13.5561065874867, 
    307.338467163021, -20.2682569501178, -13.5561065874867, 60.475617047473, 
    -36.7973907593466, -16.5457236782629, 307.338467163021, -36.7973907593466, 
    5841.84680915456, -464.423671161285, -20.2682569501178, -16.5457236782629, 
    -464.423671161285, 372.025644320928), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.155201760411724, 0.0842773311427427
    ), logphi = c(0.514670071813658, -1.59386246583476)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_25 = structure(list(
    par = c(-0.305800350665805, 0.0968672056807364, 0.493232992136699, 
    -1.60927476247647), value = 89.9863085394709, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.162797189281, -5.74543607356759, 
    320.405802646917, -21.4880081337299, -5.74543607356759, 62.3204926419874, 
    -27.4453424502497, -19.1478935072098, 320.405802646917, -27.4453424502497, 
    5980.80778431154, -444.560751430956, -21.4880081337299, -19.1478935072098, 
    -444.560751430956, 367.823275617241), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305800350665805, 0.0968672056807364
    ), logphi = c(0.493232992136699, -1.60927476247647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_26 = structure(list(
    par = c(-0.144739846894424, 0.0775864560575964, 0.491476674855582, 
    -1.61542025074375), value = 118.845874102655, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(144.808027762622, -13.0111036149572, 
    306.57468590789, -13.1821031867929, -13.0111036149572, 57.05401828493, 
    -25.9391705093037, -16.7184149812982, 306.57468590789, -25.9391705093037, 
    6127.21539777183, -390.637114515258, -13.1821031867929, -16.7184149812982, 
    -390.637114515258, 367.609699257088), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144739846894424, 0.0775864560575964
    ), logphi = c(0.491476674855582, -1.61542025074375)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_27 = structure(list(
    par = c(-0.209842978562693, -0.24991232243833, 0.495976607754067, 
    -1.65661283483797), value = 126.426822187253, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.091553218378, -16.8803455942168, 
    319.174406889999, -21.6234467504961, -16.8803455942168, 34.5125238432331, 
    -38.1041211916511, -12.8298019284045, 319.174406889999, -38.1041211916511, 
    6973.263973169, -446.336616635179, -21.6234467504961, -12.8298019284045, 
    -446.336616635179, 407.557777009515), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209842978562693, -0.24991232243833
    ), logphi = c(0.495976607754067, -1.65661283483797)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_28 = structure(list(
    par = c(-0.265182526647244, -0.0452774198204929, 0.508535292377903, 
    -1.58483209148591), value = 110.614530184513, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.418545239204, -11.4320878203955, 
    310.284474217326, -25.3353524044542, -11.4320878203955, 51.0859831912569, 
    -39.4805236574314, -15.659681237068, 310.284474217326, -39.4805236574314, 
    5729.36838198146, -462.12872591056, -25.3353524044542, -15.659681237068, 
    -462.12872591056, 367.527164463866), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265182526647244, -0.0452774198204929
    ), logphi = c(0.508535292377903, -1.58483209148591)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_29 = structure(list(
    par = c(-0.329732856859609, -0.223211100036076, 0.514976756066831, 
    -1.55271300116721), value = 136.975050936912, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.073500282392, -12.195808665183, 
    301.480398860576, -31.3660161097573, -12.195808665183, 38.1181237969486, 
    -44.9880463406771, -12.7078538874059, 301.480398860576, -44.9880463406771, 
    5339.05267629819, -471.652090205055, -31.3660161097573, -12.7078538874059, 
    -471.652090205055, 357.45787915431), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329732856859609, -0.223211100036076
    ), logphi = c(0.514976756066831, -1.55271300116721)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_30 = structure(list(
    par = c(-0.394701039403049, 0.0718963892933041, 0.498063437350955, 
    -1.6904835664602), value = 76.0166733899813, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.971959581022, -8.10068029721833, 
    352.899561747222, -29.2738911120694, -8.10068029721833, 56.8065724877442, 
    -34.8850451032945, -20.3949311199381, 352.899561747222, -34.8850451032945, 
    7391.47565121101, -572.067956932543, -29.2738911120694, -20.3949311199381, 
    -572.067956932543, 428.81107512116), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394701039403049, 0.0718963892933041
    ), logphi = c(0.498063437350955, -1.6904835664602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_31 = structure(list(
    par = c(-0.300852726155447, -0.0170206414365234, 0.508903454464505, 
    -1.53920293646433), value = 120.524850769235, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.964017768851, -9.61095797791245, 
    299.624612242866, -26.2348445456695, -9.61095797791245, 50.3601544785681, 
    -38.0051149946325, -16.0182873756298, 299.624612242866, -38.0051149946325, 
    5046.17791214201, -435.12787180866, -26.2348445456695, -16.0182873756298, 
    -435.12787180866, 337.362111292094), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300852726155447, -0.0170206414365234
    ), logphi = c(0.508903454464505, -1.53920293646433)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_32 = structure(list(
    par = c(-0.312642627201432, -0.199539053729283, 0.505637655119782, 
    -1.54949779018939), value = 126.923673271065, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.678214429404, -11.8165870262033, 
    299.323719463729, -27.568862581262, -11.8165870262033, 38.8585108410666, 
    -40.5318435277024, -13.3882303998689, 299.323719463729, -40.5318435277024, 
    5256.93625093382, -428.003704456614, -27.568862581262, -13.3882303998689, 
    -428.003704456614, 345.555943944476), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312642627201432, -0.199539053729283
    ), logphi = c(0.505637655119782, -1.54949779018939)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_33 = structure(list(
    par = c(-0.260529838205303, -0.138883206286366, 0.495174524505048, 
    -1.60661703707896), value = 121.480048846761, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.131510722161, -12.3273250878242, 
    312.202579966225, -22.3778697865384, -12.3273250878242, 43.6771596632468, 
    -36.0070569342952, -14.6756738939047, 312.202579966225, -36.0070569342952, 
    6071.54087880346, -424.066125663813, -22.3778697865384, -14.6756738939047, 
    -424.066125663813, 372.604025002943), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260529838205303, -0.138883206286366
    ), logphi = c(0.495174524505048, -1.60661703707896)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_34 = structure(list(
    par = c(-0.298490551227986, 0.150106380652111, 0.505229131117544, 
    -1.59952896028124), value = 94.9421040023983, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.417835404577, -5.35815077284951, 
    320.160594100116, -23.9842908857923, -5.35815077284951, 67.5601517308166, 
    -30.9763461316948, -19.760930969781, 320.160594100116, -30.9763461316948, 
    5838.98376013536, -482.279167515642, -23.9842908857923, -19.760930969781, 
    -482.279167515642, 370.605159506709), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298490551227986, 0.150106380652111
    ), logphi = c(0.505229131117544, -1.59952896028124)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_35 = structure(list(
    par = c(-0.303275598412546, -0.136478233511786, 0.503415265353697, 
    -1.65747055004091), value = 108.062396499118, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.190954418727, -14.3433815864569, 
    331.051582172393, -27.6359444768559, -14.3433815864569, 41.4908157289062, 
    -42.727663199571, -15.0842828645636, 331.051582172393, -42.727663199571, 
    6950.30356205706, -515.602101962997, -27.6359444768559, -15.0842828645636, 
    -515.602101962997, 415.197226711683), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303275598412546, -0.136478233511786
    ), logphi = c(0.503415265353697, -1.65747055004091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_36 = structure(list(
    par = c(-0.104432071956633, -0.115051257661752, 0.472872878164857, 
    -1.60133115163717), value = 129.074809823798, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(147.044282655884, -15.2010409522063, 
    290.808512723117, -8.07772423527808, -15.2010409522063, 43.169518150421, 
    -23.836808395572, -13.5900549516066, 290.808512723117, -23.836808395572, 
    5938.20241319065, -285.474416855891, -8.07772423527808, -13.5900549516066, 
    -285.474416855891, 347.960227998101), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.104432071956633, -0.115051257661752
    ), logphi = c(0.472872878164857, -1.60133115163717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_37 = structure(list(
    par = c(-0.289231504063491, 0.17519957457434, 0.49888144580233, 
    -1.60166140331534), value = 85.5474266176756, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.772321498948, -2.97350009503816, 
    318.765153732414, -21.1588968355159, -2.97350009503816, 71.6758663692474, 
    -25.8612623404986, -20.166188154036, 318.765153732414, -25.8612623404986, 
    5840.94780235844, -458.26384623382, -21.1588968355159, -20.166188154036, 
    -458.26384623382, 365.302890042329), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289231504063491, 0.17519957457434
    ), logphi = c(0.49888144580233, -1.60166140331534)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_38 = structure(list(
    par = c(-0.292892900159932, -0.18186658392147, 0.50198602980586, 
    -1.64451276122193), value = 118.994087450672, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.576248331057, -14.5468324497244, 
    325.190448073442, -26.8937560896632, -14.5468324497244, 38.051805010042, 
    -42.0251643511449, -14.2455089164883, 325.190448073442, -42.0251643511449, 
    6742.28414297673, -493.023252644775, -26.8937560896632, -14.2455089164883, 
    -493.023252644775, 406.144183870083), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292892900159932, -0.18186658392147
    ), logphi = c(0.50198602980586, -1.64451276122193)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_39 = structure(list(
    par = c(-0.121715634291666, -0.152856495166898, 0.474782382708924, 
    -1.72555408413227), value = 97.4508962744687, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.148097482192, -17.6346196880672, 
    326.154355118291, -11.5471514643417, -17.6346196880672, 40.8719790101486, 
    -25.1103979742595, -13.7105907622725, 326.154355118291, -25.1103979742595, 
    8162.3116154681, -395.227056449343, -11.5471514643417, -13.7105907622725, 
    -395.227056449343, 428.767253538354), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.121715634291666, -0.152856495166898
    ), logphi = c(0.474782382708924, -1.72555408413227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_40 = structure(list(
    par = c(-0.162521534391055, 0.178570690341009, 0.508114910332504, 
    -1.48080089089447), value = 133.233280444983, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(150.871976607903, -6.2964944973487, 
    272.328862109816, -16.1156137039598, -6.2964944973487, 70.8994288203257, 
    -28.6451012883049, -16.739257105769, 272.328862109816, -28.6451012883049, 
    4235.02371184981, -355.140162575651, -16.1156137039598, -16.739257105769, 
    -355.140162575651, 290.163347088424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162521534391055, 0.178570690341009
    ), logphi = c(0.508114910332504, -1.48080089089447)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_41 = structure(list(
    par = c(-0.238626183351215, 0.0904018378397024, 0.517204598082024, 
    -1.57685465012031), value = 117.34841376961, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.856865049684, -10.5336418236845, 
    309.843306578017, -25.0611634484699, -10.5336418236845, 60.4603268534731, 
    -38.7148540212934, -17.3635154396834, 309.843306578017, -38.7148540212934, 
    5570.21071669794, -485.822360579036, -25.0611634484699, -17.3635154396834, 
    -485.822360579036, 365.59753072396), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238626183351215, 0.0904018378397024
    ), logphi = c(0.517204598082024, -1.57685465012031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_42 = structure(list(
    par = c(-0.356825847424353, -0.026799280786738, 0.521461650776478, 
    -1.52729490280272), value = 118.326052078891, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.752018049648, -8.83094664416717, 
    300.96107794364, -32.8348371585463, -8.83094664416717, 50.9361169598321, 
    -44.405785811108, -15.6533686048732, 300.96107794364, -44.405785811108, 
    4912.98599984447, -487.791703713825, -32.8348371585463, -15.6533686048732, 
    -487.791703713825, 343.322181002748), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356825847424353, -0.026799280786738
    ), logphi = c(0.521461650776478, -1.52729490280272)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_43 = structure(list(
    par = c(-0.32235123760271, -0.121883065042855, 0.509120845945045, 
    -1.70657133708424), value = 91.4165100761612, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.169956218125, -14.4888072419747, 
    346.389288861104, -30.5096919053227, -14.4888072419747, 43.9216216427951, 
    -48.4412526269296, -15.3638341480189, 346.389288861104, -48.4412526269296, 
    7871.81107812529, -588.543711749878, -30.5096919053227, -15.3638341480189, 
    -588.543711749878, 451.350281132079), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32235123760271, -0.121883065042855
    ), logphi = c(0.509120845945045, -1.70657133708424)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_44 = structure(list(
    par = c(-0.146346746446847, 0.00544493019972663, 0.508269703916292, 
    -1.49933465045628), value = 123.698636073059, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.200349785071, -12.2633828674168, 
    275.68319353577, -17.6259691269109, -12.2633828674168, 55.2191334612928, 
    -33.9179787367527, -14.3720716074824, 275.68319353577, -33.9179787367527, 
    4533.40191803875, -358.673226315886, -17.6259691269109, -14.3720716074824, 
    -358.673226315886, 305.246546044913), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.146346746446847, 0.00544493019972663
    ), logphi = c(0.508269703916292, -1.49933465045628)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_45 = structure(list(
    par = c(-0.354604676197065, -0.216795187230607, 0.495292546720376, 
    -1.70427653498326), value = 102.621950421647, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.883294355877, -14.5306550791702, 
    344.009963541225, -29.3147798302584, -14.5306550791702, 35.3631757619155, 
    -43.623257258929, -14.5156975772665, 344.009963541225, -43.623257258929, 
    7825.93158641731, -545.030630515697, -29.3147798302584, -14.5156975772665, 
    -545.030630515697, 442.156762076706), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354604676197065, -0.216795187230607
    ), logphi = c(0.495292546720376, -1.70427653498326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_46 = structure(list(
    par = c(-0.290387038773639, -0.29350013461977, 0.502584208858596, 
    -1.54831673097784), value = 143.454866557127, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.587932502441, -13.1987704179437, 
    294.941443421237, -26.1618706076661, -13.1987704179437, 32.6100439593802, 
    -39.3720697076105, -11.9954580384274, 294.941443421237, -39.3720697076105, 
    5267.92311221413, -404.972603821108, -26.1618706076661, -11.9954580384274, 
    -404.972603821108, 342.999055092719), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290387038773639, -0.29350013461977
    ), logphi = c(0.502584208858596, -1.54831673097784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_47 = structure(list(
    par = c(-0.262131008989705, 0.0611071704380293, 0.504548271199312, 
    -1.65294449285026), value = 95.3944917412488, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.128646029069, -9.76780768624508, 
    331.87110732058, -23.720784719572, -9.76780768624508, 60.9563210325348, 
    -35.5503150650804, -18.1382551343034, 331.87110732058, -35.5503150650804, 
    6770.86435003815, -510.257007594106, -23.720784719572, -18.1382551343034, 
    -510.257007594106, 406.079736432474), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262131008989705, 0.0611071704380293
    ), logphi = c(0.504548271199312, -1.65294449285026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_48 = structure(list(
    par = c(-0.381394688042288, -0.0520299085631461, 0.504389874147908, 
    -1.67721102592875), value = 94.1905802638606, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.965895649353, -11.5934491695668, 
    344.915025003445, -31.5789631617491, -11.5934491695668, 47.7395821221194, 
    -44.2628108352494, -17.3705948256497, 344.915025003445, -44.2628108352494, 
    7255.27152306071, -572.506683422347, -31.5789631617491, -17.3705948256497, 
    -572.506683422347, 430.009937563369), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381394688042288, -0.0520299085631461
    ), logphi = c(0.504389874147908, -1.67721102592875)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_49 = structure(list(
    par = c(-0.292667389678391, 0.0922710260634837, 0.481736027911312, 
    -1.63423907645357), value = 88.2152562122173, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.723095698623, -4.62939463119483, 
    323.878875654771, -17.7260601894602, -4.62939463119483, 62.1071114998983, 
    -21.2532385432951, -19.1007527341469, 323.878875654771, -21.2532385432951, 
    6349.00489174228, -419.029044945063, -17.7260601894602, -19.1007527341469, 
    -419.029044945063, 373.591988427791), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292667389678391, 0.0922710260634837
    ), logphi = c(0.481736027911312, -1.63423907645357)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_50 = structure(list(
    par = c(-0.398848225541073, 0.0762735847555502, 0.504404096071899, 
    -1.66329630931629), value = 84.7450542605439, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.57602718482, -7.57175316223879, 
    346.01699584158, -30.9886325418063, -7.57175316223879, 57.8669263546772, 
    -38.221225437951, -20.1910296553365, 346.01699584158, -38.221225437951, 
    6920.30195127913, -571.911428304261, -30.9886325418063, -20.1910296553365, 
    -571.911428304261, 417.907012170815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.398848225541073, 0.0762735847555502
    ), logphi = c(0.504404096071899, -1.66329630931629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_51 = structure(list(
    par = c(-0.14858653691596, -0.153468692413203, 0.511670999525384, 
    -1.57645378604723), value = 132.310533586275, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.753592079534, -16.9811344434834, 
    296.528588705769, -21.1485883170326, -16.9811344434834, 41.7572509334718, 
    -39.7162305389998, -12.82492665311, 296.528588705769, -39.7162305389998, 
    5673.68115800093, -425.458430537873, -21.1485883170326, -12.82492665311, 
    -425.458430537873, 362.804798768934), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.14858653691596, -0.153468692413203
    ), logphi = c(0.511670999525384, -1.57645378604723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_52 = structure(list(
    par = c(-0.330493144563207, 0.165751573808437, 0.493801321385523, 
    -1.64929568803732), value = 70.8236543125889, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.29896187489, -2.654638791455, 
    335.954590230614, -22.5670538078759, -2.654638791455, 70.9501680695723, 
    -23.9274075113372, -21.1271341825636, 335.954590230614, -23.9274075113372, 
    6592.75405268644, -495.993519558979, -22.5670538078759, -21.1271341825636, 
    -495.993519558979, 393.097940268206), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330493144563207, 0.165751573808437
    ), logphi = c(0.493801321385523, -1.64929568803732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_53 = structure(list(
    par = c(-0.202531266908189, 0.0959801635640179, 0.479430556390686, 
    -1.60188578366635), value = 99.1636753140931, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(147.696614572368, -6.83932459466519, 
    304.632766805923, -11.9729936454149, -6.83932459466519, 62.8657085144368, 
    -19.8041605052879, -17.5419856560666, 304.632766805923, -19.8041605052879, 
    5848.21890916132, -352.810614121069, -11.9729936454149, -17.5419856560666, 
    -352.810614121069, 349.042080316053), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202531266908189, 0.0959801635640179
    ), logphi = c(0.479430556390686, -1.60188578366635)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_54 = structure(list(
    par = c(-0.403334350361998, 0.289355929052228, 0.485835909234589, 
    -1.63916502100876), value = 58.2817370254478, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.656785597633, 8.4869431411505, 
    337.13610960362, -21.4685491322086, 8.4869431411505, 85.9573033338279, 
    -8.44997199322961, -24.5007405474951, 337.13610960362, -8.44997199322961, 
    6291.45524152719, -486.673008092353, -21.4685491322086, -24.5007405474951, 
    -486.673008092353, 376.572318451451), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403334350361998, 0.289355929052228
    ), logphi = c(0.485835909234589, -1.63916502100876)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_55 = structure(list(
    par = c(-0.296302157442553, 0.166005741054489, 0.510236891172666, 
    -1.48925903030962), value = 106.582368033762, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.665919706213, -0.274864106586392, 
    285.678220233621, -23.3913994893697, -0.274864106586392, 
    74.7071308531133, -30.5483194367184, -18.3663947304069, 285.678220233621, 
    -30.5483194367184, 4316.07533149858, -401.055104797265, -23.3913994893697, 
    -18.3663947304069, -401.055104797265, 300.862860033391), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296302157442553, 0.166005741054489
    ), logphi = c(0.510236891172666, -1.48925903030962)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_56 = structure(list(
    par = c(-0.269808319270517, 0.063216450865383, 0.507662127222761, 
    -1.57461125667252), value = 120.253073359888, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.486445370006, -8.97217796946848, 
    309.3950964832, -24.0025735429583, -8.97217796946848, 57.9197974737156, 
    -35.4255935803849, -17.4986908323405, 309.3950964832, -35.4255935803849, 
    5519.79344343678, -456.088342138727, -24.0025735429583, -17.4986908323405, 
    -456.088342138727, 357.510181071774), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269808319270517, 0.063216450865383
    ), logphi = c(0.507662127222761, -1.57461125667252)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_57 = structure(list(
    par = c(-0.392102964166953, 0.0272432491037194, 0.503257748047661, 
    -1.54873814436126), value = 111.30010151822, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.357550393725, -3.31235270678576, 
    308.678627700232, -28.8158270187466, -3.31235270678576, 59.6055883299584, 
    -35.8174135506317, -18.0795763995434, 308.678627700232, -35.8174135506317, 
    5127.87402562864, -450.628093453531, -28.8158270187466, -18.0795763995434, 
    -450.628093453531, 340.802130640583), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392102964166953, 0.0272432491037194
    ), logphi = c(0.503257748047661, -1.54873814436126)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_58 = structure(list(
    par = c(-0.295527415863088, -0.0839184205296177, 0.487082786092299, 
    -1.60798394175773), value = 112.854064310617, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.411415237257, -10.5447539766601, 
    315.096361077849, -21.2668723555964, -10.5447539766601, 45.2635367587106, 
    -31.6229593515516, -16.0645753268795, 315.096361077849, -31.6229593515516, 
    6032.37879228402, -408.209275624571, -21.2668723555964, -16.0645753268795, 
    -408.209275624571, 365.909189678604), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.295527415863088, -0.0839184205296177
    ), logphi = c(0.487082786092299, -1.60798394175773)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_59 = structure(list(
    par = c(-0.504977447471651, 0.128543075295086, 0.542317261764616, 
    -1.60049251432647), value = 86.7999776896534, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.226364441715, -5.99507258058907, 
    336.556630820439, -46.8714008388105, -5.99507258058907, 65.3842616706868, 
    -60.4502170986621, -19.572130403489, 336.556630820439, -60.4502170986621, 
    5954.1337303699, -697.709256817447, -46.8714008388105, -19.572130403489, 
    -697.709256817447, 420.349098632755), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.504977447471651, 0.128543075295086
    ), logphi = c(0.542317261764616, -1.60049251432647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_60 = structure(list(
    par = c(-0.177810535614028, 0.13989302492589, 0.515757287443548, 
    -1.51599505376589), value = 112.938929595975, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.969484116406, -7.55410380648414, 
    286.292851424008, -20.1843648568456, -7.55410380648414, 70.620813712452, 
    -33.8282054990202, -16.7399353294684, 286.292851424008, -33.8282054990202, 
    4704.7977032797, -413.512135768457, -20.1843648568456, -16.7399353294684, 
    -413.512135768457, 320.659773034748), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.177810535614028, 0.13989302492589
    ), logphi = c(0.515757287443548, -1.51599505376589)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_61 = structure(list(
    par = c(-0.377909583558454, -0.301082861884277, 0.514681945877616, 
    -1.64340270605119), value = 119.309050451892, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.578528575175, -13.6338374758793, 
    326.319683889409, -35.3517489912747, -13.6338374758793, 33.7110490526982, 
    -51.9719891478587, -12.126127650447, 326.319683889409, -51.9719891478587, 
    6823.2630971039, -568.679735751587, -35.3517489912747, -12.126127650447, 
    -568.679735751587, 423.981932748063), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377909583558454, -0.301082861884277
    ), logphi = c(0.514681945877616, -1.64340270605119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_62 = structure(list(
    par = c(-0.298517195133715, -0.28585483505746, 0.491549374949017, 
    -1.57470387376691), value = 129.347176304299, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.475863110732, -12.2364331005542, 
    302.061668065789, -23.8545948292312, -12.2364331005542, 33.9460169413996, 
    -36.4283021880851, -12.722834842549, 302.061668065789, -36.4283021880851, 
    5617.07517037036, -387.869308035249, -23.8545948292312, -12.722834842549, 
    -387.869308035249, 351.752265132177), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298517195133715, -0.28585483505746
    ), logphi = c(0.491549374949017, -1.57470387376691)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_63 = structure(list(
    par = c(-0.232123067802674, -0.026813634019956, 0.500547897083451, 
    -1.63671902390208), value = 104.205433935175, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.681755505511, -12.4685849201001, 
    321.895592705346, -21.7882592536967, -12.4685849201001, 52.1432692224266, 
    -35.7863801419001, -16.2479470926513, 321.895592705346, -35.7863801419001, 
    6535.01369830067, -466.159041362602, -21.7882592536967, -16.2479470926513, 
    -466.159041362602, 393.677537562809), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232123067802674, -0.026813634019956
    ), logphi = c(0.500547897083451, -1.63671902390208)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_64 = structure(list(
    par = c(-0.311761842563651, -0.0312309348671011, 0.513889269093607, 
    -1.55083784284114), value = 123.253283237173, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.898205342561, -10.4987762412634, 
    304.399975952663, -28.6699732043871, -10.4987762412634, 49.918218763878, 
    -41.2702299676937, -15.8045281253294, 304.399975952663, -41.2702299676937, 
    5228.80144533744, -467.301116557906, -28.6699732043871, -15.8045281253294, 
    -467.301116557906, 350.540740111427), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311761842563651, -0.0312309348671011
    ), logphi = c(0.513889269093607, -1.55083784284114)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_65 = structure(list(
    par = c(-0.305505041121211, -0.11073103741821, 0.51103936958408, 
    -1.62542770906381), value = 117.53521189662, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.743191597379, -13.8838839198741, 
    323.678616091172, -29.2941492645582, -13.8838839198741, 43.160572129608, 
    -44.8302207445295, -15.0752944065857, 323.678616091172, -44.8302207445295, 
    6412.36797528322, -518.628803000354, -29.2941492645582, -15.0752944065857, 
    -518.628803000354, 400.315528825246), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305505041121211, -0.11073103741821
    ), logphi = c(0.51103936958408, -1.62542770906381)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_66 = structure(list(
    par = c(-0.165023443656254, -0.0407916442809681, 0.512250545111462, 
    -1.58240224757632), value = 128.721530843357, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.787932545535, -14.4233338446043, 
    302.124112799618, -21.2446384288967, -14.4233338446043, 51.7936980628519, 
    -38.9162469645044, -14.6390458048984, 302.124112799618, -38.9162469645044, 
    5716.39027227633, -442.71473176849, -21.2446384288967, -14.6390458048984, 
    -442.71473176849, 365.525571417891), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165023443656254, -0.0407916442809681
    ), logphi = c(0.512250545111462, -1.58240224757632)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_67 = structure(list(
    par = c(-0.191651132372629, -0.0475859831824619, 0.481612352954361, 
    -1.67325748559781), value = 109.18418765779, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.89428724714, -12.6034783285434, 
    323.706845222205, -15.0089223804883, -12.6034783285434, 50.6421033641402, 
    -26.4324265053517, -15.8414370741156, 323.706845222205, -26.4324265053517, 
    7125.55987977481, -409.705914327319, -15.0089223804883, -15.8414370741156, 
    -409.705914327319, 400.802096933717), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191651132372629, -0.0475859831824619
    ), logphi = c(0.481612352954361, -1.67325748559781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_68 = structure(list(
    par = c(-0.314459031371537, 0.175604760242938, 0.484161823975791, 
    -1.54712492913457), value = 84.2800712482856, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.876776767613, 3.98628692011016, 
    299.167665364308, -16.7464013802743, 3.98628692011016, 77.7906978726151, 
    -18.4840063965908, -19.8115294445245, 299.167665364308, -18.4840063965908, 
    4988.4646134899, -360.190231081248, -16.7464013802743, -19.8115294445245, 
    -360.190231081248, 316.325820236329), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314459031371537, 0.175604760242938
    ), logphi = c(0.484161823975791, -1.54712492913457)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_69 = structure(list(
    par = c(-0.427476355879116, -0.407576648570748, 0.50128585645111, 
    -1.68677563279313), value = 118.339935708564, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.0707699277918, -13.5521285038465, 
    335.994322302469, -35.3518240672202, -13.5521285038465, 27.2218017407511, 
    -50.2158169410905, -11.44682605414, 335.994322302469, -50.2158169410905, 
    7616.68120754422, -574.43122093126, -35.3518240672202, -11.44682605414, 
    -574.43122093126, 445.714090918869), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.427476355879116, -0.407576648570748
    ), logphi = c(0.50128585645111, -1.68677563279313)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_70 = structure(list(
    par = c(-0.233015957366994, -0.278814011959869, 0.487403429803704, 
    -1.62901158155867), value = 129.535934740869, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.775795771053, -14.871262273175, 
    311.764216142763, -20.3188392191578, -14.871262273175, 33.0193796571621, 
    -34.6782720299643, -12.7254154023149, 311.764216142763, -34.6782720299643, 
    6474.75125209951, -397.463800815956, -20.3188392191578, -12.7254154023149, 
    -397.463800815956, 383.415475326387), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233015957366994, -0.278814011959869
    ), logphi = c(0.487403429803704, -1.62901158155867)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_71 = structure(list(
    par = c(-0.323418103340921, 0.17106356396187, 0.501727905404605, 
    -1.51272431534053), value = 95.4967357227935, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.798060532494, 2.40200409606928, 
    293.378786210496, -22.3097791511861, 2.40200409606928, 77.5923014693092, 
    -27.0049169728281, -19.3464295072943, 293.378786210496, -27.0049169728281, 
    4581.7863541231, -398.852711262165, -22.3097791511861, -19.3464295072943, 
    -398.852711262165, 309.530078606457), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323418103340921, 0.17106356396187
    ), logphi = c(0.501727905404605, -1.51272431534053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_72 = structure(list(
    par = c(-0.169186873151824, 0.128709368819596, 0.509820589471249, 
    -1.58855136499974), value = 104.418409110602, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.172030619112, -10.9556218390594, 
    306.473570990562, -18.9187314454387, -10.9556218390594, 64.4788663350937, 
    -32.8114601515495, -17.4677029640691, 306.473570990562, -32.8114601515495, 
    5724.49729566316, -448.101010825042, -18.9187314454387, -17.4677029640691, 
    -448.101010825042, 364.01544001663), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.169186873151824, 0.128709368819596
    ), logphi = c(0.509820589471249, -1.58855136499974)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_73 = structure(list(
    par = c(-0.146335080679602, -0.102151681087812, 0.4717028437223, 
    -1.69518234049049), value = 101.22023507113, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(139.650805238034, -14.4022457497783, 
    320.985910200022, -10.9747595757881, -14.4022457497783, 45.5920545761046, 
    -22.6802840010976, -14.5689657813364, 320.985910200022, -22.6802840010976, 
    7530.38119183813, -371.541882312698, -10.9747595757881, -14.5689657813364, 
    -371.541882312698, 406.991538156376), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.146335080679602, -0.102151681087812
    ), logphi = c(0.4717028437223, -1.69518234049049)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_74 = structure(list(
    par = c(-0.148305717579081, 0.0880038936727276, 0.496074262660744, 
    -1.5356442040749), value = 117.492042319812, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.18366125624, -8.93433616511174, 
    284.521301626484, -13.5994868681877, -8.93433616511174, 64.6294336235087, 
    -27.5797326629856, -16.1373329490289, 284.521301626484, -27.5797326629856, 
    4952.29157711918, -346.059552597922, -13.5994868681877, -16.1373329490289, 
    -346.059552597922, 318.369552168463), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148305717579081, 0.0880038936727276
    ), logphi = c(0.496074262660744, -1.5356442040749)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_75 = structure(list(
    par = c(-0.328524357771792, 0.155530671547197, 0.508529668797499, 
    -1.65924574243078), value = 78.9842789540183, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.839440600435, -8.38963343596788, 
    341.973553208419, -27.3225339331162, -8.38963343596788, 63.1955366152681, 
    -34.317050552346, -20.8037184137311, 341.973553208419, -34.317050552346, 
    6821.47880639405, -560.079157621018, -27.3225339331162, -20.8037184137311, 
    -560.079157621018, 413.269965026331), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328524357771792, 0.155530671547197
    ), logphi = c(0.508529668797499, -1.65924574243078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_76 = structure(list(
    par = c(-0.0484853762691611, 0.0241974337722997, 0.475959135407524, 
    -1.6224312168985), value = 104.987712328519, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(154.971989065444, -13.0464006886655, 
    292.18521317631, -5.03109636618149, -13.0464006886655, 60.5131180044793, 
    -20.4577574116627, -14.6642953993137, 292.18521317631, -20.4577574116627, 
    6250.36947243274, -304.006000327206, -5.03109636618149, -14.6642953993137, 
    -304.006000327206, 360.919847192775), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0484853762691611, 0.0241974337722997
    ), logphi = c(0.475959135407524, -1.6224312168985)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_77 = structure(list(
    par = c(-0.313828439858838, -0.185735179811719, 0.521749518672695, 
    -1.57456113586315), value = 127.073599678026, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.951236079795, -13.7536510536052, 
    307.877163503889, -32.6123963638736, -13.7536510536052, 39.8692798562195, 
    -48.6153519005939, -12.9827385109138, 307.877163503889, -48.6153519005939, 
    5667.89668993195, -513.888964878362, -32.6123963638736, -12.9827385109138, 
    -513.888964878362, 377.426701206218), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313828439858838, -0.185735179811719
    ), logphi = c(0.521749518672695, -1.57456113586315)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_78 = structure(list(
    par = c(-0.147503575344789, 0.248001765904917, 0.508353708287359, 
    -1.64465119512918), value = 82.7085982174984, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(144.832025355868, -7.68582283683372, 
    321.987241576949, -16.1518189703003, -7.68582283683372, 81.6362410667182, 
    -25.7201117399575, -19.6346327498986, 321.987241576949, -25.7201117399575, 
    6559.30179642894, -487.008688207169, -16.1518189703003, -19.6346327498986, 
    -487.008688207169, 394.89233559209), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.147503575344789, 0.248001765904917
    ), logphi = c(0.508353708287359, -1.64465119512918)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_79 = structure(list(
    par = c(-0.19977836087892, 0.0438219291932423, 0.511670662698364, 
    -1.48707680002325), value = 130.585726897661, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.431819083631, -10.3869927485789, 
    277.279192850699, -20.6145185259743, -10.3869927485789, 56.5745397267392, 
    -34.5415787279535, -15.2224663594325, 277.279192850699, -34.5415787279535, 
    4361.56925984221, -375.840880618483, -20.6145185259743, -15.2224663594325, 
    -375.840880618483, 300.327948508539), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19977836087892, 0.0438219291932423
    ), logphi = c(0.511670662698364, -1.48707680002325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_80 = structure(list(
    par = c(-0.36517844076313, 0.18763801194549, 0.509807511803845, 
    -1.64488631996844), value = 65.5896168997383, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.097586993585, -2.50404418622452, 
    341.211952871845, -29.0779281169051, -2.50404418622452, 74.6500939285966, 
    -33.3229770212995, -21.8565122480641, 341.211952871845, -33.3229770212995, 
    6550.91595547574, -566.456722365771, -29.0779281169051, -21.8565122480641, 
    -566.456722365771, 405.910933224618), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36517844076313, 0.18763801194549
    ), logphi = c(0.509807511803845, -1.64488631996844)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_81 = structure(list(
    par = c(-0.33490729465184, -0.267192975393315, 0.479323968356734, 
    -1.68147686524283), value = 107.444355178615, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.5914299186, -12.0863902353108, 
    333.678325876718, -24.1167242744922, -12.0863902353108, 35.2010027420135, 
    -34.8372299399102, -14.042928636826, 333.678325876718, -34.8372299399102, 
    7348.14521579708, -452.240863328512, -24.1167242744922, -14.042928636826, 
    -452.240863328512, 413.2596697346), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33490729465184, -0.267192975393315
    ), logphi = c(0.479323968356734, -1.68147686524283)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_82 = structure(list(
    par = c(-0.20453802743411, -0.0414900007477278, 0.533740366146163, 
    -1.56550227476553), value = 133.585767951001, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.298129497267, -16.0746188200278, 
    303.116329838815, -29.3711630767746, -16.0746188200278, 48.7947290679358, 
    -48.5269082730611, -13.8914320366723, 303.116329838815, -48.5269082730611, 
    5503.27573783704, -522.303451617745, -29.3711630767746, -13.8914320366723, 
    -522.303451617745, 373.413220209784), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.20453802743411, -0.0414900007477278
    ), logphi = c(0.533740366146163, -1.56550227476553)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_83 = structure(list(
    par = c(-0.354548139754795, 0.00368415906952413, 0.491405423745168, 
    -1.67054294003953), value = 81.31349343753, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.37053199829, -7.45419274039705, 
    341.114592835368, -25.6988413873671, -7.45419274039705, 56.0542944327835, 
    -32.8575014769683, -18.5757599986403, 341.114592835368, -32.8575014769683, 
    7050.72221179037, -508.326230914236, -25.6988413873671, -18.5757599986403, 
    -508.326230914236, 410.5138464503), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354548139754795, 0.00368415906952413
    ), logphi = c(0.491405423745168, -1.67054294003953)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_84 = structure(list(
    par = c(-0.256150120765304, 0.0424300985385175, 0.494566549264216, 
    -1.6868178834036), value = 87.0443215646301, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.262340180958, -11.9009460490815, 
    338.808230782917, -21.1005631598482, -11.9009460490815, 54.47635990663, 
    -30.9244807326081, -18.0808909089336, 338.808230782917, -30.9244807326081, 
    7354.26760942204, -498.805482516573, -21.1005631598482, -18.0808909089336, 
    -498.805482516573, 419.010525472885), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256150120765304, 0.0424300985385175
    ), logphi = c(0.494566549264216, -1.6868178834036)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_85 = structure(list(
    par = c(-0.181224776347656, 0.0164596647358966, 0.477496030042511, 
    -1.61385298898634), value = 106.383525887725, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(145.1391836369, -10.0369751940832, 
    305.02775311092, -11.6380289743034, -10.0369751940832, 55.548428409935, 
    -22.2039774513405, -16.2484213639402, 305.02775311092, -22.2039774513405, 
    6073.88574026047, -344.395197508618, -11.6380289743034, -16.2484213639402, 
    -344.395197508618, 357.174590217113), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.181224776347656, 0.0164596647358966
    ), logphi = c(0.477496030042511, -1.61385298898634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_86 = structure(list(
    par = c(-0.476638055955003, 0.0966283854756615, 0.507871869692446, 
    -1.53821114757515), value = 95.8374941658969, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.703964876323, 0.122140811242843, 
    312.252511456279, -33.5961801614104, 0.122140811242843, 63.8596855004891, 
    -36.0458032062638, -20.1575098568441, 312.252511456279, -36.0458032062638, 
    4947.56523163531, -485.500245494208, -33.5961801614104, -20.1575098568441, 
    -485.500245494208, 339.7308827644), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476638055955003, 0.0966283854756615
    ), logphi = c(0.507871869692446, -1.53821114757515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_87 = structure(list(
    par = c(-0.183796528707709, 0.099390811962396, 0.512036606768348, 
    -1.51675496340837), value = 109.436407454783, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.901761953278, -8.40017858294573, 
    285.851966101092, -19.8009954388567, -8.40017858294573, 65.5759644772047, 
    -33.7133129058031, -16.2777696388616, 285.851966101092, -33.7133129058031, 
    4722.71280079894, -400.373184222147, -19.8009954388567, -16.2777696388616, 
    -400.373184222147, 319.027963438856), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183796528707709, 0.099390811962396
    ), logphi = c(0.512036606768348, -1.51675496340837)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_88 = structure(list(
    par = c(-0.239559347566871, -0.167636720289605, 0.501166023777474, 
    -1.52758360012359), value = 140.690487171632, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.682145512788, -12.0213236201039, 
    287.72925505649, -21.9733988338078, -12.0213236201039, 42.5261294267898, 
    -36.1824128276567, -13.2824197578429, 287.72925505649, -36.1824128276567, 
    4934.02992862002, -371.910244030715, -21.9733988338078, -13.2824197578429, 
    -371.910244030715, 323.714312735035), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239559347566871, -0.167636720289605
    ), logphi = c(0.501166023777474, -1.52758360012359)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_89 = structure(list(
    par = c(-0.292258307410671, 0.0260056573820436, 0.483998260823867, 
    -1.58352928476528), value = 102.600559189459, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.854309159025, -7.1975419508874, 
    308.201589895418, -18.4130086822165, -7.1975419508874, 55.4251708813069, 
    -25.8519369751298, -17.5935454631571, 308.201589895418, -25.8519369751298, 
    5590.39505073855, -378.292176154815, -18.4130086822165, -17.5935454631571, 
    -378.292176154815, 343.901440025718), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292258307410671, 0.0260056573820436
    ), logphi = c(0.483998260823867, -1.58352928476528)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_90 = structure(list(
    par = c(-0.418566040104008, -0.0435317731848804, 0.524506092876798, 
    -1.66096712768665), value = 92.8047004986595, counts = structure(c(369L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.409379275694, -12.8788296152038, 
    343.241722344345, -38.914384816735, -12.8788296152038, 47.2897647902926, 
    -57.0677762148364, -16.5765918076488, 343.241722344345, -57.0677762148364, 
    7028.78205536095, -649.563867249014, -38.914384816735, -16.5765918076488, 
    -649.563867249014, 440.679366008112), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418566040104008, -0.0435317731848804
    ), logphi = c(0.524506092876798, -1.66096712768665)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_91 = structure(list(
    par = c(-0.313919512527019, 0.0660634126371605, 0.498394829857113, 
    -1.61241641818193), value = 94.5091512434378, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.768473599829, -7.55642142635793, 
    322.790468974432, -23.9758632432086, -7.55642142635793, 58.159795859325, 
    -31.9848704926073, -18.6730224491782, 322.790468974432, -31.9848704926073, 
    6063.46652710599, -469.121846570886, -23.9758632432086, -18.6730224491782, 
    -469.121846570886, 375.795620207953), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313919512527019, 0.0660634126371605
    ), logphi = c(0.498394829857113, -1.61241641818193)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_92 = structure(list(
    par = c(-0.464852031525993, -0.0249317210462094, 0.525663899753674, 
    -1.64432555660509), value = 99.0730150956411, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.70023044004, -10.7460728280273, 
    341.759165070954, -41.4627933551515, -10.7460728280273, 50.3104328473114, 
    -57.9030968594907, -17.1512840783095, 341.759165070954, -57.9030968594907, 
    6729.60958102919, -657.651491064115, -41.4627933551515, -17.1512840783095, 
    -657.651491064115, 433.855497011137), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.464852031525993, -0.0249317210462094
    ), logphi = c(0.525663899753674, -1.64432555660509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_93 = structure(list(
    par = c(-0.349435861956845, 0.235713953641738, 0.520863195714022, 
    -1.53566747953665), value = 88.0751415275655, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.369563221133, 0.465110616687525, 
    307.30776941823, -29.4592193093024, 0.465110616687525, 79.5193890574808, 
    -33.5821809258618, -20.8896067555031, 307.30776941823, -33.5821809258618, 
    4896.23255977989, -500.500451002139, -29.4592193093024, -20.8896067555031, 
    -500.500451002139, 342.168387192032), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349435861956845, 0.235713953641738
    ), logphi = c(0.520863195714022, -1.53566747953665)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_94 = structure(list(
    par = c(-0.418884963189016, -0.369936361887747, 0.496380665636331, 
    -1.64353154130472), value = 125.442974197399, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.487242821387, -12.6148252164171, 
    326.573049296286, -33.0413360742909, -12.6148252164171, 28.392276824718, 
    -45.2299335833573, -12.2554769053096, 326.573049296286, -45.2299335833573, 
    6786.56063780636, -510.946682021896, -33.0413360742909, -12.2554769053096, 
    -510.946682021896, 410.498488868427), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418884963189016, -0.369936361887747
    ), logphi = c(0.496380665636331, -1.64353154130472)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_95 = structure(list(
    par = c(-0.112743171176638, -0.0165660872180782, 0.489381352993615, 
    -1.61462108349141), value = 112.222888123776, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.404766760113, -14.7186814842826, 
    301.468390500048, -12.1760945948068, -14.7186814842826, 52.32851537329, 
    -28.0127405360986, -15.0287022862017, 301.468390500048, -28.0127405360986, 
    6160.70410507774, -366.62296940726, -12.1760945948068, -15.0287022862017, 
    -366.62296940726, 367.30011272823), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.112743171176638, -0.0165660872180782
    ), logphi = c(0.489381352993615, -1.61462108349141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_96 = structure(list(
    par = c(-0.334766384815548, 0.0751564023535068, 0.545724443940218, 
    -1.63128771844099), value = 95.1510996427027, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.503538009648, -13.3373575614826, 
    334.804642143638, -39.3085129726245, -13.3373575614826, 59.1997846122183, 
    -61.1128852661125, -16.840661157147, 334.804642143638, -61.1128852661125, 
    6495.57073172957, -674.075525333606, -39.3085129726245, -16.840661157147, 
    -674.075525333606, 431.741127716379), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334766384815548, 0.0751564023535068
    ), logphi = c(0.545724443940218, -1.63128771844099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_97 = structure(list(
    par = c(-0.342385096452472, 0.237324217328256, 0.513372073007345, 
    -1.53501216036053), value = 89.2249711952714, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.691021390969, 1.79532579380748, 
    305.059079312997, -26.5686882361393, 1.79532579380748, 80.0187397551611, 
    -29.4105659151001, -21.0007727154959, 305.059079312997, -29.4105659151001, 
    4869.44089089292, -469.930284356934, -26.5686882361393, -21.0007727154959, 
    -469.930284356934, 334.208784760648), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342385096452472, 0.237324217328256
    ), logphi = c(0.513372073007345, -1.53501216036053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_98 = structure(list(
    par = c(-0.274885795015356, -0.161528237704554, 0.492435858690054, 
    -1.56412023106416), value = 123.469984131037, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.377259244417, -10.3729821994136, 
    299.955938960039, -21.7502423467408, -10.3729821994136, 43.8252905468062, 
    -34.4667636902329, -14.2272451295611, 299.955938960039, -34.4667636902329, 
    5417.20729746586, -379.94957401466, -21.7502423467408, -14.2272451295611, 
    -379.94957401466, 342.153589528493), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274885795015356, -0.161528237704554
    ), logphi = c(0.492435858690054, -1.56412023106416)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_99 = structure(list(
    par = c(-0.379544221958346, 0.196136807828968, 0.480380718459153, 
    -1.57421361753072), value = 78.6044897511794, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(144.111177359463, 5.38269433292271, 
    312.097946629564, -18.9072662379886, 5.38269433292271, 75.4705644183673, 
    -14.7070685052597, -21.5036349331399, 312.097946629564, -14.7070685052597, 
    5328.46532552611, -389.865363780828, -18.9072662379886, -21.5036349331399, 
    -389.865363780828, 331.20612430082), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379544221958346, 0.196136807828968
    ), logphi = c(0.480380718459153, -1.57421361753072)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_100 = structure(list(
    par = c(-0.106791575306252, -0.174731429434502, 0.482398465111149, 
    -1.64697692149306), value = 133.788427760333, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.911507557931, -18.6378666668929, 
    305.529483128453, -12.047570297824, -18.6378666668929, 37.1608381684041, 
    -28.7847120787887, -13.1160505887351, 305.529483128453, -28.7847120787887, 
    6746.04645391241, -354.533387334044, -12.047570297824, -13.1160505887351, 
    -354.533387334044, 386.570389821372), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106791575306252, -0.174731429434502
    ), logphi = c(0.482398465111149, -1.64697692149306)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_101 = structure(list(
    par = c(-0.176066142631912, 0.155640416335163, 0.511388558479801, 
    -1.67452454294329), value = 88.7761699709299, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.356897561361, -12.4159798104984, 
    333.601892233304, -20.1264144390478, -12.4159798104984, 66.9206795258503, 
    -33.557726613509, -18.7426002025148, 333.601892233304, -33.557726613509, 
    7131.63208627421, -526.023618697025, -20.1264144390478, -18.7426002025148, 
    -526.023618697025, 419.137241060241), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.176066142631912, 0.155640416335163
    ), logphi = c(0.511388558479801, -1.67452454294329)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_102 = structure(list(
    par = c(-0.185030978071615, 0.169243555259584, 0.507567045430441, 
    -1.5676971990436), value = 110.793555428487, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.640286125901, -8.36218768540675, 
    301.263984471944, -18.2476299457335, -8.36218768540675, 68.8456418664884, 
    -29.7932234367693, -18.1111724693039, 301.263984471944, -29.7932234367693, 
    5385.52010669591, -429.296944146174, -18.2476299457335, -18.1111724693039, 
    -429.296944146174, 347.799308983099), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.185030978071615, 0.169243555259584
    ), logphi = c(0.507567045430441, -1.5676971990436)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_103 = structure(list(
    par = c(-0.278099176611174, -0.112226445083275, 0.495274553896292, 
    -1.59422526821356), value = 119.016909357811, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.013050761349, -12.1183308934292, 
    310.567972785947, -22.8496588121629, -12.1183308934292, 43.4710737913235, 
    -35.5330237660212, -15.1665738812312, 310.567972785947, -35.5330237660212, 
    5861.27395217773, -420.684746222477, -22.8496588121629, -15.1665738812312, 
    -420.684746222477, 364.154213581713), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278099176611174, -0.112226445083275
    ), logphi = c(0.495274553896292, -1.59422526821356)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_104 = structure(list(
    par = c(-0.12990407914532, -0.221467955558671, 0.479478694652468, 
    -1.70172630578784), value = 117.482626868205, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.087287440186, -18.4682299106953, 
    320.806215498237, -13.5669234051505, -18.4682299106953, 35.528261523865, 
    -29.0898890185076, -12.9025599822086, 320.806215498237, -29.0898890185076, 
    7745.05077646381, -392.796839765452, -13.5669234051505, -12.9025599822086, 
    -392.796839765452, 420.191914138002), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.12990407914532, -0.221467955558671
    ), logphi = c(0.479478694652468, -1.70172630578784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_105 = structure(list(
    par = c(-0.30489455756423, -0.0311910388985176, 0.479906752801042, 
    -1.66076948362582), value = 97.1443393633438, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.442375276374, -8.39251750761605, 
    330.958622328126, -19.9430679170831, -8.39251750761605, 51.5308066511011, 
    -26.720718963702, -17.4332660716203, 330.958622328126, -26.720718963702, 
    6859.11536927364, -434.579180438988, -19.9430679170831, -17.4332660716203, 
    -434.579180438988, 392.995610397406), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30489455756423, -0.0311910388985176
    ), logphi = c(0.479906752801042, -1.66076948362582)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_106 = structure(list(
    par = c(-0.206330176669515, 0.0760728868648919, 0.488725627466847, 
    -1.67261842299523), value = 75.8177152518378, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.986310019045, -7.93645510199781, 
    328.830451898909, -16.1742565367717, -7.93645510199781, 67.1728838135266, 
    -24.9230272864054, -17.9039996837105, 328.830451898909, -24.9230272864054, 
    7069.33204660132, -448.103577168624, -16.1742565367717, -17.9039996837105, 
    -448.103577168624, 402.869949411411), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206330176669515, 0.0760728868648919
    ), logphi = c(0.488725627466847, -1.67261842299523)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_107 = structure(list(
    par = c(-0.217225502024678, -0.125374326672334, 0.504004300385618, 
    -1.59210955714873), value = 123.762500763826, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.168179034243, -15.1579009681768, 
    306.186644486672, -22.38567433821, -15.1579009681768, 41.9322528273369, 
    -38.2720386049584, -14.1516184672952, 306.186644486672, -38.2720386049584, 
    5871.69289970291, -431.977674548278, -22.38567433821, -14.1516184672952, 
    -431.977674548278, 368.756861014674), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.217225502024678, -0.125374326672334
    ), logphi = c(0.504004300385618, -1.59210955714873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_108 = structure(list(
    par = c(-0.183832827716497, 0.0782356501931971, 0.503836451136619, 
    -1.4980004170091), value = 130.160106755336, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(145.091584123236, -9.30237857232896, 
    277.99344255186, -17.2259572295275, -9.30237857232896, 59.4658461352537, 
    -30.7515641395639, -15.8734253119519, 277.99344255186, -30.7515641395639, 
    4471.44318854242, -353.930614664932, -17.2259572295275, -15.8734253119519, 
    -353.930614664932, 300.30647235435), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183832827716497, 0.0782356501931971
    ), logphi = c(0.503836451136619, -1.4980004170091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_109 = structure(list(
    par = c(-0.376581550239339, 0.0126295193266612, 0.495169552304705, 
    -1.6018957401637), value = 109.680143585715, counts = structure(c(329L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.384809988167, -4.78902054368291, 
    322.775417810561, -26.7214223477197, -4.78902054368291, 57.6980836939356, 
    -33.5318708444277, -18.4277795156618, 322.775417810561, -33.5318708444277, 
    5902.48195532439, -465.307653259472, -26.7214223477197, -18.4277795156618, 
    -465.307653259472, 369.199857782831), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376581550239339, 0.0126295193266612
    ), logphi = c(0.495169552304705, -1.6018957401637)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_110 = structure(list(
    par = c(-0.241325421116817, 0.0937413530447259, 0.511555049699395, 
    -1.62945814754924), value = 101.623232459558, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.067390614386, -10.7392816062202, 
    325.088620126479, -24.0511999702875, -10.7392816062202, 62.8133407722942, 
    -37.1277585209384, -18.1365295635061, 325.088620126479, -37.1277585209384, 
    6379.7519365778, -510.748634319214, -24.0511999702875, -18.1365295635061, 
    -510.748634319214, 395.294654239819), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241325421116817, 0.0937413530447259
    ), logphi = c(0.511555049699395, -1.62945814754924)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_111 = structure(list(
    par = c(-0.222161387247185, 0.0119241209947966, 0.510677340668512, 
    -1.53168093936395), value = 128.388732279138, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.867250707771, -10.5648197319397, 
    292.226496810599, -22.4326309918865, -10.5648197319397, 55.3058341097312, 
    -36.5094176828507, -15.5553479928017, 292.226496810599, -36.5094176828507, 
    4948.14067037197, -414.280122953414, -22.4326309918865, -15.5553479928017, 
    -414.280122953414, 330.750635555432), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222161387247185, 0.0119241209947966
    ), logphi = c(0.510677340668512, -1.53168093936395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_112 = structure(list(
    par = c(-0.350213375454853, 0.10906752994744, 0.513235873872636, 
    -1.56843221672773), value = 102.902030278497, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.529609423111, -5.22436801020376, 
    315.106084034511, -29.2677054609669, -5.22436801020376, 63.8291668835222, 
    -37.4395998647969, -19.0704361564542, 315.106084034511, -37.4395998647969, 
    5406.47289539464, -498.598346837298, -29.2677054609669, -19.0704361564542, 
    -498.598346837298, 360.277115390772), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350213375454853, 0.10906752994744
    ), logphi = c(0.513235873872636, -1.56843221672773)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_113 = structure(list(
    par = c(-0.132184886139928, -0.0961102169149875, 0.489127448068541, 
    -1.57070103789746), value = 124.818864354139, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.797574627844, -12.0521528046424, 
    289.848110540447, -13.8156470139705, -12.0521528046424, 50.5681592457563, 
    -29.8590873946125, -14.3876175169311, 289.848110540447, -29.8590873946125, 
    5508.50175672934, -333.1892935865, -13.8156470139705, -14.3876175169311, 
    -333.1892935865, 339.900013109684), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132184886139928, -0.0961102169149875
    ), logphi = c(0.489127448068541, -1.57070103789746)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_114 = structure(list(
    par = c(-0.310397546164971, -0.141725645277781, 0.487554006587656, 
    -1.63321170724509), value = 106.704939620918, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.803053018179, -11.0594908662165, 
    322.616713130941, -23.2099588508561, -11.0594908662165, 42.8286449114523, 
    -34.2765511192056, -15.4372097433964, 322.616713130941, -34.2765511192056, 
    6472.78309586952, -435.380504665517, -23.2099588508561, -15.4372097433964, 
    -435.380504665517, 385.170219832531), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310397546164971, -0.141725645277781
    ), logphi = c(0.487554006587656, -1.63321170724509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_115 = structure(list(
    par = c(-0.279810772347292, 0.116049274865867, 0.529756588807692, 
    -1.62209852545469), value = 100.714428987482, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.03524767429, -12.0496906212963, 
    329.134342493376, -31.2520289469376, -12.0496906212963, 61.4909685339171, 
    -47.3578241830808, -18.255993429861, 329.134342493376, -47.3578241830808, 
    6286.11468504658, -587.2557775497, -31.2520289469376, -18.255993429861, 
    -587.2557775497, 407.360234710552), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279810772347292, 0.116049274865867
    ), logphi = c(0.529756588807692, -1.62209852545469)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_116 = structure(list(
    par = c(-0.325812788210613, 0.0745603214484288, 0.526768993108601, 
    -1.54642355781385), value = 114.446293028858, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.837808755274, -8.90864002300873, 
    307.73640972015, -32.2959854077709, -8.90864002300873, 58.9020032322196, 
    -44.4223110811492, -17.238862209723, 307.73640972015, -44.4223110811492, 
    5146.72651657477, -520.782222599436, -32.2959854077709, -17.238862209723, 
    -520.782222599436, 357.931430979619), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325812788210613, 0.0745603214484288
    ), logphi = c(0.526768993108601, -1.54642355781385)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_117 = structure(list(
    par = c(-0.231958671002993, -0.40266931386092, 0.514597829293732, 
    -1.59746601681006), value = 147.130059882012, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.447620881222, -17.0457618224873, 
    302.152435239122, -27.8152595605263, -17.0457618224873, 26.3303149239391, 
    -43.8379768468167, -9.99736568019216, 302.152435239122, -43.8379768468167, 
    6092.66389986374, -470.085107171059, -27.8152595605263, -9.99736568019216, 
    -470.085107171059, 386.93642699883), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231958671002993, -0.40266931386092
    ), logphi = c(0.514597829293732, -1.59746601681006)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_118 = structure(list(
    par = c(-0.305624000545064, 0.124773620901082, 0.532117766122217, 
    -1.6216627308595), value = 101.231469342311, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.037084478497, -11.5167646157488, 
    331.299700494725, -33.2594563374755, -11.5167646157488, 61.9831989894237, 
    -49.0969605415614, -18.5830810863763, 331.299700494725, -49.0969605415614, 
    6276.63223306385, -605.44804643925, -33.2594563374755, -18.5830810863763, 
    -605.44804643925, 410.352565609173), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305624000545064, 0.124773620901082
    ), logphi = c(0.532117766122217, -1.6216627308595)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_119 = structure(list(
    par = c(-0.31425817411248, -0.231738910590549, 0.520180548680806, 
    -1.61018710655655), value = 123.714718112706, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.966412778244, -14.8712853373922, 
    316.484186036803, -32.8731727190501, -14.8712853373922, 36.5637132233587, 
    -49.9756105654114, -12.5282720890851, 316.484186036803, -49.9756105654114, 
    6245.68032768735, -538.26696892223, -32.8731727190501, -12.5282720890851, 
    -538.26696892223, 401.36084319542), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31425817411248, -0.231738910590549
    ), logphi = c(0.520180548680806, -1.61018710655655)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_120 = structure(list(
    par = c(-0.327673847415126, -0.0933846571906965, 0.501163944100208, 
    -1.61308099840244), value = 103.787709919173, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.001820094335, -10.7243846372285, 
    321.169412444533, -27.2838901853589, -10.7243846372285, 45.8978174648905, 
    -39.5777085380189, -15.8958700673395, 321.169412444533, -39.5777085380189, 
    6165.33599861313, -477.869430024924, -27.2838901853589, -15.8958700673395, 
    -477.869430024924, 383.488238316687), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.327673847415126, -0.0933846571906965
    ), logphi = c(0.501163944100208, -1.61308099840244)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_121 = structure(list(
    par = c(-0.19906350141652, -0.147653390943679, 0.513306127081538, 
    -1.57854508987247), value = 123.383982673195, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.85502464088, -14.3339212286264, 
    301.622328169771, -24.1345073472843, -14.3339212286264, 45.7507147615388, 
    -41.5599864460603, -13.2505259884397, 301.622328169771, -41.5599864460603, 
    5700.16773830417, -449.37414031665, -24.1345073472843, -13.2505259884397, 
    -449.37414031665, 367.101994378061), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19906350141652, -0.147653390943679
    ), logphi = c(0.513306127081538, -1.57854508987247)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_122 = structure(list(
    par = c(-0.377458914558221, 0.175167899282945, 0.487448495517384, 
    -1.59709537319829), value = 73.7778295631749, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.598833895998, 2.96804077137836, 
    321.49343967447, -21.9356246695668, 2.96804077137836, 74.3099998992136, 
    -19.8846466901159, -21.4840588128595, 321.49343967447, -19.8846466901159, 
    5708.17399984946, -438.072625868813, -21.9356246695668, -21.4840588128595, 
    -438.072625868813, 353.83383206522), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377458914558221, 0.175167899282945
    ), logphi = c(0.487448495517384, -1.59709537319829)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_123 = structure(list(
    par = c(-0.163212229375526, -0.183590441029918, 0.479419680284702, 
    -1.62470016837834), value = 135.664769321997, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.962913219601, -16.2508892955771, 
    304.433418833128, -13.7443158756412, -16.2508892955771, 36.7077503256041, 
    -28.5746250128227, -13.475973211996, 304.433418833128, -28.5746250128227, 
    6348.33425365855, -343.716320355014, -13.7443158756412, -13.475973211996, 
    -343.716320355014, 370.490614088226), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.163212229375526, -0.183590441029918
    ), logphi = c(0.479419680284702, -1.62470016837834)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_124 = structure(list(
    par = c(-0.215966343223153, 0.0615967562354268, 0.491964843558359, 
    -1.62769908831532), value = 96.3755852122497, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.254873611743, -9.95161660100052, 
    317.259746008602, -17.249042915779, -9.95161660100052, 58.1124014580325, 
    -27.5612629714317, -17.5185037836201, 317.259746008602, -27.5612629714317, 
    6315.30549642534, -424.838892172374, -17.249042915779, -17.5185037836201, 
    -424.838892172374, 377.653329255878), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215966343223153, 0.0615967562354268
    ), logphi = c(0.491964843558359, -1.62769908831532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_125 = structure(list(
    par = c(-0.37678908365147, -0.312879534619121, 0.494820416988402, 
    -1.66967857754892), value = 109.171583801517, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.692581628209, -13.4059947960452, 
    332.966247739819, -30.5499088462113, -13.4059947960452, 31.4735308464265, 
    -43.9613272575912, -13.0508324751588, 332.966247739819, -43.9613272575912, 
    7221.28372095199, -515.803161203365, -30.5499088462113, -13.0508324751588, 
    -515.803161203365, 423.113399627084), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37678908365147, -0.312879534619121
    ), logphi = c(0.494820416988402, -1.66967857754892)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_126 = structure(list(
    par = c(-0.257771480576639, -0.108991369049211, 0.494698608216373, 
    -1.55877235493014), value = 122.673069197903, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.254120088187, -10.5915747745655, 
    298.368050195563, -20.9957947259198, -10.5915747745655, 46.4642368278589, 
    -33.9648126619352, -14.7509155201675, 298.368050195563, -33.9648126619352, 
    5328.30572705834, -381.212013870424, -20.9957947259198, -14.7509155201675, 
    -381.212013870424, 338.93136514962), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257771480576639, -0.108991369049211
    ), logphi = c(0.494698608216373, -1.55877235493014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_127 = structure(list(
    par = c(-0.135692535126213, -0.0424851246518323, 0.483616803244479, 
    -1.60084110122393), value = 118.238642320447, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.782700948947, -13.4491227683498, 
    297.960180816403, -11.7551872591548, -13.4491227683498, 49.7715993041936, 
    -26.5562612504766, -14.8612671537762, 297.960180816403, -26.5562612504766, 
    5928.38093018599, -339.923354788496, -11.7551872591548, -14.8612671537762, 
    -339.923354788496, 354.683332307815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135692535126213, -0.0424851246518323
    ), logphi = c(0.483616803244479, -1.60084110122393)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_128 = structure(list(
    par = c(-0.189256036951448, -0.491382670853504, 0.489975687092395, 
    -1.6357567393578), value = 137.034116366412, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.227782806457, -16.2215797203658, 
    304.675995934645, -20.2459067928373, -16.2215797203658, 24.1122871713628, 
    -35.0884128366147, -9.79200997264229, 304.675995934645, -35.0884128366147, 
    6682.65344339147, -388.233130358628, -20.2459067928373, -9.79200997264229, 
    -388.233130358628, 393.07933737831), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189256036951448, -0.491382670853504
    ), logphi = c(0.489975687092395, -1.6357567393578)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_129 = structure(list(
    par = c(-0.316913456570252, 0.228502260710225, 0.505938526342701, 
    -1.51550503944606), value = 104.430361234041, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.728108849217, 2.83051417682145, 
    294.970502885405, -22.6017191344852, 2.83051417682145, 80.8820382189879, 
    -25.8277575611032, -20.2406079026218, 294.970502885405, -25.8277575611032, 
    4603.2139244403, -416.698903951129, -22.6017191344852, -20.2406079026218, 
    -416.698903951129, 313.630025040368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316913456570252, 0.228502260710225
    ), logphi = c(0.505938526342701, -1.51550503944606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_130 = structure(list(
    par = c(-0.257090565689927, -0.150933003979537, 0.500197410841889, 
    -1.69597585264668), value = 99.0801069005017, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.04064817053, -16.1824421454071, 
    337.070520298965, -24.8451436313246, -16.1824421454071, 40.0426469902015, 
    -41.2295147320663, -14.6868298536162, 337.070520298965, -41.2295147320663, 
    7656.53335832894, -518.150038121945, -24.8451436313246, -14.6868298536162, 
    -518.150038121945, 435.194541854145), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257090565689927, -0.150933003979537
    ), logphi = c(0.500197410841889, -1.69597585264668)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_131 = structure(list(
    par = c(-0.178107439361019, 0.0656431631897866, 0.515136660142385, 
    -1.53407943124013), value = 112.60267965209, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.250880588942, -10.5804505245999, 
    291.030295702654, -21.094019022172, -10.5804505245999, 62.0725491273788, 
    -36.4038929241417, -15.8339637827964, 291.030295702654, -36.4038929241417, 
    4977.0268742968, -422.962450382869, -21.094019022172, -15.8339637827964, 
    -422.962450382869, 333.655409555433), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178107439361019, 0.0656431631897866
    ), logphi = c(0.515136660142385, -1.53407943124013)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_132 = structure(list(
    par = c(-0.432426448359743, -0.172562082994625, 0.537170419780243, 
    -1.56027718217394), value = 129.099536120958, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.633549062148, -11.4512006845757, 
    310.619683702384, -42.7655139745298, -11.4512006845757, 41.6546746535573, 
    -58.076404108931, -12.5514840192409, 310.619683702384, -58.076404108931, 
    5488.70127541079, -600.967865327817, -42.7655139745298, -12.5514840192409, 
    -600.967865327817, 389.407601488756), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432426448359743, -0.172562082994625
    ), logphi = c(0.537170419780243, -1.56027718217394)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_133 = structure(list(
    par = c(-0.270619252256299, -0.0322667524146327, 0.515588908159066, 
    -1.490930374657), value = 137.185587232877, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.215449584943, -10.6320684167827, 
    283.290477327114, -26.0493211214907, -10.6320684167827, 49.5176889572235, 
    -38.7256908140898, -14.6523379491725, 283.290477327114, -38.7256908140898, 
    4434.67676232245, -408.66807974993, -26.0493211214907, -14.6523379491725, 
    -408.66807974993, 309.594881997555), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270619252256299, -0.0322667524146327
    ), logphi = c(0.515588908159066, -1.490930374657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_134 = structure(list(
    par = c(-0.302449392310828, -0.302954557984268, 0.497016474652524, 
    -1.64078932441331), value = 130.631359733787, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.430629923528, -14.4365582102068, 
    320.782380832441, -26.8207537246212, -14.4365582102068, 31.7242371039583, 
    -41.2007289654071, -12.6115304794894, 320.782380832441, -41.2007289654071, 
    6714.64105285935, -468.67567365183, -26.8207537246212, -12.6115304794894, 
    -468.67567365183, 402.430842498802), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302449392310828, -0.302954557984268
    ), logphi = c(0.497016474652524, -1.64078932441331)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_135 = structure(list(
    par = c(-0.214553806426385, 0.00570637486103966, 0.499758847867347, 
    -1.59927213738168), value = 107.911245104988, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.417906867412, -10.2895018336824, 
    309.774021058473, -19.799094943096, -10.2895018336824, 56.5026545302771, 
    -33.2978189092614, -16.3150393674982, 309.774021058473, -33.2978189092614, 
    5912.08502780915, -427.314997068606, -19.799094943096, -16.3150393674982, 
    -427.314997068606, 366.987982737044), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214553806426385, 0.00570637486103966
    ), logphi = c(0.499758847867347, -1.59927213738168)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_136 = structure(list(
    par = c(-0.179494193138502, 0.0668969841547175, 0.49370969843701, 
    -1.62992470333008), value = 100.775745657034, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.087980735615, -10.3779511242408, 
    314.911787835825, -15.8799548053423, -10.3779511242408, 60.9620450617854, 
    -27.8038482086629, -17.1342278445508, 314.911787835825, -27.8038482086629, 
    6364.76814513642, -420.794128906721, -15.8799548053423, -17.1342278445508, 
    -420.794128906721, 379.690559888957), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.179494193138502, 0.0668969841547175
    ), logphi = c(0.49370969843701, -1.62992470333008)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_137 = structure(list(
    par = c(-0.226080915595517, -0.148963706366124, 0.507347472934701, 
    -1.52159933421431), value = 139.931604682283, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.470799194564, -13.1926235908963, 
    286.22707462489, -22.9013116737065, -13.1926235908963, 41.8262671999514, 
    -37.7601136776207, -13.1778198948496, 286.22707462489, -37.7601136776207, 
    4864.56616660291, -387.496928954789, -22.9013116737065, -13.1778198948496, 
    -387.496928954789, 324.061699039646), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226080915595517, -0.148963706366124
    ), logphi = c(0.507347472934701, -1.52159933421431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_138 = structure(list(
    par = c(-0.234098577451077, -0.286019670065555, 0.493050087264097, 
    -1.53998449894184), value = 152.373892405938, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.49543692081, -13.2268073684827, 
    287.457812852665, -20.4478536431907, -13.2268073684827, 34.2605693504083, 
    -34.5523703941808, -11.9951647512551, 287.457812852665, -34.5523703941808, 
    5123.93801894007, -344.584066027664, -20.4478536431907, -11.9951647512551, 
    -344.584066027664, 327.446980847412), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234098577451077, -0.286019670065555
    ), logphi = c(0.493050087264097, -1.53998449894184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_139 = structure(list(
    par = c(-0.154404040724138, 0.182980850246462, 0.482923546759773, 
    -1.63909338838243), value = 84.9781548013987, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.846684680379, -6.90369570932603, 
    311.979223763359, -9.86537632563511, -6.90369570932603, 70.5979735897699, 
    -15.9054053767704, -18.3341522834723, 311.979223763359, -15.9054053767704, 
    6431.92833204509, -386.70678067021, -9.86537632563511, -18.3341522834723, 
    -386.70678067021, 373.1189940126), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.154404040724138, 0.182980850246462
    ), logphi = c(0.482923546759773, -1.63909338838243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_140 = structure(list(
    par = c(-0.122659414337225, 0.224927524990176, 0.476616031466275, 
    -1.55215487855637), value = 95.1591652763751, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(163.328273199426, -1.54441258359839, 
    280.055782649669, -4.9134459398914, -1.54441258359839, 81.0756406295354, 
    -13.3783434463908, -17.3749412173407, 280.055782649669, -13.3783434463908, 
    5080.53094777949, -286.781335592678, -4.9134459398914, -17.3749412173407, 
    -286.781335592678, 310.864481178896), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122659414337225, 0.224927524990176
    ), logphi = c(0.476616031466275, -1.55215487855637)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_141 = structure(list(
    par = c(-0.307049255424845, -0.00475242501357142, 0.496897681417621, 
    -1.60402858730164), value = 104.392981585016, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.846464111376, -8.93188519768273, 
    318.166670769671, -23.8741673115328, -8.93188519768273, 52.6769696520546, 
    -33.913810256081, -17.2878088786632, 318.166670769671, -33.913810256081, 
    5963.97406055615, -449.875249604048, -23.8741673115328, -17.2878088786632, 
    -449.875249604048, 370.563127653156), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.307049255424845, -0.00475242501357142
    ), logphi = c(0.496897681417621, -1.60402858730164)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_142 = structure(list(
    par = c(-0.144014370474893, 0.0989493147520886, 0.511256054981164, 
    -1.57210345795865), value = 121.482733634258, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.844798217188, -12.9144841558571, 
    299.204720448643, -18.2894985378823, -12.9144841558571, 61.2974811389222, 
    -34.0923101376234, -16.4888963958276, 299.204720448643, -34.0923101376234, 
    5501.83368117985, -431.201905565004, -18.2894985378823, -16.4888963958276, 
    -431.201905565004, 354.276536583598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144014370474893, 0.0989493147520886
    ), logphi = c(0.511256054981164, -1.57210345795865)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_143 = structure(list(
    par = c(-0.310142898730171, 0.00787581020742679, 0.497626351252909, 
    -1.62906184943212), value = 94.8347029850061, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.053713242731, -9.49625302482104, 
    326.358748587552, -24.5144875297143, -9.49625302482104, 53.3234752602141, 
    -34.4210197198436, -17.7301117609829, 326.358748587552, -34.4210197198436, 
    6364.38105460613, -477.14548766109, -24.5144875297143, -17.7301117609829, 
    -477.14548766109, 387.651708045667), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310142898730171, 0.00787581020742679
    ), logphi = c(0.497626351252909, -1.62906184943212)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_144 = structure(list(
    par = c(-0.282516602417594, 0.0743902920077698, 0.508270285292757, 
    -1.60132978499823), value = 105.061668830807, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.011683978637, -9.04763063047653, 
    318.941505337733, -25.1074142347818, -9.04763063047653, 59.4384341638943, 
    -36.1971969944364, -18.1099297087428, 318.941505337733, -36.1971969944364, 
    5920.92191391913, -486.808921065673, -25.1074142347818, -18.1099297087428, 
    -486.808921065673, 376.170318908464), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282516602417594, 0.0743902920077698
    ), logphi = c(0.508270285292757, -1.60132978499823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_145 = structure(list(
    par = c(-0.318418752610338, 0.0654355759481455, 0.518751675016678, 
    -1.65142052179934), value = 90.4828620866842, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.017252455222, -10.503717664534, 
    338.044960930262, -30.8670822093404, -10.503717664534, 59.9884458161171, 
    -45.3245017872916, -18.3780337472683, 338.044960930262, -45.3245017872916, 
    6777.19514439445, -583.579443830473, -30.8670822093404, -18.3780337472683, 
    -583.579443830473, 419.841575009627), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318418752610338, 0.0654355759481455
    ), logphi = c(0.518751675016678, -1.65142052179934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_146 = structure(list(
    par = c(-0.301927397043404, 0.0418732186785354, 0.491824162437546, 
    -1.68513981624339), value = 85.4172226381693, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.463410382944, -9.25844684829258, 
    341.899033092119, -22.727368241604, -9.25844684829258, 56.6250141034175, 
    -30.2056602059508, -18.6872418996842, 341.899033092119, -30.2056602059508, 
    7303.74832984992, -505.025385812985, -22.727368241604, -18.6872418996842, 
    -505.025385812985, 417.050888415815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301927397043404, 0.0418732186785354
    ), logphi = c(0.491824162437546, -1.68513981624339)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_147 = structure(list(
    par = c(-0.333223110502228, -0.229510637483342, 0.491024170051197, 
    -1.6191970220888), value = 115.443439822971, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.315630366794, -11.3318492509507, 
    318.619962278888, -25.8945121203169, -11.3318492509507, 37.7979705845632, 
    -37.8726772076732, -14.0716192760237, 318.619962278888, -37.8726772076732, 
    6291.22022802875, -440.520614056084, -25.8945121203169, -14.0716192760237, 
    -440.520614056084, 381.758214782479), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333223110502228, -0.229510637483342
    ), logphi = c(0.491024170051197, -1.6191970220888)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_148 = structure(list(
    par = c(-0.402626413761989, -0.0364066973260064, 0.528318284861258, 
    -1.69267345523776), value = 89.1696914592104, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.239285662302, -15.0632100890391, 
    350.873061250923, -39.1469840241854, -15.0632100890391, 46.6248282826598, 
    -61.1079954460081, -16.4013016661357, 350.873061250923, -61.1079954460081, 
    7619.50295251523, -686.337599347553, -39.1469840241854, -16.4013016661357, 
    -686.337599347553, 462.279022237055), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.402626413761989, -0.0364066973260064
    ), logphi = c(0.528318284861258, -1.69267345523776)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_149 = structure(list(
    par = c(-0.126857668636176, 0.0871552026412803, 0.474597426626287, 
    -1.69766618150627), value = 82.9814289463974, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.914563400382, -10.4759459063075, 
    322.157322830918, -8.29791135714686, -10.4759459063075, 63.4722147410116, 
    -15.4818251765221, -16.7611615609076, 322.157322830918, -15.4818251765221, 
    7499.25025036191, -388.294173960801, -8.29791135714686, -16.7611615609076, 
    -388.294173960801, 405.328324337262), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126857668636176, 0.0871552026412803
    ), logphi = c(0.474597426626287, -1.69766618150627)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_150 = structure(list(
    par = c(-0.356894011061581, -0.285438861706261, 0.502552236892038, 
    -1.65675779900112), value = 111.569410084674, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.04396442307, -14.3027845851407, 
    329.42054088636, -31.2131756903256, -14.3027845851407, 32.0076639503952, 
    -46.1416167674145, -12.9923912624008, 329.42054088636, -46.1416167674145, 
    7006.64749456337, -526.354031613607, -31.2131756903256, -12.9923912624008, 
    -526.354031613607, 420.183668516927), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356894011061581, -0.285438861706261
    ), logphi = c(0.502552236892038, -1.65675779900112)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_151 = structure(list(
    par = c(-0.255633661630657, -0.0129293718681333, 0.509459906589085, 
    -1.60551449728873), value = 106.837935079199, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.577645200854, -11.4783862059653, 
    316.535890185321, -25.0842430205012, -11.4783862059653, 53.9085208330903, 
    -39.5437308888802, -16.2596704029738, 316.535890185321, -39.5437308888802, 
    6040.24626511546, -482.173964964971, -25.0842430205012, -16.2596704029738, 
    -482.173964964971, 381.166701227897), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255633661630657, -0.0129293718681333
    ), logphi = c(0.509459906589085, -1.60551449728873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_152 = structure(list(
    par = c(-0.236046479523959, -0.00937123701022183, 0.487043515788472, 
    -1.70790213612902), value = 82.284985846987, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.807924000858, -12.6421077020211, 
    340.079941715032, -18.7969052092285, -12.6421077020211, 51.5324481966672, 
    -28.6718705559963, -17.0880868779477, 340.079941715032, -28.6718705559963, 
    7758.20279610784, -478.531561821427, -18.7969052092285, -17.0880868779477, 
    -478.531561821427, 426.458147995135), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236046479523959, -0.00937123701022183
    ), logphi = c(0.487043515788472, -1.70790213612902)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_153 = structure(list(
    par = c(-0.300187559039358, -0.0236694328950945, 0.493561337929433, 
    -1.62941047474121), value = 98.8657076541373, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.770383748782, -9.09102818269503, 
    324.269587849813, -23.1440626219381, -9.09102818269503, 52.9546714354012, 
    -33.2874756061585, -17.1485093858337, 324.269587849813, -33.2874756061585, 
    6374.29748667984, -456.970772788168, -23.1440626219381, -17.1485093858337, 
    -456.970772788168, 384.688252935916), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300187559039358, -0.0236694328950945
    ), logphi = c(0.493561337929433, -1.62941047474121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_154 = structure(list(
    par = c(-0.347513289097984, -0.107145991490763, 0.498898989357259, 
    -1.62992514329552), value = 96.852411085574, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.68726933173, -9.81299583102668, 
    326.885549075229, -28.0586184153719, -9.81299583102668, 47.1939946891098, 
    -39.9111518589734, -16.0195210554548, 326.885549075229, -39.9111518589734, 
    6439.43219439791, -491.227117512594, -28.0586184153719, -16.0195210554548, 
    -491.227117512594, 393.955744925734), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347513289097984, -0.107145991490763
    ), logphi = c(0.498898989357259, -1.62992514329552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_155 = structure(list(
    par = c(-0.383884156818306, 0.274262576724609, 0.495823715010935, 
    -1.72689624621618), value = 50.7261757504459, counts = structure(c(349L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.651595721787, -0.655451596998091, 
    366.861522739015, -25.1891261768833, -0.655451596998091, 
    77.7026869904773, -15.8831926562186, -24.7984333263673, 366.861522739015, 
    -15.8831926562186, 7923.5332559513, -602.32385917125, -25.1891261768833, 
    -24.7984333263673, -602.32385917125, 439.705884250685), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383884156818306, 0.274262576724609
    ), logphi = c(0.495823715010935, -1.72689624621618)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_156 = structure(list(
    par = c(-0.248646307331192, -0.183842154580597, 0.483059240697834, 
    -1.7061965294905), value = 101.786655240615, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.726092651959, -14.4795964125422, 
    335.774851656367, -20.2607740842353, -14.4795964125422, 39.6118053203054, 
    -32.9423228428993, -14.5203637771374, 335.774851656367, -32.9423228428993, 
    7803.12145872841, -458.501123763, -20.2607740842353, -14.5203637771374, 
    -458.501123763, 427.399792439331), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.248646307331192, -0.183842154580597
    ), logphi = c(0.483059240697834, -1.7061965294905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_157 = structure(list(
    par = c(-0.416788829485148, -0.0293918351687206, 0.528178361980813, 
    -1.52372639078317), value = 113.436579709274, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.307505887647, -6.96073270844977, 
    303.666463185692, -37.9243372918836, -6.96073270844977, 53.828313028248, 
    -48.7617464237644, -15.6262453909761, 303.666463185692, -48.7617464237644, 
    4878.38421203435, -527.793420594946, -37.9243372918836, -15.6262453909761, 
    -527.793420594946, 350.540394745025), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416788829485148, -0.0293918351687206
    ), logphi = c(0.528178361980813, -1.52372639078317)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_158 = structure(list(
    par = c(-0.273909008423916, -0.0957677480158638, 0.513902948988203, 
    -1.59139060541632), value = 118.819999091979, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.008204917672, -13.1965469023498, 
    312.341940098548, -27.9061333827713, -13.1965469023498, 45.6637775805291, 
    -43.5212499247939, -14.7274017248122, 312.341940098548, -43.5212499247939, 
    5868.28351647739, -488.915631393638, -27.9061333827713, -14.7274017248122, 
    -488.915631393638, 378.102368319588), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273909008423916, -0.0957677480158638
    ), logphi = c(0.513902948988203, -1.59139060541632)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_159 = structure(list(
    par = c(-0.287267551293644, 0.106662439116108, 0.517527787725086, 
    -1.56127289169621), value = 108.022025447801, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.915240209362, -8.40143580660424, 
    309.023427462307, -27.2727430541408, -8.40143580660424, 61.6018394019591, 
    -38.5109505174341, -18.0303910948254, 309.023427462307, -38.5109505174341, 
    5325.54381658556, -488.868658155894, -27.2727430541408, -18.0303910948254, 
    -488.868658155894, 357.02823876349), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287267551293644, 0.106662439116108
    ), logphi = c(0.517527787725086, -1.56127289169621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_160 = structure(list(
    par = c(-0.554916101641685, 0.0036928799097394, 0.521280370971787, 
    -1.62100263741453), value = 80.3758154288742, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.176544159174, -5.32040505518694, 
    340.56132182414, -44.5578492769272, -5.32040505518694, 56.6926562619585, 
    -55.7325263912389, -18.7297246903029, 340.56132182414, -55.7325263912389, 
    6302.35938998069, -652.696088907945, -44.5578492769272, -18.7297246903029, 
    -652.696088907945, 419.32241942888), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.554916101641685, 0.0036928799097394
    ), logphi = c(0.521280370971787, -1.62100263741453)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_161 = structure(list(
    par = c(-0.243382757828091, 0.0783206798491499, 0.505352651658049, 
    -1.49932073039545), value = 128.03324780619, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.041433515454, -7.43524036295184, 
    283.433764529661, -20.5402450603742, -7.43524036295184, 59.427877829421, 
    -31.7933653235514, -16.5504683309337, 283.433764529661, -31.7933653235514, 
    4478.13992096258, -375.211725661018, -20.5402450603742, -16.5504683309337, 
    -375.211725661018, 303.736342857519), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243382757828091, 0.0783206798491499
    ), logphi = c(0.505352651658049, -1.49932073039545)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_162 = structure(list(
    par = c(-0.262449145072322, 0.00187350739526685, 0.491047273556398, 
    -1.65660881775022), value = 97.1216769117914, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.511192871552, -9.96666636865484, 
    329.023055350319, -20.5343476107345, -9.96666636865484, 54.970650207764, 
    -30.5882293254456, -17.3472635403016, 329.023055350319, -30.5882293254456, 
    6821.95130688257, -459.651105000347, -20.5343476107345, -17.3472635403016, 
    -459.651105000347, 398.379712947872), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262449145072322, 0.00187350739526685
    ), logphi = c(0.491047273556398, -1.65660881775022)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_163 = structure(list(
    par = c(-0.345244481915676, 0.114295407378792, 0.50282070826388, 
    -1.70337985919818), value = 69.9694789001126, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.299244615931, -8.31751022545291, 
    354.67638051756, -27.5548878718723, -8.31751022545291, 62.927270558788, 
    -34.5153104035489, -20.5806623512217, 354.67638051756, -34.5153104035489, 
    7629.46651202867, -583.382077056882, -27.5548878718723, -20.5806623512217, 
    -583.382077056882, 437.254692364775), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.345244481915676, 0.114295407378792
    ), logphi = c(0.50282070826388, -1.70337985919818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_164 = structure(list(
    par = c(-0.300791620694764, 0.187845547371772, 0.509115671861575, 
    -1.55670527160631), value = 103.115542130478, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.097720885355, -2.98083644523217, 
    307.866620875785, -24.1515456842478, -2.98083644523217, 71.5687727996794, 
    -30.2705500985212, -19.8774333100005, 307.866620875785, -30.2705500985212, 
    5193.89056508857, -460.232328151733, -24.1515456842478, -19.8774333100005, 
    -460.232328151733, 344.631421860697), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300791620694764, 0.187845547371772
    ), logphi = c(0.509115671861575, -1.55670527160631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_165 = structure(list(
    par = c(-0.339847632655548, -0.0159524818180204, 0.489566549972233, 
    -1.63439066633366), value = 86.8232295779431, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.883620325202, -7.05283695978665, 
    328.374252966057, -24.0151159047741, -7.05283695978665, 53.7765325141493, 
    -31.7009260157874, -17.8519508722275, 328.374252966057, -31.7009260157874, 
    6430.42195748222, -460.064535172222, -24.0151159047741, -17.8519508722275, 
    -460.064535172222, 385.2318042874), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339847632655548, -0.0159524818180204
    ), logphi = c(0.489566549972233, -1.63439066633366)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_166 = structure(list(
    par = c(-0.273720282131135, 0.0590312770834849, 0.497077268211736, 
    -1.64107064118101), value = 99.1688868086917, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.29970875525, -9.87818180320232, 
    327.764320886104, -21.9832205914372, -9.87818180320232, 56.60977603128, 
    -31.3720991371724, -18.2918210036576, 327.764320886104, -31.3720991371724, 
    6542.24071292475, -475.881052052429, -21.9832205914372, -18.2918210036576, 
    -475.881052052429, 392.422813021653), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273720282131135, 0.0590312770834849
    ), logphi = c(0.497077268211736, -1.64107064118101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_167 = structure(list(
    par = c(-0.084097987309126, -0.16032240651696, 0.497409494349214, 
    -1.58552361294036), value = 136.518216345834, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.888498976224, -17.9912888853551, 
    290.334122439617, -14.15358252288, -17.9912888853551, 41.0189936488337, 
    -33.3647717170038, -12.6210704287644, 290.334122439617, -33.3647717170038, 
    5790.71398367859, -358.071983761477, -14.15358252288, -12.6210704287644, 
    -358.071983761477, 356.695552063968), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.084097987309126, -0.16032240651696
    ), logphi = c(0.497409494349214, -1.58552361294036)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_168 = structure(list(
    par = c(-0.334084396378176, -0.0296180079484134, 0.51290214778938, 
    -1.68534672641824), value = 96.6754737292099, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.848684064915, -15.0601652038063, 
    345.205696753226, -31.2601925465117, -15.0601652038063, 45.9701850488159, 
    -47.5025187682832, -17.0217034014541, 345.205696753226, -47.5025187682832, 
    7425.37746274507, -593.758773121067, -31.2601925465117, -17.0217034014541, 
    -593.758773121067, 439.599031615501), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334084396378176, -0.0296180079484134
    ), logphi = c(0.51290214778938, -1.68534672641824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_169 = structure(list(
    par = c(-0.299796004121687, 0.210852502980474, 0.50237656685169, 
    -1.6181924821546), value = 75.5580733239045, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.530517722695, -1.91881377276104, 
    326.106385628577, -22.5064242762585, -1.91881377276104, 76.0988084316239, 
    -25.6892783738749, -21.1448969817951, 326.106385628577, -25.6892783738749, 
    6088.33054767288, -491.747491244254, -22.5064242762585, -21.1448969817951, 
    -491.747491244254, 378.557779406208), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299796004121687, 0.210852502980474
    ), logphi = c(0.50237656685169, -1.6181924821546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_170 = structure(list(
    par = c(-0.146678704128526, -0.080987432534253, 0.495251320301795, 
    -1.61484470300132), value = 122.640919839429, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.726741703479, -15.5279219171689, 
    305.572423599187, -16.2115007000807, -15.5279219171689, 46.4517189335822, 
    -32.7332962903881, -14.4788383060757, 305.572423599187, -32.7332962903881, 
    6201.01736874901, -396.155616392946, -16.2115007000807, -14.4788383060757, 
    -396.155616392946, 374.133975835633), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.146678704128526, -0.080987432534253
    ), logphi = c(0.495251320301795, -1.61484470300132)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_171 = structure(list(
    par = c(-0.326083162063233, -0.266528280878578, 0.524469102153977, 
    -1.57053624584094), value = 139.714951991982, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.701356779761, -14.649531159705, 
    305.241650593757, -34.3407284510988, -14.649531159705, 33.7080535288692, 
    -49.7545385869103, -11.5791555899136, 305.241650593757, -49.7545385869103, 
    5647.31486750247, -521.938468271088, -34.3407284510988, -11.5791555899136, 
    -521.938468271088, 379.170292582387), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326083162063233, -0.266528280878578
    ), logphi = c(0.524469102153977, -1.57053624584094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_172 = structure(list(
    par = c(-0.365843522160555, -0.0687022897704237, 0.509497493838387, 
    -1.48523415279727), value = 126.384671826115, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.923860218398, -6.85490391560961, 
    286.14902609192, -28.977807570385, -6.85490391560961, 48.916504653107, 
    -38.4149746430751, -15.0828057243757, 286.14902609192, -38.4149746430751, 
    4349.00152993833, -403.663811612276, -28.977807570385, -15.0828057243757, 
    -403.663811612276, 304.074593227455), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.365843522160555, -0.0687022897704237
    ), logphi = c(0.509497493838387, -1.48523415279727)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_173 = structure(list(
    par = c(-0.194669514498312, 0.0195171140616874, 0.51067850327229, 
    -1.59128467595364), value = 114.842722465962, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.597986901573, -13.8416174095823, 
    308.141836402598, -21.7845492045399, -13.8416174095823, 52.7864046979687, 
    -37.540672060743, -16.0095604861965, 308.141836402598, -37.540672060743, 
    5815.67343150979, -456.135215495479, -21.7845492045399, -16.0095604861965, 
    -456.135215495479, 369.827535710243), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.194669514498312, 0.0195171140616874
    ), logphi = c(0.51067850327229, -1.59128467595364)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_174 = structure(list(
    par = c(-0.37493216612026, 0.192478996193922, 0.502578774495642, 
    -1.59252760391192), value = 80.0161237606988, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.061550145503, 0.543607729497353, 
    323.698680656292, -26.3962046780364, 0.543607729497353, 74.6504935342784, 
    -27.4966315032543, -21.6514539363999, 323.698680656292, -27.4966315032543, 
    5681.50563248437, -492.096135275233, -26.3962046780364, -21.6514539363999, 
    -492.096135275233, 364.878858650997), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37493216612026, 0.192478996193922
    ), logphi = c(0.502578774495642, -1.59252760391192)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_175 = structure(list(
    par = c(-0.320033839257005, 0.116315852952745, 0.516175552608797, 
    -1.58245647334928), value = 95.356845564344, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.36916294745, -6.01382316745003, 
    318.017785453151, -28.7562434309052, -6.01382316745003, 66.1283978296012, 
    -38.6882817231538, -18.909309183357, 318.017785453151, -38.6882817231538, 
    5624.06020817718, -513.786140892591, -28.7562434309052, -18.909309183357, 
    -513.786140892591, 371.039538570983), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320033839257005, 0.116315852952745
    ), logphi = c(0.516175552608797, -1.58245647334928)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_176 = structure(list(
    par = c(-0.289427735581837, -0.0324204251572121, 0.501725896117142, 
    -1.60144540006849), value = 115.692956671326, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.893625598257, -10.8207425455475, 
    316.32072652954, -24.6772492609182, -10.8207425455475, 49.9459957943316, 
    -36.8769071776853, -16.4743611144047, 316.32072652954, -36.8769071776853, 
    5956.4186802028, -459.26411551811, -24.6772492609182, -16.4743611144047, 
    -459.26411551811, 373.303568593997), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289427735581837, -0.0324204251572121
    ), logphi = c(0.501725896117142, -1.60144540006849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_177 = structure(list(
    par = c(-0.204104039080741, -0.0532610645012942, 0.471416219533602, 
    -1.63059307951928), value = 104.142996563807, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.741806370277, -10.3207348622902, 
    309.761080220738, -12.1306954028455, -10.3207348622902, 49.2417790063371, 
    -22.1327592804244, -15.6563347317729, 309.761080220738, -22.1327592804244, 
    6347.73414969914, -338.879980326112, -12.1306954028455, -15.6563347317729, 
    -338.879980326112, 364.978700439167), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204104039080741, -0.0532610645012942
    ), logphi = c(0.471416219533602, -1.63059307951928)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_178 = structure(list(
    par = c(-0.380958394489643, 0.131173559087194, 0.524613430315331, 
    -1.62509751844014), value = 92.1180772253943, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.67957400824, -6.58810197506909, 
    336.859764367148, -35.0344263395641, -6.58810197506909, 66.8891307107344, 
    -46.322861365411, -20.0039054210066, 336.859764367148, -46.322861365411, 
    6302.39578620007, -607.958552009791, -35.0344263395641, -20.0039054210066, 
    -607.958552009791, 409.886157125783), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.380958394489643, 0.131173559087194
    ), logphi = c(0.524613430315331, -1.62509751844014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_179 = structure(list(
    par = c(-0.187614870482338, 0.136008369665277, 0.51018868421548, 
    -1.56352559193415), value = 102.135194595925, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.003635203418, -8.72612293889574, 
    300.598396769658, -19.5791140047419, -8.72612293889574, 67.0581909432144, 
    -32.4919115186617, -17.5311962120617, 300.598396769658, -32.4919115186617, 
    5346.50731579589, -434.898466597389, -19.5791140047419, -17.5311962120617, 
    -434.898466597389, 348.076460809921), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.187614870482338, 0.136008369665277
    ), logphi = c(0.51018868421548, -1.56352559193415)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_180 = structure(list(
    par = c(-0.304332737043707, -0.0176489567794126, 0.502400370618665, 
    -1.68482048574659), value = 85.2322590014472, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.826347908969, -12.0462235670971, 
    342.276664074603, -26.6053726392101, -12.0462235670971, 52.0424654730789, 
    -39.5599457760909, -17.3849020459471, 342.276664074603, -39.5599457760909, 
    7373.80390676634, -542.673302236452, -26.6053726392101, -17.3849020459471, 
    -542.673302236452, 428.238545300275), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304332737043707, -0.0176489567794126
    ), logphi = c(0.502400370618665, -1.68482048574659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_181 = structure(list(
    par = c(-0.265068587430109, 0.246355066064817, 0.514641360202843, 
    -1.6180707209864), value = 86.2384981231917, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.646540514818, -5.48800151634055, 
    326.49948747121, -24.0253282193237, -5.48800151634055, 75.6746938463948, 
    -30.4010713136904, -21.1583158513662, 326.49948747121, -30.4010713136904, 
    6107.47158643576, -527.717796328986, -24.0253282193237, -21.1583158513662, 
    -527.717796328986, 387.124025692742), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265068587430109, 0.246355066064817
    ), logphi = c(0.514641360202843, -1.6180707209864)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_182 = structure(list(
    par = c(-0.312737355338648, -0.280882575271035, 0.5318184661294, 
    -1.59714942504407), value = 137.849720084673, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.018305940201, -16.7948499480985, 
    310.941351159499, -35.9496352650979, -16.7948499480985, 31.8789629787375, 
    -53.9745322427621, -10.9478536458596, 310.941351159499, -53.9745322427621, 
    6086.30087089068, -568.950575939198, -35.9496352650979, -10.9478536458596, 
    -568.950575939198, 403.618970345576), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312737355338648, -0.280882575271035
    ), logphi = c(0.5318184661294, -1.59714942504407)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_183 = structure(list(
    par = c(-0.212492152595197, -0.0645005481281725, 0.501531121571956, 
    -1.64842689055383), value = 105.736920370275, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.988693544661, -13.9114440145249, 
    322.841493957782, -21.5781096670753, -13.9114440145249, 49.7396298761998, 
    -37.2254490876855, -15.4762800264052, 322.841493957782, -37.2254490876855, 
    6760.66821391785, -470.686487487271, -21.5781096670753, -15.4762800264052, 
    -470.686487487271, 402.421212950088), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212492152595197, -0.0645005481281725
    ), logphi = c(0.501531121571956, -1.64842689055383)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_184 = structure(list(
    par = c(-0.367434762276962, 0.128413108086375, 0.499856680916977, 
    -1.59808443752686), value = 90.2613382314387, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.477685055614, -2.33355393319812, 
    323.633714881311, -26.16052434945, -2.33355393319812, 67.1787464021634, 
    -29.9980487881157, -20.3883383438352, 323.633714881311, -29.9980487881157, 
    5796.90541190558, -481.779033869145, -26.16052434945, -20.3883383438352, 
    -481.779033869145, 367.603148827556), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.367434762276962, 0.128413108086375
    ), logphi = c(0.499856680916977, -1.59808443752686)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_185 = structure(list(
    par = c(-0.414275794206623, -0.0753127038708021, 0.513904099234788, 
    -1.56703609856395), value = 105.906102912622, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.684219622381, -7.32201697672963, 
    314.692044941722, -34.6347440114414, -7.32201697672963, 50.0471449420559, 
    -45.6174492313721, -16.0259866426316, 314.692044941722, -45.6174492313721, 
    5475.89258938785, -513.561076449065, -34.6347440114414, -16.0259866426316, 
    -513.561076449065, 367.50915280237), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.414275794206623, -0.0753127038708021
    ), logphi = c(0.513904099234788, -1.56703609856395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_186 = structure(list(
    par = c(-0.306140359999559, -0.228667602839136, 0.513712516726895, 
    -1.63234344576317), value = 123.115374569338, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.187891241509, -15.5151592835523, 
    321.931221694882, -30.9323824332353, -15.5151592835523, 35.9919792742858, 
    -47.9876052139616, -12.9878988950338, 321.931221694882, -47.9876052139616, 
    6594.40673010536, -529.9080089749, -30.9323824332353, -12.9878988950338, 
    -529.9080089749, 410.034055295938), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306140359999559, -0.228667602839136
    ), logphi = c(0.513712516726895, -1.63234344576317)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_187 = structure(list(
    par = c(-0.234388943153265, -0.0457398629666392, 0.500723237120159, 
    -1.73092696568852), value = 93.2897995420037, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.447859270456, -17.5426727899719, 
    347.821621485167, -23.0796354063756, -17.5426727899719, 44.4510742880766, 
    -38.7355101345577, -16.3069570859875, 347.821621485167, -38.7355101345577, 
    8282.93870144492, -544.147246653637, -23.0796354063756, -16.3069570859875, 
    -544.147246653637, 452.171458174888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234388943153265, -0.0457398629666392
    ), logphi = c(0.500723237120159, -1.73092696568852)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_188 = structure(list(
    par = c(-0.453038598798354, -0.195110819802357, 0.510607536930489, 
    -1.60246239036155), value = 120.08081188088, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.386858742979, -11.5985887099157, 
    323.311425226791, -37.1316945440014, -11.5985887099157, 36.7924526827323, 
    -49.5265316331484, -14.4477998631487, 323.311425226791, -49.5265316331484, 
    6071.25045862844, -545.458141356647, -37.1316945440014, -14.4477998631487, 
    -545.458141356647, 393.931132222747), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.453038598798354, -0.195110819802357
    ), logphi = c(0.510607536930489, -1.60246239036155)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_189 = structure(list(
    par = c(-0.203772471709363, -0.0300810979348573, 0.503109536142133, 
    -1.65521644039566), value = 112.412928187304, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.015712000717, -14.1663770421019, 
    325.068326453959, -21.2887419230867, -14.1663770421019, 51.5573326573815, 
    -36.9906164650047, -15.9447169245652, 325.068326453959, -36.9906164650047, 
    6867.30931823476, -480.450286188372, -21.2887419230867, -15.9447169245652, 
    -480.450286188372, 406.912993042852), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203772471709363, -0.0300810979348573
    ), logphi = c(0.503109536142133, -1.65521644039566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_190 = structure(list(
    par = c(-0.270545442430083, -0.0115068692701607, 0.49244759489394, 
    -1.65175781168055), value = 105.117328236178, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.10704682767, -12.1962685248889, 
    328.369992566024, -21.4608149402551, -12.1962685248889, 48.51810855655, 
    -32.0050346118705, -17.1745326618122, 328.369992566024, -32.0050346118705, 
    6748.39324850041, -463.173898081592, -21.4608149402551, -17.1745326618122, 
    -463.173898081592, 397.154884332451), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270545442430083, -0.0115068692701607
    ), logphi = c(0.49244759489394, -1.65175781168055)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_191 = structure(list(
    par = c(-0.349120249649049, -0.19386121024691, 0.484845251227325, 
    -1.6123143160074), value = 112.336013658273, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.724418811198, -10.0730266048288, 
    317.893872363584, -24.502077526023, -10.0730266048288, 39.2234916191114, 
    -34.6124906656087, -14.9106426405865, 317.893872363584, -34.6124906656087, 
    6135.08832965337, -416.461377421129, -24.502077526023, -14.9106426405865, 
    -416.461377421129, 370.849630773051), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349120249649049, -0.19386121024691
    ), logphi = c(0.484845251227325, -1.6123143160074)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_192 = structure(list(
    par = c(-0.257752347324139, -0.0530413639474701, 0.484564860114724, 
    -1.61640285576961), value = 107.161260475851, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.707024247087, -10.4186460312405, 
    314.330483043079, -18.4058084045091, -10.4186460312405, 48.5799911018603, 
    -28.9101345209986, -16.2185171443952, 314.330483043079, -28.9101345209986, 
    6151.64970437476, -394.906183640131, -18.4058084045091, -16.2185171443952, 
    -394.906183640131, 367.736970492416), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257752347324139, -0.0530413639474701
    ), logphi = c(0.484564860114724, -1.61640285576961)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_193 = structure(list(
    par = c(-0.226978939482208, 0.0134066803459155, 0.524624408902867, 
    -1.55549892854743), value = 118.148831257585, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.638940330854, -12.3021586659888, 
    302.113198834775, -27.2528657738746, -12.3021586659888, 56.0635861468484, 
    -43.5056385761357, -15.370851347285, 302.113198834775, -43.5056385761357, 
    5312.49631638531, -488.474405011985, -27.2528657738746, -15.370851347285, 
    -488.474405011985, 358.834424080356), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226978939482208, 0.0134066803459155
    ), logphi = c(0.524624408902867, -1.55549892854743)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_194 = structure(list(
    par = c(-0.265113338245889, 0.0296792271777376, 0.498300014392658, 
    -1.66636236280303), value = 101.437123706932, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.943387930429, -12.4471934803694, 
    334.192663022037, -22.5826011792662, -12.4471934803694, 52.3450519978041, 
    -33.6584676929874, -17.813476063111, 334.192663022037, -33.6584676929874, 
    7003.12503645151, -497.992257354696, -22.5826011792662, -17.813476063111, 
    -497.992257354696, 410.252489608354), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265113338245889, 0.0296792271777376
    ), logphi = c(0.498300014392658, -1.66636236280303)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_195 = structure(list(
    par = c(-0.133167055084979, -0.085343572155015, 0.499913962125847, 
    -1.63657484014597), value = 118.678550946257, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.164894577931, -17.1244731994591, 
    311.305244860449, -17.1348315483044, -17.1244731994591, 45.9586767469489, 
    -34.9710004208248, -14.3393092688626, 311.305244860449, -34.9710004208248, 
    6578.88036464271, -425.992188519686, -17.1348315483044, -14.3393092688626, 
    -425.992188519686, 391.801767559485), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.133167055084979, -0.085343572155015
    ), logphi = c(0.499913962125847, -1.63657484014597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_196 = structure(list(
    par = c(-0.270554840199153, -0.0755269890805627, 0.497228590296176, 
    -1.61917470643014), value = 117.755018844009, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.546935728555, -12.3439945944881, 
    318.397826482908, -23.0817451427612, -12.3439945944881, 46.3402799759649, 
    -35.9975420494152, -15.8090395849797, 318.397826482908, -35.9975420494152, 
    6250.36559578618, -449.405983879103, -23.0817451427612, -15.8090395849797, 
    -449.405983879103, 381.664300977747), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270554840199153, -0.0755269890805627
    ), logphi = c(0.497228590296176, -1.61917470643014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_197 = structure(list(
    par = c(-0.262743220102794, -0.0905146232401061, 0.517214525518521, 
    -1.60944116883236), value = 129.107353538705, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.235210519264, -15.24275645437, 
    317.197270362612, -28.4578064935204, -15.24275645437, 43.624957285715, 
    -45.5110184418572, -14.7047231529029, 317.197270362612, -45.5110184418572, 
    6162.164259365, -513.780214340898, -28.4578064935204, -14.7047231529029, 
    -513.780214340898, 392.559949617066), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262743220102794, -0.0905146232401061
    ), logphi = c(0.517214525518521, -1.60944116883236)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_198 = structure(list(
    par = c(-0.442424111411397, 0.0106055718192189, 0.517073545558577, 
    -1.55749705736064), value = 112.308368219312, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.928714182369, -6.16223118754533, 
    315.81767774469, -36.1458834969852, -6.16223118754533, 54.4205391967978, 
    -44.9209864754607, -17.7295016037249, 315.81767774469, -44.9209864754607, 
    5299.89636841677, -528.259783266094, -36.1458834969852, -17.7295016037249, 
    -528.259783266094, 363.29915050004), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.442424111411397, 0.0106055718192189
    ), logphi = c(0.517073545558577, -1.55749705736064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_199 = structure(list(
    par = c(-0.182421295844438, -0.0489060817226234, 0.509967989678909, 
    -1.62379963206061), value = 127.70762576528, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.14226084501, -16.1860606979758, 
    315.009166349967, -21.9952913571575, -16.1860606979758, 47.2863781730837, 
    -39.6393109234339, -15.0618162102489, 315.009166349967, -39.6393109234339, 
    6367.03581301745, -472.474900202968, -21.9952913571575, -15.0618162102489, 
    -472.474900202968, 391.902774154573), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.182421295844438, -0.0489060817226234
    ), logphi = c(0.509967989678909, -1.62379963206061)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_200 = structure(list(
    par = c(-0.200164070242019, 0.00954952626326558, 0.498239686394715, 
    -1.70779395670115), value = 110.026726532666, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.419856419981, -16.2512695283112, 
    339.403189581589, -19.7884266555093, -16.2512695283112, 49.8680586673572, 
    -33.6395281337332, -16.8659276127414, 339.403189581589, -33.6395281337332, 
    7792.9350873589, -505.801706015774, -19.7884266555093, -16.8659276127414, 
    -505.801706015774, 433.970171670239), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.200164070242019, 0.00954952626326558
    ), logphi = c(0.498239686394715, -1.70779395670115)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi"))), .Names = c("n_30_1", 
"n_30_2", "n_30_3", "n_30_4", "n_30_5", "n_30_6", "n_30_7", "n_30_8", 
"n_30_9", "n_30_10", "n_30_11", "n_30_12", "n_30_13", "n_30_14", 
"n_30_15", "n_30_16", "n_30_17", "n_30_18", "n_30_19", "n_30_20", 
"n_30_21", "n_30_22", "n_30_23", "n_30_24", "n_30_25", "n_30_26", 
"n_30_27", "n_30_28", "n_30_29", "n_30_30", "n_30_31", "n_30_32", 
"n_30_33", "n_30_34", "n_30_35", "n_30_36", "n_30_37", "n_30_38", 
"n_30_39", "n_30_40", "n_30_41", "n_30_42", "n_30_43", "n_30_44", 
"n_30_45", "n_30_46", "n_30_47", "n_30_48", "n_30_49", "n_30_50", 
"n_30_51", "n_30_52", "n_30_53", "n_30_54", "n_30_55", "n_30_56", 
"n_30_57", "n_30_58", "n_30_59", "n_30_60", "n_30_61", "n_30_62", 
"n_30_63", "n_30_64", "n_30_65", "n_30_66", "n_30_67", "n_30_68", 
"n_30_69", "n_30_70", "n_30_71", "n_30_72", "n_30_73", "n_30_74", 
"n_30_75", "n_30_76", "n_30_77", "n_30_78", "n_30_79", "n_30_80", 
"n_30_81", "n_30_82", "n_30_83", "n_30_84", "n_30_85", "n_30_86", 
"n_30_87", "n_30_88", "n_30_89", "n_30_90", "n_30_91", "n_30_92", 
"n_30_93", "n_30_94", "n_30_95", "n_30_96", "n_30_97", "n_30_98", 
"n_30_99", "n_30_100", "n_30_101", "n_30_102", "n_30_103", "n_30_104", 
"n_30_105", "n_30_106", "n_30_107", "n_30_108", "n_30_109", "n_30_110", 
"n_30_111", "n_30_112", "n_30_113", "n_30_114", "n_30_115", "n_30_116", 
"n_30_117", "n_30_118", "n_30_119", "n_30_120", "n_30_121", "n_30_122", 
"n_30_123", "n_30_124", "n_30_125", "n_30_126", "n_30_127", "n_30_128", 
"n_30_129", "n_30_130", "n_30_131", "n_30_132", "n_30_133", "n_30_134", 
"n_30_135", "n_30_136", "n_30_137", "n_30_138", "n_30_139", "n_30_140", 
"n_30_141", "n_30_142", "n_30_143", "n_30_144", "n_30_145", "n_30_146", 
"n_30_147", "n_30_148", "n_30_149", "n_30_150", "n_30_151", "n_30_152", 
"n_30_153", "n_30_154", "n_30_155", "n_30_156", "n_30_157", "n_30_158", 
"n_30_159", "n_30_160", "n_30_161", "n_30_162", "n_30_163", "n_30_164", 
"n_30_165", "n_30_166", "n_30_167", "n_30_168", "n_30_169", "n_30_170", 
"n_30_171", "n_30_172", "n_30_173", "n_30_174", "n_30_175", "n_30_176", 
"n_30_177", "n_30_178", "n_30_179", "n_30_180", "n_30_181", "n_30_182", 
"n_30_183", "n_30_184", "n_30_185", "n_30_186", "n_30_187", "n_30_188", 
"n_30_189", "n_30_190", "n_30_191", "n_30_192", "n_30_193", "n_30_194", 
"n_30_195", "n_30_196", "n_30_197", "n_30_198", "n_30_199", "n_30_200", 
"n_60_1", "n_60_2", "n_60_3", "n_60_4", "n_60_5", "n_60_6", "n_60_7", 
"n_60_8", "n_60_9", "n_60_10", "n_60_11", "n_60_12", "n_60_13", 
"n_60_14", "n_60_15", "n_60_16", "n_60_17", "n_60_18", "n_60_19", 
"n_60_20", "n_60_21", "n_60_22", "n_60_23", "n_60_24", "n_60_25", 
"n_60_26", "n_60_27", "n_60_28", "n_60_29", "n_60_30", "n_60_31", 
"n_60_32", "n_60_33", "n_60_34", "n_60_35", "n_60_36", "n_60_37", 
"n_60_38", "n_60_39", "n_60_40", "n_60_41", "n_60_42", "n_60_43", 
"n_60_44", "n_60_45", "n_60_46", "n_60_47", "n_60_48", "n_60_49", 
"n_60_50", "n_60_51", "n_60_52", "n_60_53", "n_60_54", "n_60_55", 
"n_60_56", "n_60_57", "n_60_58", "n_60_59", "n_60_60", "n_60_61", 
"n_60_62", "n_60_63", "n_60_64", "n_60_65", "n_60_66", "n_60_67", 
"n_60_68", "n_60_69", "n_60_70", "n_60_71", "n_60_72", "n_60_73", 
"n_60_74", "n_60_75", "n_60_76", "n_60_77", "n_60_78", "n_60_79", 
"n_60_80", "n_60_81", "n_60_82", "n_60_83", "n_60_84", "n_60_85", 
"n_60_86", "n_60_87", "n_60_88", "n_60_89", "n_60_90", "n_60_91", 
"n_60_92", "n_60_93", "n_60_94", "n_60_95", "n_60_96", "n_60_97", 
"n_60_98", "n_60_99", "n_60_100", "n_60_101", "n_60_102", "n_60_103", 
"n_60_104", "n_60_105", "n_60_106", "n_60_107", "n_60_108", "n_60_109", 
"n_60_110", "n_60_111", "n_60_112", "n_60_113", "n_60_114", "n_60_115", 
"n_60_116", "n_60_117", "n_60_118", "n_60_119", "n_60_120", "n_60_121", 
"n_60_122", "n_60_123", "n_60_124", "n_60_125", "n_60_126", "n_60_127", 
"n_60_128", "n_60_129", "n_60_130", "n_60_131", "n_60_132", "n_60_133", 
"n_60_134", "n_60_135", "n_60_136", "n_60_137", "n_60_138", "n_60_139", 
"n_60_140", "n_60_141", "n_60_142", "n_60_143", "n_60_144", "n_60_145", 
"n_60_146", "n_60_147", "n_60_148", "n_60_149", "n_60_150", "n_60_151", 
"n_60_152", "n_60_153", "n_60_154", "n_60_155", "n_60_156", "n_60_157", 
"n_60_158", "n_60_159", "n_60_160", "n_60_161", "n_60_162", "n_60_163", 
"n_60_164", "n_60_165", "n_60_166", "n_60_167", "n_60_168", "n_60_169", 
"n_60_170", "n_60_171", "n_60_172", "n_60_173", "n_60_174", "n_60_175", 
"n_60_176", "n_60_177", "n_60_178", "n_60_179", "n_60_180", "n_60_181", 
"n_60_182", "n_60_183", "n_60_184", "n_60_185", "n_60_186", "n_60_187", 
"n_60_188", "n_60_189", "n_60_190", "n_60_191", "n_60_192", "n_60_193", 
"n_60_194", "n_60_195", "n_60_196", "n_60_197", "n_60_198", "n_60_199", 
"n_60_200", "n_90_1", "n_90_2", "n_90_3", "n_90_4", "n_90_5", 
"n_90_6", "n_90_7", "n_90_8", "n_90_9", "n_90_10", "n_90_11", 
"n_90_12", "n_90_13", "n_90_14", "n_90_15", "n_90_16", "n_90_17", 
"n_90_18", "n_90_19", "n_90_20", "n_90_21", "n_90_22", "n_90_23", 
"n_90_24", "n_90_25", "n_90_26", "n_90_27", "n_90_28", "n_90_29", 
"n_90_30", "n_90_31", "n_90_32", "n_90_33", "n_90_34", "n_90_35", 
"n_90_36", "n_90_37", "n_90_38", "n_90_39", "n_90_40", "n_90_41", 
"n_90_42", "n_90_43", "n_90_44", "n_90_45", "n_90_46", "n_90_47", 
"n_90_48", "n_90_49", "n_90_50", "n_90_51", "n_90_52", "n_90_53", 
"n_90_54", "n_90_55", "n_90_56", "n_90_57", "n_90_58", "n_90_59", 
"n_90_60", "n_90_61", "n_90_62", "n_90_63", "n_90_64", "n_90_65", 
"n_90_66", "n_90_67", "n_90_68", "n_90_69", "n_90_70", "n_90_71", 
"n_90_72", "n_90_73", "n_90_74", "n_90_75", "n_90_76", "n_90_77", 
"n_90_78", "n_90_79", "n_90_80", "n_90_81", "n_90_82", "n_90_83", 
"n_90_84", "n_90_85", "n_90_86", "n_90_87", "n_90_88", "n_90_89", 
"n_90_90", "n_90_91", "n_90_92", "n_90_93", "n_90_94", "n_90_95", 
"n_90_96", "n_90_97", "n_90_98", "n_90_99", "n_90_100", "n_90_101", 
"n_90_102", "n_90_103", "n_90_104", "n_90_105", "n_90_106", "n_90_107", 
"n_90_108", "n_90_109", "n_90_110", "n_90_111", "n_90_112", "n_90_113", 
"n_90_114", "n_90_115", "n_90_116", "n_90_117", "n_90_118", "n_90_119", 
"n_90_120", "n_90_121", "n_90_122", "n_90_123", "n_90_124", "n_90_125", 
"n_90_126", "n_90_127", "n_90_128", "n_90_129", "n_90_130", "n_90_131", 
"n_90_132", "n_90_133", "n_90_134", "n_90_135", "n_90_136", "n_90_137", 
"n_90_138", "n_90_139", "n_90_140", "n_90_141", "n_90_142", "n_90_143", 
"n_90_144", "n_90_145", "n_90_146", "n_90_147", "n_90_148", "n_90_149", 
"n_90_150", "n_90_151", "n_90_152", "n_90_153", "n_90_154", "n_90_155", 
"n_90_156", "n_90_157", "n_90_158", "n_90_159", "n_90_160", "n_90_161", 
"n_90_162", "n_90_163", "n_90_164", "n_90_165", "n_90_166", "n_90_167", 
"n_90_168", "n_90_169", "n_90_170", "n_90_171", "n_90_172", "n_90_173", 
"n_90_174", "n_90_175", "n_90_176", "n_90_177", "n_90_178", "n_90_179", 
"n_90_180", "n_90_181", "n_90_182", "n_90_183", "n_90_184", "n_90_185", 
"n_90_186", "n_90_187", "n_90_188", "n_90_189", "n_90_190", "n_90_191", 
"n_90_192", "n_90_193", "n_90_194", "n_90_195", "n_90_196", "n_90_197", 
"n_90_198", "n_90_199", "n_90_200", "n_120_1", "n_120_2", "n_120_3", 
"n_120_4", "n_120_5", "n_120_6", "n_120_7", "n_120_8", "n_120_9", 
"n_120_10", "n_120_11", "n_120_12", "n_120_13", "n_120_14", "n_120_15", 
"n_120_16", "n_120_17", "n_120_18", "n_120_19", "n_120_20", "n_120_21", 
"n_120_22", "n_120_23", "n_120_24", "n_120_25", "n_120_26", "n_120_27", 
"n_120_28", "n_120_29", "n_120_30", "n_120_31", "n_120_32", "n_120_33", 
"n_120_34", "n_120_35", "n_120_36", "n_120_37", "n_120_38", "n_120_39", 
"n_120_40", "n_120_41", "n_120_42", "n_120_43", "n_120_44", "n_120_45", 
"n_120_46", "n_120_47", "n_120_48", "n_120_49", "n_120_50", "n_120_51", 
"n_120_52", "n_120_53", "n_120_54", "n_120_55", "n_120_56", "n_120_57", 
"n_120_58", "n_120_59", "n_120_60", "n_120_61", "n_120_62", "n_120_63", 
"n_120_64", "n_120_65", "n_120_66", "n_120_67", "n_120_68", "n_120_69", 
"n_120_70", "n_120_71", "n_120_72", "n_120_73", "n_120_74", "n_120_75", 
"n_120_76", "n_120_77", "n_120_78", "n_120_79", "n_120_80", "n_120_81", 
"n_120_82", "n_120_83", "n_120_84", "n_120_85", "n_120_86", "n_120_87", 
"n_120_88", "n_120_89", "n_120_90", "n_120_91", "n_120_92", "n_120_93", 
"n_120_94", "n_120_95", "n_120_96", "n_120_97", "n_120_98", "n_120_99", 
"n_120_100", "n_120_101", "n_120_102", "n_120_103", "n_120_104", 
"n_120_105", "n_120_106", "n_120_107", "n_120_108", "n_120_109", 
"n_120_110", "n_120_111", "n_120_112", "n_120_113", "n_120_114", 
"n_120_115", "n_120_116", "n_120_117", "n_120_118", "n_120_119", 
"n_120_120", "n_120_121", "n_120_122", "n_120_123", "n_120_124", 
"n_120_125", "n_120_126", "n_120_127", "n_120_128", "n_120_129", 
"n_120_130", "n_120_131", "n_120_132", "n_120_133", "n_120_134", 
"n_120_135", "n_120_136", "n_120_137", "n_120_138", "n_120_139", 
"n_120_140", "n_120_141", "n_120_142", "n_120_143", "n_120_144", 
"n_120_145", "n_120_146", "n_120_147", "n_120_148", "n_120_149", 
"n_120_150", "n_120_151", "n_120_152", "n_120_153", "n_120_154", 
"n_120_155", "n_120_156", "n_120_157", "n_120_158", "n_120_159", 
"n_120_160", "n_120_161", "n_120_162", "n_120_163", "n_120_164", 
"n_120_165", "n_120_166", "n_120_167", "n_120_168", "n_120_169", 
"n_120_170", "n_120_171", "n_120_172", "n_120_173", "n_120_174", 
"n_120_175", "n_120_176", "n_120_177", "n_120_178", "n_120_179", 
"n_120_180", "n_120_181", "n_120_182", "n_120_183", "n_120_184", 
"n_120_185", "n_120_186", "n_120_187", "n_120_188", "n_120_189", 
"n_120_190", "n_120_191", "n_120_192", "n_120_193", "n_120_194", 
"n_120_195", "n_120_196", "n_120_197", "n_120_198", "n_120_199", 
"n_120_200", "n_150_1", "n_150_2", "n_150_3", "n_150_4", "n_150_5", 
"n_150_6", "n_150_7", "n_150_8", "n_150_9", "n_150_10", "n_150_11", 
"n_150_12", "n_150_13", "n_150_14", "n_150_15", "n_150_16", "n_150_17", 
"n_150_18", "n_150_19", "n_150_20", "n_150_21", "n_150_22", "n_150_23", 
"n_150_24", "n_150_25", "n_150_26", "n_150_27", "n_150_28", "n_150_29", 
"n_150_30", "n_150_31", "n_150_32", "n_150_33", "n_150_34", "n_150_35", 
"n_150_36", "n_150_37", "n_150_38", "n_150_39", "n_150_40", "n_150_41", 
"n_150_42", "n_150_43", "n_150_44", "n_150_45", "n_150_46", "n_150_47", 
"n_150_48", "n_150_49", "n_150_50", "n_150_51", "n_150_52", "n_150_53", 
"n_150_54", "n_150_55", "n_150_56", "n_150_57", "n_150_58", "n_150_59", 
"n_150_60", "n_150_61", "n_150_62", "n_150_63", "n_150_64", "n_150_65", 
"n_150_66", "n_150_67", "n_150_68", "n_150_69", "n_150_70", "n_150_71", 
"n_150_72", "n_150_73", "n_150_74", "n_150_75", "n_150_76", "n_150_77", 
"n_150_78", "n_150_79", "n_150_80", "n_150_81", "n_150_82", "n_150_83", 
"n_150_84", "n_150_85", "n_150_86", "n_150_87", "n_150_88", "n_150_89", 
"n_150_90", "n_150_91", "n_150_92", "n_150_93", "n_150_94", "n_150_95", 
"n_150_96", "n_150_97", "n_150_98", "n_150_99", "n_150_100", 
"n_150_101", "n_150_102", "n_150_103", "n_150_104", "n_150_105", 
"n_150_106", "n_150_107", "n_150_108", "n_150_109", "n_150_110", 
"n_150_111", "n_150_112", "n_150_113", "n_150_114", "n_150_115", 
"n_150_116", "n_150_117", "n_150_118", "n_150_119", "n_150_120", 
"n_150_121", "n_150_122", "n_150_123", "n_150_124", "n_150_125", 
"n_150_126", "n_150_127", "n_150_128", "n_150_129", "n_150_130", 
"n_150_131", "n_150_132", "n_150_133", "n_150_134", "n_150_135", 
"n_150_136", "n_150_137", "n_150_138", "n_150_139", "n_150_140", 
"n_150_141", "n_150_142", "n_150_143", "n_150_144", "n_150_145", 
"n_150_146", "n_150_147", "n_150_148", "n_150_149", "n_150_150", 
"n_150_151", "n_150_152", "n_150_153", "n_150_154", "n_150_155", 
"n_150_156", "n_150_157", "n_150_158", "n_150_159", "n_150_160", 
"n_150_161", "n_150_162", "n_150_163", "n_150_164", "n_150_165", 
"n_150_166", "n_150_167", "n_150_168", "n_150_169", "n_150_170", 
"n_150_171", "n_150_172", "n_150_173", "n_150_174", "n_150_175", 
"n_150_176", "n_150_177", "n_150_178", "n_150_179", "n_150_180", 
"n_150_181", "n_150_182", "n_150_183", "n_150_184", "n_150_185", 
"n_150_186", "n_150_187", "n_150_188", "n_150_189", "n_150_190", 
"n_150_191", "n_150_192", "n_150_193", "n_150_194", "n_150_195", 
"n_150_196", "n_150_197", "n_150_198", "n_150_199", "n_150_200", 
"n_180_1", "n_180_2", "n_180_3", "n_180_4", "n_180_5", "n_180_6", 
"n_180_7", "n_180_8", "n_180_9", "n_180_10", "n_180_11", "n_180_12", 
"n_180_13", "n_180_14", "n_180_15", "n_180_16", "n_180_17", "n_180_18", 
"n_180_19", "n_180_20", "n_180_21", "n_180_22", "n_180_23", "n_180_24", 
"n_180_25", "n_180_26", "n_180_27", "n_180_28", "n_180_29", "n_180_30", 
"n_180_31", "n_180_32", "n_180_33", "n_180_34", "n_180_35", "n_180_36", 
"n_180_37", "n_180_38", "n_180_39", "n_180_40", "n_180_41", "n_180_42", 
"n_180_43", "n_180_44", "n_180_45", "n_180_46", "n_180_47", "n_180_48", 
"n_180_49", "n_180_50", "n_180_51", "n_180_52", "n_180_53", "n_180_54", 
"n_180_55", "n_180_56", "n_180_57", "n_180_58", "n_180_59", "n_180_60", 
"n_180_61", "n_180_62", "n_180_63", "n_180_64", "n_180_65", "n_180_66", 
"n_180_67", "n_180_68", "n_180_69", "n_180_70", "n_180_71", "n_180_72", 
"n_180_73", "n_180_74", "n_180_75", "n_180_76", "n_180_77", "n_180_78", 
"n_180_79", "n_180_80", "n_180_81", "n_180_82", "n_180_83", "n_180_84", 
"n_180_85", "n_180_86", "n_180_87", "n_180_88", "n_180_89", "n_180_90", 
"n_180_91", "n_180_92", "n_180_93", "n_180_94", "n_180_95", "n_180_96", 
"n_180_97", "n_180_98", "n_180_99", "n_180_100", "n_180_101", 
"n_180_102", "n_180_103", "n_180_104", "n_180_105", "n_180_106", 
"n_180_107", "n_180_108", "n_180_109", "n_180_110", "n_180_111", 
"n_180_112", "n_180_113", "n_180_114", "n_180_115", "n_180_116", 
"n_180_117", "n_180_118", "n_180_119", "n_180_120", "n_180_121", 
"n_180_122", "n_180_123", "n_180_124", "n_180_125", "n_180_126", 
"n_180_127", "n_180_128", "n_180_129", "n_180_130", "n_180_131", 
"n_180_132", "n_180_133", "n_180_134", "n_180_135", "n_180_136", 
"n_180_137", "n_180_138", "n_180_139", "n_180_140", "n_180_141", 
"n_180_142", "n_180_143", "n_180_144", "n_180_145", "n_180_146", 
"n_180_147", "n_180_148", "n_180_149", "n_180_150", "n_180_151", 
"n_180_152", "n_180_153", "n_180_154", "n_180_155", "n_180_156", 
"n_180_157", "n_180_158", "n_180_159", "n_180_160", "n_180_161", 
"n_180_162", "n_180_163", "n_180_164", "n_180_165", "n_180_166", 
"n_180_167", "n_180_168", "n_180_169", "n_180_170", "n_180_171", 
"n_180_172", "n_180_173", "n_180_174", "n_180_175", "n_180_176", 
"n_180_177", "n_180_178", "n_180_179", "n_180_180", "n_180_181", 
"n_180_182", "n_180_183", "n_180_184", "n_180_185", "n_180_186", 
"n_180_187", "n_180_188", "n_180_189", "n_180_190", "n_180_191", 
"n_180_192", "n_180_193", "n_180_194", "n_180_195", "n_180_196", 
"n_180_197", "n_180_198", "n_180_199", "n_180_200", "n_210_1", 
"n_210_2", "n_210_3", "n_210_4", "n_210_5", "n_210_6", "n_210_7", 
"n_210_8", "n_210_9", "n_210_10", "n_210_11", "n_210_12", "n_210_13", 
"n_210_14", "n_210_15", "n_210_16", "n_210_17", "n_210_18", "n_210_19", 
"n_210_20", "n_210_21", "n_210_22", "n_210_23", "n_210_24", "n_210_25", 
"n_210_26", "n_210_27", "n_210_28", "n_210_29", "n_210_30", "n_210_31", 
"n_210_32", "n_210_33", "n_210_34", "n_210_35", "n_210_36", "n_210_37", 
"n_210_38", "n_210_39", "n_210_40", "n_210_41", "n_210_42", "n_210_43", 
"n_210_44", "n_210_45", "n_210_46", "n_210_47", "n_210_48", "n_210_49", 
"n_210_50", "n_210_51", "n_210_52", "n_210_53", "n_210_54", "n_210_55", 
"n_210_56", "n_210_57", "n_210_58", "n_210_59", "n_210_60", "n_210_61", 
"n_210_62", "n_210_63", "n_210_64", "n_210_65", "n_210_66", "n_210_67", 
"n_210_68", "n_210_69", "n_210_70", "n_210_71", "n_210_72", "n_210_73", 
"n_210_74", "n_210_75", "n_210_76", "n_210_77", "n_210_78", "n_210_79", 
"n_210_80", "n_210_81", "n_210_82", "n_210_83", "n_210_84", "n_210_85", 
"n_210_86", "n_210_87", "n_210_88", "n_210_89", "n_210_90", "n_210_91", 
"n_210_92", "n_210_93", "n_210_94", "n_210_95", "n_210_96", "n_210_97", 
"n_210_98", "n_210_99", "n_210_100", "n_210_101", "n_210_102", 
"n_210_103", "n_210_104", "n_210_105", "n_210_106", "n_210_107", 
"n_210_108", "n_210_109", "n_210_110", "n_210_111", "n_210_112", 
"n_210_113", "n_210_114", "n_210_115", "n_210_116", "n_210_117", 
"n_210_118", "n_210_119", "n_210_120", "n_210_121", "n_210_122", 
"n_210_123", "n_210_124", "n_210_125", "n_210_126", "n_210_127", 
"n_210_128", "n_210_129", "n_210_130", "n_210_131", "n_210_132", 
"n_210_133", "n_210_134", "n_210_135", "n_210_136", "n_210_137", 
"n_210_138", "n_210_139", "n_210_140", "n_210_141", "n_210_142", 
"n_210_143", "n_210_144", "n_210_145", "n_210_146", "n_210_147", 
"n_210_148", "n_210_149", "n_210_150", "n_210_151", "n_210_152", 
"n_210_153", "n_210_154", "n_210_155", "n_210_156", "n_210_157", 
"n_210_158", "n_210_159", "n_210_160", "n_210_161", "n_210_162", 
"n_210_163", "n_210_164", "n_210_165", "n_210_166", "n_210_167", 
"n_210_168", "n_210_169", "n_210_170", "n_210_171", "n_210_172", 
"n_210_173", "n_210_174", "n_210_175", "n_210_176", "n_210_177", 
"n_210_178", "n_210_179", "n_210_180", "n_210_181", "n_210_182", 
"n_210_183", "n_210_184", "n_210_185", "n_210_186", "n_210_187", 
"n_210_188", "n_210_189", "n_210_190", "n_210_191", "n_210_192", 
"n_210_193", "n_210_194", "n_210_195", "n_210_196", "n_210_197", 
"n_210_198", "n_210_199", "n_210_200", "n_240_1", "n_240_2", 
"n_240_3", "n_240_4", "n_240_5", "n_240_6", "n_240_7", "n_240_8", 
"n_240_9", "n_240_10", "n_240_11", "n_240_12", "n_240_13", "n_240_14", 
"n_240_15", "n_240_16", "n_240_17", "n_240_18", "n_240_19", "n_240_20", 
"n_240_21", "n_240_22", "n_240_23", "n_240_24", "n_240_25", "n_240_26", 
"n_240_27", "n_240_28", "n_240_29", "n_240_30", "n_240_31", "n_240_32", 
"n_240_33", "n_240_34", "n_240_35", "n_240_36", "n_240_37", "n_240_38", 
"n_240_39", "n_240_40", "n_240_41", "n_240_42", "n_240_43", "n_240_44", 
"n_240_45", "n_240_46", "n_240_47", "n_240_48", "n_240_49", "n_240_50", 
"n_240_51", "n_240_52", "n_240_53", "n_240_54", "n_240_55", "n_240_56", 
"n_240_57", "n_240_58", "n_240_59", "n_240_60", "n_240_61", "n_240_62", 
"n_240_63", "n_240_64", "n_240_65", "n_240_66", "n_240_67", "n_240_68", 
"n_240_69", "n_240_70", "n_240_71", "n_240_72", "n_240_73", "n_240_74", 
"n_240_75", "n_240_76", "n_240_77", "n_240_78", "n_240_79", "n_240_80", 
"n_240_81", "n_240_82", "n_240_83", "n_240_84", "n_240_85", "n_240_86", 
"n_240_87", "n_240_88", "n_240_89", "n_240_90", "n_240_91", "n_240_92", 
"n_240_93", "n_240_94", "n_240_95", "n_240_96", "n_240_97", "n_240_98", 
"n_240_99", "n_240_100", "n_240_101", "n_240_102", "n_240_103", 
"n_240_104", "n_240_105", "n_240_106", "n_240_107", "n_240_108", 
"n_240_109", "n_240_110", "n_240_111", "n_240_112", "n_240_113", 
"n_240_114", "n_240_115", "n_240_116", "n_240_117", "n_240_118", 
"n_240_119", "n_240_120", "n_240_121", "n_240_122", "n_240_123", 
"n_240_124", "n_240_125", "n_240_126", "n_240_127", "n_240_128", 
"n_240_129", "n_240_130", "n_240_131", "n_240_132", "n_240_133", 
"n_240_134", "n_240_135", "n_240_136", "n_240_137", "n_240_138", 
"n_240_139", "n_240_140", "n_240_141", "n_240_142", "n_240_143", 
"n_240_144", "n_240_145", "n_240_146", "n_240_147", "n_240_148", 
"n_240_149", "n_240_150", "n_240_151", "n_240_152", "n_240_153", 
"n_240_154", "n_240_155", "n_240_156", "n_240_157", "n_240_158", 
"n_240_159", "n_240_160", "n_240_161", "n_240_162", "n_240_163", 
"n_240_164", "n_240_165", "n_240_166", "n_240_167", "n_240_168", 
"n_240_169", "n_240_170", "n_240_171", "n_240_172", "n_240_173", 
"n_240_174", "n_240_175", "n_240_176", "n_240_177", "n_240_178", 
"n_240_179", "n_240_180", "n_240_181", "n_240_182", "n_240_183", 
"n_240_184", "n_240_185", "n_240_186", "n_240_187", "n_240_188", 
"n_240_189", "n_240_190", "n_240_191", "n_240_192", "n_240_193", 
"n_240_194", "n_240_195", "n_240_196", "n_240_197", "n_240_198", 
"n_240_199", "n_240_200", "n_270_1", "n_270_2", "n_270_3", "n_270_4", 
"n_270_5", "n_270_6", "n_270_7", "n_270_8", "n_270_9", "n_270_10", 
"n_270_11", "n_270_12", "n_270_13", "n_270_14", "n_270_15", "n_270_16", 
"n_270_17", "n_270_18", "n_270_19", "n_270_20", "n_270_21", "n_270_22", 
"n_270_23", "n_270_24", "n_270_25", "n_270_26", "n_270_27", "n_270_28", 
"n_270_29", "n_270_30", "n_270_31", "n_270_32", "n_270_33", "n_270_34", 
"n_270_35", "n_270_36", "n_270_37", "n_270_38", "n_270_39", "n_270_40", 
"n_270_41", "n_270_42", "n_270_43", "n_270_44", "n_270_45", "n_270_46", 
"n_270_47", "n_270_48", "n_270_49", "n_270_50", "n_270_51", "n_270_52", 
"n_270_53", "n_270_54", "n_270_55", "n_270_56", "n_270_57", "n_270_58", 
"n_270_59", "n_270_60", "n_270_61", "n_270_62", "n_270_63", "n_270_64", 
"n_270_65", "n_270_66", "n_270_67", "n_270_68", "n_270_69", "n_270_70", 
"n_270_71", "n_270_72", "n_270_73", "n_270_74", "n_270_75", "n_270_76", 
"n_270_77", "n_270_78", "n_270_79", "n_270_80", "n_270_81", "n_270_82", 
"n_270_83", "n_270_84", "n_270_85", "n_270_86", "n_270_87", "n_270_88", 
"n_270_89", "n_270_90", "n_270_91", "n_270_92", "n_270_93", "n_270_94", 
"n_270_95", "n_270_96", "n_270_97", "n_270_98", "n_270_99", "n_270_100", 
"n_270_101", "n_270_102", "n_270_103", "n_270_104", "n_270_105", 
"n_270_106", "n_270_107", "n_270_108", "n_270_109", "n_270_110", 
"n_270_111", "n_270_112", "n_270_113", "n_270_114", "n_270_115", 
"n_270_116", "n_270_117", "n_270_118", "n_270_119", "n_270_120", 
"n_270_121", "n_270_122", "n_270_123", "n_270_124", "n_270_125", 
"n_270_126", "n_270_127", "n_270_128", "n_270_129", "n_270_130", 
"n_270_131", "n_270_132", "n_270_133", "n_270_134", "n_270_135", 
"n_270_136", "n_270_137", "n_270_138", "n_270_139", "n_270_140", 
"n_270_141", "n_270_142", "n_270_143", "n_270_144", "n_270_145", 
"n_270_146", "n_270_147", "n_270_148", "n_270_149", "n_270_150", 
"n_270_151", "n_270_152", "n_270_153", "n_270_154", "n_270_155", 
"n_270_156", "n_270_157", "n_270_158", "n_270_159", "n_270_160", 
"n_270_161", "n_270_162", "n_270_163", "n_270_164", "n_270_165", 
"n_270_166", "n_270_167", "n_270_168", "n_270_169", "n_270_170", 
"n_270_171", "n_270_172", "n_270_173", "n_270_174", "n_270_175", 
"n_270_176", "n_270_177", "n_270_178", "n_270_179", "n_270_180", 
"n_270_181", "n_270_182", "n_270_183", "n_270_184", "n_270_185", 
"n_270_186", "n_270_187", "n_270_188", "n_270_189", "n_270_190", 
"n_270_191", "n_270_192", "n_270_193", "n_270_194", "n_270_195", 
"n_270_196", "n_270_197", "n_270_198", "n_270_199", "n_270_200", 
"n_300_1", "n_300_2", "n_300_3", "n_300_4", "n_300_5", "n_300_6", 
"n_300_7", "n_300_8", "n_300_9", "n_300_10", "n_300_11", "n_300_12", 
"n_300_13", "n_300_14", "n_300_15", "n_300_16", "n_300_17", "n_300_18", 
"n_300_19", "n_300_20", "n_300_21", "n_300_22", "n_300_23", "n_300_24", 
"n_300_25", "n_300_26", "n_300_27", "n_300_28", "n_300_29", "n_300_30", 
"n_300_31", "n_300_32", "n_300_33", "n_300_34", "n_300_35", "n_300_36", 
"n_300_37", "n_300_38", "n_300_39", "n_300_40", "n_300_41", "n_300_42", 
"n_300_43", "n_300_44", "n_300_45", "n_300_46", "n_300_47", "n_300_48", 
"n_300_49", "n_300_50", "n_300_51", "n_300_52", "n_300_53", "n_300_54", 
"n_300_55", "n_300_56", "n_300_57", "n_300_58", "n_300_59", "n_300_60", 
"n_300_61", "n_300_62", "n_300_63", "n_300_64", "n_300_65", "n_300_66", 
"n_300_67", "n_300_68", "n_300_69", "n_300_70", "n_300_71", "n_300_72", 
"n_300_73", "n_300_74", "n_300_75", "n_300_76", "n_300_77", "n_300_78", 
"n_300_79", "n_300_80", "n_300_81", "n_300_82", "n_300_83", "n_300_84", 
"n_300_85", "n_300_86", "n_300_87", "n_300_88", "n_300_89", "n_300_90", 
"n_300_91", "n_300_92", "n_300_93", "n_300_94", "n_300_95", "n_300_96", 
"n_300_97", "n_300_98", "n_300_99", "n_300_100", "n_300_101", 
"n_300_102", "n_300_103", "n_300_104", "n_300_105", "n_300_106", 
"n_300_107", "n_300_108", "n_300_109", "n_300_110", "n_300_111", 
"n_300_112", "n_300_113", "n_300_114", "n_300_115", "n_300_116", 
"n_300_117", "n_300_118", "n_300_119", "n_300_120", "n_300_121", 
"n_300_122", "n_300_123", "n_300_124", "n_300_125", "n_300_126", 
"n_300_127", "n_300_128", "n_300_129", "n_300_130", "n_300_131", 
"n_300_132", "n_300_133", "n_300_134", "n_300_135", "n_300_136", 
"n_300_137", "n_300_138", "n_300_139", "n_300_140", "n_300_141", 
"n_300_142", "n_300_143", "n_300_144", "n_300_145", "n_300_146", 
"n_300_147", "n_300_148", "n_300_149", "n_300_150", "n_300_151", 
"n_300_152", "n_300_153", "n_300_154", "n_300_155", "n_300_156", 
"n_300_157", "n_300_158", "n_300_159", "n_300_160", "n_300_161", 
"n_300_162", "n_300_163", "n_300_164", "n_300_165", "n_300_166", 
"n_300_167", "n_300_168", "n_300_169", "n_300_170", "n_300_171", 
"n_300_172", "n_300_173", "n_300_174", "n_300_175", "n_300_176", 
"n_300_177", "n_300_178", "n_300_179", "n_300_180", "n_300_181", 
"n_300_182", "n_300_183", "n_300_184", "n_300_185", "n_300_186", 
"n_300_187", "n_300_188", "n_300_189", "n_300_190", "n_300_191", 
"n_300_192", "n_300_193", "n_300_194", "n_300_195", "n_300_196", 
"n_300_197", "n_300_198", "n_300_199", "n_300_200"))
