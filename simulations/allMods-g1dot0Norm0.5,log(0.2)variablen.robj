structure(list(n_30_1 = structure(list(par = c(-0.148055535806199, 
-0.0738207741838494, 0.464827787957525, -1.7637760825145), value = 7.30489747258842, 
    counts = structure(c(197L, NA), .Names = c("function", "gradient"
    )), convergence = 0L, message = NULL, hessian = structure(c(15.3822684685334, 
    -1.52974445266629, 37.1175184816774, -1.07771179147509, -1.52974445266629, 
    5.35251199673681, -1.87277179719558, -1.63940017938735, 37.1175184816774, 
    -1.87277179719558, 974.51403761073, -44.6611935928098, -1.07771179147509, 
    -1.63940017938735, -44.6611935928098, 48.4269402611925), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148055535806199, -0.0738207741838494
    ), logphi = c(0.464827787957525, -1.7637760825145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_2 = structure(list(
    par = c(-0.2734585201761, -1.14085435405672, 0.477561130121758, 
    -1.70940946738627), value = 14.8880451814205, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.69610667297849, -1.08391376940631, 
    27.8382341347694, -2.17901577803659, -1.08391376940631, 0.610157145253254, 
    -2.49050141709617, -0.443776004832586, 27.8382341347694, 
    -2.49050141709617, 735.569134320713, -37.1523686202302, -2.17901577803659, 
    -0.443776004832586, -37.1523686202302, 39.9038832568088), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2734585201761, -1.14085435405672
    ), logphi = c(0.477561130121758, -1.70940946738627)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_3 = structure(list(
    par = c(0.325469014906752, 0.375162406326777, 0.376387095534578, 
    -1.95248247896031), value = -0.72750622877292, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.765263280909, -0.594614797649884, 
    20.2170269674451, 2.28892738385333, -0.594614797649884, 12.2290754727139, 
    4.36814788859485, -0.0982943566263383, 20.2170269674451, 
    4.36814788859485, 1499.48623782326, -5.97788434945901, 2.28892738385333, 
    -0.0982943566263383, -5.97788434945901, 51.1144589630808), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.325469014906752, 0.375162406326777
    ), logphi = c(0.376387095534578, -1.95248247896031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_4 = structure(list(
    par = c(-0.525434823208099, 0.90883153119961, 0.478817360187228, 
    -1.76436774571102), value = -7.70609082413602, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.0045800386441, 8.87017142825464, 
    36.0218206465479, -0.716210640905324, 8.87017142825464, 21.5139307009338, 
    13.2644392656367, -3.24169767962346, 36.0218206465479, 13.2644392656367, 
    798.620503802194, -64.4272884587904, -0.716210640905324, 
    -3.24169767962346, -64.4272884587904, 41.3398062721893), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.525434823208099, 0.90883153119961
    ), logphi = c(0.478817360187228, -1.76436774571102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_5 = structure(list(
    par = c(0.124289658888553, 0.137330570256186, 0.473635657823985, 
    -1.57295805296781), value = 14.1688833505153, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.1395032408105, -2.37965798666195, 
    26.4859114667004, 0.454950678907551, -2.37965798666195, 5.90613896189751, 
    -1.79807556799361, -1.37157870083726, 26.4859114667004, -1.79807556799361, 
    569.157090467787, -22.5984850987793, 0.454950678907551, -1.37157870083726, 
    -22.5984850987793, 33.6899740407404), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.124289658888553, 0.137330570256186
    ), logphi = c(0.473635657823985, -1.57295805296781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_6 = structure(list(
    par = c(-0.171578029918233, 0.139045187195532, 0.421661774258616, 
    -1.65742787391084), value = 5.25121358141059, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.6539515933125, 0.644064175547854, 
    32.8544234944328, 0.643817183565432, 0.644064175547854, 8.5855186549022, 
    1.20847508178201, -1.68960693225362, 32.8544234944328, 1.20847508178201, 
    737.088274889608, -18.7775624118647, 0.643817183565432, -1.68960693225362, 
    -18.7775624118647, 37.8385257537861), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.171578029918233, 0.139045187195532
    ), logphi = c(0.421661774258616, -1.65742787391084)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_7 = structure(list(
    par = c(-0.335026627059563, 0.0302590206657687, 0.465181502193017, 
    -1.92092702089148), value = 5.3225863206532, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.1044796792863, -2.13958543726633, 
    57.8658901591034, -2.79049701945588, -2.13958543726633, 6.71463594148491, 
    -1.68249387533237, -2.67975218637417, 57.8658901591034, -1.68249387533237, 
    1805.90608632025, -90.3815508916939, -2.79049701945588, -2.67975218637417, 
    -90.3815508916939, 73.2668852325702), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335026627059563, 0.0302590206657687
    ), logphi = c(0.465181502193017, -1.92092702089148)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_8 = structure(list(
    par = c(-0.540124555600137, 0.0777528518528116, 0.530783039331481, 
    -1.46771444146119), value = 11.9106286130418, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.5856951799518, 0.314679780455407, 
    33.3440920345929, -4.83534658868301, 0.314679780455407, 7.7534489428821, 
    -5.16231971348091, -2.0435122380924, 33.3440920345929, -5.16231971348091, 
    465.84404998562, -58.2775456314799, -4.83534658868301, -2.0435122380924, 
    -58.2775456314799, 36.1049572195071), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.540124555600137, 0.0777528518528116
    ), logphi = c(0.530783039331481, -1.46771444146119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_9 = structure(list(
    par = c(-0.346855328827488, 0.618876007992548, 0.5367719494456, 
    -1.69709343652044), value = 0.116436782269282, counts = structure(c(299L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.0935386513673, 1.82734123033157, 
    39.0873005620129, -3.06493508839267, 1.82734123033157, 14.0494995459761, 
    -0.428420302345245, -3.39029651996725, 39.0873005620129, 
    -0.428420302345245, 765.620644126219, -76.9422965143374, 
    -3.06493508839267, -3.39029651996725, -76.9422965143374, 
    47.0807852663846), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346855328827488, 0.618876007992548
    ), logphi = c(0.5367719494456, -1.69709343652044)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_10 = structure(list(
    par = c(-0.454132932294995, -0.40807916549635, 0.571469338180157, 
    -1.46791323866271), value = 13.1802782581149, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.2603113721037, -1.13410729696284, 
    21.9637949236962, -4.14355679501099, -1.13410729696284, 1.98432047460173, 
    -4.76456987641427, -0.42849076975493, 21.9637949236962, -4.76456987641427, 
    349.868414513566, -50.9382546307613, -4.14355679501099, -0.42849076975493, 
    -50.9382546307613, 29.2339964382826), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.454132932294995, -0.40807916549635
    ), logphi = c(0.571469338180157, -1.46791323866271)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_11 = structure(list(
    par = c(-0.432205467571516, -0.0151490290701297, 0.488199075328325, 
    -1.79113074937904), value = 5.48208493491473, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8712574555803, -1.01347991909861, 
    37.9998964179507, -3.06029767171978, -1.01347991909861, 5.13486875686198, 
    -3.74001333236507, -1.93593843067497, 37.9998964179507, -3.74001333236507, 
    946.903980302505, -64.5070000984127, -3.06029767171978, -1.93593843067497, 
    -64.5070000984127, 48.1832612524435), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432205467571516, -0.0151490290701297
    ), logphi = c(0.488199075328325, -1.79113074937904)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_12 = structure(list(
    par = c(-0.194748542788779, 0.835111864091483, 0.449207058290436, 
    -1.1713349253097), value = 3.92291969590358, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0831195523186, 7.2616105804002, 
    15.9151068968022, 0.973753153665768, 7.2616105804002, 19.0093198162433, 
    1.43150660547597, -1.3767148530075, 15.9151068968022, 1.43150660547597, 
    151.181820625901, -5.621188935101, 0.973753153665768, -1.3767148530075, 
    -5.621188935101, 10.052135018368), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.194748542788779, 0.835111864091483
    ), logphi = c(0.449207058290436, -1.1713349253097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_13 = structure(list(
    par = c(0.0911003794554689, 0.176729070041749, 0.469685133855795, 
    -1.64779423537066), value = 12.6398511495564, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.5752491255187, -2.10154572366505, 
    29.5428438610301, 0.452780243520579, -2.10154572366505, 6.78797274655807, 
    -1.21538367459095, -1.50369947848894, 29.5428438610301, -1.21538367459095, 
    709.908894013456, -28.2152777530964, 0.452780243520579, -1.50369947848894, 
    -28.2152777530964, 39.431968414938), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0911003794554689, 0.176729070041749
    ), logphi = c(0.469685133855795, -1.64779423537066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_14 = structure(list(
    par = c(-0.162667032869274, -0.346939856501818, 0.498641158900322, 
    -1.58063524510558), value = 11.2362528364183, counts = structure(c(355L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.2753610110872, -1.55736539131368, 
    26.3341133290851, -1.76578652655301, -1.55736539131368, 2.58831504273971, 
    -3.25485103136458, -0.977433657567417, 26.3341133290851, 
    -3.25485103136458, 519.30183050386, -33.7297797736724, -1.76578652655301, 
    -0.977433657567417, -33.7297797736724, 32.3314561225807), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162667032869274, -0.346939856501818
    ), logphi = c(0.498641158900322, -1.58063524510558)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_15 = structure(list(
    par = c(-0.0838640514489941, 0.311831829535087, 0.48403378941677, 
    -1.8722704895141), value = 2.65227093573725, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.6234965967303, -0.784816434507007, 
    42.9018792011959, -0.694734556772048, -0.784816434507007, 
    10.5561316208203, 0.621514394394396, -2.2120666884895, 42.9018792011959, 
    0.621514394394396, 1308.85720683027, -62.8106249471738, -0.694734556772048, 
    -2.2120666884895, -62.8106249471738, 57.073696269061), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0838640514489941, 0.311831829535087
    ), logphi = c(0.48403378941677, -1.8722704895141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_16 = structure(list(
    par = c(-0.583655933530733, 0.279048307196198, 0.490208979920666, 
    -1.81105472870925), value = -0.611738944274521, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.5242618889132, 0.613117800085661, 
    44.909829056472, -3.8966639996918, 0.613117800085661, 9.52926595054748, 
    -1.58849531750604, -3.19735859277692, 44.909829056472, -1.58849531750604, 
    1060.13159310958, -83.2227124440976, -3.8966639996918, -3.19735859277692, 
    -83.2227124440976, 53.6915192452803), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.583655933530733, 0.279048307196198
    ), logphi = c(0.490208979920666, -1.81105472870925)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_17 = structure(list(
    par = c(-0.215407175210965, -0.819122370814798, 0.453251112938884, 
    -1.61871518103147), value = 10.2221118052619, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.58548561399886, -0.923906856353796, 
    20.3322727800881, -0.940218928935366, -0.923906856353796, 
    0.854195968180704, -1.61719611213584, -0.526180838900103, 
    20.3322727800881, -1.61719611213584, 442.483468931609, -15.9167908924118, 
    -0.940218928935366, -0.526180838900103, -15.9167908924118, 
    24.9653289028373), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215407175210965, -0.819122370814798
    ), logphi = c(0.453251112938884, -1.61871518103147)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_18 = structure(list(
    par = c(-0.871028610805534, 0.401436234056343, 0.557492777519781, 
    -1.51103345952893), value = 3.1525918599068, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.6655950774813, 2.56951590582588, 
    33.9138023486285, -6.83757096453519, 2.56951590582588, 12.3355567724914, 
    -5.07280070571881, -3.14201003570602, 33.9138023486285, -5.07280070571881, 
    465.702573716698, -79.0690223948509, -6.83757096453519, -3.14201003570602, 
    -79.0690223948509, 41.355890735062), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.871028610805534, 0.401436234056343
    ), logphi = c(0.557492777519781, -1.51103345952893)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_19 = structure(list(
    par = c(-0.154132302397394, -0.148689171255365, 0.40679414420174, 
    -1.63119335655084), value = 9.37131544568329, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.9593144674599, -0.553669528446932, 
    23.099505643831, 0.547796933147993, -0.553669528446932, 3.46407921725245, 
    -0.0746063379963857, -0.997473668329363, 23.099505643831, 
    -0.0746063379963857, 508.049255696363, -5.20611261389803, 
    0.547796933147993, -0.997473668329363, -5.20611261389803, 
    26.2404039848008), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.154132302397394, -0.148689171255365
    ), logphi = c(0.40679414420174, -1.63119335655084)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_20 = structure(list(
    par = c(-0.159739677379943, -0.252001835237277, 0.450323034506216, 
    -1.87448798286731), value = 6.48112535556552, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.4287821748357, -2.12821342016056, 
    39.3610676931999, -1.13594946593576, -2.12821342016056, 3.40874338289332, 
    -1.65572402455183, -1.36430658725928, 39.3610676931999, -1.65572402455183, 
    1265.78642037223, -48.8477809844623, -1.13594946593576, -1.36430658725928, 
    -48.8477809844623, 53.603089912091), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159739677379943, -0.252001835237277
    ), logphi = c(0.450323034506216, -1.87448798286731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_21 = structure(list(
    par = c(-0.0772521216258835, -0.531784442695575, 0.472424086844702, 
    -1.83829767486101), value = 16.4300616686503, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.4809360576612, -2.94393035193963, 
    45.8717454003832, -1.79032492120257, -2.94393035193963, 2.76880838523397, 
    -3.93591373359925, -1.21190746593669, 45.8717454003832, -3.93591373359925, 
    1481.44296259467, -59.2572998687757, -1.79032492120257, -1.21190746593669, 
    -59.2572998687757, 67.5516087689232), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0772521216258835, -0.531784442695575
    ), logphi = c(0.472424086844702, -1.83829767486101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_22 = structure(list(
    par = c(-0.227465758319948, -1.02343051680368, 0.469530871069219, 
    -1.58365793282818), value = 18.3222963741673, counts = structure(c(289L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.6039138110248, -1.11373331446174, 
    26.1946475070829, -1.67390026195591, -1.11373331446174, 0.815135280163304, 
    -2.24183365649111, -0.540696890372061, 26.1946475070829, 
    -2.24183365649111, 548.154431751158, -24.3155854864341, -1.67390026195591, 
    -0.540696890372061, -24.3155854864341, 32.5502388163201), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227465758319948, -1.02343051680368
    ), logphi = c(0.469530871069219, -1.58365793282818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_23 = structure(list(
    par = c(-0.0808897188277601, 0.342950484716873, 0.485243017504436, 
    -1.84365320472661), value = 1.03566643100479, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.430273624828, -0.5487044159036, 
    36.0167330528682, -0.537484871276916, -0.5487044159036, 9.41417802602373, 
    0.608338228680338, -1.93834483530608, 36.0167330528682, 0.608338228680338, 
    1049.17992465237, -52.5927688873606, -0.537484871276916, 
    -1.93834483530608, -52.5927688873606, 47.7636840929829), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0808897188277601, 0.342950484716873
    ), logphi = c(0.485243017504436, -1.84365320472661)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_24 = structure(list(
    par = c(-0.316486753462601, -0.0599036152181448, 0.520896354916056, 
    -1.7583337049988), value = 8.97438889669633, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.9829849357368, -1.9661261632109, 
    38.558656624943, -3.49923683384823, -1.9661261632109, 4.66667878118443, 
    -6.08885211894616, -1.69214048018063, 38.558656624943, -6.08885211894616, 
    951.886796404899, -71.6581750861423, -3.49923683384823, -1.69214048018063, 
    -71.6581750861423, 51.9535795140413), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316486753462601, -0.0599036152181448
    ), logphi = c(0.520896354916056, -1.7583337049988)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_25 = structure(list(
    par = c(0.182922439136526, -0.0139776559059819, 0.488441302521586, 
    -1.70514612512158), value = 20.5897568771764, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.8661768481307, -4.33682915534916, 
    41.910695961711, 0.107554839257062, -4.33682915534916, 7.43980228445906, 
    -3.45887562502867, -1.75649209888107, 41.910695961711, -3.45887562502867, 
    1152.45907996719, -47.6579507235897, 0.107554839257062, -1.75649209888107, 
    -47.6579507235897, 61.8957350919658), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.182922439136526, -0.0139776559059819
    ), logphi = c(0.488441302521586, -1.70514612512158)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_26 = structure(list(
    par = c(0.0844148986580786, -0.261007391259344, 0.484839484430905, 
    -1.76336045260954), value = 14.981963828738, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.1474586380403, -3.57108768156422, 
    39.0733657722464, -0.70364803628209, -3.57108768156422, 3.94191370522989, 
    -3.44806327756686, -1.33003564717349, 39.0733657722464, -3.44806327756686, 
    1151.2070799351, -46.5757839656078, -0.70364803628209, -1.33003564717349, 
    -46.5757839656078, 58.0086415626901), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0844148986580786, -0.261007391259344
    ), logphi = c(0.484839484430905, -1.76336045260954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_27 = structure(list(
    par = c(-0.800957790539863, 0.281199167188587, 0.523442512271802, 
    -1.79282397541891), value = 0.741141674349429, counts = structure(c(411L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.9349737416053, -0.559565058289024, 
    50.6181034873876, -7.01845090045339, -0.559565058289024, 
    8.37831758104812, -8.19076443026034, -3.66526336970097, 50.6181034873876, 
    -8.19076443026034, 1162.81840696075, -120.699886703157, -7.01845090045339, 
    -3.66526336970097, -120.699886703157, 66.0082004655393), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.800957790539863, 0.281199167188587
    ), logphi = c(0.523442512271802, -1.79282397541891)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_28 = structure(list(
    par = c(-0.125303657242438, -0.806920584261011, 0.489287030788847, 
    -1.67327560536738), value = 13.6343333293925, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.77747419250719, -1.43007320829724, 
    25.9532157484976, -1.61574284973653, -1.43007320829724, 1.16540796479825, 
    -2.67264933873079, -0.577859651684776, 25.9532157484976, 
    -2.67264933873079, 645.359287920755, -32.7627184528723, -1.61574284973653, 
    -0.577859651684776, -32.7627184528723, 36.4505911099045), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.125303657242438, -0.806920584261011
    ), logphi = c(0.489287030788847, -1.67327560536738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_29 = structure(list(
    par = c(-0.0790596329511278, 0.242011004762811, 0.386825698177587, 
    -1.46843898259119), value = 9.43376624075716, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0275669509107, 1.16731091726052, 
    23.2900717307416, 2.24881235899588, 1.16731091726052, 8.91301450423043, 
    0.94878279810473, -1.22583187733838, 23.2900717307416, 0.94878279810473, 
    412.411561724113, 10.3661963921642, 2.24881235899588, -1.22583187733838, 
    10.3661963921642, 23.6907325645852), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0790596329511278, 0.242011004762811
    ), logphi = c(0.386825698177587, -1.46843898259119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_30 = structure(list(
    par = c(-0.180875011765268, 0.0989525896664195, 0.452493440667312, 
    -1.33014752446044), value = 11.9831891593856, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.6488010548148, 0.25179979923351, 
    22.109520540603, 0.0871625300824519, 0.25179979923351, 6.7639561129873, 
    -1.57990071736336, -1.41810921583385, 22.109520540603, -1.57990071736336, 
    270.836644870709, -8.16679644000118, 0.0871625300824519, 
    -1.41810921583385, -8.16679644000118, 17.6332305192872), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180875011765268, 0.0989525896664195
    ), logphi = c(0.452493440667312, -1.33014752446044)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_31 = structure(list(
    par = c(-0.070747113824099, 0.360103453110474, 0.470220033860367, 
    -1.81869473847511), value = 1.74993538225887, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.0712837883613, -0.374856369056431, 
    35.3692723309429, -0.0457295590283735, -0.374856369056431, 
    9.14043630562134, 1.70943360999765, -1.87665025419559, 35.3692723309429, 
    1.70943360999765, 1019.58681614378, -47.4027020039847, -0.0457295590283735, 
    -1.87665025419559, -47.4027020039847, 47.1904404353296), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.070747113824099, 0.360103453110474
    ), logphi = c(0.470220033860367, -1.81869473847511)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_32 = structure(list(
    par = c(-0.17838884273559, 0.223404468250988, 0.42453383398797, 
    -2.11298187312766), value = 0.0179357896202483, counts = structure(c(415L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3473328185761, -0.404252717411957, 
    36.4129941603508, 0.120294414540645, -0.404252717411957, 
    6.26476670329001, 5.76739397650794, -1.23035317811659, 36.4129941603508, 
    5.76739397650794, 1699.70648617845, -48.2964318919699, 0.120294414540645, 
    -1.23035317811659, -48.2964318919699, 47.3995072847178), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17838884273559, 0.223404468250988
    ), logphi = c(0.42453383398797, -2.11298187312766)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_33 = structure(list(
    par = c(-0.485678858826176, -0.51419578721174, 0.499143328807565, 
    -1.69765995485179), value = 12.6447462765386, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.0705627787967, -1.51613959653574, 
    38.1382518943596, -4.31619647178749, -1.51613959653574, 2.3969481213193, 
    -5.86800412971655, -1.14542753992808, 38.1382518943596, -5.86800412971655, 
    892.389946558936, -67.8437036205626, -4.31619647178749, -1.14542753992808, 
    -67.8437036205626, 51.8072441471062), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.485678858826176, -0.51419578721174
    ), logphi = c(0.499143328807565, -1.69765995485179)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_34 = structure(list(
    par = c(-0.285565767622636, -0.130239199415555, 0.467967743450979, 
    -1.58506044083295), value = 18.2036710065565, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.7267020557158, -1.37431540370159, 
    41.3130770251513, -2.06230352084447, -1.37431540370159, 5.56653066130508, 
    -3.30702753092993, -2.08562191339468, 41.3130770251513, -3.30702753092993, 
    768.333029728119, -42.090935358452, -2.06230352084447, -2.08562191339468, 
    -42.090935358452, 45.715801018531), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285565767622636, -0.130239199415555
    ), logphi = c(0.467967743450979, -1.58506044083295)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_35 = structure(list(
    par = c(-0.437259392971138, 0.0895246141395598, 0.489183147812353, 
    -1.64648132293458), value = 7.33150634167865, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.3179855829593, -0.3329694044929, 
    30.7349157133707, -2.51263703665572, -0.3329694044929, 5.16245053905351, 
    -2.49911055894003, -1.91217869760507, 30.7349157133707, -2.49911055894003, 
    589.641134770336, -45.9755537471906, -2.51263703665572, -1.91217869760507, 
    -45.9755537471906, 35.3568867943466), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.437259392971138, 0.0895246141395598
    ), logphi = c(0.489183147812353, -1.64648132293458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_36 = structure(list(
    par = c(-0.00197137786592583, 0.368810734328752, 0.473169740817751, 
    -1.26629622035191), value = 12.3230069439214, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.6723838635742, -0.243295973589852, 
    15.5588014880692, 0.309602869563719, -0.243295973589852, 
    6.87061919624199, -1.23074320645955, -1.09866685571447, 15.5588014880692, 
    -1.23074320645955, 180.570975587546, -8.29291177950608, 0.309602869563719, 
    -1.09866685571447, -8.29291177950608, 12.2760931660082), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00197137786592583, 0.368810734328752
    ), logphi = c(0.473169740817751, -1.26629622035191)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_37 = structure(list(
    par = c(-0.340407972245673, -0.251243957903132, 0.476927750337428, 
    -1.51421105367411), value = 13.0486858901807, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.6887650118969, -0.899796775755135, 
    25.6946930683455, -1.79155936930186, -0.899796775755135, 
    2.93567577447362, -2.7022108310959, -1.21087348370352, 25.6946930683455, 
    -2.7022108310959, 421.869952503595, -26.3127087953841, -1.79155936930186, 
    -1.21087348370352, -26.3127087953841, 26.8042873021734), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340407972245673, -0.251243957903132
    ), logphi = c(0.476927750337428, -1.51421105367411)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_38 = structure(list(
    par = c(-0.34139372896171, -0.389651986072476, 0.510001440166972, 
    -1.64649130099733), value = 14.109099972206, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.231894608026, -1.68217676277393, 
    32.1896755473006, -3.26513408022144, -1.68217676277393, 2.44770334401068, 
    -4.84204822726042, -1.09359813205145, 32.1896755473006, -4.84204822726042, 
    689.866719962851, -53.5149060190143, -3.26513408022144, -1.09359813205145, 
    -53.5149060190143, 42.1646475960991), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34139372896171, -0.389651986072476
    ), logphi = c(0.510001440166972, -1.64649130099733)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_39 = structure(list(
    par = c(-0.522275224105276, -0.0400205295671596, 0.527065447525151, 
    -1.83004084294861), value = 5.55828227045335, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8379078440635, -1.89277630280316, 
    51.4421499291373, -5.88344637053595, -1.89277630280316, 6.98916571550967, 
    -10.7978365804229, -2.15485787391501, 51.4421499291373, -10.7978365804229, 
    1414.12136936747, -114.401898092087, -5.88344637053595, -2.15485787391501, 
    -114.401898092087, 72.2203108232122), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.522275224105276, -0.0400205295671596
    ), logphi = c(0.527065447525151, -1.83004084294861)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_40 = structure(list(
    par = c(0.240086462967683, -0.0284138206569506, 0.430152506312457, 
    -2.20611937996764), value = -2.0417243158361, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.3645229769592, -3.00279137621651, 
    29.4839401707714, 0.80729961393633, -3.00279137621651, 4.484754966394, 
    2.40615309543557, -0.540118534342326, 29.4839401707714, 2.40615309543557, 
    2204.92746766698, -31.8966649089925, 0.80729961393633, -0.540118534342326, 
    -31.8966649089925, 51.8120096256736), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.240086462967683, -0.0284138206569506
    ), logphi = c(0.430152506312457, -2.20611937996764)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_41 = structure(list(
    par = c(-0.274849421812764, -0.572915685953699, 0.507895625169168, 
    -1.53056240865551), value = 13.032378998768, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.25265650364437, -1.16983575182417, 
    23.5235447632043, -2.31362644687039, -1.16983575182417, 1.7235331926102, 
    -3.17316579279137, -0.688449545815928, 23.5235447632043, 
    -3.17316579279137, 426.401575713609, -32.9704625259275, -2.31362644687039, 
    -0.688449545815928, -32.9704625259275, 28.2087407184051), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274849421812764, -0.572915685953699
    ), logphi = c(0.507895625169168, -1.53056240865551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_42 = structure(list(
    par = c(-0.501619258805639, -0.441505452969762, 0.559341685195814, 
    -1.44756743224477), value = 15.6486055788793, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.37241290119195, -1.18917677793817, 
    24.3954376322186, -4.54161514262807, -1.18917677793817, 2.0681947976442, 
    -4.96184202836147, -0.542999113894993, 24.3954376322186, 
    -4.96184202836147, 370.946676541806, -52.2898106070091, -4.54161514262807, 
    -0.542999113894993, -52.2898106070091, 30.7299376021142), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.501619258805639, -0.441505452969762
    ), logphi = c(0.559341685195814, -1.44756743224477)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_43 = structure(list(
    par = c(-0.450745292827992, -0.0448358686310668, 0.546992408619827, 
    -1.65157850463167), value = 13.5580672986458, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.46905731114001, -1.40621326805146, 
    34.0109886853845, -4.64463362348511, -1.40621326805146, 4.73991452176747, 
    -7.20119984798373, -1.45990832378651, 34.0109886853845, -7.20119984798373, 
    693.270601448859, -74.0330196677963, -4.64463362348511, -1.45990832378651, 
    -74.0330196677963, 45.8595691492647), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.450745292827992, -0.0448358686310668
    ), logphi = c(0.546992408619827, -1.65157850463167)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_44 = structure(list(
    par = c(-0.449957661910747, -0.365698030538295, 0.487769571006329, 
    -1.56285054658077), value = 14.932337751827, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.534127369206, -1.11436029515133, 
    31.6064810679251, -3.15603234812833, -1.11436029515133, 2.74993279036906, 
    -4.01049122045194, -1.30148343835401, 31.6064810679251, -4.01049122045194, 
    562.199705101296, -42.0593159711213, -3.15603234812833, -1.30148343835401, 
    -42.0593159711213, 35.7834214668173), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449957661910747, -0.365698030538295
    ), logphi = c(0.487769571006329, -1.56285054658077)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_45 = structure(list(
    par = c(-1.16393732362625, -0.109947436229958, 0.491829050421422, 
    -1.70405827977276), value = 8.19658767074606, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.15119552225008, -0.0758774190146028, 
    45.945631275579, -8.49626601473474, -0.0758774190146028, 
    5.64900871946605, -10.0914682672482, -2.53564176411203, 45.945631275579, 
    -10.0914682672482, 969.285848574586, -113.434911466648, -8.49626601473474, 
    -2.53564176411203, -113.434911466648, 62.2005854093999), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-1.16393732362625, -0.109947436229958
    ), logphi = c(0.491829050421422, -1.70405827977276)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_46 = structure(list(
    par = c(0.0428002805933465, 0.151098759304481, 0.480589081804731, 
    -1.52964080682201), value = 14.1982688773553, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.2103688085865, -1.59312529213196, 
    29.2306755809157, -0.00696289359503055, -1.59312529213196, 
    7.85674015624238, -2.25460955238788, -1.61892638717021, 29.2306755809157, 
    -2.25460955238788, 552.524368195861, -27.1095102979402, -0.00696289359503055, 
    -1.61892638717021, -27.1095102979402, 34.158034961429), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0428002805933465, 0.151098759304481
    ), logphi = c(0.480589081804731, -1.52964080682201)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_47 = structure(list(
    par = c(-0.577880837940724, 0.15129344776366, 0.500492885735363, 
    -1.46558251110091), value = 11.9620491252633, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.042616291705, 1.37729064642045, 
    33.1287559953708, -3.77314377497662, 1.37729064642045, 8.74868749800584, 
    -3.14113538779637, -2.4562818010665, 33.1287559953708, -3.14113538779637, 
    448.495414860695, -46.4524947068057, -3.77314377497662, -2.4562818010665, 
    -46.4524947068057, 32.2407255564094), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.577880837940724, 0.15129344776366
    ), logphi = c(0.500492885735363, -1.46558251110091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_48 = structure(list(
    par = c(-0.938471276925848, -0.143599707030674, 0.486096602585146, 
    -1.88980424471468), value = -1.25727810833183, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.7975570624258, -0.698405960619652, 
    36.5612107926516, -5.01944381992026, -0.698405960619652, 
    4.09107198118264, -8.04337756754592, -1.54047465095175, 36.5612107926516, 
    -8.04337756754592, 1098.41721497617, -93.8028299286575, -5.01944381992026, 
    -1.54047465095175, -93.8028299286575, 52.245854721189), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.938471276925848, -0.143599707030674
    ), logphi = c(0.486096602585146, -1.88980424471468)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_49 = structure(list(
    par = c(0.217041294656124, -0.160378660736064, 0.503836623763627, 
    -1.66667816190905), value = 14.8263961303149, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0433711253738, -3.29934506515528, 
    28.5128013666203, -0.271217637681787, -3.29934506515528, 
    4.11808210953879, -3.20670537412582, -1.06783938202959, 28.5128013666203, 
    -3.20670537412582, 747.934212521173, -34.8275111403673, -0.271217637681787, 
    -1.06783938202959, -34.8275111403673, 42.3854139777191), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.217041294656124, -0.160378660736064
    ), logphi = c(0.503836623763627, -1.66667816190905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_50 = structure(list(
    par = c(-0.341939052244983, -0.224610359134511, 0.467789804324003, 
    -1.55566463776986), value = 19.969932819853, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.7688858024585, -0.961887848482945, 
    35.613337102447, -2.16306352340823, -0.961887848482945, 4.38300737659603, 
    -3.2378935612698, -1.71779689672746, 35.613337102447, -3.2378935612698, 
    625.412347944554, -35.2623461097323, -2.16306352340823, -1.71779689672746, 
    -35.2623461097323, 38.0772822339281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341939052244983, -0.224610359134511
    ), logphi = c(0.467789804324003, -1.55566463776986)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_51 = structure(list(
    par = c(-0.43475811997399, -0.282132400238825, 0.498896395307681, 
    -1.58560780471566), value = 15.435986879264, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.8021549450352, -1.44840764226828, 
    36.6951889270162, -3.8552367214173, -1.44840764226828, 3.46568282250104, 
    -5.06866066540823, -1.56476475776657, 36.6951889270162, -5.06866066540823, 
    676.636251538465, -55.0947373034738, -3.8552367214173, -1.56476475776657, 
    -55.0947373034738, 43.3107110660025), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.43475811997399, -0.282132400238825
    ), logphi = c(0.498896395307681, -1.58560780471566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_52 = structure(list(
    par = c(0.266764140570832, 0.378963903275998, 0.494316194968028, 
    -1.81126216314301), value = 4.36845113274113, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.2241218942528, -1.94132839093086, 
    24.7050573736196, 0.65440816510165, -1.94132839093086, 8.54553230755783, 
    -0.321995595076174, -1.15086173613221, 24.7050573736196, 
    -0.321995595076174, 829.270031671214, -32.7697131639049, 
    0.65440816510165, -1.15086173613221, -32.7697131639049, 39.0904438549722
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.266764140570832, 0.378963903275998
    ), logphi = c(0.494316194968028, -1.81126216314301)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_53 = structure(list(
    par = c(-0.822825901291987, -0.84768730557384, 0.504365370198896, 
    -1.84209596547583), value = 9.50768127688101, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(4.97829822165841, -1.27583866493808, 
    34.4790586366273, -5.10633049666254, -1.27583866493808, 1.08316794644736, 
    -7.84593670655198, -0.34177719232531, 34.4790586366273, -7.84593670655198, 
    1186.20923022927, -96.893634926154, -5.10633049666254, -0.34177719232531, 
    -96.893634926154, 60.8320502193394), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.822825901291987, -0.84768730557384
    ), logphi = c(0.504365370198896, -1.84209596547583)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_54 = structure(list(
    par = c(-0.281192332727878, 0.18889526770611, 0.521162030630451, 
    -1.67279928630523), value = 5.00356434971718, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.3565502355992, -0.731900533068597, 
    36.8192191344541, -3.01201808117213, -0.731900533068597, 
    8.09797771905707, -4.27715904560699, -2.19768285969479, 36.8192191344541, 
    -4.27715904560699, 755.502011410503, -64.2437371614069, -3.01201808117213, 
    -2.19768285969479, -64.2437371614069, 45.7836148619606), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281192332727878, 0.18889526770611
    ), logphi = c(0.521162030630451, -1.67279928630523)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_55 = structure(list(
    par = c(-0.385545212952609, 0.194843800540949, 0.539932038084637, 
    -1.59204533823105), value = 7.58489297584517, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.4936740605032, -0.775159108012957, 
    31.8852959879656, -3.76502696286529, -0.775159108012957, 
    6.34880637262469, -4.91066856245226, -1.9592548445857, 31.8852959879656, 
    -4.91066856245226, 558.260526993593, -61.6968674012064, -3.76502696286529, 
    -1.9592548445857, -61.6968674012064, 38.8110234914585), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385545212952609, 0.194843800540949
    ), logphi = c(0.539932038084637, -1.59204533823105)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_56 = structure(list(
    par = c(-0.349832935410057, -1.0121150396652, 0.496317813995348, 
    -1.88406971165572), value = 7.53018994871445, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.37245314147228, -1.0126488958484, 
    24.8601717853791, -2.19665273126779, -1.0126488958484, 0.644323967735616, 
    -3.20634933803632, -0.324370784010597, 24.8601717853791, 
    -3.20634933803632, 905.241219637753, -47.8895955146053, -2.19665273126779, 
    -0.324370784010597, -47.8895955146053, 40.4174162011994), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349832935410057, -1.0121150396652
    ), logphi = c(0.496317813995348, -1.88406971165572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_57 = structure(list(
    par = c(-0.0151285108633934, 0.779070485818387, 0.531427241357983, 
    -1.50996723255483), value = 5.01584013976359, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.3352247991537, 1.56929605865663, 
    17.668370468904, -0.460253734790861, 1.56929605865663, 10.7799946142961, 
    0.138687329842568, -1.45599807421792, 17.668370468904, 0.138687329842568, 
    294.125645603938, -30.5096267567695, -0.460253734790861, 
    -1.45599807421792, -30.5096267567695, 20.7871860120612), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0151285108633934, 0.779070485818387
    ), logphi = c(0.531427241357983, -1.50996723255483)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_58 = structure(list(
    par = c(-0.115538775361587, -0.582872559031723, 0.501847102438189, 
    -1.32839070228395), value = 21.058273787773, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.9376565277137, -1.45894991909756, 
    23.695181089245, -1.66464150330725, -1.45894991909756, 2.45163480006028, 
    -2.91257776208198, -0.723129971902381, 23.695181089245, -2.91257776208198, 
    311.346386037137, -21.4758604357712, -1.66464150330725, -0.723129971902381, 
    -21.4758604357712, 21.9531255627459), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.115538775361587, -0.582872559031723
    ), logphi = c(0.501847102438189, -1.32839070228395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_59 = structure(list(
    par = c(-0.574767783287113, -0.69595363412647, 0.514278708957742, 
    -1.43338730669302), value = 13.6847862613298, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.71366005439356, -0.705985584659174, 
    23.874396918977, -3.69544498846075, -0.705985584659174, 1.52898661109901, 
    -3.61954460670333, -0.607301848809527, 23.874396918977, -3.61954460670333, 
    352.753944942386, -36.8431918165157, -3.69544498846075, -0.607301848809527, 
    -36.8431918165157, 26.0660318809336), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.574767783287113, -0.69595363412647
    ), logphi = c(0.514278708957742, -1.43338730669302)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_60 = structure(list(
    par = c(-0.103526316954551, 0.0676214732538977, 0.442460156561339, 
    -1.48244338458529), value = 9.08532480370445, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.4519046174877, -0.38306280059075, 
    16.4322091151803, 0.280440395350467, -0.38306280059075, 3.91637325369842, 
    -0.731212451476893, -0.930345889216255, 16.4322091151803, 
    -0.731212451476893, 275.917793436165, -6.70575802574902, 
    0.280440395350467, -0.930345889216255, -6.70575802574902, 
    16.5961563007855), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.103526316954551, 0.0676214732538977
    ), logphi = c(0.442460156561339, -1.48244338458529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_61 = structure(list(
    par = c(-0.661819435965273, -0.233868576229883, 0.532261522862918, 
    -1.75118063296806), value = 12.2204404555206, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.95854448593292, -2.35481827548512, 
    49.9632679993312, -7.38468434091644, -2.35481827548512, 4.11770055475102, 
    -12.4143568926982, -1.59553967993276, 49.9632679993312, -12.4143568926982, 
    1263.30896326898, -122.859378280715, -7.38468434091644, -1.59553967993276, 
    -122.859378280715, 74.506609486491), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.661819435965273, -0.233868576229883
    ), logphi = c(0.532261522862918, -1.75118063296806)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_62 = structure(list(
    par = c(-0.0425309971414949, -0.160831386300149, 0.486856540055592, 
    -1.96457375596073), value = 5.59568426887606, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.5169563618163, -3.32096312050112, 
    47.1684243794623, -1.50466619719403, -3.32096312050112, 4.8353109389776, 
    -3.72960565719893, -1.51736337783426, 47.1684243794623, -3.72960565719893, 
    1795.7640620796, -68.7863977963943, -1.50466619719403, -1.51736337783426, 
    -68.7863977963943, 67.7547722871541), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0425309971414949, -0.160831386300149
    ), logphi = c(0.486856540055592, -1.96457375596073)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_63 = structure(list(
    par = c(-0.0677585935415018, 0.320628736251183, 0.457608814585667, 
    -1.84629200928333), value = 2.38976741528238, counts = structure(c(295L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.2499330584875, -0.169510278702489, 
    32.9759869888147, 0.183438781276024, -0.169510278702489, 
    8.98483560574093, 2.18901656423576, -1.60687555061934, 32.9759869888147, 
    2.18901656423576, 1016.75084603614, -41.8310438289327, 0.183438781276024, 
    -1.60687555061934, -41.8310438289327, 44.638443314815), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0677585935415018, 0.320628736251183
    ), logphi = c(0.457608814585667, -1.84629200928333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_64 = structure(list(
    par = c(-0.262153689635771, -1.48190209648397, 0.479888482331025, 
    -1.63463373810737), value = 17.9089900502156, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.0198314358101, -1.01595553214651, 
    32.4071805035686, -2.6554366878706, -1.01595553214651, 0.42536171829255, 
    -2.32159737834081, -0.376469306395677, 32.4071805035686, 
    -2.32159737834081, 774.640701987295, -39.0047972529395, -2.6554366878706, 
    -0.376469306395677, -39.0047972529395, 45.0585407216764), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262153689635771, -1.48190209648397
    ), logphi = c(0.479888482331025, -1.63463373810737)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_65 = structure(list(
    par = c(-0.0373293083355784, -0.00163858123309744, 0.499880126399093, 
    -1.56206554191003), value = 14.1275064543288, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.7996772337808, -2.25516597751607, 
    31.9400739992037, -1.23187867484553, -2.25516597751607, 5.42699882188913, 
    -3.49614982741997, -1.58018605400656, 31.9400739992037, -3.49614982741997, 
    611.912289697702, -39.1113192064196, -1.23187867484553, -1.58018605400656, 
    -39.1113192064196, 38.4279474441307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0373293083355784, -0.00163858123309744
    ), logphi = c(0.499880126399093, -1.56206554191003)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_66 = structure(list(
    par = c(-0.414280020248794, -0.167522632817255, 0.494694198048952, 
    -1.44318969591979), value = 14.4857704234847, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.102780169889, -0.205555750198982, 
    29.927624007442, -2.89085179638882, -0.205555750198982, 5.45129569040625, 
    -3.72884961530318, -1.5381380396029, 29.927624007442, -3.72884961530318, 
    422.034072118382, -35.1775352942507, -2.89085179638882, -1.5381380396029, 
    -35.1775352942507, 29.2144933409233), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.414280020248794, -0.167522632817255
    ), logphi = c(0.494694198048952, -1.44318969591979)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_67 = structure(list(
    par = c(-0.297761145599072, 0.177044119903194, 0.531641629705774, 
    -1.72008893789715), value = 9.12083286115318, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.2567107005978, -1.3141564783048, 
    38.5139007619273, -3.46934717931902, -1.3141564783048, 7.30407281590573, 
    -5.463820011542, -2.1698922787472, 38.5139007619273, -5.463820011542, 
    853.310865429613, -72.9096214604485, -3.46934717931902, -2.1698922787472, 
    -72.9096214604485, 49.6552045841092), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297761145599072, 0.177044119903194
    ), logphi = c(0.531641629705774, -1.72008893789715)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_68 = structure(list(
    par = c(-0.829041507727803, 0.704557563987943, 0.518460520041954, 
    -1.77649195026064), value = -7.65695866350449, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.0839708459552, 4.7167996217734, 
    41.0192119175701, -4.6092053005431, 4.7167996217734, 16.9451952181099, 
    4.38710316497115, -4.83187539979113, 41.0192119175701, 4.38710316497115, 
    813.202111464184, -90.4848691908322, -4.6092053005431, -4.83187539979113, 
    -90.4848691908322, 47.3619759682187), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.829041507727803, 0.704557563987943
    ), logphi = c(0.518460520041954, -1.77649195026064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_69 = structure(list(
    par = c(-0.142108390462279, -0.668436314176895, 0.425161657306436, 
    -1.75802810754924), value = 13.9916779700695, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.9291532337846, -1.73408132297936, 
    36.4551803286872, -0.652956146929284, -1.73408132297936, 
    1.97208509877811, -1.68528332666895, -0.968067650486404, 
    36.4551803286872, -1.68528332666895, 1022.87329822826, -25.93559163655, 
    -0.652956146929284, -0.968067650486404, -25.93559163655, 
    48.4387507171391), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142108390462279, -0.668436314176895
    ), logphi = c(0.425161657306436, -1.75802810754924)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_70 = structure(list(
    par = c(-0.416367294108544, 0.787464095493896, 0.433586055725657, 
    -1.57417671621428), value = -1.37470938315416, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.7571421981225, 8.68212287352677, 
    24.9053121967879, 0.744890465309567, 8.68212287352677, 20.4109387020868, 
    7.20995719716289, -1.81484653066777, 24.9053121967879, 7.20995719716289, 
    454.527491036139, -23.1353365540143, 0.744890465309567, -1.81484653066777, 
    -23.1353365540143, 25.0850099835498), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416367294108544, 0.787464095493896
    ), logphi = c(0.433586055725657, -1.57417671621428)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_71 = structure(list(
    par = c(0.0820470739693842, 0.499538580061738, 0.450065125382635, 
    -1.87619198763829), value = 1.34297358116108, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.246541846012, -0.230742955076302, 
    28.3463229254766, 1.1851550718589, -0.230742955076302, 8.96661525517928, 
    4.10297883612909, -1.13490584774389, 28.3463229254766, 4.10297883612909, 
    1053.3762252678, -34.7502648526676, 1.1851550718589, -1.13490584774389, 
    -34.7502648526676, 43.4951354281177), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0820470739693842, 0.499538580061738
    ), logphi = c(0.450065125382635, -1.87619198763829)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_72 = structure(list(
    par = c(-0.126244052947495, -0.478279105108033, 0.463440072861241, 
    -1.98569875665166), value = 4.43215861310041, counts = structure(c(297L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.64560770841294, -1.70517192898956, 
    28.3767722966122, -1.07163158935553, -1.70517192898956, 1.66978548610253, 
    -2.10666307465246, -0.692546501479541, 28.3767722966122, 
    -2.10666307465246, 1145.31263390338, -40.5872851850786, -1.07163158935553, 
    -0.692546501479541, -40.5872851850786, 41.3758050148427), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126244052947495, -0.478279105108033
    ), logphi = c(0.463440072861241, -1.98569875665166)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_73 = structure(list(
    par = c(-0.6506976100661, 0.564765615282206, 0.497722710491554, 
    -1.7662370504746), value = -1.67595133859901, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.7891121516384, 4.43260219773478, 
    51.1624244188269, -4.3269739531393, 4.43260219773478, 18.0711683808177, 
    4.11163834534989, -4.89995022379119, 51.1624244188269, 4.11163834534989, 
    1057.54323623275, -97.484847260354, -4.3269739531393, -4.89995022379119, 
    -97.484847260354, 58.241571851525), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.6506976100661, 0.564765615282206
    ), logphi = c(0.497722710491554, -1.7662370504746)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_74 = structure(list(
    par = c(-0.170288580137006, 0.0266874891228467, 0.466499855277349, 
    -1.45068081264879), value = 10.0839075405469, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.1895825695439, -0.273061709243905, 
    19.3385441447091, -0.395885728865508, -0.273061709243905, 
    4.65588423015362, -1.49478382827084, -1.11783429845858, 19.3385441447091, 
    -1.49478382827084, 293.967863262523, -13.762367511605, -0.395885728865508, 
    -1.11783429845858, -13.762367511605, 18.7193303222699), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170288580137006, 0.0266874891228467
    ), logphi = c(0.466499855277349, -1.45068081264879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_75 = structure(list(
    par = c(-0.270663374317647, 0.101681827939087, 0.46097686540115, 
    -1.68304743060972), value = 10.4049800753443, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.6401733687185, -0.552369971096311, 
    32.9413670407952, -1.09787260282879, -0.552369971096311, 
    5.59013350720505, -0.78716058249384, -1.87316483746258, 32.9413670407952, 
    -0.78716058249384, 711.02422440017, -37.653847975383, -1.09787260282879, 
    -1.87316483746258, -37.653847975383, 38.4674548317143), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270663374317647, 0.101681827939087
    ), logphi = c(0.46097686540115, -1.68304743060972)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_76 = structure(list(
    par = c(-0.263436905296696, 0.371930639492338, 0.523423911361225, 
    -1.91910125769407), value = -0.738929697539386, counts = structure(c(321L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.60336508284676, -0.678861139857823, 
    23.7920687533588, -1.41181971774484, -0.678861139857823, 
    4.89258088787192, -1.59112112552151, -1.39343292304694, 23.7920687533588, 
    -1.59112112552151, 704.235588559254, -43.7038146338109, -1.41181971774484, 
    -1.39343292304694, -43.7038146338109, 29.8146973732871), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263436905296696, 0.371930639492338
    ), logphi = c(0.523423911361225, -1.91910125769407)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_77 = structure(list(
    par = c(-0.339590838085485, -1.1419302762007, 0.602023725205134, 
    -1.35696838409133), value = 22.5642782970689, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.11571939532507, -1.17672964083937, 
    24.2336102225238, -5.52403285958292, -1.17672964083937, 0.768983364096698, 
    -3.49115451570015, 0.0515078020235649, 24.2336102225238, 
    -3.49115451570015, 357.343333847737, -63.7768894731217, -5.52403285958292, 
    0.0515078020235649, -63.7768894731217, 34.6705953635507), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339590838085485, -1.1419302762007
    ), logphi = c(0.602023725205134, -1.35696838409133)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_78 = structure(list(
    par = c(-0.431166677209302, -0.120357957841973, 0.587248129421225, 
    -1.33295882151488), value = 17.0242744643983, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.1837524789115, -1.00504154687542, 
    26.8604033273334, -5.71953621975041, -1.00504154687542, 4.8810266806143, 
    -5.87230469850653, -0.754402337932447, 26.8604033273334, 
    -5.87230469850653, 315.610010537704, -58.4557790594964, -5.71953621975041, 
    -0.754402337932447, -58.4557790594964, 31.5151038758898), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431166677209302, -0.120357957841973
    ), logphi = c(0.587248129421225, -1.33295882151488)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_79 = structure(list(
    par = c(0.255772828518925, 0.903128958951702, 0.433528356045909, 
    -1.63007376217477), value = -0.891628993359122, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.9005004068362, 2.07509601557465, 
    9.52545194493615, 1.22249081709047, 2.07509601557465, 9.80975127856665, 
    1.93576808210638, -0.31061443896141, 9.52545194493615, 1.93576808210638, 
    308.866517910789, -5.64682635315061, 1.22249081709047, -0.31061443896141, 
    -5.64682635315061, 15.9848566903265), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.255772828518925, 0.903128958951702
    ), logphi = c(0.433528356045909, -1.63007376217477)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_80 = structure(list(
    par = c(-0.18620630354529, -0.322314329539219, 0.430053222464352, 
    -1.76005504400627), value = 10.0072306770459, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.1665737533335, -1.5493997960192, 
    34.7185849505216, -0.605987575452716, -1.5493997960192, 3.05512337206437, 
    -1.11391234325353, -1.2622793437167, 34.7185849505216, -1.11391234325353, 
    928.291276561577, -29.3804087132532, -0.605987575452716, 
    -1.2622793437167, -29.3804087132532, 44.0794658933541), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18620630354529, -0.322314329539219
    ), logphi = c(0.430053222464352, -1.76005504400627)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_81 = structure(list(
    par = c(-0.396683968646632, -0.568547542163421, 0.543000575051307, 
    -0.833416236170298), value = 27.0529886366503, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.1285061965065, -0.402145428068934, 
    13.4681425478789, -2.44434732454835, -0.402145428068934, 
    2.884330664088, -1.9067207102097, -0.313687689157405, 13.4681425478789, 
    -1.9067207102097, 64.061964721418, -10.020413883538, -2.44434732454835, 
    -0.313687689157405, -10.020413883538, 6.00566755970533), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396683968646632, -0.568547542163421
    ), logphi = c(0.543000575051307, -0.833416236170298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_82 = structure(list(
    par = c(-0.220142156560368, 0.209687510369794, 0.644400097991541, 
    -1.34142508382401), value = 11.3420217793362, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.79325485461757, -1.45930919792647, 
    20.3538944592019, -4.89373118561787, -1.45930919792647, 5.4411440078006, 
    -5.42315326823584, -0.408095945925169, 20.3538944592019, 
    -5.42315326823584, 238.173389599527, -56.2396904046913, -4.89373118561787, 
    -0.408095945925169, -56.2396904046913, 28.7443295738932), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220142156560368, 0.209687510369794
    ), logphi = c(0.644400097991541, -1.34142508382401)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_83 = structure(list(
    par = c(-0.474856562438394, 0.0586764479143756, 0.456151564671924, 
    -1.36648138319306), value = 11.6546961507493, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.3024194876904, 1.55505930932165, 
    26.0167913710418, -1.27655152604156, 1.55505930932165, 7.38281634893312, 
    -1.5843277338945, -1.83198423697739, 26.0167913710418, -1.5843277338945, 
    306.244400097189, -16.3025000743389, -1.27655152604156, -1.83198423697739, 
    -16.3025000743389, 20.147843684537), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.474856562438394, 0.0586764479143756
    ), logphi = c(0.456151564671924, -1.36648138319306)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_84 = structure(list(
    par = c(-0.239528379739968, 0.250118902814002, 0.513377154865304, 
    -1.49720800200449), value = 10.1816827599068, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.2676123502383, 0.0968531383982452, 
    27.552926203267, -1.99836251058017, 0.0968531383982452, 8.09039821181301, 
    -2.69045720280303, -1.84318013118911, 27.552926203267, -2.69045720280303, 
    425.096879106412, -39.5589932502549, -1.99836251058017, -1.84318013118911, 
    -39.5589932502549, 29.5458741632615), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239528379739968, 0.250118902814002
    ), logphi = c(0.513377154865304, -1.49720800200449)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_85 = structure(list(
    par = c(-0.393341540440393, -0.217160199851292, 0.490675239296743, 
    -1.43909652404227), value = 11.3485686478857, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.3111291589216, -0.400003574263508, 
    27.7281942282492, -2.51272865381402, -0.400003574263508, 
    4.42925177424058, -3.38958272294576, -1.3634596409684, 27.7281942282492, 
    -3.38958272294576, 392.418319400178, -30.5481835050081, -2.51272865381402, 
    -1.3634596409684, -30.5481835050081, 26.8515034074213), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.393341540440393, -0.217160199851292
    ), logphi = c(0.490675239296743, -1.43909652404227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_86 = structure(list(
    par = c(-1.1656416047292, -1.61052741798027, 0.537404680170872, 
    -1.73100048118183), value = 11.6201195412356, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(2.92594928463785, -0.543660162666271, 
    26.3239555557959, -5.78321564725925, -0.543660162666271, 
    0.283164169445627, -5.47208883183714, 0.310064015351941, 
    26.3239555557959, -5.47208883183714, 971.724691900988, -112.597172160278, 
    -5.78321564725925, 0.310064015351941, -112.597172160278, 
    64.4383664845094), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-1.1656416047292, -1.61052741798027
    ), logphi = c(0.537404680170872, -1.73100048118183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_87 = structure(list(
    par = c(0.0539262572224684, 0.365869058449327, 0.528356878461965, 
    -1.68422972857068), value = 6.76495203452893, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.0728022354824, -1.95560464200106, 
    41.3519108355409, -1.31478385023698, -1.95560464200106, 12.8017305456307, 
    -3.7185577717036, -2.42451210019645, 41.3519108355409, -3.7185577717036, 
    945.97216798098, -67.8326834335774, -1.31478385023698, -2.42451210019645, 
    -67.8326834335774, 54.9840224801645), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0539262572224684, 0.365869058449327
    ), logphi = c(0.528356878461965, -1.68422972857068)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_88 = structure(list(
    par = c(-0.309566313768081, 0.674525805316415, 0.496731860000909, 
    -1.45914933734561), value = 6.32112917532221, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.7510869304444, 3.60190285508821, 
    24.5411990973388, -0.912356780902179, 3.60190285508821, 12.8274465780454, 
    1.45624998548755, -2.2737139360185, 24.5411990973388, 1.45624998548755, 
    346.348429058896, -32.7909760293732, -0.912356780902179, 
    -2.2737139360185, -32.7909760293732, 24.1180000091212), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309566313768081, 0.674525805316415
    ), logphi = c(0.496731860000909, -1.45914933734561)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_89 = structure(list(
    par = c(-0.675242064792459, -0.196516433981789, 0.535645845742735, 
    -1.63651340707025), value = 16.5054438665736, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.5216222136283, -1.28649454911312, 
    47.0868874353769, -7.72530122672421, -1.28649454911312, 5.83115936247935, 
    -10.7488196352534, -1.76940828211514, 47.0868874353769, -10.7488196352534, 
    947.63042190138, -108.342938670347, -7.72530122672421, -1.76940828211514, 
    -108.342938670347, 64.937857539249), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.675242064792459, -0.196516433981789
    ), logphi = c(0.535645845742735, -1.63651340707025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_90 = structure(list(
    par = c(-0.197579621422972, -0.00902593851812267, 0.512283044406338, 
    -1.60301855984915), value = 12.0339626322816, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.5477655177094, -1.92198886139749, 
    37.3904351431698, -2.74044838133314, -1.92198886139749, 5.77195038697909, 
    -4.73843836168442, -1.87564108955485, 37.3904351431698, -4.73843836168442, 
    721.910092920996, -56.5868757855803, -2.74044838133314, -1.87564108955485, 
    -56.5868757855803, 45.5630378355387), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197579621422972, -0.00902593851812267
    ), logphi = c(0.512283044406338, -1.60301855984915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_91 = structure(list(
    par = c(-0.913221836501337, 0.906693531878506, 0.654344141726316, 
    -1.47140058855796), value = -0.859046893015856, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.43552798071678, 4.2091649028464, 
    24.6057843549252, -7.06892083490729, 4.2091649028464, 15.8802012348858, 
    -2.85156942725351, -3.27785892784149, 24.6057843549252, -2.85156942725351, 
    287.256218118426, -78.7056476014847, -7.06892083490729, -3.27785892784149, 
    -78.7056476014847, 38.8861114704042), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.913221836501337, 0.906693531878506
    ), logphi = c(0.654344141726316, -1.47140058855796)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_92 = structure(list(
    par = c(-0.377023508077619, 0.288302810834998, 0.469093731535172, 
    -1.7019998797016), value = 8.04968735343335, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.4437922941558, 1.18423753248109, 
    48.8798297388904, -2.1893416013441, 1.18423753248109, 11.6412565729362, 
    0.759600455868537, -3.33950669584304, 48.8798297388904, 0.759600455868537, 
    1026.59915059222, -66.4935503005282, -2.1893416013441, -3.33950669584304, 
    -66.4935503005282, 55.7867982893256), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377023508077619, 0.288302810834998
    ), logphi = c(0.469093731535172, -1.7019998797016)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_93 = structure(list(
    par = c(-0.464957210441521, 0.347986455997527, 0.527826491572855, 
    -1.24715871552897), value = 6.8122548836504, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.9760150214532, 2.25729174241351, 
    16.6600794830885, -2.11682960138404, 2.25729174241351, 9.19879464600371, 
    -1.61343206528386, -1.36612318057949, 16.6600794830885, -1.61343206528386, 
    154.006269494911, -21.5471526416877, -2.11682960138404, -1.36612318057949, 
    -21.5471526416877, 13.3025498652017), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.464957210441521, 0.347986455997527
    ), logphi = c(0.527826491572855, -1.24715871552897)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_94 = structure(list(
    par = c(-0.407099662280777, 0.102743290278535, 0.487558091070193, 
    -1.9190405347129), value = 2.70933673985017, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.58905904280272, -1.2945427727562, 
    37.4408562511253, -2.50702213910881, -1.2945427727562, 4.735561780711, 
    -2.65792691189759, -1.89342691536698, 37.4408562511253, -2.65792691189759, 
    1132.11291679294, -66.6885328357569, -2.50702213910881, -1.89342691536698, 
    -66.6885328357569, 47.444631091409), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407099662280777, 0.102743290278535
    ), logphi = c(0.487558091070193, -1.9190405347129)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_95 = structure(list(
    par = c(-0.476639487992611, 0.517093997255508, 0.43659151742728, 
    -1.89990901458562), value = -4.79014958144788, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.4105677158658, 3.14607473450579, 
    33.3330505974949, -0.501550131648543, 3.14607473450579, 10.5199099760256, 
    8.08279550379432, -2.10135262490585, 33.3330505974949, 8.08279550379432, 
    947.025276997859, -49.3509407794024, -0.501550131648543, 
    -2.10135262490585, -49.3509407794024, 38.1448654489525), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476639487992611, 0.517093997255508
    ), logphi = c(0.43659151742728, -1.89990901458562)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_96 = structure(list(
    par = c(-1.16057882755349, -2.21033520340056, 0.568063769609741, 
    -1.63726315779367), value = 15.0278110506753, counts = structure(c(301L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(2.22888839118696, -0.236870477898776, 
    18.6942837672177, -4.75725181914299, -0.236870477898776, 
    0.0753821742804917, -2.40575644472329, 0.224247679092571, 
    18.6942837672177, -2.40575644472329, 632.312398015422, -89.2095722209163, 
    -4.75725181914299, 0.224247679092571, -89.2095722209163, 
    49.3170136026677), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-1.16057882755349, -2.21033520340056
    ), logphi = c(0.568063769609741, -1.63726315779367)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_97 = structure(list(
    par = c(0.0925611021767994, 0.590380971403347, 0.552745862591246, 
    -1.4095511283277), value = 8.07878093037612, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.75911483884, 0.294614638463031, 
    25.3384883706076, -1.37638009589658, 0.294614638463031, 15.0019175042537, 
    -2.8448349143062, -1.76971190213315, 25.3384883706076, -2.8448349143062, 
    363.96749662071, -44.5653180296546, -1.37638009589658, -1.76971190213315, 
    -44.5653180296546, 28.7119110078393), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0925611021767994, 0.590380971403347
    ), logphi = c(0.552745862591246, -1.4095511283277)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_98 = structure(list(
    par = c(-0.464269801460786, 0.445951194617133, 0.501206885553577, 
    -1.63463898993542), value = 0.614796734721416, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.3812099799281, 1.7327247938681, 
    29.8574130335183, -2.29549731667333, 1.7327247938681, 9.65793866214426, 
    -0.0540154858619246, -2.52984391213573, 29.8574130335183, 
    -0.0540154858619246, 532.073705767022, -49.2417918136479, 
    -2.29549731667333, -2.52984391213573, -49.2417918136479, 
    33.3712650619766), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.464269801460786, 0.445951194617133
    ), logphi = c(0.501206885553577, -1.63463898993542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_99 = structure(list(
    par = c(-0.0393232452562867, -0.282142366144061, 0.484813302633082, 
    -1.51442271735537), value = 16.1578418062186, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.0494933500435, -1.67263732109291, 
    25.2887499812005, -0.842629380493065, -1.67263732109291, 
    3.46679034990416, -2.75223259471602, -1.02528146816994, 25.2887499812005, 
    -2.75223259471602, 462.803393190825, -23.4802790628486, -0.842629380493065, 
    -1.02528146816994, -23.4802790628486, 29.1594884140878), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0393232452562867, -0.282142366144061
    ), logphi = c(0.484813302633082, -1.51442271735537)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_100 = structure(list(
    par = c(-0.413566963211321, -0.284444715329821, 0.590439923868922, 
    -1.56598749540428), value = 13.2476573144976, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.37530321051716, -1.60715361907648, 
    30.7427212269396, -5.6558515102445, -1.60715361907648, 3.63380526913204, 
    -8.11720995530507, -0.507138877781088, 30.7427212269396, 
    -8.11720995530507, 588.930086428352, -82.9993669695384, -5.6558515102445, 
    -0.507138877781088, -82.9993669695384, 46.1388407271279), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.413566963211321, -0.284444715329821
    ), logphi = c(0.590439923868922, -1.56598749540428)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_101 = structure(list(
    par = c(-0.69962606145429, 0.121258850892619, 0.600649759449603, 
    -1.39362937622196), value = 13.2974296591081, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.1657618866445, -0.574235516026533, 
    30.3604400242463, -7.68719809096652, -0.574235516026533, 
    6.157910779514, -7.92448756037345, -1.18536657200963, 30.3604400242463, 
    -7.92448756037345, 373.863457848067, -78.6364144600427, -7.68719809096652, 
    -1.18536657200963, -78.6364144600427, 40.4439900529852), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.69962606145429, 0.121258850892619
    ), logphi = c(0.600649759449603, -1.39362937622196)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_102 = structure(list(
    par = c(-0.307544571948133, -0.233858932685706, 0.458701681314081, 
    -1.84206091022776), value = 3.84962538023406, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.81986710429727, -1.04713187898398, 
    24.7202139609382, -1.28351345218825, -1.04713187898398, 2.15834949135463, 
    -1.58434768948723, -0.961779255348461, 24.7202139609382, 
    -1.58434768948723, 712.062179792028, -34.5445496515717, -1.28351345218825, 
    -0.961779255348461, -34.5445496515717, 32.172066578573), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.307544571948133, -0.233858932685706
    ), logphi = c(0.458701681314081, -1.84206091022776)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_103 = structure(list(
    par = c(-0.754166774679195, 0.61621623428705, 0.618392681149141, 
    -1.05209759932206), value = 8.85966005783513, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.9477414136193, 9.07886177614614, 
    23.3331332708531, -7.02999797308479, 9.07886177614614, 25.1152245862585, 
    -1.84046647078162, -2.51486662339317, 23.3331332708531, -1.84046647078162, 
    137.941767168748, -42.4153594678067, -7.02999797308479, -2.51486662339317, 
    -42.4153594678067, 22.6413203243681), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.754166774679195, 0.61621623428705
    ), logphi = c(0.618392681149141, -1.05209759932206)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_104 = structure(list(
    par = c(-0.59017966143841, 0.156749662773995, 0.404030480749936, 
    -1.67661175859892), value = -0.304657712504255, counts = structure(c(287L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0458337739033, 2.72563768310974, 
    34.5171799240873, -0.717089315371844, 2.72563768310974, 8.32618638213489, 
    3.37393700888811, -2.23021658607436, 34.5171799240873, 3.37393700888811, 
    670.32267617928, -25.4208574547166, -0.717089315371844, -2.23021658607436, 
    -25.4208574547166, 32.8842758663406), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.59017966143841, 0.156749662773995
    ), logphi = c(0.404030480749936, -1.67661175859892)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_105 = structure(list(
    par = c(-0.269575917828894, 0.355812782522317, 0.531502459907847, 
    -1.58644493780477), value = 4.97434844303497, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.31953399949015, -0.287575659729811, 
    19.2830653398257, -1.65916814065525, -0.287575659729811, 
    4.79723553836742, -1.93052076480349, -1.36008805151633, 19.2830653398257, 
    -1.93052076480349, 335.230709438861, -34.135453178874, -1.65916814065525, 
    -1.36008805151633, -34.135453178874, 22.7310662321845), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269575917828894, 0.355812782522317
    ), logphi = c(0.531502459907847, -1.58644493780477)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_106 = structure(list(
    par = c(-0.0436184008659961, 0.149677290268035, 0.506404660633234, 
    -2.04310853096541), value = -0.982579282997628, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.75709347733411, -1.75025089266256, 
    25.8289647151466, -0.776923033019017, -1.75025089266256, 
    3.75776173611175, -1.62069843834267, -0.996973914202393, 
    25.8289647151466, -1.62069843834267, 1048.75373312163, -40.0643843199155, 
    -0.776923033019017, -0.996973914202393, -40.0643843199155, 
    34.5035149790229), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0436184008659961, 0.149677290268035
    ), logphi = c(0.506404660633234, -2.04310853096541)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_107 = structure(list(
    par = c(-0.600145733952205, -0.499349297042766, 0.477818633049101, 
    -1.78866474066844), value = 9.41776213674335, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.9945175470472, -1.58367953062566, 
    48.5605319919813, -5.29097849000237, -1.58367953062566, 2.99398449321586, 
    -7.01254502555315, -1.52081835391726, 48.5605319919813, -7.01254502555315, 
    1294.32523531658, -89.7608369090364, -5.29097849000237, -1.52081835391726, 
    -89.7608369090364, 66.4377282255657), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.600145733952205, -0.499349297042766
    ), logphi = c(0.477818633049101, -1.78866474066844)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_108 = structure(list(
    par = c(-0.0733034634915406, 0.598732500054125, 0.460419255927129, 
    -1.5946323829384), value = 3.43554026963319, counts = structure(c(337L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.1767555644767, 1.62976476825172, 
    19.5751853030446, 0.583815032928481, 1.62976476825172, 9.21000229681113, 
    1.74913847128533, -1.28753327055531, 19.5751853030446, 1.74913847128533, 
    404.725092390756, -19.6554659579462, 0.583815032928481, -1.28753327055531, 
    -19.6554659579462, 23.1020909001733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0733034634915406, 0.598732500054125
    ), logphi = c(0.460419255927129, -1.5946323829384)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_109 = structure(list(
    par = c(-0.492396601886199, 0.331507577160711, 0.462818635820785, 
    -1.56096316834217), value = 7.60417050682056, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.0166950061178, 2.89889838844815, 
    36.0376105543736, -1.81779109587055, 2.89889838844815, 11.8160194739758, 
    0.885626363356096, -2.89870328407105, 36.0376105543736, 0.885626363356096, 
    578.629584305546, -40.5150699474, -1.81779109587055, -2.89870328407105, 
    -40.5150699474, 35.3250912041858), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.492396601886199, 0.331507577160711
    ), logphi = c(0.462818635820785, -1.56096316834217)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_110 = structure(list(
    par = c(-0.26460391226127, 0.118520949267179, 0.503854166668185, 
    -1.73811470392245), value = 9.38913979084567, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.3810548413347, -1.48353891660236, 
    44.1496271639252, -2.91750726333362, -1.48353891660236, 7.5250549369521, 
    -4.1342985728221, -2.42567918973258, 44.1496271639252, -4.1342985728221, 
    1026.53047549373, -71.8402339412449, -2.91750726333362, -2.42567918973258, 
    -71.8402339412449, 56.0178683666201), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26460391226127, 0.118520949267179
    ), logphi = c(0.503854166668185, -1.73811470392245)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_111 = structure(list(
    par = c(-0.320948996024289, -0.293665736357788, 0.481868108686255, 
    -1.71647851538646), value = 16.9712603513627, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.7902238493435, -2.10507512310443, 
    47.7700691732252, -3.47029499936369, -2.10507512310443, 4.30751581781408, 
    -5.18893880130378, -1.88937944489709, 47.7700691732252, -5.18893880130378, 
    1126.52357877607, -68.3318244800724, -3.47029499936369, -1.88937944489709, 
    -68.3318244800724, 61.3129214102059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320948996024289, -0.293665736357788
    ), logphi = c(0.481868108686255, -1.71647851538646)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_112 = structure(list(
    par = c(-0.609763299706066, 0.0649494399131563, 0.513687068547144, 
    -1.53116228633014), value = 4.74838527398443, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.35520694616909, -0.0630680307978082, 
    20.0540806134519, -2.69342443770526, -0.0630680307978082, 
    3.42688283483383, -2.72961133340743, -1.29926884184783, 20.0540806134519, 
    -2.72961133340743, 308.672400130217, -34.1577139670868, -2.69342443770526, 
    -1.29926884184783, -34.1577139670868, 22.0692326107219), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.609763299706066, 0.0649494399131563
    ), logphi = c(0.513687068547144, -1.53116228633014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_113 = structure(list(
    par = c(-0.126441619969017, 0.171285286439965, 0.550923261504477, 
    -1.42711540011522), value = 16.4755544014549, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.860269904053, -1.6951832568779, 
    34.810920772621, -3.63780824841342, -1.6951832568779, 9.27946585083106, 
    -5.65646927874752, -1.85370619565361, 34.810920772621, -5.65646927874752, 
    492.090687446378, -60.2921238561649, -3.63780824841342, -1.85370619565361, 
    -60.2921238561649, 38.7018037892872), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126441619969017, 0.171285286439965
    ), logphi = c(0.550923261504477, -1.42711540011522)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_114 = structure(list(
    par = c(0.0941107745204368, 0.144982147586574, 0.480457888670213, 
    -1.53522295145398), value = 17.7203691576959, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.2708348952262, -1.94423218324857, 
    31.2526446810679, 0.22539410560185, -1.94423218324857, 8.8793224852779, 
    -2.48963260673918, -1.68363181707321, 31.2526446810679, -2.48963260673918, 
    613.306174513717, -28.2601835137619, 0.22539410560185, -1.68363181707321, 
    -28.2601835137619, 37.6615912571765), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0941107745204368, 0.144982147586574
    ), logphi = c(0.480457888670213, -1.53522295145398)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_115 = structure(list(
    par = c(-0.397819354668903, 0.93432850391302, 0.577029166118912, 
    -1.81798608223964), value = -8.59965266860597, counts = structure(c(297L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.6576206073435, 3.68279345952516, 
    42.3878024546909, -3.61310710661478, 3.68279345952516, 19.6473493989657, 
    2.8255860424764, -4.37455140356313, 42.3878024546909, 2.8255860424764, 
    919.86815410694, -96.7066604318223, -3.61310710661478, -4.37455140356313, 
    -96.7066604318223, 49.9548421615259), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397819354668903, 0.93432850391302
    ), logphi = c(0.577029166118912, -1.81798608223964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_116 = structure(list(
    par = c(-0.807932704039317, 0.494398355256635, 0.510818772749916, 
    -1.52434637342237), value = 2.38759442440593, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.9862493697932, 3.70544849248589, 
    26.066617130116, -3.53200094127537, 3.70544849248589, 12.1788910361076, 
    0.108691207589828, -2.90683688564108, 26.066617130116, 0.108691207589828, 
    356.222661731742, -46.4204043535421, -3.53200094127537, -2.90683688564108, 
    -46.4204043535421, 26.8800753180365), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.807932704039317, 0.494398355256635
    ), logphi = c(0.510818772749916, -1.52434637342237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_117 = structure(list(
    par = c(0.0371105191762486, 0.0137579014850035, 0.508284967007275, 
    -1.67688247025243), value = 8.09302375537471, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.0666613704069, -1.87196575707205, 
    23.5570710338528, -0.782091920559225, -1.87196575707205, 
    3.82343242533167, -2.58356030391482, -1.07446968877767, 23.5570710338528, 
    -2.58356030391482, 559.819915183724, -32.9846089659469, -0.782091920559225, 
    -1.07446968877767, -32.9846089659469, 31.9653259617247), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0371105191762486, 0.0137579014850035
    ), logphi = c(0.508284967007275, -1.67688247025243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_118 = structure(list(
    par = c(-0.442696436318841, 0.384602280870862, 0.504254132520978, 
    -1.63056076529392), value = 2.62429739252275, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.0369965541161, 1.92752901506665, 
    44.5583822803464, -3.60219273254359, 1.92752901506665, 13.4103499735971, 
    -1.43754914372352, -3.56563409753541, 44.5583822803464, -1.43754914372352, 
    797.772146932552, -73.6174546522861, -3.60219273254359, -3.56563409753541, 
    -73.6174546522861, 50.3492164165564), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.442696436318841, 0.384602280870862
    ), logphi = c(0.504254132520978, -1.63056076529392)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_119 = structure(list(
    par = c(-0.278001946482967, -0.0919651795617845, 0.477437238046833, 
    -1.60408863090107), value = 12.1922319598762, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.8753114429235, -1.03891350322627, 
    32.0526703285751, -1.8102460550562, -1.03891350322627, 4.54189935039651, 
    -2.79941744363299, -1.63558746169024, 32.0526703285751, -2.79941744363299, 
    613.858302240366, -37.300578303423, -1.8102460550562, -1.63558746169024, 
    -37.300578303423, 36.6379988920862), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278001946482967, -0.0919651795617845
    ), logphi = c(0.477437238046833, -1.60408863090107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_120 = structure(list(
    par = c(-0.732096087877494, -1.57958591245893, 0.565800477729073, 
    -1.37485098151073), value = 19.5797979864836, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.76888119852015, -0.463997135824457, 
    19.6377458756558, -4.80572073113805, -0.463997135824457, 
    0.264196032162545, -2.31868099476173, 0.0407273623714843, 
    19.6377458756558, -2.31868099476173, 304.537585834375, -49.118627027056, 
    -4.80572073113805, 0.0407273623714843, -49.118627027056, 
    27.72472277357), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.732096087877494, -1.57958591245893
    ), logphi = c(0.565800477729073, -1.37485098151073)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_121 = structure(list(
    par = c(-0.0692955934537993, -0.314910389927906, 0.45133579154544, 
    -1.52291669778563), value = 15.7841374146356, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3557081631052, -1.33034457983072, 
    24.0199708727573, -0.125844248799467, -1.33034457983072, 
    3.19566212203526, -1.89378777992744, -0.99732238512118, 24.0199708727573, 
    -1.89378777992744, 447.555531974508, -12.021048758637, -0.125844248799467, 
    -0.99732238512118, -12.021048758637, 26.72297607198), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0692955934537993, -0.314910389927906
    ), logphi = c(0.45133579154544, -1.52291669778563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_122 = structure(list(
    par = c(-0.464977339704307, 0.176630085114798, 0.468719792172175, 
    -1.76934035328237), value = 2.81055886281956, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.5523710783912, 0.286537980453971, 
    42.9574320897075, -2.67712703161394, 0.286537980453971, 8.23008343653342, 
    -0.527404379280227, -2.7327204821237, 42.9574320897075, -0.527404379280227, 
    988.872627999626, -65.0615059110127, -2.67712703161394, -2.7327204821237, 
    -65.0615059110127, 50.3073698920886), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.464977339704307, 0.176630085114798
    ), logphi = c(0.468719792172175, -1.76934035328237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_123 = structure(list(
    par = c(-0.173979782345241, 0.23953196838638, 0.50512716549513, 
    -1.69622556909606), value = 6.35000497372766, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.7668834550267, -1.02693398074116, 
    26.0026469827146, -1.30620962612849, -1.02693398074116, 5.10062412106826, 
    -1.84651125989532, -1.55612287755513, 26.0026469827146, -1.84651125989532, 
    571.725757972041, -40.1736452468882, -1.30620962612849, -1.55612287755513, 
    -40.1736452468882, 32.5295378444945), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173979782345241, 0.23953196838638
    ), logphi = c(0.50512716549513, -1.69622556909606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_124 = structure(list(
    par = c(-0.11053897556385, 0.136154074046428, 0.401917289871563, 
    -1.57102767975222), value = 8.76508150725564, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.2203046469855, 0.593020018424539, 
    21.5904355722607, 1.21044778866874, 0.593020018424539, 6.58687442500749, 
    0.750978744523678, -1.07685931816093, 21.5904355722607, 0.750978744523678, 
    441.864446178108, -0.530600579029539, 1.21044778866874, -1.07685931816093, 
    -0.530600579029539, 23.6974923080169), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.11053897556385, 0.136154074046428
    ), logphi = c(0.401917289871563, -1.57102767975222)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_125 = structure(list(
    par = c(-0.534405983480206, -1.01580662864073, 0.508450881251586, 
    -1.62861694333768), value = 19.2904386697047, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.71818651315692, -1.1585153618654, 
    34.2256352139358, -4.69801401559167, -1.1585153618654, 0.98657086144982, 
    -4.75938496258266, -0.519128077858255, 34.2256352139358, 
    -4.75938496258266, 771.582644550683, -64.407881705808, -4.69801401559167, 
    -0.519128077858255, -64.407881705808, 48.7705423815044), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.534405983480206, -1.01580662864073
    ), logphi = c(0.508450881251586, -1.62861694333768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_126 = structure(list(
    par = c(-0.226997368186697, 0.284304417438719, 0.424883592658819, 
    -1.72262479398166), value = 2.65862908369853, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.3720986116096, 1.98903594483824, 
    36.4756739159589, 0.505607806067232, 1.98903594483824, 11.3282605154197, 
    3.4197677802883, -1.95991085283342, 36.4756739159589, 3.4197677802883, 
    887.554546105118, -30.8531122128475, 0.505607806067232, -1.95991085283342, 
    -30.8531122128475, 42.9820556355764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226997368186697, 0.284304417438719
    ), logphi = c(0.424883592658819, -1.72262479398166)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_127 = structure(list(
    par = c(0.151469890539812, 0.51419854010925, 0.557166416416959, 
    -1.42432164049856), value = 14.0699662313379, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.2556248304629, -1.93232238432373, 
    29.4852130680034, -1.59723969739289, -1.93232238432373, 13.1866500563405, 
    -4.06178117140499, -1.86704087701273, 29.4852130680034, -4.06178117140499, 
    444.586275145209, -53.060724063636, -1.59723969739289, -1.86704087701273, 
    -53.060724063636, 34.6371534876155), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.151469890539812, 0.51419854010925
    ), logphi = c(0.557166416416959, -1.42432164049856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_128 = structure(list(
    par = c(-0.490893257846746, 0.0898004342366903, 0.565719837947259, 
    -1.4066512604915), value = 12.5515839201701, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.7072026610821, -0.397483371550322, 
    27.4136429587735, -4.9715038996645, -0.397483371550322, 6.09499620463083, 
    -5.39996440762636, -1.39159282852575, 27.4136429587735, -5.39996440762636, 
    349.173195528518, -55.9713381613758, -4.9715038996645, -1.39159282852575, 
    -55.9713381613758, 31.2747463291352), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.490893257846746, 0.0898004342366903
    ), logphi = c(0.565719837947259, -1.4066512604915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_129 = structure(list(
    par = c(-0.666012599647598, 0.178679248578693, 0.483019207718317, 
    -1.80791412163948), value = 0.857387373158364, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(6.70992974116658, 0.055288420286459, 
    25.8566266730931, -2.51580061683132, 0.055288420286459, 4.30617981916903, 
    -1.54221216108752, -1.75681446501486, 25.8566266730931, -1.54221216108752, 
    610.017603766444, -48.6479469434808, -2.51580061683132, -1.75681446501486, 
    -48.6479469434808, 31.0516977592989), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.666012599647598, 0.178679248578693
    ), logphi = c(0.483019207718317, -1.80791412163948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_130 = structure(list(
    par = c(-0.461852250882071, -0.455376483970702, 0.518797988619966, 
    -1.73253126497679), value = 10.5794358445323, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.99218946903702, -1.64594162610499, 
    37.5532263139355, -4.49131377466827, -1.64594162610499, 2.76612348981686, 
    -6.94435469483778, -1.03418873087513, 37.5532263139355, -6.94435469483778, 
    949.595060528718, -76.5410386889265, -4.49131377466827, -1.03418873087513, 
    -76.5410386889265, 54.3432107527053), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.461852250882071, -0.455376483970702
    ), logphi = c(0.518797988619966, -1.73253126497679)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_131 = structure(list(
    par = c(-0.36210496915662, 0.625269233138149, 0.492841192142819, 
    -1.79486677341905), value = 0.309227042688608, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.5232778385492, 2.96128101773263, 
    43.3031332054412, -1.64508203415181, 2.96128101773263, 15.3735081944717, 
    5.34655582029586, -3.4145515865891, 43.3031332054412, 5.34655582029586, 
    1019.33163623524, -74.0818369644458, -1.64508203415181, -3.4145515865891, 
    -74.0818369644458, 51.3697610924346), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36210496915662, 0.625269233138149
    ), logphi = c(0.492841192142819, -1.79486677341905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_132 = structure(list(
    par = c(0.273938658786249, 0.271294887751373, 0.480211262989867, 
    -1.58271062913864), value = 8.20800980623105, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.897944491692, -1.63907362660254, 
    17.5944076841184, 0.692210187391851, -1.63907362660254, 6.59363818478198, 
    -1.18966135476128, -0.927282578500055, 17.5944076841184, 
    -1.18966135476128, 417.642191723466, -15.99979913669, 0.692210187391851, 
    -0.927282578500055, -15.99979913669, 24.606818270545), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.273938658786249, 0.271294887751373
    ), logphi = c(0.480211262989867, -1.58271062913864)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_133 = structure(list(
    par = c(-0.638128922674516, 0.0632431583637309, 0.578770198420557, 
    -1.60873882846939), value = 11.4834071422016, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.33237673791842, -1.13240396171221, 
    33.3912600618547, -6.37485935328641, -1.13240396171221, 5.57475584361811, 
    -9.61234052176962, -1.29329870368622, 33.3912600618547, -9.61234052176962, 
    624.350518895866, -90.4157408778694, -6.37485935328641, -1.29329870368622, 
    -90.4157408778694, 48.3444244299136), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.638128922674516, 0.0632431583637309
    ), logphi = c(0.578770198420557, -1.60873882846939)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_134 = structure(list(
    par = c(-0.277738055422993, 0.697076915541299, 0.535187027988052, 
    -1.6321475639507), value = 2.49992274023777, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.6263529837422, 2.04614596754915, 
    29.044036505832, -1.91974570773468, 2.04614596754915, 11.9635286168762, 
    0.577000901058611, -2.61645985433212, 29.044036505832, 0.577000901058611, 
    524.008582374558, -55.3726783780739, -1.91974570773468, -2.61645985433212, 
    -55.3726783780739, 34.498737605082), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277738055422993, 0.697076915541299
    ), logphi = c(0.535187027988052, -1.6321475639507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_135 = structure(list(
    par = c(-0.915201426559895, -0.22255312205546, 0.473688395221594, 
    -1.66583218365969), value = 4.30789033868436, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.48603118250202, -0.106396935706243, 
    29.8631166315566, -4.32405317751794, -0.106396935706243, 
    3.17525006510166, -4.30666342809971, -1.59327573223678, 29.8631166315566, 
    -4.30666342809971, 583.720541774468, -54.4399142590191, -4.32405317751794, 
    -1.59327573223678, -54.4399142590191, 35.4672815272572), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.915201426559895, -0.22255312205546
    ), logphi = c(0.473688395221594, -1.66583218365969)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_136 = structure(list(
    par = c(-0.120414343498628, -1.29229806818084, 0.471912401259948, 
    -1.52275086384634), value = 17.2188787584127, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.62371682966534, -0.909631601153649, 
    20.2667690025748, -1.0462380486409, -0.909631601153649, 0.42124705679214, 
    -1.44124991408034, -0.321861638674648, 20.2667690025748, 
    -1.44124991408034, 402.432325445901, -15.0382124961546, -1.0462380486409, 
    -0.321861638674648, -15.0382124961546, 24.7741958636638), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.120414343498628, -1.29229806818084
    ), logphi = c(0.471912401259948, -1.52275086384634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_137 = structure(list(
    par = c(-0.560978527562392, 0.149257461180613, 0.496069631198626, 
    -1.59131527880468), value = 8.09045568559219, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.579753240098, 0.740765024875856, 
    44.5084708053933, -4.62591841854376, 0.740765024875856, 9.65187136792167, 
    -3.84440948764109, -3.15130078165637, 44.5084708053933, -3.84440948764109, 
    750.632300098086, -69.8590457790527, -4.62591841854376, -3.15130078165637, 
    -69.8590457790527, 48.781271380971), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.560978527562392, 0.149257461180613
    ), logphi = c(0.496069631198626, -1.59131527880468)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_138 = structure(list(
    par = c(0.31518895096819, -0.462428341345955, 0.499903695009444, 
    -1.62674380529927), value = 12.2241858246912, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.2024790263353, -2.38335883340213, 
    18.8528457503168, 0.0102861263950871, -2.38335883340213, 
    2.02150456285466, -2.05206802128544, -0.544774966471095, 
    18.8528457503168, -2.05206802128544, 509.86209262005, -19.7497260221446, 
    0.0102861263950871, -0.544774966471095, -19.7497260221446, 
    29.7077987800876), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.31518895096819, -0.462428341345955
    ), logphi = c(0.499903695009444, -1.62674380529927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_139 = structure(list(
    par = c(0.0585971446388352, -1.41785280443049, 0.472983403301693, 
    -2.08727414985949), value = 7.46296145475976, counts = structure(c(415L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.5229375030037, -1.27570970120949, 
    29.1658569384623, -0.89367502087434, -1.27570970120949, 0.412547397354857, 
    -1.72553999955305, -0.215312390361433, 29.1658569384623, 
    -1.72553999955305, 1701.207857568, -40.2028023320788, -0.89367502087434, 
    -0.215312390361433, -40.2028023320788, 51.3704207023569), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0585971446388352, -1.41785280443049
    ), logphi = c(0.472983403301693, -2.08727414985949)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_140 = structure(list(
    par = c(0.178228996397668, 0.412383122824042, 0.476805513632676, 
    -1.65589349196076), value = 6.72640627386464, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.8460544086631, -1.24488262254197, 
    29.2275145330478, 1.005770965401, -1.24488262254197, 11.1879503803536, 
    -0.277755279665115, -1.59922795883727, 29.2275145330478, 
    -0.277755279665115, 744.101695975496, -31.5035987903389, 
    1.005770965401, -1.59922795883727, -31.5035987903389, 41.1634407742056
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.178228996397668, 0.412383122824042
    ), logphi = c(0.476805513632676, -1.65589349196076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_141 = structure(list(
    par = c(-0.831623104384702, -0.429416533130649, 0.552089440895481, 
    -1.71959889574419), value = 11.5894421692204, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.90401885514069, -1.43508597538755, 
    35.7985200096778, -6.74602016115244, -1.43508597538755, 2.74016058821047, 
    -11.4718975821049, -0.423134273397352, 35.7985200096778, 
    -11.4718975821049, 950.438522465902, -110.58783257889, -6.74602016115244, 
    -0.423134273397352, -110.58783257889, 62.0985342365543), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.831623104384702, -0.429416533130649
    ), logphi = c(0.552089440895481, -1.71959889574419)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_142 = structure(list(
    par = c(-0.112291805702126, 0.0830731832928542, 0.568268746810289, 
    -1.67175222190771), value = 9.42875324274441, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.076909597867, -2.03256858188894, 
    29.8276452519453, -3.03337136098314, -2.03256858188894, 5.24658106559883, 
    -6.17366774324779, -1.295276363944, 29.8276452519453, -6.17366774324779, 
    649.536973300169, -62.7813538311983, -3.03337136098314, -1.295276363944, 
    -62.7813538311983, 40.8931117461542), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.112291805702126, 0.0830731832928542
    ), logphi = c(0.568268746810289, -1.67175222190771)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_143 = structure(list(
    par = c(-0.162446082557121, 0.502531313942847, 0.495507875616272, 
    -1.47395010384005), value = 7.23488294388943, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.747077826926, 1.52421949417558, 
    29.701593848408, -0.797193601242974, 1.52421949417558, 12.722641272056, 
    -0.542715351103951, -2.30575012305501, 29.701593848408, -0.542715351103951, 
    453.564161346343, -36.3851306142138, -0.797193601242974, 
    -2.30575012305501, -36.3851306142138, 30.5184874078712), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162446082557121, 0.502531313942847
    ), logphi = c(0.495507875616272, -1.47395010384005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_144 = structure(list(
    par = c(0.520645472963933, 0.39627145676942, 0.5040754898271, 
    -1.46405324243775), value = 18.5754421785409, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.5785768857587, -5.5770148765788, 
    22.9448998512183, 1.34776634252987, -5.5770148765788, 10.9132722192484, 
    -2.97924276182471, -1.30079271798422, 22.9448998512183, -2.97924276182471, 
    503.922437080639, -24.1448814044531, 1.34776634252987, -1.30079271798422, 
    -24.1448814044531, 32.6148737510579), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.520645472963933, 0.39627145676942
    ), logphi = c(0.5040754898271, -1.46405324243775)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_145 = structure(list(
    par = c(-0.476695308460894, 0.0155257622482586, 0.515751452788773, 
    -1.61712484267243), value = 12.052587536775, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.7732149570161, -1.13791482458936, 
    32.4840275598426, -3.73038256640257, -1.13791482458936, 4.23945512695312, 
    -4.69795726676381, -1.81395475351565, 32.4840275598426, -4.69795726676381, 
    600.341853310038, -57.716006566233, -3.73038256640257, -1.81395475351565, 
    -57.716006566233, 39.1564085209239), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476695308460894, 0.0155257622482586
    ), logphi = c(0.515751452788773, -1.61712484267243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_146 = structure(list(
    par = c(-0.256079726714914, 0.391199062319519, 0.476524194917138, 
    -1.73896878908772), value = 6.75171530078882, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5315396079002, 0.518681070760252, 
    37.2365415550746, -1.05477774281493, 0.518681070760252, 9.74714488632955, 
    1.42094066024612, -2.46530882208607, 37.2365415550746, 1.42094066024612, 
    858.810359028794, -52.9084935987356, -1.05477774281493, -2.46530882208607, 
    -52.9084935987356, 44.8840371893855), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256079726714914, 0.391199062319519
    ), logphi = c(0.476524194917138, -1.73896878908772)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_147 = structure(list(
    par = c(-0.433328682613268, -0.641137683956954, 0.474851466357754, 
    -1.63587176469054), value = 12.8366584129585, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.2631427725264, -1.22780981914872, 
    31.6592331293108, -2.91210602987313, -1.22780981914872, 1.64530010771102, 
    -3.61307218321727, -0.961677403710226, 31.6592331293108, 
    -3.61307218321727, 665.59746667183, -41.2739551736152, -2.91210602987313, 
    -0.961677403710226, -41.2739551736152, 38.9736928401163), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.433328682613268, -0.641137683956954
    ), logphi = c(0.474851466357754, -1.63587176469054)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_148 = structure(list(
    par = c(-0.567312602814957, -0.197549527103477, 0.645867562076125, 
    -1.65092781784883), value = 6.46379217902306, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(4.11772542463495, -1.41784138740775, 
    23.2488196365566, -5.31203608833408, -1.41784138740775, 3.12133057978059, 
    -10.3003661613421, 0.429894179809764, 23.2488196365566, -10.3003661613421, 
    567.616101758261, -93.0375389656124, -5.31203608833408, 0.429894179809764, 
    -93.0375389656124, 45.1701782897551), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.567312602814957, -0.197549527103477
    ), logphi = c(0.645867562076125, -1.65092781784883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_149 = structure(list(
    par = c(-0.191562103386824, -0.0500371644135403, 0.499740538926795, 
    -1.60941076425797), value = 13.8217472065363, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.3553542540384, -2.04751259857971, 
    38.2023457259351, -2.38858206325077, -2.04751259857971, 5.30708741885988, 
    -4.28053224821312, -1.88476934104287, 38.2023457259351, -4.28053224821312, 
    752.742884308155, -52.4471730942722, -2.38858206325077, -1.88476934104287, 
    -52.4471730942722, 46.1775849269763), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191562103386824, -0.0500371644135403
    ), logphi = c(0.499740538926795, -1.60941076425797)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_150 = structure(list(
    par = c(-0.289196901106365, -0.0076769898923864, 0.473507924942756, 
    -2.05387681044797), value = -1.14471758133755, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(11.8074387487344, -1.81002991794799, 
    47.0716370915003, -2.13750092825649, -1.81002991794799, 6.09844540666593, 
    -2.39784903577345, -1.7830610568037, 47.0716370915003, -2.39784903577345, 
    1865.01320675703, -77.7701540723985, -2.13750092825649, -1.7830610568037, 
    -77.7701540723985, 60.4128500467649), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289196901106365, -0.0076769898923864
    ), logphi = c(0.473507924942756, -2.05387681044797)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_151 = structure(list(
    par = c(-0.318042854838283, 0.111678337274746, 0.52868340889212, 
    -1.42336140246459), value = 13.0398209375754, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.2720587794056, -0.714505330012827, 
    24.1626872643508, -2.67144172783063, -0.714505330012827, 
    4.91844048688961, -3.39782581537662, -1.43123036266957, 24.1626872643508, 
    -3.39782581537662, 325.279472443096, -36.9616029225472, -2.67144172783063, 
    -1.43123036266957, -36.9616029225472, 24.8208944078065), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318042854838283, 0.111678337274746
    ), logphi = c(0.52868340889212, -1.42336140246459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_152 = structure(list(
    par = c(-0.236134319300497, 0.0332695968601672, 0.461024163863459, 
    -1.7912027802748), value = 5.75361263358247, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.3807907729544, -1.09960109706542, 
    34.4171213837452, -1.1587704151772, -1.09960109706542, 4.80770590871593, 
    -0.856353121969633, -1.68948952117276, 34.4171213837452, 
    -0.856353121969633, 903.211901410073, -44.3961288495442, 
    -1.1587704151772, -1.68948952117276, -44.3961288495442, 43.3930234451374
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236134319300497, 0.0332695968601672
    ), logphi = c(0.461024163863459, -1.7912027802748)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_153 = structure(list(
    par = c(-0.12047161722005, -0.939017839070718, 0.509582847526681, 
    -1.74061845949069), value = 14.7393318970378, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.4838648393724, -1.72542620768823, 
    32.8477302957708, -2.4508970120074, -1.72542620768823, 1.10233145811378, 
    -3.74848389483873, -0.544012458636445, 32.8477302957708, 
    -3.74848389483873, 946.759594810054, -52.0025624386466, -2.4508970120074, 
    -0.544012458636445, -52.0025624386466, 50.8844659901087), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.12047161722005, -0.939017839070718
    ), logphi = c(0.509582847526681, -1.74061845949069)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_154 = structure(list(
    par = c(-0.332090057266638, -0.111340571157391, 0.481411231427752, 
    -1.70360111100076), value = 10.9249227532589, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.5304816968082, -1.35413099133785, 
    47.0431501891078, -3.2023232097167, -1.35413099133785, 6.53355750035445, 
    -4.36829750194434, -2.26222615662408, 47.0431501891078, -4.36829750194434, 
    1051.31625080812, -66.624053214559, -3.2023232097167, -2.26222615662408, 
    -66.624053214559, 58.0381619021964), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332090057266638, -0.111340571157391
    ), logphi = c(0.481411231427752, -1.70360111100076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_155 = structure(list(
    par = c(-0.246584788423291, -1.58458629829266, 0.479978919718569, 
    -1.77599467430583), value = 13.2759088425378, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.18551418912961, -0.850913940197984, 
    28.7680173602922, -2.23755933093095, -0.850913940197984, 
    0.276387800202116, -1.97907407217812, -0.257049340701698, 
    28.7680173602922, -1.97907407217812, 903.199982197567, -42.2547267651119, 
    -2.23755933093095, -0.257049340701698, -42.2547267651119, 
    45.6010607856605), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.246584788423291, -1.58458629829266
    ), logphi = c(0.479978919718569, -1.77599467430583)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_156 = structure(list(
    par = c(-0.419662738053215, 0.0139887989783667, 0.479718659759345, 
    -1.66875751167202), value = 8.14476517191842, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8262940825554, -0.419184333022571, 
    29.7996483054064, -2.21014156509547, -0.419184333022571, 
    4.66498063733667, -2.29193623102475, -1.7137245651444, 29.7996483054064, 
    -2.29193623102475, 602.210701587946, -42.2187849073996, -2.21014156509547, 
    -1.7137245651444, -42.2187849073996, 34.6454846478217), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419662738053215, 0.0139887989783667
    ), logphi = c(0.479718659759345, -1.66875751167202)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_157 = structure(list(
    par = c(-0.761892328994797, 0.409959193553051, 0.541690932080326, 
    -1.23608570771737), value = 5.94864692670677, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.3941666991811, 3.21959340299216, 
    18.6925590157649, -3.49806835675537, 3.21959340299216, 9.50780837527532, 
    -1.47180112586298, -1.881579132057, 18.6925590157649, -1.47180112586298, 
    157.663334772185, -28.2789403989181, -3.49806835675537, -1.881579132057, 
    -28.2789403989181, 15.6016054710939), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.761892328994797, 0.409959193553051
    ), logphi = c(0.541690932080326, -1.23608570771737)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_158 = structure(list(
    par = c(-0.523113029726187, -0.174605307197338, 0.469783063187566, 
    -1.97805649982794), value = 1.90645606860412, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.85303395067771, -1.57984225079844, 
    37.7973861951375, -2.91350836167936, -1.57984225079844, 2.89860805402498, 
    -4.08218693559448, -1.43630253335303, 37.7973861951375, -4.08218693559448, 
    1309.58734631115, -71.7924411663962, -2.91350836167936, -1.43630253335303, 
    -71.7924411663962, 49.6645611112179), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.523113029726187, -0.174605307197338
    ), logphi = c(0.469783063187566, -1.97805649982794)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_159 = structure(list(
    par = c(-0.726150153714398, 0.67142963997628, 0.563153812269182, 
    -1.0297782029463), value = 4.04769855913445, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.7925305166203, 9.64767145594791, 
    16.7526223870951, -3.46727003930347, 9.64767145594791, 24.2532493675007, 
    -0.00616123241314881, -2.11939253613735, 16.7526223870951, 
    -0.00616123241314881, 95.9735073968737, -22.0902850156524, 
    -3.46727003930347, -2.11939253613735, -22.0902850156524, 
    11.7379242943194), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.726150153714398, 0.67142963997628
    ), logphi = c(0.563153812269182, -1.0297782029463)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_160 = structure(list(
    par = c(0.411764354004703, 0.236936632352589, 0.491849286139257, 
    -1.75685800794833), value = 13.6432708821821, counts = structure(c(317L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.1768082966942, -5.49107699532314, 
    32.6765821414554, 1.37840700942249, -5.49107699532314, 8.71129922508374, 
    -1.92921611752439, -1.41155007948868, 32.6765821414554, -1.92921611752439, 
    1130.64903235705, -38.0029304751783, 1.37840700942249, -1.41155007948868, 
    -38.0029304751783, 56.897229396391), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.411764354004703, 0.236936632352589
    ), logphi = c(0.491849286139257, -1.75685800794833)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_161 = structure(list(
    par = c(-0.154294273038784, 0.0994617268373447, 0.460172871825775, 
    -1.79074004611646), value = 3.84221236651944, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8969183872971, -0.602782049607953, 
    34.4872389099748, -0.656010268551555, -0.602782049607953, 
    7.01260756819089, -0.288783170043772, -1.68860882054922, 
    34.4872389099748, -0.288783170043772, 932.268726584029, -42.4063333863689, 
    -0.656010268551555, -1.68860882054922, -42.4063333863689, 
    44.5024573834107), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.154294273038784, 0.0994617268373447
    ), logphi = c(0.460172871825775, -1.79074004611646)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_162 = structure(list(
    par = c(0.187348680785086, -0.15273746273507, 0.458383625841246, 
    -1.6925360978315), value = 15.4628623810743, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.2830742634366, -3.03158824133121, 
    28.4865432331749, 0.640629803649873, -3.03158824133121, 4.10742731205005, 
    -1.70254789333413, -1.07367538326741, 28.4865432331749, -1.70254789333413, 
    809.682640171783, -21.3191190181483, 0.640629803649873, -1.07367538326741, 
    -21.3191190181483, 42.5933035330672), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.187348680785086, -0.15273746273507
    ), logphi = c(0.458383625841246, -1.6925360978315)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_163 = structure(list(
    par = c(-0.129527601887421, 0.264665392154354, 0.500959493173598, 
    -1.66912085072268), value = 8.42871929309065, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.3458084707635, -1.53897749122223, 
    35.7402225970027, -1.4201106062206, -1.53897749122223, 7.16347169404941, 
    -2.17728934037709, -2.16628137161834, 35.7402225970027, -2.17728934037709, 
    765.420730973521, -52.1005171369993, -1.4201106062206, -2.16628137161834, 
    -52.1005171369993, 44.3564876784208), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129527601887421, 0.264665392154354
    ), logphi = c(0.500959493173598, -1.66912085072268)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_164 = structure(list(
    par = c(-0.614757760225525, 0.560498106154856, 0.577419437775107, 
    -1.55136385618103), value = -0.504920695875859, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.53096161712585, 1.9725190041342, 
    23.6262071959814, -4.07069272201355, 1.9725190041342, 11.3130806060902, 
    -3.14182664018503, -2.18516459327134, 23.6262071959814, -3.14182664018503, 
    347.762847189959, -56.9486505339611, -4.07069272201355, -2.18516459327134, 
    -56.9486505339611, 29.6523544531802), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.614757760225525, 0.560498106154856
    ), logphi = c(0.577419437775107, -1.55136385618103)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_165 = structure(list(
    par = c(-0.360621983792899, 0.00287251726005684, 0.510275463741368, 
    -1.66306829528178), value = 10.7049325418696, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.3423768898512, -1.07915387825841, 
    36.4497319655932, -3.35454739541774, -1.07915387825841, 5.73161572914316, 
    -4.74539889383507, -1.91659405546218, 36.4497319655932, -4.74539889383507, 
    745.528121062211, -61.4091085784363, -3.35454739541774, -1.91659405546218, 
    -61.4091085784363, 45.2011593337076), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360621983792899, 0.00287251726005684
    ), logphi = c(0.510275463741368, -1.66306829528178)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_166 = structure(list(
    par = c(0.432328551994158, 0.298307817704217, 0.476565643310312, 
    -1.67075225327252), value = 13.529382168057, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.987531445029, -3.74756999610426, 
    25.948103717699, 1.66720298477863, -3.74756999610426, 10.3737458565512, 
    -1.38772473512461, -1.2153144259841, 25.948103717699, -1.38772473512461, 
    819.174793847743, -23.6462177105601, 1.66720298477863, -1.2153144259841, 
    -23.6462177105601, 44.4541067201598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.432328551994158, 0.298307817704217
    ), logphi = c(0.476565643310312, -1.67075225327252)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_167 = structure(list(
    par = c(0.169679627242292, 0.213353727932836, 0.485769372401478, 
    -1.91547054155659), value = 9.92458644328552, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.5243494889883, -3.98069925600097, 
    43.2597729975726, 0.387330083562176, -3.98069925600097, 8.43242274362055, 
    -0.434980212737912, -1.72920380436814, 43.2597729975726, 
    -0.434980212737912, 1637.26544891452, -56.7279903989082, 
    0.387330083562176, -1.72920380436814, -56.7279903989082, 
    66.0332404747166), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.169679627242292, 0.213353727932836
    ), logphi = c(0.485769372401478, -1.91547054155659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_168 = structure(list(
    par = c(-0.656786958349694, -0.399701040912726, 0.52112253815394, 
    -1.80682800268766), value = 9.7755855842948, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.81209587835474, -1.46737766248961, 
    32.1367480080603, -4.40460061557069, -1.46737766248961, 2.08792944000891, 
    -7.68621722491147, -0.79619886217408, 32.1367480080603, -7.68621722491147, 
    931.605538970537, -79.2291244287036, -4.40460061557069, -0.79619886217408, 
    -79.2291244287036, 49.9608347062086), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.656786958349694, -0.399701040912726
    ), logphi = c(0.52112253815394, -1.80682800268766)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_169 = structure(list(
    par = c(-0.685047649655154, 0.505127705672069, 0.571147666408132, 
    -1.35275074440122), value = 1.63013533935022, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.86097507310402, 2.19603841422611, 
    15.1154842291668, -3.04147780094688, 2.19603841422611, 8.43717953946665, 
    -1.61014700506001, -1.4723099521774, 15.1154842291668, -1.61014700506001, 
    157.601464894075, -30.9439363204156, -3.04147780094688, -1.4723099521774, 
    -30.9439363204156, 16.3079699699864), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.685047649655154, 0.505127705672069
    ), logphi = c(0.571147666408132, -1.35275074440122)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_170 = structure(list(
    par = c(0.0699631353802438, 0.285076469725984, 0.453390900755352, 
    -1.68497492479717), value = 10.9839963908216, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.4695993072667, -1.42109399448032, 
    32.3795257815007, 1.01721884693262, -1.42109399448032, 8.787790632514, 
    0.438120123291696, -1.63916985540524, 32.3795257815007, 0.438120123291696, 
    840.917705904776, -28.4511257839792, 1.01721884693262, -1.63916985540524, 
    -28.4511257839792, 44.0309304270414), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0699631353802438, 0.285076469725984
    ), logphi = c(0.453390900755352, -1.68497492479717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_171 = structure(list(
    par = c(-0.701648111313847, 0.603438125856354, 0.488680720922298, 
    -1.84489659749754), value = -3.57061352473848, counts = structure(c(315L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.6062049063957, 2.88056800235026, 
    41.9013404413526, -3.21026996052964, 2.88056800235026, 11.5921517682693, 
    5.85153247945058, -3.9914991186718, 41.9013404413526, 5.85153247945058, 
    964.17478633537, -81.3489914364141, -3.21026996052964, -3.9914991186718, 
    -81.3489914364141, 47.0357634156926), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.701648111313847, 0.603438125856354
    ), logphi = c(0.488680720922298, -1.84489659749754)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_172 = structure(list(
    par = c(0.0581132853351798, 0.798183420064095, 0.501491230271647, 
    -1.75897933463348), value = -1.67869807231702, counts = structure(c(345L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.5109791642808, 2.87233555307242, 
    35.964684523826, 0.817954127263487, 2.87233555307242, 18.9324169118654, 
    4.83808181916956, -2.22121502235773, 35.964684523826, 4.83808181916956, 
    983.20075581515, -58.5841964881317, 0.817954127263487, -2.22121502235773, 
    -58.5841964881317, 50.2184112343151), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0581132853351798, 0.798183420064095
    ), logphi = c(0.501491230271647, -1.75897933463348)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_173 = structure(list(
    par = c(-0.238501866604606, -0.0313444930572683, 0.492570766786421, 
    -1.53074582907699), value = 12.430431445033, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.2473854466706, -1.22252994971817, 
    31.7866386292387, -1.99224174801671, -1.22252994971817, 5.2502165144297, 
    -3.35195334733029, -1.70171291902221, 31.7866386292387, -3.35195334733029, 
    539.110519786057, -38.2336166504516, -1.99224174801671, -1.70171291902221, 
    -38.2336166504516, 34.7800293458711), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238501866604606, -0.0313444930572683
    ), logphi = c(0.492570766786421, -1.53074582907699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_174 = structure(list(
    par = c(-0.330661171918199, 0.209396984355436, 0.46240700228795, 
    -1.71354101237702), value = 5.64798291627808, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.1841065130468, 0.292221108200152, 
    28.8021286989348, -1.07975405816418, 0.292221108200152, 6.27936403607698, 
    0.153490944621026, -1.79070977801565, 28.8021286989348, 0.153490944621026, 
    632.792200286003, -36.5736480194556, -1.07975405816418, -1.79070977801565, 
    -36.5736480194556, 33.4363283089889), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330661171918199, 0.209396984355436
    ), logphi = c(0.46240700228795, -1.71354101237702)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_175 = structure(list(
    par = c(-0.112808684879494, 0.156852357756932, 0.505989721609665, 
    -1.61799570039739), value = 9.4285494789748, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.074373802573, -1.13254020561726, 
    25.7563972607677, -1.2367094868182, -1.13254020561726, 5.32647074003023, 
    -2.44426044249124, -1.45621037894728, 25.7563972607677, -2.44426044249124, 
    514.737844615087, -36.7410646939792, -1.2367094868182, -1.45621037894728, 
    -36.7410646939792, 31.4999772141888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.112808684879494, 0.156852357756932
    ), logphi = c(0.505989721609665, -1.61799570039739)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_176 = structure(list(
    par = c(-0.371173372625338, 0.23545565763552, 0.523444881109454, 
    -1.44072280548914), value = 11.4005118757257, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.9668438182159, 0.636994059721729, 
    31.4213008865138, -3.33278171971152, 0.636994059721729, 9.64854915030955, 
    -3.60264966747792, -2.190464176266, 31.4213008865138, -3.60264966747792, 
    423.2877191086, -47.9922000349298, -3.33278171971152, -2.190464176266, 
    -47.9922000349298, 31.9660628544938), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371173372625338, 0.23545565763552
    ), logphi = c(0.523444881109454, -1.44072280548914)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_177 = structure(list(
    par = c(-0.214133487155269, 1.05959583342316, 0.553413516222193, 
    -1.53822847816802), value = -2.47827277546745, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.5891653702021, 7.29289813627965, 
    26.5177359662916, -1.39194807713405, 7.29289813627965, 22.4569129270158, 
    4.1750363557469, -2.82403393270236, 26.5177359662916, 4.1750363557469, 
    422.749811578083, -57.1138698584051, -1.39194807713405, -2.82403393270236, 
    -57.1138698584051, 32.2070912661676), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214133487155269, 1.05959583342316
    ), logphi = c(0.553413516222193, -1.53822847816802)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_178 = structure(list(
    par = c(-0.979945762918974, 1.21648693725629, 0.556967595032444, 
    -1.66021986432735), value = -10.2788116281069, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.1846715102397, 15.5195263742414, 
    38.1211407498583, -4.73066525286114, 15.5195263742414, 36.1288945005533, 
    18.4210548574981, -7.26322587962791, 38.1211407498583, 18.4210548574981, 
    587.964107902295, -97.7636369483559, -4.73066525286114, -7.26322587962791, 
    -97.7636369483559, 46.1098587765107), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.979945762918974, 1.21648693725629
    ), logphi = c(0.556967595032444, -1.66021986432735)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_179 = structure(list(
    par = c(-0.331814669115771, -0.0866740789189747, 0.44544068737358, 
    -1.81740026059703), value = 9.0849474843758, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0920978107271, -1.06371137587047, 
    45.3836069223001, -1.83593849834018, -1.06371137587047, 5.58280261531152, 
    -0.967288778852549, -2.07750405123441, 45.3836069223001, 
    -0.967288778852549, 1221.87011588482, -57.3394169658403, 
    -1.83593849834018, -2.07750405123441, -57.3394169658403, 
    55.8908846155504), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331814669115771, -0.0866740789189747
    ), logphi = c(0.44544068737358, -1.81740026059703)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_180 = structure(list(
    par = c(-0.0639308196378049, 0.0233432945844158, 0.402754482299427, 
    -1.65080930322227), value = 9.10541265303567, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.1398242278827, -0.227371637073759, 
    29.0960868087886, 1.36792780303097, -0.227371637073759, 6.91450320911002, 
    0.832016513463429, -1.25537094319839, 29.0960868087886, 0.832016513463429, 
    703.557406946942, -4.75497016627635, 1.36792780303097, -1.25537094319839, 
    -4.75497016627635, 35.4088933831598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0639308196378049, 0.0233432945844158
    ), logphi = c(0.402754482299427, -1.65080930322227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_181 = structure(list(
    par = c(-0.600058046683741, 0.842280801188222, 0.516319990223236, 
    -1.62578545356803), value = -2.97891030259135, counts = structure(c(363L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.0378527298802, 5.72292666745078, 
    27.48973744926, -2.1572108517276, 5.72292666745078, 15.6207191881474, 
    5.20752010069181, -3.25973507331323, 27.48973744926, 5.20752010069181, 
    453.068122614031, -53.2875614419615, -2.1572108517276, -3.25973507331323, 
    -53.2875614419615, 30.5971881280342), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.600058046683741, 0.842280801188222
    ), logphi = c(0.516319990223236, -1.62578545356803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_182 = structure(list(
    par = c(-0.258156621189534, 0.0373008774439244, 0.466716868073841, 
    -1.69713950947213), value = 8.60766272450885, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.9076046846174, -0.751521642694541, 
    37.86293625474, -1.50867579762348, -0.751521642694541, 6.49936868768464, 
    -1.68182538740069, -2.02704350193983, 37.86293625474, -1.68182538740069, 
    842.777113612581, -45.7821068060582, -1.50867579762348, -2.02704350193983, 
    -45.7821068060582, 45.4147400010818), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258156621189534, 0.0373008774439244
    ), logphi = c(0.466716868073841, -1.69713950947213)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_183 = structure(list(
    par = c(-0.0333482465306379, -0.195553932792579, 0.515868394868417, 
    -1.58944590427866), value = 15.3295699796459, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.1683342524956, -2.27851864309514, 
    30.8586133082045, -1.81828283540852, -2.27851864309514, 4.111681819019, 
    -4.18910228106029, -1.21394121199714, 30.8586133082045, -4.18910228106029, 
    630.99847162329, -44.0414493503294, -1.81828283540852, -1.21394121199714, 
    -44.0414493503294, 39.6808815512628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0333482465306379, -0.195553932792579
    ), logphi = c(0.515868394868417, -1.58944590427866)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_184 = structure(list(
    par = c(-0.556788246731677, -0.244491417146995, 0.560126168518699, 
    -1.6656404672372), value = 11.6171162747073, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(8.24112603492466, -1.6758536389716, 
    36.3610526141755, -5.95834184924371, -1.6758536389716, 3.71137913468544, 
    -9.59300401692786, -0.946015974445658, 36.3610526141755, 
    -9.59300401692786, 810.254847720238, -92.9536206579762, -5.95834184924371, 
    -0.946015974445658, -92.9536206579762, 54.5906148063935), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.556788246731677, -0.244491417146995
    ), logphi = c(0.560126168518699, -1.6656404672372)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_185 = structure(list(
    par = c(-0.924503917421211, 0.481085637103812, 0.501669337006145, 
    -1.93170825714833), value = -4.42874455192217, counts = structure(c(289L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.16596427158467, 1.17999446924699, 
    47.1296976711777, -5.39416866063291, 1.17999446924699, 10.6672768831473, 
    -1.11351013654115, -4.22402546407241, 47.1296976711777, -1.11351013654115, 
    1252.47700259434, -112.006791860519, -5.39416866063291, -4.22402546407241, 
    -112.006791860519, 56.1712105175971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.924503917421211, 0.481085637103812
    ), logphi = c(0.501669337006145, -1.93170825714833)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_186 = structure(list(
    par = c(-0.701689194623496, 0.620118858319655, 0.538739324416237, 
    -0.977413592120165), value = 5.32327044463706, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.0020245159865, 6.63249362986562, 
    11.7913989292617, -1.99757181951199, 6.63249362986562, 15.8377294847689, 
    -0.0381112492675584, -1.4208037772967, 11.7913989292617, 
    -0.0381112492675584, 61.9941707427074, -11.997994844748, 
    -1.99757181951199, -1.4208037772967, -11.997994844748, 6.62828057640397
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.701689194623496, 0.620118858319655
    ), logphi = c(0.538739324416237, -0.977413592120165)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_187 = structure(list(
    par = c(-0.755072421911937, -2.01771292246733, 0.55249241858907, 
    -1.48798251604238), value = 25.9163683473876, counts = structure(c(371L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.76975734595453, -0.565397884955132, 
    33.908779803582, -7.49102912855903, -0.565397884955132, 0.17875516356014, 
    -2.98113778551823, 0.056518498325886, 33.908779803582, -2.98113778551823, 
    687.906753551459, -92.0328040816543, -7.49102912855903, 0.056518498325886, 
    -92.0328040816543, 55.3217693770591), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.755072421911937, -2.01771292246733
    ), logphi = c(0.55249241858907, -1.48798251604238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_188 = structure(list(
    par = c(0.00105162583158848, -0.120223410023673, 0.434593908681342, 
    -1.46129723558569), value = 15.4055128243445, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.9363745269612, -1.25485350510601, 
    23.6237913724402, 0.830884603342241, -1.25485350510601, 4.84329495176183, 
    -1.52554620580503, -1.14962152331088, 23.6237913724402, -1.52554620580503, 
    408.614896572512, -3.0979555831756, 0.830884603342241, -1.14962152331088, 
    -3.0979555831756, 24.712734655985), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00105162583158848, -0.120223410023673
    ), logphi = c(0.434593908681342, -1.46129723558569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_189 = structure(list(
    par = c(0.288145933799628, 0.378566676194157, 0.480847633776032, 
    -1.65039870319357), value = 10.8656419314152, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.2871550642777, -2.53001103844852, 
    30.0884420285641, 1.34256678152589, -2.53001103844852, 12.4671363876949, 
    -1.07904346258181, -1.56998371014794, 30.0884420285641, -1.07904346258181, 
    810.885456232757, -31.4591356613825, 1.34256678152589, -1.56998371014794, 
    -31.4591356613825, 45.1645008348045), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.288145933799628, 0.378566676194157
    ), logphi = c(0.480847633776032, -1.65039870319357)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_190 = structure(list(
    par = c(-0.508526779038832, -2.95929326407102, 0.529560420895308, 
    -1.53606495318378), value = 22.6280513376423, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.17339240718928, -0.224657795477867, 
    27.4109842726133, -4.46448124158394, -0.224657795477867, 
    0.0214733590908622, -0.809138199109327, -0.0223821792211254, 
    27.4109842726133, -0.809138199109327, 607.627425071477, -57.6873165312186, 
    -4.46448124158394, -0.0223821792211254, -57.6873165312186, 
    42.4694030325412), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508526779038832, -2.95929326407102
    ), logphi = c(0.529560420895308, -1.53606495318378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_191 = structure(list(
    par = c(0.0686067092603104, 0.281651848402757, 0.515806680756194, 
    -1.74683971145274), value = 7.17170316646566, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.2684713759778, -2.37747648634823, 
    30.5825331596843, -0.671195711454686, -2.37747648634823, 
    6.50191936046873, -2.35288140371104, -1.62185428176365, 30.5825331596843, 
    -2.35288140371104, 795.151632286384, -46.7639303605161, -0.671195711454686, 
    -1.62185428176365, -46.7639303605161, 42.1453644310343), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0686067092603104, 0.281651848402757
    ), logphi = c(0.515806680756194, -1.74683971145274)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_192 = structure(list(
    par = c(-0.220385640180278, 0.163461465531914, 0.513592059219502, 
    -1.33423921268508), value = 9.76473634686489, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3956957741054, 0.224202940213303, 
    21.6178348910745, -1.68559569768689, 0.224202940213303, 7.70100614566616, 
    -2.6173510567773, -1.35933648603981, 21.6178348910745, -2.6173510567773, 
    255.438494083382, -25.3319999794499, -1.68559569768689, -1.35933648603981, 
    -25.3319999794499, 19.2189958476696), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220385640180278, 0.163461465531914
    ), logphi = c(0.513592059219502, -1.33423921268508)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_193 = structure(list(
    par = c(-0.567455110995589, -0.937410302889433, 0.516738296187693, 
    -1.79623436065365), value = 16.6781832152524, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.96897016641651, -1.70272493971169, 
    43.3821886760555, -5.65549161457568, -1.70272493971169, 1.24591808248198, 
    -7.78561034930902, -0.493729147343913, 43.3821886760555, 
    -7.78561034930902, 1370.52658296621, -103.3728463673, -5.65549161457568, 
    -0.493729147343913, -103.3728463673, 72.9534663426179), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.567455110995589, -0.937410302889433
    ), logphi = c(0.516738296187693, -1.79623436065365)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_194 = structure(list(
    par = c(-0.98267806171409, 0.45428133602392, 0.464064480617994, 
    -1.58328412353051), value = -4.24410066030145, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.5608094309347, 5.65057356816112, 
    33.3201418509788, -3.67073031948273, 5.65057356816112, 14.440922553316, 
    3.50904721146961, -3.88619832336623, 33.3201418509788, 3.50904721146961, 
    485.449483224265, -50.1061375079992, -3.67073031948273, -3.88619832336623, 
    -50.1061375079992, 31.334250419679), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.98267806171409, 0.45428133602392
    ), logphi = c(0.464064480617994, -1.58328412353051)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_195 = structure(list(
    par = c(-0.312796179442462, 0.07456701608577, 0.543997335171924, 
    -1.60948749563779), value = 8.57833080220885, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.1011250620029, -1.33164086735249, 
    34.9050748997826, -4.00348954321395, -1.33164086735249, 6.45389349829273, 
    -6.13435528507011, -1.77542959667321, 34.9050748997826, -6.13435528507011, 
    654.410082818302, -68.2573680483856, -4.00348954321395, -1.77542959667321, 
    -68.2573680483856, 44.2478873270424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312796179442462, 0.07456701608577
    ), logphi = c(0.543997335171924, -1.60948749563779)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_196 = structure(list(
    par = c(-0.310194619409976, -0.0226930667526589, 0.520096972209637, 
    -1.38468148166207), value = 13.8036455072123, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.6811125182869, -0.801491171209534, 
    23.6179081691823, -2.50619030728316, -0.801491171209534, 
    4.3152517723577, -3.35954594099519, -1.25532854466925, 23.6179081691823, 
    -3.35954594099519, 303.030197681853, -31.8923385691505, -2.50619030728316, 
    -1.25532854466925, -31.8923385691505, 22.8609873671459), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310194619409976, -0.0226930667526589
    ), logphi = c(0.520096972209637, -1.38468148166207)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_197 = structure(list(
    par = c(-0.489451888912709, -0.0168069664314705, 0.528809598870702, 
    -1.55747541129977), value = 11.3567904224807, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.6472405653242, -0.440029451098667, 
    42.3963783120485, -5.65800831697771, -0.440029451098667, 
    8.20013973612532, -7.11557762400616, -2.22720349940531, 42.3963783120485, 
    -7.11557762400616, 713.068316302134, -78.5278202264372, -5.65800831697771, 
    -2.22720349940531, -78.5278202264372, 50.540797224663), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.489451888912709, -0.0168069664314705
    ), logphi = c(0.528809598870702, -1.55747541129977)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_198 = structure(list(
    par = c(-0.53132342535228, -2.6215508992202, 0.483128514034296, 
    -1.87164053354842), value = 13.2401443450481, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(5.19282441802105, -0.295819916118489, 
    29.264727669176, -3.16573600267489, -0.295819916118489, 0.0374433737349023, 
    -1.20210457499326, -0.0487119788949997, 29.264727669176, 
    -1.20210457499326, 1186.16239705682, -64.6621263995506, -3.16573600267489, 
    -0.0487119788949997, -64.6621263995506, 54.4615058171161), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.53132342535228, -2.6215508992202
    ), logphi = c(0.483128514034296, -1.87164053354842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_199 = structure(list(
    par = c(-0.55605036898995, 0.140658199927245, 0.542263036733078, 
    -1.18916201457435), value = 12.4048501338438, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.33032214909, 0.862000213874836, 
    17.745762689092, -3.07906317442708, 0.862000213874836, 5.86714370287567, 
    -2.5619336625482, -1.162362699203, 17.745762689092, -2.5619336625482, 
    147.833831797062, -23.9967774460226, -3.07906317442708, -1.162362699203, 
    -23.9967774460226, 13.9009752131436), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.55605036898995, 0.140658199927245
    ), logphi = c(0.542263036733078, -1.18916201457435)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_30_200 = structure(list(
    par = c(-0.214144345299667, -1.50968195691313, 0.417615560546309, 
    -1.8676241342359), value = 9.47789264780924, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.58619361979274, -0.815037641377359, 
    28.3621644485699, -1.13059423711981, -0.815037641377359, 
    0.305366388175798, -1.10341971337746, -0.307921111719622, 
    28.3621644485699, -1.10341971337746, 999.295408179446, -27.1048869084911, 
    -1.13059423711981, -0.307921111719622, -27.1048869084911, 
    41.3126549263509), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214144345299667, -1.50968195691313
    ), logphi = c(0.417615560546309, -1.8676241342359)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_1 = structure(list(
    par = c(-0.133340895974216, -0.134999566958864, 0.439927919555384, 
    -1.58977810120427), value = 27.1324512704507, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.8159211845409, -1.90503080155224, 
    65.0683267844343, -0.0760423253254316, -1.90503080155224, 
    11.5701899208176, -3.02637848381693, -3.05075495132812, 65.0683267844343, 
    -3.02637848381693, 1312.22422690058, -36.6250683052627, -0.0760423253254316, 
    -3.05075495132812, -36.6250683052627, 73.6642348977412), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.133340895974216, -0.134999566958864
    ), logphi = c(0.439927919555384, -1.58977810120427)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_2 = structure(list(
    par = c(0.0361411760408794, -0.376259037861207, 0.503478891491063, 
    -1.62179003980199), value = 37.1840791214104, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.4177902708556, -5.62103783963153, 
    68.1579148036349, -2.86779881086829, -5.62103783963153, 6.86269052252442, 
    -8.16400716274757, -2.25376762408303, 68.1579148036349, -8.16400716274757, 
    1555.76566972826, -85.694840176842, -2.86779881086829, -2.25376762408303, 
    -85.694840176842, 92.7965769310646), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0361411760408794, -0.376259037861207
    ), logphi = c(0.503478891491063, -1.62179003980199)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_3 = structure(list(
    par = c(-0.255388554255045, 0.0532549618897893, 0.522266179002311, 
    -1.33755323667298), value = 32.3617208839077, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.9614666910439, -1.06921235776269, 
    51.9142159145503, -5.13544128644128, -1.06921235776269, 13.2907051710873, 
    -7.24704559473821, -2.90377099521066, 51.9142159145503, -7.24704559473821, 
    616.306543413714, -66.8055290775627, -5.13544128644128, -2.90377099521066, 
    -66.8055290775627, 47.7131728811031), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255388554255045, 0.0532549618897893
    ), logphi = c(0.522266179002311, -1.33755323667298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_4 = structure(list(
    par = c(-0.278200327657395, 0.109690294935192, 0.530637296689997, 
    -1.66082743662263), value = 17.4584349189077, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.8405211197824, -3.31457992963635, 
    65.7944779396402, -6.13606442367853, -3.31457992963635, 10.3440303327318, 
    -9.70347332973631, -3.54944811853386, 65.7944779396402, -9.70347332973631, 
    1343.39133844463, -120.223309376222, -6.13606442367853, -3.54944811853386, 
    -120.223309376222, 83.5668816527857), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278200327657395, 0.109690294935192
    ), logphi = c(0.530637296689997, -1.66082743662263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_5 = structure(list(
    par = c(-0.104995780624318, -0.133403526302177, 0.541564561014502, 
    -1.46210384163319), value = 35.3465343751544, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.3114967898921, -4.43240548442247, 
    61.6364835384076, -6.10941956669109, -4.43240548442247, 9.80885421597577, 
    -10.2041379346218, -2.42854329446374, 61.6364835384076, -10.2041379346218, 
    974.927177335161, -101.425730859361, -6.10941956669109, -2.42854329446374, 
    -101.425730859361, 71.7303659190094), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.104995780624318, -0.133403526302177
    ), logphi = c(0.541564561014502, -1.46210384163319)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_6 = structure(list(
    par = c(0.130361337070706, 0.264179149942104, 0.538274579753615, 
    -1.61855018091466), value = 18.5308244382658, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.6805461891219, -4.68865359337656, 
    48.8255278625616, -1.81929494402766, -4.68865359337656, 12.0136297159235, 
    -6.43600311267534, -2.59835025762101, 48.8255278625616, -6.43600311267534, 
    1041.31939551699, -81.4056812399322, -1.81929494402766, -2.59835025762101, 
    -81.4056812399322, 65.2492676413985), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.130361337070706, 0.264179149942104
    ), logphi = c(0.538274579753615, -1.61855018091466)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_7 = structure(list(
    par = c(-0.126885508960688, 0.172577607636134, 0.441693892097578, 
    -1.73340020410296), value = 12.1410011666788, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.7992147990069, -0.571508979696489, 
    52.4707855964479, 0.271674144514122, -0.571508979696489, 
    11.5055415417231, 1.53124183999154, -2.65104656005377, 52.4707855964479, 
    1.53124183999154, 1335.73146060106, -49.86596158707, 0.271674144514122, 
    -2.65104656005377, -49.86596158707, 65.9307711505797), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126885508960688, 0.172577607636134
    ), logphi = c(0.441693892097578, -1.73340020410296)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_8 = structure(list(
    par = c(-0.437593417263359, -0.127749432536224, 0.486482018272438, 
    -1.85442661888662), value = 8.6865944223975, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.9920284432432, -2.8195774426365, 
    75.4234666136, -6.13148561789956, -2.8195774426365, 7.84057727454268, 
    -8.76190172505176, -3.23466874752043, 75.4234666136, -8.76190172505176, 
    2139.18567753879, -134.367650524325, -6.13148561789956, -3.23466874752043, 
    -134.367650524325, 99.5595376185321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.437593417263359, -0.127749432536224
    ), logphi = c(0.486482018272438, -1.85442661888662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_9 = structure(list(
    par = c(-0.227083480894599, 0.39045301849331, 0.447278299977596, 
    -1.5367709824968), value = 15.4535999742194, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.8824853107024, 5.87823908881902, 
    64.6327941566938, 0.583170346901696, 5.87823908881902, 28.6566894041052, 
    2.67550952992579, -4.4606112550305, 64.6327941566938, 2.67550952992579, 
    1120.64798344225, -48.4024941673766, 0.583170346901696, -4.4606112550305, 
    -48.4024941673766, 65.7286497660614), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227083480894599, 0.39045301849331
    ), logphi = c(0.447278299977596, -1.5367709824968)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_10 = structure(list(
    par = c(0.116304822909533, 0.155663053039965, 0.483422336152248, 
    -1.67408163316992), value = 13.8935301735908, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.1064075052755, -3.02440379940094, 
    41.1122881649462, 0.208116249345025, -3.02440379940094, 9.52340503390658, 
    -2.45194430092965, -2.03251933661441, 41.1122881649462, -2.45194430092965, 
    1027.63694859753, -46.2770599849449, 0.208116249345025, -2.03251933661441, 
    -46.2770599849449, 56.742624115369), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.116304822909533, 0.155663053039965
    ), logphi = c(0.483422336152248, -1.67408163316992)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_11 = structure(list(
    par = c(-0.506569868949654, -0.0201511319957576, 0.507922616234916, 
    -1.75103443995243), value = 12.2986330870098, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.7255592313539, -1.5820667131905, 
    74.6713926140785, -7.91852646520042, -1.5820667131905, 11.5690013071656, 
    -11.0159280390931, -3.79445741671702, 74.6713926140785, -11.0159280390931, 
    1740.13044143084, -142.938420879091, -7.91852646520042, -3.79445741671702, 
    -142.938420879091, 96.8853279914583), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.506569868949654, -0.0201511319957576
    ), logphi = c(0.507922616234916, -1.75103443995243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_12 = structure(list(
    par = c(-0.620976440861908, 0.507651190963385, 0.584166675617674, 
    -1.07563937387629), value = 15.3524249703133, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.9198183277343, 11.0320284152365, 
    38.8070405152874, -9.05339535517413, 11.0320284152365, 34.3128933097958, 
    -3.79005308026592, -3.5941680236462, 38.8070405152874, -3.79005308026592, 
    248.653514180575, -60.426330898089, -9.05339535517413, -3.5941680236462, 
    -60.426330898089, 31.8943823547357), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.620976440861908, 0.507651190963385
    ), logphi = c(0.584166675617674, -1.07563937387629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_13 = structure(list(
    par = c(-0.503213145428984, 0.276281425404057, 0.490331721418565, 
    -1.67490676175783), value = 9.14040393198647, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.6989890261324, 2.14011657995172, 
    78.857511025987, -6.43392812316179, 2.14011657995172, 19.3014635723188, 
    -2.81435104909633, -5.8766924171394, 78.857511025987, -2.81435104909633, 
    1518.27585736974, -126.920529096797, -6.43392812316179, -5.8766924171394, 
    -126.920529096797, 89.7147958571765), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.503213145428984, 0.276281425404057
    ), logphi = c(0.490331721418565, -1.67490676175783)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_14 = structure(list(
    par = c(-0.38003735140081, 0.401674015203188, 0.519839478744785, 
    -1.56919161888417), value = 14.1823175270431, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.0284021742576, 2.94647296694706, 
    77.0560584326674, -6.83170892212814, 2.94647296694706, 25.4840116724608, 
    -4.90231795691187, -6.1215686244509, 77.0560584326674, -4.90231795691187, 
    1261.12374820231, -130.673387051417, -6.83170892212814, -6.1215686244509, 
    -130.673387051417, 86.3969034616829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38003735140081, 0.401674015203188
    ), logphi = c(0.519839478744785, -1.56919161888417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_15 = structure(list(
    par = c(0.0435963482105375, 0.223926619334113, 0.486049013271842, 
    -1.73062151681505), value = 13.6517047836279, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.0630675349715, -3.05980308246134, 
    52.1374022879328, -0.255753898059652, -3.05980308246134, 
    11.6866987407427, -2.04456828933886, -2.67916488594366, 52.1374022879328, 
    -2.04456828933886, 1361.74319944082, -66.4384360846704, -0.255753898059652, 
    -2.67916488594366, -66.4384360846704, 71.3482835363877), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0435963482105375, 0.223926619334113
    ), logphi = c(0.486049013271842, -1.73062151681505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_16 = structure(list(
    par = c(-0.496796166817891, -0.110023126972044, 0.503633090125404, 
    -1.33970250586475), value = 24.3003219859106, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.0001281418832, 0.470870596736006, 
    46.5117876862209, -5.50762934192761, 0.470870596736006, 9.88207024477106, 
    -6.18513765715534, -2.59428171167642, 46.5117876862209, -6.18513765715534, 
    531.243095606371, -53.559699261907, -5.50762934192761, -2.59428171167642, 
    -53.559699261907, 39.8605644864602), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.496796166817891, -0.110023126972044
    ), logphi = c(0.503633090125404, -1.33970250586475)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_17 = structure(list(
    par = c(0.231420561739182, 0.218642574676822, 0.477648584060457, 
    -1.70213082783325), value = 14.449001816516, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.9214615730439, -3.89325037719601, 
    41.618330869575, 1.20259618507923, -3.89325037719601, 11.4922087335323, 
    -1.76861059442146, -1.96674580155154, 41.618330869575, -1.76861059442146, 
    1182.46959923951, -43.8163382012746, 1.20259618507923, -1.96674580155154, 
    -43.8163382012746, 62.6877974720941), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.231420561739182, 0.218642574676822
    ), logphi = c(0.477648584060457, -1.70213082783325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_18 = structure(list(
    par = c(-0.0524469887266309, 0.253743241938077, 0.574889509426202, 
    -1.62432757965835), value = 16.9700128182236, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.5622906846468, -4.4339705569385, 
    57.6808140211327, -5.57671396794746, -4.4339705569385, 12.5867495084364, 
    -11.232411503137, -2.87726953285272, 57.6808140211327, -11.232411503137, 
    1135.88825363831, -122.185437025024, -5.57671396794746, -2.87726953285272, 
    -122.185437025024, 76.4910843464861), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0524469887266309, 0.253743241938077
    ), logphi = c(0.574889509426202, -1.62432757965835)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_19 = structure(list(
    par = c(-0.474949969057047, 0.0499475546632688, 0.503484428847308, 
    -1.77666719488918), value = 9.51350107510793, counts = structure(c(351L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.7127992276336, -1.87655370798012, 
    72.5933276841673, -6.8768085652593, -1.87655370798012, 10.5444167433077, 
    -8.96977014619438, -3.93131316078765, 72.5933276841673, -8.96977014619438, 
    1742.10498400384, -134.87335735185, -6.8768085652593, -3.93131316078765, 
    -134.87335735185, 92.8257860275394), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.474949969057047, 0.0499475546632688
    ), logphi = c(0.503484428847308, -1.77666719488918)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_20 = structure(list(
    par = c(-0.124737678782291, -0.0723289879596986, 0.514135942916466, 
    -1.6285518692118), value = 19.6504127637841, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.2361917067436, -3.29334274606907, 
    56.0306491568241, -3.6820476783106, -3.29334274606907, 8.72580238642229, 
    -7.34870422469669, -2.53364233770981, 56.0306491568241, -7.34870422469669, 
    1165.81239833824, -84.6999248489411, -3.6820476783106, -2.53364233770981, 
    -84.6999248489411, 71.4269380681642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.124737678782291, -0.0723289879596986
    ), logphi = c(0.514135942916466, -1.6285518692118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_21 = structure(list(
    par = c(-0.31316345141182, 0.210558015239083, 0.491949377976023, 
    -1.66692797715302), value = 16.8531417431965, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.4124332576852, -0.632370566577833, 
    70.231891969641, -4.25181207441838, -0.632370566577833, 14.784127751355, 
    -3.93809053633731, -4.50598516854583, 70.231891969641, -3.93809053633731, 
    1419.0369218241, -103.60702492207, -4.25181207441838, -4.50598516854583, 
    -103.60702492207, 82.7633758619939), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31316345141182, 0.210558015239083
    ), logphi = c(0.491949377976023, -1.66692797715302)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_22 = structure(list(
    par = c(0.126238529312689, -0.172787670884121, 0.465793998266844, 
    -1.51672881504393), value = 40.9386951198851, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.0133870875361, -6.00782818516166, 
    59.8058251473077, 0.89781903422903, -6.00782818516166, 9.52145290966655, 
    -5.42840773576359, -2.5814530300039, 59.8058251473077, -5.42840773576359, 
    1197.31844238125, -34.6597979268282, 0.89781903422903, -2.5814530300039, 
    -34.6597979268282, 72.7934188926582), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.126238529312689, -0.172787670884121
    ), logphi = c(0.465793998266844, -1.51672881504393)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_23 = structure(list(
    par = c(-0.510763295680303, -0.659723197053908, 0.508333740552507, 
    -1.68993835824902), value = 21.8361461955251, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.7105295303641, -2.22169868990818, 
    55.6183783100295, -6.9921546934637, -2.22169868990818, 2.8197319004164, 
    -9.15596800155072, -1.30037378998082, 55.6183783100295, -9.15596800155072, 
    1331.35833275411, -107.455832663028, -6.9921546934637, -1.30037378998082, 
    -107.455832663028, 79.2451056970123), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.510763295680303, -0.659723197053908
    ), logphi = c(0.508333740552507, -1.68993835824902)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_24 = structure(list(
    par = c(-0.125013138007417, 0.301748823014216, 0.494411522531759, 
    -1.4343005308785), value = 20.6722506325214, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.2244066069172, 0.485798617333444, 
    55.8857688890413, -1.79673136901926, 0.485798617333444, 20.4529601344206, 
    -4.17068463054449, -3.804724815204, 55.8857688890413, -4.17068463054449, 
    814.316228566092, -60.211300918489, -1.79673136901926, -3.804724815204, 
    -60.211300918489, 55.336794098082), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.125013138007417, 0.301748823014216
    ), logphi = c(0.494411522531759, -1.4343005308785)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_25 = structure(list(
    par = c(0.330976128914855, 0.413069687880001, 0.453176757748261, 
    -1.53128282018097), value = 10.6810485500162, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.6072507453252, -2.35491715061542, 
    25.9249665179873, 2.23790219622266, -2.35491715061542, 13.231578133599, 
    -0.888761845452279, -1.41938732034497, 25.9249665179873, 
    -0.888761845452279, 620.507451265517, -11.0187353592472, 
    2.23790219622266, -1.41938732034497, -11.0187353592472, 36.3848184510296
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.330976128914855, 0.413069687880001
    ), logphi = c(0.453176757748261, -1.53128282018097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_26 = structure(list(
    par = c(-0.0631800334897697, 0.170068934510323, 0.431127854758557, 
    -1.70544616330509), value = 12.0758968399971, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4344120130357, -0.339093321866102, 
    58.3215975749063, 1.43071892466651, -0.339093321866102, 15.1929096730008, 
    2.03094341522103, -2.79837324068666, 58.3215975749063, 2.03094341522103, 
    1493.27670465516, -42.1480445214062, 1.43071892466651, -2.79837324068666, 
    -42.1480445214062, 74.3770695756929), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0631800334897697, 0.170068934510323
    ), logphi = c(0.431127854758557, -1.70544616330509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_27 = structure(list(
    par = c(-0.647900351757141, 0.0235502957805693, 0.518292217892761, 
    -1.74169191745532), value = 12.8154101699864, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.277027084539, -1.95307661154942, 
    72.9749437855531, -9.55390460255501, -1.95307661154942, 9.64799253466708, 
    -13.3400249762161, -3.89113506304994, 72.9749437855531, -13.3400249762161, 
    1650.99654649925, -157.868435496145, -9.55390460255501, -3.89113506304994, 
    -157.868435496145, 96.7863525831447), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.647900351757141, 0.0235502957805693
    ), logphi = c(0.518292217892761, -1.74169191745532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_28 = structure(list(
    par = c(-0.377001905212083, 0.397422004812228, 0.568948573882949, 
    -1.47748695136752), value = 20.9838012742023, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8005763159637, 0.717181548814949, 
    67.4981328492308, -9.93570882457107, 0.717181548814949, 22.7163340138503, 
    -10.492565127862, -4.80807178737663, 67.4981328492308, -10.492565127862, 
    940.153518041775, -142.30427113926, -9.93570882457107, -4.80807178737663, 
    -142.30427113926, 79.5559798261181), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377001905212083, 0.397422004812228
    ), logphi = c(0.568948573882949, -1.47748695136752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_29 = structure(list(
    par = c(-0.286617944828256, -0.0766272427731695, 0.451311793605496, 
    -1.60327721680729), value = 20.223614516982, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.5350287592957, -0.692388331557936, 
    57.6213155882854, -1.88290524594237, -0.692388331557936, 
    9.47269871698353, -2.88605161635758, -3.0279201652661, 57.6213155882854, 
    -2.88605161635758, 1102.84120809201, -49.6318684031216, -1.88290524594237, 
    -3.0279201652661, -49.6318684031216, 62.7967796971163), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286617944828256, -0.0766272427731695
    ), logphi = c(0.451311793605496, -1.60327721680729)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_30 = structure(list(
    par = c(-0.00184456088312661, 0.190180906630086, 0.524640907732428, 
    -1.73321049041699), value = 16.2255769444455, counts = structure(c(311L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.954031679376, -4.77701269829822, 
    62.5749072735715, -2.69034135236268, -4.77701269829822, 11.300921919144, 
    -6.93972627274775, -3.19885856558955, 62.5749072735715, -6.93972627274775, 
    1547.1374533691, -101.595247665731, -2.69034135236268, -3.19885856558955, 
    -101.595247665731, 84.6785596344546), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00184456088312661, 0.190180906630086
    ), logphi = c(0.524640907732428, -1.73321049041699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_31 = structure(list(
    par = c(-0.33701830052457, 0.350475134350962, 0.490582193835495, 
    -1.72340577205663), value = 7.86728561362485, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.6327436403464, 0.527080819878734, 
    77.9941002653217, -4.19094693526745, 0.527080819878734, 17.8755941098174, 
    -0.534777190530633, -5.44749883646389, 77.9941002653217, 
    -0.534777190530633, 1687.74257466264, -122.194475224102, 
    -4.19094693526745, -5.44749883646389, -122.194475224102, 
    92.7325554656022), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33701830052457, 0.350475134350962
    ), logphi = c(0.490582193835495, -1.72340577205663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_32 = structure(list(
    par = c(0.113385048681656, 0.133385479082823, 0.480980800047032, 
    -1.78056604363538), value = 14.8770455997806, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.0074860981108, -4.82690023151378, 
    68.468215704609, 0.233985117503721, -4.82690023151378, 14.8491724503153, 
    -2.80622327064606, -3.06040910369454, 68.468215704609, -2.80622327064606, 
    2041.86038321064, -83.4286375095417, 0.233985117503721, -3.06040910369454, 
    -83.4286375095417, 99.9390290323809), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.113385048681656, 0.133385479082823
    ), logphi = c(0.480980800047032, -1.78056604363538)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_33 = structure(list(
    par = c(0.0684098223265308, 0.0567844955843355, 0.458739181959235, 
    -1.66945203370493), value = 22.5673238239293, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.8195592919941, -4.05964497574018, 
    58.9526658147932, 0.883215494518197, -4.05964497574018, 11.6968841226139, 
    -2.31803015982024, -2.73916941617713, 58.9526658147932, -2.31803015982024, 
    1477.35102389479, -50.0072619096237, 0.883215494518197, -2.73916941617713, 
    -50.0072619096237, 79.419014742399), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0684098223265308, 0.0567844955843355
    ), logphi = c(0.458739181959235, -1.66945203370493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_34 = structure(list(
    par = c(-0.311974438302931, 0.0532731496997395, 0.509168468201798, 
    -1.62792591347908), value = 23.7132342766702, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.8384002241339, -2.02265954385439, 
    73.4889998037502, -6.15174091977977, -2.02265954385439, 13.1109404204466, 
    -8.70926104745706, -4.08023689502102, 73.4889998037502, -8.70926104745706, 
    1420.04855694733, -116.954178675854, -6.15174091977977, -4.08023689502102, 
    -116.954178675854, 88.5183611920581), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311974438302931, 0.0532731496997395
    ), logphi = c(0.509168468201798, -1.62792591347908)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_35 = structure(list(
    par = c(-0.222921427987531, 0.101267026680939, 0.536172371466228, 
    -1.27930128555567), value = 34.6453521713285, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.0782066448876, -0.645344975680473, 
    48.7644693460965, -5.47118708471572, -0.645344975680473, 
    15.3556097437502, -7.33870684932469, -2.67260889685872, 48.7644693460965, 
    -7.33870684932469, 522.646812086691, -65.8294378466096, -5.47118708471572, 
    -2.67260889685872, -65.8294378466096, 43.1576112891463), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222921427987531, 0.101267026680939
    ), logphi = c(0.536172371466228, -1.27930128555567)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_36 = structure(list(
    par = c(-0.371412008438673, -0.432455750620498, 0.519321597843408, 
    -1.67361890306623), value = 26.7373558264313, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.703155570814, -2.98952897370697, 
    62.168677031238, -6.9580587305218, -2.98952897370697, 4.75260124854771, 
    -10.4331136725477, -1.86900717702443, 62.168677031238, -10.4331136725477, 
    1414.30581649526, -115.030357665802, -6.9580587305218, -1.86900717702443, 
    -115.030357665802, 85.5950653404491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371412008438673, -0.432455750620498
    ), logphi = c(0.519321597843408, -1.67361890306623)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_37 = structure(list(
    par = c(-0.162752548908243, 0.171626846801869, 0.473361512512102, 
    -1.59509966033285), value = 18.1801745729146, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.9383237199489, -1.20067509534749, 
    60.2138437075794, -1.43617787617956, -1.20067509534749, 13.2644878219068, 
    -2.68425430682839, -3.59859373100235, 60.2138437075794, -2.68425430682839, 
    1159.62437978467, -64.2914746848966, -1.43617787617956, -3.59859373100235, 
    -64.2914746848966, 68.6094831365835), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162752548908243, 0.171626846801869
    ), logphi = c(0.473361512512102, -1.59509966033285)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_38 = structure(list(
    par = c(-0.563463201685852, 0.366492038492943, 0.525075580765775, 
    -1.65665043459203), value = 7.04861474647222, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.8209329732867, 1.24223962849612, 
    63.0634536511465, -7.32715581630572, 1.24223962849612, 16.0080007880481, 
    -5.5742632616429, -5.09032311768465, 63.0634536511465, -5.5742632616429, 
    1149.46754557632, -124.422195702412, -7.32715581630572, -5.09032311768465, 
    -124.422195702412, 75.0871695673894), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.563463201685852, 0.366492038492943
    ), logphi = c(0.525075580765775, -1.65665043459203)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_39 = structure(list(
    par = c(-0.416658094440343, -0.00268515944052723, 0.521541053943976, 
    -1.69307148564298), value = 14.9916281948705, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.1946903527196, -2.41581470472596, 
    64.8337363218232, -6.95008675455355, -2.41581470472596, 8.87203802157899, 
    -10.2734263851545, -3.25965600378453, 64.8337363218232, -10.2734263851545, 
    1389.94662428349, -122.64837438547, -6.95008675455355, -3.25965600378453, 
    -122.64837438547, 83.6644550581411), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416658094440343, -0.00268515944052723
    ), logphi = c(0.521541053943976, -1.69307148564298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_40 = structure(list(
    par = c(-0.415229335315571, 0.355644940060655, 0.557377945465474, 
    -1.5418545236861), value = 12.8168363232536, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.6004057062876, 0.731685505073187, 
    62.9585654561282, -8.57050533653592, 0.731685505073187, 19.2051529888104, 
    -9.4792441398539, -4.48508910677603, 62.9585654561282, -9.4792441398539, 
    978.180671515005, -131.000638399215, -8.57050533653592, -4.48508910677603, 
    -131.000638399215, 75.5451795884099), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.415229335315571, 0.355644940060655
    ), logphi = c(0.557377945465474, -1.5418545236861)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_41 = structure(list(
    par = c(-0.365409488800124, 0.0500509352808424, 0.519051881667444, 
    -1.65410040518404), value = 17.596142118801, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.0781520824099, -2.17119031109547, 
    62.6293094834196, -6.17618428666589, -2.17119031109547, 9.99673308221816, 
    -8.76046498010652, -3.39747229194387, 62.6293094834196, -8.76046498010652, 
    1252.27301374586, -110.847011041582, -6.17618428666589, -3.39747229194387, 
    -110.847011041582, 77.8974390778231), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.365409488800124, 0.0500509352808424
    ), logphi = c(0.519051881667444, -1.65410040518404)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_42 = structure(list(
    par = c(-0.443348211787261, 0.191481158613907, 0.494408452274319, 
    -1.77253572459279), value = 8.60682320556162, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.0778416671361, -0.804780797558635, 
    78.0532104558418, -6.09916906268992, -0.804780797558635, 
    14.0680667630733, -5.10901558126164, -4.91193892582231, 78.0532104558418, 
    -5.10901558126164, 1812.02233667666, -134.795883697247, -6.09916906268992, 
    -4.91193892582231, -134.795883697247, 95.482786742096), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443348211787261, 0.191481158613907
    ), logphi = c(0.494408452274319, -1.77253572459279)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_43 = structure(list(
    par = c(-0.284354471466483, -0.617536779213064, 0.472656748385558, 
    -1.49566412288191), value = 25.3508410269336, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.536816733139, -1.80067300448172, 
    40.405349984951, -2.68017359861261, -1.80067300448172, 2.74093085472771, 
    -4.21024731167563, -1.33078222575023, 40.405349984951, -4.21024731167563, 
    681.235069150965, -35.0076492914297, -2.68017359861261, -1.33078222575023, 
    -35.0076492914297, 43.0397742743338), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284354471466483, -0.617536779213064
    ), logphi = c(0.472656748385558, -1.49566412288191)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_44 = structure(list(
    par = c(-0.636319943604724, 0.0531104654937746, 0.544811110312554, 
    -1.45710340267336), value = 20.942185945528, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.8113688790211, 0.246972208017837, 
    57.9012542427648, -10.1965248457958, 0.246972208017837, 12.2957450532368, 
    -10.7082392970526, -3.30676152460185, 57.9012542427648, -10.7082392970526, 
    792.094348288863, -114.034451937695, -10.1965248457958, -3.30676152460185, 
    -114.034451937695, 65.696335302512), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.636319943604724, 0.0531104654937746
    ), logphi = c(0.544811110312554, -1.45710340267336)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_45 = structure(list(
    par = c(-0.228424740874728, 0.204057043165126, 0.499766715636359, 
    -1.51295268993263), value = 20.5954789303753, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.9018101902511, 0.41836728037481, 
    64.7492089793644, -3.77448686261772, 0.41836728037481, 19.5485939729068, 
    -5.51480706079133, -4.20339655793356, 64.7492089793644, -5.51480706079133, 
    1040.29233941727, -83.4125145474651, -3.77448686261772, -4.20339655793356, 
    -83.4125145474651, 69.1574029909603), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228424740874728, 0.204057043165126
    ), logphi = c(0.499766715636359, -1.51295268993263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_46 = structure(list(
    par = c(0.214846321139417, -0.992683204180038, 0.502053534667168, 
    -1.4376068565423), value = 37.2916439426669, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.4807884222098, -3.35347440838518, 
    34.9059679116692, -0.867991190034445, -3.35347440838518, 
    1.59478264549762, -3.20388008923089, -0.655805097338202, 
    34.9059679116692, -3.20388008923089, 671.297418980643, -30.673456293151, 
    -0.867991190034445, -0.655805097338202, -30.673456293151, 
    44.2414044439232), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.214846321139417, -0.992683204180038
    ), logphi = c(0.502053534667168, -1.4376068565423)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_47 = structure(list(
    par = c(-0.12871111291776, -0.0652715440195666, 0.497574253334795, 
    -1.52843281982884), value = 24.9665804118226, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.3974487295401, -2.64454682596948, 
    57.7986651686402, -3.04032590747738, -2.64454682596948, 10.7021149693409, 
    -6.57271270743109, -2.84804803563077, 57.7986651686402, -6.57271270743109, 
    1017.01089363004, -68.9001305147485, -3.04032590747738, -2.84804803563077, 
    -68.9001305147485, 65.5919959209328), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.12871111291776, -0.0652715440195666
    ), logphi = c(0.497574253334795, -1.52843281982884)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_48 = structure(list(
    par = c(-0.292359845169214, -0.071754330392904, 0.46763039422125, 
    -1.68359098885113), value = 20.4160297914001, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.136506435241, -1.37195446647809, 
    75.4104492575181, -3.76653770750579, -1.37195446647809, 12.2732854634933, 
    -4.91399603141929, -3.7916020954043, 75.4104492575181, -4.91399603141929, 
    1640.83200216325, -91.1062261477191, -3.76653770750579, -3.7916020954043, 
    -91.1062261477191, 89.9726141465607), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292359845169214, -0.071754330392904
    ), logphi = c(0.46763039422125, -1.68359098885113)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_49 = structure(list(
    par = c(-0.775780096374841, -0.058839413629971, 0.503547203448752, 
    -1.69238415854343), value = 11.3229141711103, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.041257819983, -0.727737130112871, 
    69.623192696433, -9.99378811972207, -0.727737130112871, 9.58569302067502, 
    -11.9246804803907, -3.82140594279434, 69.623192696433, -11.9246804803907, 
    1436.92399226225, -144.387402952972, -9.99378811972207, -3.82140594279434, 
    -144.387402952972, 88.9089320699199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.775780096374841, -0.058839413629971
    ), logphi = c(0.503547203448752, -1.69238415854343)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_50 = structure(list(
    par = c(0.043999105653885, 0.252226035574096, 0.473921657261989, 
    -1.42026483301078), value = 26.6185831604729, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.4903498815703, -2.28444747296663, 
    48.0207359228046, 0.738778329179013, -2.28444747296663, 15.7670251086373, 
    -3.60336993754373, -2.9709750020146, 48.0207359228046, -3.60336993754373, 
    753.239802644856, -33.5193345479823, 0.738778329179013, -2.9709750020146, 
    -33.5193345479823, 48.6728082274013), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.043999105653885, 0.252226035574096
    ), logphi = c(0.473921657261989, -1.42026483301078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_51 = structure(list(
    par = c(-0.0607856236937268, -0.0361939493022589, 0.512323053022058, 
    -1.60500103264267), value = 35.4678073580108, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.4695697610243, -4.95330794691995, 
    72.7466198604532, -3.94572387651948, -4.95330794691995, 11.4001800781693, 
    -9.10801310638476, -3.3798617025127, 72.7466198604532, -9.10801310638476, 
    1480.99633921994, -104.027953092611, -3.94572387651948, -3.3798617025127, 
    -104.027953092611, 91.8831974914269), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0607856236937268, -0.0361939493022589
    ), logphi = c(0.512323053022058, -1.60500103264267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_52 = structure(list(
    par = c(-0.199651207338486, 0.213239791876447, 0.504052179101367, 
    -1.76427071791688), value = 14.8286149739792, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4256124637162, -2.66587322883538, 
    74.6166884870725, -3.90495572921701, -2.66587322883538, 14.2313261526361, 
    -5.21288994903557, -4.24386596598048, 74.6166884870725, -5.21288994903557, 
    1819.95924391654, -119.825370356264, -3.90495572921701, -4.24386596598048, 
    -119.825370356264, 95.4847143308513), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199651207338486, 0.213239791876447
    ), logphi = c(0.504052179101367, -1.76427071791688)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_53 = structure(list(
    par = c(-0.368914085356429, 0.180615026670819, 0.434023451701295, 
    -1.61576387679716), value = 12.3337189271493, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.5186833896041, 2.7419121879646, 
    62.3361688072421, -0.936126667960835, 2.7419121879646, 15.5183457155594, 
    1.92456122771745, -3.9544801109237, 62.3361688072421, 1.92456122771745, 
    1172.04314842256, -49.2323761407398, -0.936126667960835, 
    -3.9544801109237, -49.2323761407398, 64.0030486374066), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368914085356429, 0.180615026670819
    ), logphi = c(0.434023451701295, -1.61576387679716)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_54 = structure(list(
    par = c(-0.246937003765591, 0.265468758905054, 0.461512872801219, 
    -1.54042920872884), value = 14.48289079689, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.1374834672846, 2.52759105290323, 
    60.168001226657, -1.04507474518734, 2.52759105290323, 20.3610241262808, 
    -0.704750235058782, -4.0618786696367, 60.168001226657, -0.704750235058782, 
    1025.39004565294, -54.5240053613227, -1.04507474518734, -4.0618786696367, 
    -54.5240053613227, 61.921266019116), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.246937003765591, 0.265468758905054
    ), logphi = c(0.461512872801219, -1.54042920872884)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_55 = structure(list(
    par = c(0.0706950310613445, 0.0829653027492901, 0.494572589417032, 
    -1.69577651912276), value = 25.5184026666787, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.1787813519522, -5.56272834284499, 
    68.8361868164122, -0.988410605362589, -5.56272834284499, 
    12.5965401505113, -5.56437402288168, -3.26680452022998, 68.8361868164122, 
    -5.56437402288168, 1723.17858118642, -87.6108683294241, -0.988410605362589, 
    -3.26680452022998, -87.6108683294241, 94.6526164486983), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0706950310613445, 0.0829653027492901
    ), logphi = c(0.494572589417032, -1.69577651912276)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_56 = structure(list(
    par = c(-0.455661594489563, -0.0880510389954143, 0.53002731320405, 
    -1.50216089280347), value = 28.4612119901383, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.9711622527803, -1.19612177496009, 
    68.4175018204058, -9.28973710223602, -1.19612177496009, 12.3601436081699, 
    -11.5345306896941, -3.30853907870576, 68.4175018204058, -11.5345306896941, 
    1062.59442949774, -120.143208329537, -9.28973710223602, -3.30853907870576, 
    -120.143208329537, 78.3347781814214), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.455661594489563, -0.0880510389954143
    ), logphi = c(0.53002731320405, -1.50216089280347)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_57 = structure(list(
    par = c(-0.136794664776972, -0.267791384729736, 0.486725628192178, 
    -1.58248039502145), value = 27.5259041961857, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.4260309874587, -3.16706276581868, 
    57.1085518439318, -2.86594513099203, -3.16706276581868, 6.86764289881125, 
    -6.17985790718478, -2.341271216455, 57.1085518439318, -6.17985790718478, 
    1128.73699688265, -64.1466352346853, -2.86594513099203, -2.341271216455, 
    -64.1466352346853, 68.7124723706134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.136794664776972, -0.267791384729736
    ), logphi = c(0.486725628192178, -1.58248039502145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_58 = structure(list(
    par = c(-0.404964992284243, 0.387915165570067, 0.431861817785183, 
    -1.2025648774718), value = 14.3461501472477, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.0982496819697, 5.75623379717172, 
    23.5727068931268, 0.520826294314602, 5.75623379717172, 16.75537557011, 
    0.0322203654867792, -2.01254836307285, 23.5727068931268, 
    0.0322203654867792, 210.765422523629, -3.90172350783757, 
    0.520826294314602, -2.01254836307285, -3.90172350783757, 
    13.8739242410146), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404964992284243, 0.387915165570067
    ), logphi = c(0.431861817785183, -1.2025648774718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_59 = structure(list(
    par = c(-0.245234253684858, 0.583933776388229, 0.48958320008972, 
    -1.54113780567133), value = 12.4359590884053, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.3108579845541, 4.76365453128125, 
    56.1318931300292, -1.46345582185958, 4.76365453128125, 23.6618557951651, 
    2.42314023957135, -4.61352697866957, 56.1318931300292, 2.42314023957135, 
    933.778904283145, -74.332125979959, -1.46345582185958, -4.61352697866957, 
    -74.332125979959, 59.9682413313651), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245234253684858, 0.583933776388229
    ), logphi = c(0.48958320008972, -1.54113780567133)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_60 = structure(list(
    par = c(-0.482044279904047, -0.294565624805821, 0.503697369520901, 
    -1.61467663255293), value = 22.4050510832291, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.0184318742651, -1.72787284924425, 
    50.8635617570974, -5.86256871626389, -1.72787284924425, 4.95367891240051, 
    -7.6664600312526, -2.08197288875667, 50.8635617570974, -7.6664600312526, 
    985.810304587886, -84.2625814274633, -5.86256871626389, -2.08197288875667, 
    -84.2625814274633, 62.5846894992677), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.482044279904047, -0.294565624805821
    ), logphi = c(0.503697369520901, -1.61467663255293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_61 = structure(list(
    par = c(-0.328462650310135, -0.11411669612432, 0.45486105141734, 
    -1.6175022483059), value = 19.1671115087134, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9381676338584, -0.944328432339603, 
    67.6831194619254, -2.98604657444912, -0.944328432339603, 
    10.4543635455201, -3.95648260997916, -3.49372490315858, 67.6831194619254, 
    -3.95648260997916, 1310.74684078492, -64.8597106929216, -2.98604657444912, 
    -3.49372490315858, -64.8597106929216, 74.5108739232947), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328462650310135, -0.11411669612432
    ), logphi = c(0.45486105141734, -1.6175022483059)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_62 = structure(list(
    par = c(-0.369935199449905, -0.219918417578702, 0.544749713081869, 
    -1.3703677976055), value = 33.3866695395951, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.2789208780559, -2.2686144980355, 
    49.2902958182384, -7.47080553864521, -2.2686144980355, 6.86549498496447, 
    -8.64247395782058, -1.84098320588078, 49.2902958182384, -8.64247395782058, 
    628.572499676849, -82.4085943431641, -7.47080553864521, -1.84098320588078, 
    -82.4085943431641, 51.6092582376615), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369935199449905, -0.219918417578702
    ), logphi = c(0.544749713081869, -1.3703677976055)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_63 = structure(list(
    par = c(-0.0807089604741899, 0.028167132636297, 0.508065782038691, 
    -1.68527422665849), value = 18.2849436146908, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.9907685598602, -3.92149902062044, 
    66.8498532379047, -3.28288302409163, -3.92149902062044, 11.5443342005861, 
    -7.3384847540936, -3.21773293343597, 66.8498532379047, -7.3384847540936, 
    1532.41588589914, -98.9456174149694, -3.28288302409163, -3.21773293343597, 
    -98.9456174149694, 87.6095218149686), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0807089604741899, 0.028167132636297
    ), logphi = c(0.508065782038691, -1.68527422665849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_64 = structure(list(
    par = c(-0.325878257872655, -0.649388664164986, 0.544476260305615, 
    -1.64217849180881), value = 28.4404660556827, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8480163808529, -2.75917383607549, 
    53.8605161803929, -6.99350259925069, -2.75917383607549, 3.14196551087775, 
    -9.71843239394587, -0.995080629451195, 53.8605161803929, 
    -9.71843239394587, 1237.92596427119, -114.058521804239, -6.99350259925069, 
    -0.995080629451195, -114.058521804239, 79.6082830634148), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325878257872655, -0.649388664164986
    ), logphi = c(0.544476260305615, -1.64217849180881)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_65 = structure(list(
    par = c(-0.474287881816049, 0.314824103473603, 0.46336015700368, 
    -1.6794870985354), value = 7.33808271769626, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.7121026822111, 3.43467567898159, 
    70.8764058128253, -3.62162363298779, 3.43467567898159, 18.747839733102, 
    2.53237427205733, -5.26525532862365, 70.8764058128253, 2.53237427205733, 
    1390.87310929575, -94.6868418432167, -3.62162363298779, -5.26525532862365, 
    -94.6868418432167, 77.1163355892668), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.474287881816049, 0.314824103473603
    ), logphi = c(0.46336015700368, -1.6794870985354)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_66 = structure(list(
    par = c(-0.62133710175097, 0.250494879037229, 0.535247473661392, 
    -1.6814075431821), value = 15.3271088815864, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.3124897199843, -0.638099016292415, 
    84.0542099869168, -11.4829792350335, -0.638099016292415, 
    16.6533739163199, -13.3815463589926, -5.8176599893045, 84.0542099869168, 
    -13.3815463589926, 1635.80611569447, -183.061643968863, -11.4829792350335, 
    -5.8176599893045, -183.061643968863, 106.531271158339), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.62133710175097, 0.250494879037229
    ), logphi = c(0.535247473661392, -1.6814075431821)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_67 = structure(list(
    par = c(-0.0840141008123673, 0.253938566077927, 0.495546977928551, 
    -1.56399337880294), value = 23.6158294809376, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.653034205969, -1.15833582103875, 
    65.9111217702346, -1.95500197897047, -1.15833582103875, 19.0330861444821, 
    -4.58339668618635, -4.07655813816632, 65.9111217702346, -4.58339668618635, 
    1218.40372516679, -82.2457999234416, -1.95500197897047, -4.07655813816632, 
    -82.2457999234416, 76.3811269219872), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0840141008123673, 0.253938566077927
    ), logphi = c(0.495546977928551, -1.56399337880294)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_68 = structure(list(
    par = c(-0.0597099713219665, 0.0926600191778528, 0.489555433523101, 
    -1.58536097021337), value = 18.1056442102856, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.6885396823801, -2.09491831792974, 
    51.8907515605349, -1.45423741759743, -2.09491831792974, 11.8521125314075, 
    -4.36477410392655, -2.79963871463451, 51.8907515605349, -4.36477410392655, 
    1021.56090193439, -60.2932038886728, -1.45423741759743, -2.79963871463451, 
    -60.2932038886728, 62.1355717331795), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0597099713219665, 0.0926600191778528
    ), logphi = c(0.489555433523101, -1.58536097021337)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_69 = structure(list(
    par = c(-0.525649101829563, 0.0983126423631044, 0.540436991714468, 
    -1.53089699827403), value = 22.0419794345262, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.6994530006787, -0.766812465080591, 
    60.9046552311199, -8.99225952721849, -0.766812465080591, 
    11.5838247820577, -10.568170459635, -3.56699680992278, 60.9046552311199, 
    -10.568170459635, 954.812702667063, -119.718341076158, -8.99225952721849, 
    -3.56699680992278, -119.718341076158, 72.0724568488151), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.525649101829563, 0.0983126423631044
    ), logphi = c(0.540436991714468, -1.53089699827403)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_70 = structure(list(
    par = c(-0.241177625343527, 0.178018266346179, 0.568457216616853, 
    -1.33226601902028), value = 24.6317660556694, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.3140466135449, -0.889231027478843, 
    44.0181071326151, -6.62264476503083, -0.889231027478843, 
    13.8006780696642, -7.85755589127746, -2.25421612309873, 44.0181071326151, 
    -7.85755589127746, 508.342401100315, -80.7298429319481, -6.62264476503083, 
    -2.25421612309873, -80.7298429319481, 46.3068429876756), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241177625343527, 0.178018266346179
    ), logphi = c(0.568457216616853, -1.33226601902028)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_71 = structure(list(
    par = c(-0.318797264303494, 0.0217690222814398, 0.496664243813747, 
    -1.47014954889868), value = 19.9990228528567, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.5235026695999, -0.260233253612796, 
    50.8363858537919, -3.92227803436285, -0.260233253612796, 
    11.5659397090795, -5.52971670941815, -2.98761443184858, 50.8363858537919, 
    -5.52971670941815, 752.47839946968, -61.3621216283278, -3.92227803436285, 
    -2.98761443184858, -61.3621216283278, 51.2687152847136), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318797264303494, 0.0217690222814398
    ), logphi = c(0.496664243813747, -1.47014954889868)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_72 = structure(list(
    par = c(-0.176327379875504, 0.245022486095449, 0.474429458757911, 
    -1.51493641536021), value = 21.3170355916845, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.609066896176, 0.276157058110016, 
    60.9905714048509, -1.29852054442381, 0.276157058110016, 17.7045329685654, 
    -2.67084040395105, -4.00173812753479, 60.9905714048509, -2.67084040395105, 
    1015.93850544202, -59.2590462034082, -1.29852054442381, -4.00173812753479, 
    -59.2590462034082, 63.6360027126415), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.176327379875504, 0.245022486095449
    ), logphi = c(0.474429458757911, -1.51493641536021)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_73 = structure(list(
    par = c(-0.580603171396092, 0.156189803635882, 0.541808823301502, 
    -1.4013356328142), value = 22.4384627228297, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.1573485215696, 1.09925154667678, 
    53.3048660980029, -8.7631717597958, 1.09925154667678, 13.8157378533066, 
    -8.29362247767307, -3.53372939043695, 53.3048660980029, -8.29362247767307, 
    649.869690363403, -94.7130657329431, -8.7631717597958, -3.53372939043695, 
    -94.7130657329431, 55.2348567319783), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.580603171396092, 0.156189803635882
    ), logphi = c(0.541808823301502, -1.4013356328142)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_74 = structure(list(
    par = c(0.23085763954282, 0.43986155609399, 0.434335545934695, 
    -1.6040481173752), value = 15.7587168455055, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.0477079271796, -0.586396294632863, 
    44.5430270317182, 3.92524167636132, -0.586396294632863, 24.833566809157, 
    1.45539965368258, -2.17587317097312, 44.5430270317182, 1.45539965368258, 
    1187.90412111025, -16.2264708851723, 3.92524167636132, -2.17587317097312, 
    -16.2264708851723, 64.5149664713074), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.23085763954282, 0.43986155609399
    ), logphi = c(0.434335545934695, -1.6040481173752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_75 = structure(list(
    par = c(-0.0489202497642012, 0.287872436204926, 0.495522755474641, 
    -1.64445182386556), value = 18.1448735215212, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.4946992676398, -2.27534273111729, 
    66.3076750289093, -1.48789706688746, -2.27534273111729, 17.353425923794, 
    -3.47572865777579, -3.96659038193192, 66.3076750289093, -3.47572865777579, 
    1417.57949199839, -88.7454993434567, -1.48789706688746, -3.96659038193192, 
    -88.7454993434567, 82.8335050249152), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0489202497642012, 0.287872436204926
    ), logphi = c(0.495522755474641, -1.64445182386556)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_76 = structure(list(
    par = c(-0.301097657472811, -0.362140378327272, 0.531547788293389, 
    -1.3984162199363), value = 35.152288619191, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.2914284534758, -2.6832762536344, 
    49.6099835292085, -6.3362799256339, -2.6832762536344, 5.33051952089636, 
    -7.90029173103335, -1.67229245384704, 49.6099835292085, -7.90029173103335, 
    687.660713587945, -75.2780074559922, -6.3362799256339, -1.67229245384704, 
    -75.2780074559922, 52.4423068899438), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301097657472811, -0.362140378327272
    ), logphi = c(0.531547788293389, -1.3984162199363)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_77 = structure(list(
    par = c(-0.319722830688337, 0.405646487665255, 0.498962490646394, 
    -1.51150074642699), value = 7.347609855394, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.9556115078335, 2.12423997725253, 
    38.7280052880357, -2.30688700630921, 2.12423997725253, 14.2503790407922, 
    -1.26293554458812, -3.07068841198799, 38.7280052880357, -1.26293554458812, 
    592.935676569262, -52.7627348514415, -2.30688700630921, -3.07068841198799, 
    -52.7627348514415, 40.0377524618634), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319722830688337, 0.405646487665255
    ), logphi = c(0.498962490646394, -1.51150074642699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_78 = structure(list(
    par = c(-0.229170575204147, -0.0380820089712293, 0.480603187898212, 
    -1.5541782148321), value = 20.2798181684835, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.5882292499999, -1.64978255234871, 
    50.667113273839, -2.51805875572941, -1.64978255234871, 8.44859904791662, 
    -4.50968234222415, -2.70725234097213, 50.667113273839, -4.50968234222415, 
    900.251422965681, -55.18031618168, -2.51805875572941, -2.70725234097213, 
    -55.18031618168, 55.8042838845196), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229170575204147, -0.0380820089712293
    ), logphi = c(0.480603187898212, -1.5541782148321)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_79 = structure(list(
    par = c(-0.230832205963604, 0.099891282417691, 0.512661122137065, 
    -1.72103372406032), value = 17.7866477777677, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.6967753385618, -3.28408701921745, 
    70.2187854955127, -4.88716027247094, -3.28408701921745, 11.2260057338887, 
    -7.91324514359815, -3.72743500776096, 70.2187854955127, -7.91324514359815, 
    1606.11963345758, -116.990132333683, -4.88716027247094, -3.72743500776096, 
    -116.990132333683, 90.1865413514003), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230832205963604, 0.099891282417691
    ), logphi = c(0.512661122137065, -1.72103372406032)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_80 = structure(list(
    par = c(-0.270601694390635, 0.146933329883987, 0.454775368141673, 
    -1.40430652920456), value = 27.2263845636631, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.6965421991524, 2.39579577687721, 
    58.0379339272241, -0.815720761160321, 2.39579577687721, 18.8125892091051, 
    -2.87787556541019, -3.89246368026619, 58.0379339272241, -2.87787556541019, 
    780.194798144507, -33.1258658863298, -0.815720761160321, 
    -3.89246368026619, -33.1258658863298, 49.8839442704124), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270601694390635, 0.146933329883987
    ), logphi = c(0.454775368141673, -1.40430652920456)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_81 = structure(list(
    par = c(-0.269640997970015, 0.237940290523832, 0.497543672878548, 
    -1.74678069434819), value = 12.9241638907089, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.4939859058753, -1.7860660523894, 
    77.2117966789665, -4.32591575405539, -1.7860660523894, 14.8275840849976, 
    -4.11778336584234, -4.70959268961124, 77.2117966789665, -4.11778336584234, 
    1789.07330208755, -122.797111866468, -4.32591575405539, -4.70959268961124, 
    -122.797111866468, 95.8656718657025), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269640997970015, 0.237940290523832
    ), logphi = c(0.497543672878548, -1.74678069434819)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_82 = structure(list(
    par = c(-0.226576161706677, 0.0616662963551859, 0.465433300881426, 
    -1.47276741641534), value = 22.1726463104612, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.3189549599736, -0.253432047792046, 
    50.8642926355662, -1.373060504406, -0.253432047792046, 11.7940783557202, 
    -3.40441386192936, -3.06892988266583, 50.8642926355662, -3.40441386192936, 
    784.068443691943, -39.4817922089175, -1.373060504406, -3.06892988266583, 
    -39.4817922089175, 49.482302944881), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226576161706677, 0.0616662963551859
    ), logphi = c(0.465433300881426, -1.47276741641534)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_83 = structure(list(
    par = c(-0.367868490442793, -0.0675370758283, 0.464288954469876, 
    -1.85876587562614), value = 10.7606968319483, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.5214123363848, -2.49379131700422, 
    74.9781260576121, -4.25953274807434, -2.49379131700422, 8.42665183320435, 
    -3.98097781895146, -3.43220916021458, 74.9781260576121, -3.98097781895146, 
    2127.63214421274, -114.085182273849, -4.25953274807434, -3.43220916021458, 
    -114.085182273849, 94.9725470911211), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.367868490442793, -0.0675370758283
    ), logphi = c(0.464288954469876, -1.85876587562614)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_84 = structure(list(
    par = c(-0.17625020379512, 9.50762282801944e-05, 0.504654341155699, 
    -1.78862167391104), value = 17.1226816270153, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.0105468596071, -4.5488975519703, 
    80.2253384675211, -4.63808391559795, -4.5488975519703, 10.8045726081585, 
    -8.64339432737893, -3.66329870171711, 80.2253384675211, -8.64339432737893, 
    2120.24563032287, -128.586059760405, -4.63808391559795, -3.66329870171711, 
    -128.586059760405, 107.474888333847), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17625020379512, 9.50762282801944e-05
    ), logphi = c(0.504654341155699, -1.78862167391104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_85 = structure(list(
    par = c(0.185281691480737, 0.1680750704482, 0.505432610529936, 
    -1.62411568836173), value = 24.3818852391442, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.588097295059, -4.72374122750807, 
    50.3492971368757, -0.167822349794733, -4.72374122750807, 
    12.9624184523891, -4.95497248742538, -2.52424569158194, 50.3492971368757, 
    -4.95497248742538, 1169.10719336438, -64.3736494909675, -0.167822349794733, 
    -2.52424569158194, -64.3736494909675, 69.2566333118094), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.185281691480737, 0.1680750704482
    ), logphi = c(0.505432610529936, -1.62411568836173)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_86 = structure(list(
    par = c(-0.297053725352625, -0.0432338116992043, 0.488527578112834, 
    -1.6867325617433), value = 24.4300081760525, counts = structure(c(345L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.9545589594885, -2.50719739280925, 
    81.4482400626204, -5.41976949985923, -2.50719739280925, 12.1676556688044, 
    -7.72771611057266, -4.120659325757, 81.4482400626204, -7.72771611057266, 
    1769.30157616351, -117.109398297455, -5.41976949985923, -4.120659325757, 
    -117.109398297455, 100.222928155702), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297053725352625, -0.0432338116992043
    ), logphi = c(0.488527578112834, -1.6867325617433)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_87 = structure(list(
    par = c(-0.0274341257555755, 0.462980716255418, 0.512112354255043, 
    -1.67178896344263), value = 8.36286534728128, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.266539467443, -0.46444720869232, 
    57.0537880668631, -1.36492952651501, -0.46444720869232, 19.0927732401924, 
    -1.92877337612529, -3.73466805747569, 57.0537880668631, -1.92877337612529, 
    1250.56047831329, -88.6818448895266, -1.36492952651501, -3.73466805747569, 
    -88.6818448895266, 72.8143683357274), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0274341257555755, 0.462980716255418
    ), logphi = c(0.512112354255043, -1.67178896344263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_88 = structure(list(
    par = c(-0.0510578235290853, 0.190647997244392, 0.459472342910561, 
    -1.72419400600879), value = 17.0271080320807, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.148838903152, -2.08574831805919, 
    62.2412746107415, 0.128850353942056, -2.08574831805919, 13.4705819805347, 
    -0.0399927966299174, -3.18595159809476, 62.2412746107415, 
    -0.0399927966299174, 1587.30748646096, -66.4543825319441, 
    0.128850353942056, -3.18595159809476, -66.4543825319441, 
    81.1449212214654), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0510578235290853, 0.190647997244392
    ), logphi = c(0.459472342910561, -1.72419400600879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_89 = structure(list(
    par = c(-0.459381974112794, -0.847072863923695, 0.518617676445692, 
    -1.72179978935284), value = 35.8560999266073, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.6002866361102, -3.24732165069008, 
    76.827198620677, -9.60267564131811, -3.24732165069008, 2.76803270971016, 
    -12.5169791846957, -1.22636597144066, 76.827198620677, -12.5169791846957, 
    2055.085362759, -160.11667992899, -9.60267564131811, -1.22636597144066, 
    -160.11667992899, 118.731503583547), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.459381974112794, -0.847072863923695
    ), logphi = c(0.518617676445692, -1.72179978935284)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_90 = structure(list(
    par = c(-0.26293821022871, 0.400159962842526, 0.469542273512437, 
    -1.55185219107642), value = 13.786249141457, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.4397410616785, 3.15495912950325, 
    53.6713753245266, -1.07850021890954, 3.15495912950325, 19.331074686324, 
    0.899251179742322, -3.95024392862986, 53.6713753245266, 0.899251179742322, 
    918.364434805419, -57.2823793989485, -1.07850021890954, -3.95024392862986, 
    -57.2823793989485, 56.0369181119569), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26293821022871, 0.400159962842526
    ), logphi = c(0.469542273512437, -1.55185219107642)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_91 = structure(list(
    par = c(-0.343545000043832, -0.552337057644923, 0.455347252437551, 
    -1.8216869765597), value = 23.6258261007123, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.8581606460665, -3.0818008385225, 
    77.4738415376675, -4.89976171547113, -3.0818008385225, 4.42988253634979, 
    -6.61369118226673, -2.27968996480143, 77.4738415376675, -6.61369118226673, 
    2239.30251981486, -106.673558197823, -4.89976171547113, -2.27968996480143, 
    -106.673558197823, 103.919340391556), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343545000043832, -0.552337057644923
    ), logphi = c(0.455347252437551, -1.8216869765597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_92 = structure(list(
    par = c(-0.224376215035138, 0.388680312396382, 0.437880584696286, 
    -1.80162942413792), value = 4.37933129982536, counts = structure(c(307L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.8515798175912, 3.04495562541973, 
    80.1648018726731, 0.544804114488429, 3.04495562541973, 21.6061678841584, 
    10.4033270322823, -4.33817998191088, 80.1648018726731, 10.4033270322823, 
    2190.80681400285, -93.2715061674472, 0.544804114488429, -4.33817998191088, 
    -93.2715061674472, 99.3929863923881), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224376215035138, 0.388680312396382
    ), logphi = c(0.437880584696286, -1.80162942413792)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_93 = structure(list(
    par = c(-0.303063832654659, 0.445925664098791, 0.468631045807077, 
    -1.75009142098805), value = 5.75055223430276, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.6621052497947, 2.35343374921371, 
    65.8410107621243, -1.59074614991539, 2.35343374921371, 18.0492361239182, 
    5.36190670263892, -4.50206771374084, 65.8410107621243, 5.36190670263892, 
    1527.34043443603, -92.9498044908161, -1.59074614991539, -4.50206771374084, 
    -92.9498044908161, 78.0077799964474), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303063832654659, 0.445925664098791
    ), logphi = c(0.468631045807077, -1.75009142098805)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_94 = structure(list(
    par = c(-0.572974990460245, 0.0504741805819566, 0.596201424677392, 
    -1.48850272089823), value = 17.6570050376798, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.2368719739115, -1.47304063169429, 
    48.6734502356256, -10.5852043565946, -1.47304063169429, 9.27596078437176, 
    -13.4040609465202, -1.59779504116386, 48.6734502356256, -13.4040609465202, 
    736.299734978907, -130.302783903691, -10.5852043565946, -1.59779504116386, 
    -130.302783903691, 68.0773677315116), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.572974990460245, 0.0504741805819566
    ), logphi = c(0.596201424677392, -1.48850272089823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_95 = structure(list(
    par = c(-0.599127313140505, 0.166825879803372, 0.473466862205235, 
    -1.7030326404032), value = 11.1626701178365, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.777856072409, 0.157033443137777, 
    70.4645541720339, -5.09466705223005, 0.157033443137777, 12.2979656209665, 
    -3.44491783366152, -4.04376725260391, 70.4645541720339, -3.44491783366152, 
    1429.44216142471, -110.290536097235, -5.09466705223005, -4.04376725260391, 
    -110.290536097235, 80.2759093954108), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.599127313140505, 0.166825879803372
    ), logphi = c(0.473466862205235, -1.7030326404032)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_96 = structure(list(
    par = c(-0.375473768310473, 0.00274785987700364, 0.433602183491996, 
    -1.5192290937289), value = 17.3768623567436, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.4803349229796, 1.563595241727, 
    58.6115938192577, -1.12955033237938, 1.563595241727, 12.9571648503912, 
    -1.4680027664582, -3.53958183829661, 58.6115938192577, -1.4680027664582, 
    939.333753471772, -31.9801608386072, -1.12955033237938, -3.53958183829661, 
    -31.9801608386072, 54.8815362702015), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375473768310473, 0.00274785987700364
    ), logphi = c(0.433602183491996, -1.5192290937289)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_97 = structure(list(
    par = c(-0.107483059020476, -0.300446264664121, 0.510765694051338, 
    -1.62039474534597), value = 36.3242069043948, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.5745761797452, -4.2949478018528, 
    67.2374236394546, -4.53050076298922, -4.2949478018528, 7.40585155512008, 
    -8.99543670129788, -2.43348811945765, 67.2374236394546, -8.99543670129788, 
    1435.77772465164, -97.0689409376391, -4.53050076298922, -2.43348811945765, 
    -97.0689409376391, 87.7660689990734), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.107483059020476, -0.300446264664121
    ), logphi = c(0.510765694051338, -1.62039474534597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_98 = structure(list(
    par = c(0.144030459594418, 0.48524627271325, 0.447961387692719, 
    -1.54520253295932), value = 17.2836400134428, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.8340287174624, 0.172664693209867, 
    45.303019668097, 3.0923908522773, 0.172664693209867, 22.4611265124963, 
    0.919757487949369, -2.60295680121203, 45.303019668097, 0.919757487949369, 
    990.5024704846, -24.8748176217006, 3.0923908522773, -2.60295680121203, 
    -24.8748176217006, 57.0705592304321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.144030459594418, 0.48524627271325
    ), logphi = c(0.447961387692719, -1.54520253295932)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_99 = structure(list(
    par = c(0.00947575440933089, -0.297815105506901, 0.485954432660911, 
    -1.7023476118579), value = 34.2462869409777, counts = structure(c(333L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.7309052473291, -5.60000123428495, 
    70.0044644545983, -2.08980092786248, -5.60000123428495, 6.69775810102635, 
    -6.81909908273326, -2.47719634582921, 70.0044644545983, -6.81909908273326, 
    1804.59134693223, -82.7840100496857, -2.08980092786248, -2.47719634582921, 
    -82.7840100496857, 97.8351257998611), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00947575440933089, -0.297815105506901
    ), logphi = c(0.485954432660911, -1.7023476118579)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_100 = structure(list(
    par = c(-0.196300314405045, -0.470792949579124, 0.505294680019082, 
    -1.75578093137629), value = 26.8350439206757, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.6101624688462, -3.49504494945307, 
    60.1596697809015, -4.50117128414362, -3.49504494945307, 4.1965887138673, 
    -8.14632983558994, -1.71859789599438, 60.1596697809015, -8.14632983558994, 
    1626.85139797158, -97.0418817054508, -4.50117128414362, -1.71859789599438, 
    -97.0418817054508, 86.1730903505276), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196300314405045, -0.470792949579124
    ), logphi = c(0.505294680019082, -1.75578093137629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_101 = structure(list(
    par = c(-0.0906931227683148, 0.0219518146561581, 0.512082615364579, 
    -1.60273506252963), value = 26.3436133201893, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.1162564359505, -3.89724581406625, 
    61.4619632983704, -3.4622256683825, -3.89724581406625, 10.4737532389265, 
    -7.43701006111763, -3.0513839117674, 61.4619632983704, -7.43701006111763, 
    1223.65350616604, -88.9079109787083, -3.4622256683825, -3.0513839117674, 
    -88.9079109787083, 76.3234183560613), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0906931227683148, 0.0219518146561581
    ), logphi = c(0.512082615364579, -1.60273506252963)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_102 = structure(list(
    par = c(0.0484066894523031, 0.310278873541227, 0.483144836657979, 
    -1.77398818871443), value = 11.3327088042678, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.9834660976202, -3.0075909283056, 
    65.1827640516522, 0.145046989086239, -3.0075909283056, 16.5514983470061, 
    -0.416600260511046, -3.36643204135179, 65.1827640516522, 
    -0.416600260511046, 1831.91761349111, -85.4813240509511, 
    0.145046989086239, -3.36643204135179, -85.4813240509511, 
    90.7153072504663), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0484066894523031, 0.310278873541227
    ), logphi = c(0.483144836657979, -1.77398818871443)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_103 = structure(list(
    par = c(-0.416038912455836, -1.00089062258653, 0.476590160410867, 
    -1.53082952083802), value = 27.124788431837, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.0214799141679, -1.31212495979582, 
    40.9682896069796, -3.95828359156525, -1.31212495979582, 1.4675386648122, 
    -4.12452714382283, -0.889278938487337, 40.9682896069796, 
    -4.12452714382283, 748.457834570004, -44.393675705301, -3.95828359156525, 
    -0.889278938487337, -44.393675705301, 47.1020090317964), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416038912455836, -1.00089062258653
    ), logphi = c(0.476590160410867, -1.53082952083802)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_104 = structure(list(
    par = c(-0.315794593196021, 0.389193028034671, 0.522429679404737, 
    -1.60044969127573), value = 11.5228853225558, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.1590695152545, 0.553808572334447, 
    65.5162240539298, -5.32420411136769, 0.553808572334447, 18.3723589737284, 
    -4.73501454489877, -4.90972272793044, 65.5162240539298, -4.73501454489877, 
    1149.28581607909, -112.817269684484, -5.32420411136769, -4.90972272793044, 
    -112.817269684484, 76.0811485012169), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.315794593196021, 0.389193028034671
    ), logphi = c(0.522429679404737, -1.60044969127573)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_105 = structure(list(
    par = c(-0.379566994072084, 0.6510798672954, 0.499591526451948, 
    -1.47478983977122), value = 7.40031576908104, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.1778211496971, 8.83628020176275, 
    49.5493939380864, -2.58441618949945, 8.83628020176275, 30.4158605763938, 
    2.85474850292289, -4.75652036180385, 49.5493939380864, 2.85474850292289, 
    696.820700207379, -69.8831885759255, -2.58441618949945, -4.75652036180385, 
    -69.8831885759255, 48.97125293013), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379566994072084, 0.6510798672954
    ), logphi = c(0.499591526451948, -1.47478983977122)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_106 = structure(list(
    par = c(-0.446290849425294, -0.282890048918229, 0.521365371588502, 
    -1.52725132195686), value = 28.6521548764056, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.5112592164269, -2.33336941057871, 
    57.744193241227, -7.51059962622591, -2.33336941057871, 6.11495712821153, 
    -9.56147203634572, -2.27249438200516, 57.744193241227, -9.56147203634572, 
    969.615310565608, -97.9063383921286, -7.51059962622591, -2.27249438200516, 
    -97.9063383921286, 68.156500680594), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.446290849425294, -0.282890048918229
    ), logphi = c(0.521365371588502, -1.52725132195686)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_107 = structure(list(
    par = c(-0.547796106443033, 0.476115794046527, 0.514366735341855, 
    -1.50979669430542), value = 7.71494719091748, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.8102118166903, 6.17177020867388, 
    54.5075731812616, -5.7109834648017, 6.17177020867388, 24.9824759164241, 
    -1.26678844480921, -5.17193050431075, 54.5075731812616, -1.26678844480921, 
    769.790697010997, -89.9998160006632, -5.7109834648017, -5.17193050431075, 
    -89.9998160006632, 56.3882476880551), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.547796106443033, 0.476115794046527
    ), logphi = c(0.514366735341855, -1.50979669430542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_108 = structure(list(
    par = c(-0.29866226617436, -0.459564774910459, 0.528151834703587, 
    -1.45590684106757), value = 42.3168939571026, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8608586160043, -3.57341311563175, 
    71.0318002639099, -8.72738852919497, -3.57341311563175, 6.6850634894422, 
    -11.0731279114873, -2.15156032545849, 71.0318002639099, -11.0731279114873, 
    1109.44288341841, -111.463381925248, -8.72738852919497, -2.15156032545849, 
    -111.463381925248, 80.8667806335706), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29866226617436, -0.459564774910459
    ), logphi = c(0.528151834703587, -1.45590684106757)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_109 = structure(list(
    par = c(-0.0586147047420312, -0.0236394412589277, 0.462846952521472, 
    -1.55509549411106), value = 24.0212833087221, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.5388516369808, -2.44470834420696, 
    53.0838614034579, -0.32214078160564, -2.44470834420696, 10.2759696893884, 
    -3.61300246787266, -2.68586481411148, 53.0838614034579, -3.61300246787266, 
    1022.08507275492, -40.4367784447857, -0.32214078160564, -2.68586481411148, 
    -40.4367784447857, 60.7512527066589), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0586147047420312, -0.0236394412589277
    ), logphi = c(0.462846952521472, -1.55509549411106)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_110 = structure(list(
    par = c(-0.528617887190711, -0.448350561914318, 0.517237248195359, 
    -1.80959211043612), value = 18.1079662091529, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.8957035254729, -3.08328036613403, 
    64.0543208518807, -7.68113630655876, -3.08328036613403, 4.02007661470805, 
    -13.1569219030681, -1.61144537358382, 64.0543208518807, -13.1569219030681, 
    1866.27895243596, -142.66629105153, -7.68113630655876, -1.61144537358382, 
    -142.66629105153, 97.1690228359634), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.528617887190711, -0.448350561914318
    ), logphi = c(0.517237248195359, -1.80959211043612)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_111 = structure(list(
    par = c(-0.572947424843495, -0.0804634414615894, 0.516821430935163, 
    -1.66854574375442), value = 21.6562986563956, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.2834378703589, -1.81330791892975, 
    66.7019576683359, -8.61600062673773, -1.81330791892975, 8.62726099093436, 
    -11.5381096632561, -3.27811667411027, 66.7019576683359, -11.5381096632561, 
    1362.60964543666, -131.544847142173, -8.61600062673773, -3.27811667411027, 
    -131.544847142173, 85.6535957280968), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.572947424843495, -0.0804634414615894
    ), logphi = c(0.516821430935163, -1.66854574375442)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_112 = structure(list(
    par = c(-0.265603386248491, 0.163296457834317, 0.532516631120828, 
    -1.65408783190565), value = 13.1880726407136, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.0207712262282, -1.53903516020293, 
    47.4922923441312, -4.33804899024892, -1.53903516020293, 9.60771846481023, 
    -6.73531086503587, -2.69304582412033, 47.4922923441312, -6.73531086503587, 
    952.207535642735, -86.9441888511346, -4.33804899024892, -2.69304582412033, 
    -86.9441888511346, 59.8242690110773), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265603386248491, 0.163296457834317
    ), logphi = c(0.532516631120828, -1.65408783190565)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_113 = structure(list(
    par = c(-0.385063653754475, 0.228782857845639, 0.588687547622325, 
    -1.45927468273506), value = 19.672375151368, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.6334280225847, -0.659767978916648, 
    58.9614688015772, -10.6142568858658, -0.659767978916648, 
    17.1479745985081, -12.9239257722347, -2.9595936843485, 58.9614688015772, 
    -12.9239257722347, 821.514910941623, -137.890476495706, -10.6142568858658, 
    -2.9595936843485, -137.890476495706, 74.3107006586641), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385063653754475, 0.228782857845639
    ), logphi = c(0.588687547622325, -1.45927468273506)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_114 = structure(list(
    par = c(-0.0247111290541226, -0.0496486908614239, 0.448973389363957, 
    -1.66132493778487), value = 24.0988090263845, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.4770426931903, -3.10761431254747, 
    66.1688879262101, 0.373888482840812, -3.10761431254747, 11.9020774782541, 
    -2.58651086859629, -2.98829545108958, 66.1688879262101, -2.58651086859629, 
    1575.2590014273, -50.2871996710397, 0.373888482840812, -2.98829545108958, 
    -50.2871996710397, 84.4005736562181), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0247111290541226, -0.0496486908614239
    ), logphi = c(0.448973389363957, -1.66132493778487)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_115 = structure(list(
    par = c(-0.324842263276008, 0.0362946924593243, 0.541474420267438, 
    -1.53805272774158), value = 24.8329320964079, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.0562434221658, -1.75367561272566, 
    62.0972561247157, -7.52574213436219, -1.75367561272566, 12.5766618559453, 
    -10.6078583259617, -3.14021165870315, 62.0972561247157, -10.6078583259617, 
    1032.85800385233, -115.328052525676, -7.52574213436219, -3.14021165870315, 
    -115.328052525676, 74.6327776939282), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.324842263276008, 0.0362946924593243
    ), logphi = c(0.541474420267438, -1.53805272774158)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_116 = structure(list(
    par = c(-0.203164551394973, 0.0136623636889231, 0.516788369194787, 
    -1.64333029107393), value = 21.6150926763404, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.4082022281257, -3.12271761160332, 
    60.6632104807048, -4.5896361946518, -3.12271761160332, 9.40868103604942, 
    -7.94781470148109, -3.02829052545306, 60.6632104807048, -7.94781470148109, 
    1246.4056312389, -97.8715642059313, -4.5896361946518, -3.02829052545306, 
    -97.8715642059313, 76.376136407319), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203164551394973, 0.0136623636889231
    ), logphi = c(0.516788369194787, -1.64333029107393)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_117 = structure(list(
    par = c(-0.526403973855478, -0.624725836030763, 0.510393648213081, 
    -1.67941388575501), value = 26.9077246220608, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(16.9749601894864, -2.81463606555121, 
    68.5846749313157, -8.88086353123541, -2.81463606555121, 3.5686363153431, 
    -11.6308651003649, -1.66720538929965, 68.5846749313157, -11.6308651003649, 
    1601.79741188315, -133.96005378441, -8.88086353123541, -1.66720538929965, 
    -133.96005378441, 96.9838187074856), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.526403973855478, -0.624725836030763
    ), logphi = c(0.510393648213081, -1.67941388575501)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_118 = structure(list(
    par = c(-0.207221167364346, 0.574981005877626, 0.507156111120719, 
    -1.71710513354754), value = 3.44554772478909, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.7422006201061, 2.97556163353363, 
    71.8449440051394, -2.56423100419845, 2.97556163353363, 25.5696581104026, 
    2.66534461745849, -5.39496461215982, 71.8449440051394, 2.66534461745849, 
    1568.97894674701, -119.551162520715, -2.56423100419845, -5.39496461215982, 
    -119.551162520715, 87.8500040228936), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207221167364346, 0.574981005877626
    ), logphi = c(0.507156111120719, -1.71710513354754)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_119 = structure(list(
    par = c(-0.129512939768525, -0.0416659407201361, 0.494940480713349, 
    -1.54949838712684), value = 24.1630759614698, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.6295706482799, -2.51484602387109, 
    55.207911651145, -2.71238647675531, -2.51484602387109, 9.95643593082463, 
    -5.93326121300919, -2.77109352486704, 55.207911651145, -5.93326121300919, 
    1004.88104219743, -65.9119800094921, -2.71238647675531, -2.77109352486704, 
    -65.9119800094921, 63.6120655501671), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129512939768525, -0.0416659407201361
    ), logphi = c(0.494940480713349, -1.54949838712684)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_120 = structure(list(
    par = c(-0.469643497848131, 0.0102170075609986, 0.489297737594747, 
    -1.64075903492587), value = 17.3738281226436, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.4084990089231, -0.724966529475068, 
    74.8777964494352, -6.7377043437844, -0.724966529475068, 12.2627964449507, 
    -7.3055006408751, -4.39327955703561, 74.8777964494352, -7.3055006408751, 
    1429.98292059637, -113.141896119107, -6.7377043437844, -4.39327955703561, 
    -113.141896119107, 86.4926005244016), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.469643497848131, 0.0102170075609986
    ), logphi = c(0.489297737594747, -1.64075903492587)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_121 = structure(list(
    par = c(-0.107226090147997, -0.0542719191869566, 0.471948949620786, 
    -1.62737485129355), value = 25.0349141334176, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.6581036730621, -2.98818081123642, 
    67.6663899152885, -1.73123588798063, -2.98818081123642, 11.6733824491178, 
    -4.89927526903244, -3.27599069382956, 67.6663899152885, -4.89927526903244, 
    1434.53358542978, -69.478836509429, -1.73123588798063, -3.27599069382956, 
    -69.478836509429, 82.2720081634642), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.107226090147997, -0.0542719191869566
    ), logphi = c(0.471948949620786, -1.62737485129355)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_122 = structure(list(
    par = c(-0.293865068201931, -0.0111971234529105, 0.469721129984401, 
    -1.71209558451372), value = 15.2298415149924, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.9384772591222, -1.5143407368079, 
    61.6684478664808, -3.05503632258564, -1.5143407368079, 9.50307689429053, 
    -3.5225668240102, -3.20188064684146, 61.6684478664808, -3.5225668240102, 
    1395.1951890907, -79.3240194578715, -3.05503632258564, -3.20188064684146, 
    -79.3240194578715, 74.6460695797424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293865068201931, -0.0111971234529105
    ), logphi = c(0.469721129984401, -1.71209558451372)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_123 = structure(list(
    par = c(-0.036037385167359, 0.248166061472954, 0.505573177972032, 
    -1.51514783273482), value = 23.0222324089445, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.2238873435031, -2.48757269183386, 
    55.9303493821162, -1.87785384664352, -2.48757269183386, 15.4840692312419, 
    -5.20240547530193, -3.40759993600059, 55.9303493821162, -5.20240547530193, 
    965.132958461901, -71.4138313790968, -1.87785384664352, -3.40759993600059, 
    -71.4138313790968, 63.5117517848727), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.036037385167359, 0.248166061472954
    ), logphi = c(0.505573177972032, -1.51514783273482)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_124 = structure(list(
    par = c(-0.061150194604822, 0.44111448265028, 0.484905392757748, 
    -1.47568364218652), value = 13.5160517887589, counts = structure(c(283L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.4755956377604, 0.942623284760913, 
    38.4925906100619, -0.141938598430258, 0.942623284760913, 
    15.9553676395419, -1.19320234537312, -2.71752934910552, 38.4925906100619, 
    -1.19320234537312, 623.413829996533, -39.8463635271629, -0.141938598430258, 
    -2.71752934910552, -39.8463635271629, 40.4327809477856), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.061150194604822, 0.44111448265028
    ), logphi = c(0.484905392757748, -1.47568364218652)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_125 = structure(list(
    par = c(-0.498167848314932, -0.097629416190547, 0.499306552282942, 
    -1.78485343954381), value = 11.8356066321034, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.9209490918097, -2.43835718016783, 
    70.5379231304981, -7.02662607654503, -2.43835718016783, 7.93040094926312, 
    -10.022408300614, -3.26848749621078, 70.5379231304981, -10.022408300614, 
    1764.87188294505, -132.389408177058, -7.02662607654503, -3.26848749621078, 
    -132.389408177058, 92.7424177890046), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.498167848314932, -0.097629416190547
    ), logphi = c(0.499306552282942, -1.78485343954381)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_126 = structure(list(
    par = c(-0.47048859955826, 0.175066466327239, 0.497056223127614, 
    -1.68763930675246), value = 10.7987728942279, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.1752396091522, -0.191321761988661, 
    68.3989160261689, -6.00948785134392, -0.191321761988661, 
    13.2652591657845, -5.3419683707645, -4.52530433214804, 68.3989160261689, 
    -5.3419683707645, 1376.93575009301, -114.071347720124, -6.00948785134392, 
    -4.52530433214804, -114.071347720124, 80.8882440255232), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.47048859955826, 0.175066466327239
    ), logphi = c(0.497056223127614, -1.68763930675246)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_127 = structure(list(
    par = c(-0.561850395027004, -0.115530536621512, 0.529718575961705, 
    -1.54954898693735), value = 21.9132554268079, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(20.0746854712719, -1.40565000350534, 
    61.9926128884174, -9.20965393991224, -1.40565000350534, 9.03969584076236, 
    -11.3610791956376, -2.91076347869179, 61.9926128884174, -11.3610791956376, 
    1039.99746329553, -119.081331483528, -9.20965393991224, -2.91076347869179, 
    -119.081331483528, 75.1024659786381), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.561850395027004, -0.115530536621512
    ), logphi = c(0.529718575961705, -1.54954898693735)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_128 = structure(list(
    par = c(-0.2346693524913, 0.161599175669054, 0.510560872163391, 
    -1.61592553657014), value = 18.6403083229244, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.8495786721037, -1.61165856571444, 
    58.9019443060224, -4.10083911051018, -1.61165856571444, 12.1325944464346, 
    -6.01771379749039, -3.51522262498349, 58.9019443060224, -6.01771379749039, 
    1122.01493256325, -91.043709621097, -4.10083911051018, -3.51522262498349, 
    -91.043709621097, 70.3328176996365), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2346693524913, 0.161599175669054
    ), logphi = c(0.510560872163391, -1.61592553657014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_129 = structure(list(
    par = c(-0.253247172558046, 0.348586652898727, 0.471271403022057, 
    -1.84786469735833), value = -3.71901435760222, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.6270053365966, 1.89167364439413, 
    75.8720628248888, -2.00013227535933, 1.89167364439413, 22.4364834648938, 
    4.03972833984412, -4.46134583054203, 75.8720628248888, 4.03972833984412, 
    2092.14777239586, -112.750972020015, -2.00013227535933, -4.46134583054203, 
    -112.750972020015, 94.2978109033099), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253247172558046, 0.348586652898727
    ), logphi = c(0.471271403022057, -1.84786469735833)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_130 = structure(list(
    par = c(-0.349879116542219, 0.102470892688538, 0.525730298310294, 
    -1.53670300893088), value = 29.2888220768267, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.214184039565, -1.23337074864338, 
    80.7451798445769, -8.62680659041715, -1.23337074864338, 17.5094101422246, 
    -11.2829131992953, -4.73399085709758, 80.7451798445769, -11.2829131992953, 
    1314.52077165317, -135.727161877153, -8.62680659041715, -4.73399085709758, 
    -135.727161877153, 92.3747160941346), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349879116542219, 0.102470892688538
    ), logphi = c(0.525730298310294, -1.53670300893088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_131 = structure(list(
    par = c(0.166087562645335, 0.294722487113012, 0.474735517060403, 
    -1.77396136108301), value = 13.5705655302615, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.3869146683364, -4.14903868284355, 
    53.1266380288109, 1.27183154319255, -4.14903868284355, 13.5019506877221, 
    -0.128964363188544, -2.49292801757228, 53.1266380288109, 
    -0.128964363188544, 1634.30216558602, -62.3826082226664, 
    1.27183154319255, -2.49292801757228, -62.3826082226664, 79.7586928533711
    ), .Dim = c(4L, 4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.166087562645335, 0.294722487113012
    ), logphi = c(0.474735517060403, -1.77396136108301)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_132 = structure(list(
    par = c(-0.388201782841732, 0.011636023043676, 0.50097781621763, 
    -1.70355487780376), value = 16.3037562757932, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.798498260483, -2.43946180766841, 
    82.7686545274986, -7.14797754408636, -2.43946180766841, 12.0755456229915, 
    -9.46782836575011, -4.43000558947304, 82.7686545274986, -9.46782836575011, 
    1794.91895129491, -137.700494050375, -7.14797754408636, -4.43000558947304, 
    -137.700494050375, 102.981631922461), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.388201782841732, 0.011636023043676
    ), logphi = c(0.50097781621763, -1.70355487780376)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_133 = structure(list(
    par = c(-0.298532596845095, -0.20806928004571, 0.477010655205823, 
    -1.57365784733152), value = 19.900495128063, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.7213454818151, -1.70781107566853, 
    57.1813921723674, -3.60141715294304, -1.70781107566853, 7.63012154614273, 
    -5.65750054715153, -2.68927798252605, 57.1813921723674, -5.65750054715153, 
    1048.0209672501, -63.3093753528158, -3.60141715294304, -2.68927798252605, 
    -63.3093753528158, 63.9573635723423), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298532596845095, -0.20806928004571
    ), logphi = c(0.477010655205823, -1.57365784733152)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_134 = structure(list(
    par = c(-0.288695962446603, 0.119426630351786, 0.526992682640016, 
    -1.73493172493812), value = 13.9183773691371, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.3691538031877, -3.45109721866521, 
    74.7977148130019, -6.48341578113332, -3.45109721866521, 11.8767543302312, 
    -10.6393654828452, -3.96584959183599, 74.7977148130019, -10.6393654828452, 
    1720.87498922924, -138.720635538991, -6.48341578113332, -3.96584959183599, 
    -138.720635538991, 97.4266316386974), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288695962446603, 0.119426630351786
    ), logphi = c(0.526992682640016, -1.73493172493812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_135 = structure(list(
    par = c(-0.296873059257389, 0.188530886942988, 0.475427394664532, 
    -1.7263204554571), value = 13.1371293589823, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.2179041251379, -0.350020343375945, 
    83.063464540345, -3.73577191892238, -0.350020343375945, 17.1704507501147, 
    -1.9860391020643, -5.00516702706122, 83.063464540345, -1.9860391020643, 
    1875.32560324311, -115.151076715669, -3.73577191892238, -5.00516702706122, 
    -115.151076715669, 99.7420057249343), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296873059257389, 0.188530886942988
    ), logphi = c(0.475427394664532, -1.7263204554571)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_136 = structure(list(
    par = c(-0.270926648871718, 0.23251054375274, 0.522361148228381, 
    -1.64263554159247), value = 18.3305354552053, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.2799850048506, -2.12168034252613, 
    80.6934051267305, -6.5306543888255, -2.12168034252613, 17.0136261052889, 
    -8.85218573465352, -5.05960828611762, 80.6934051267305, -8.85218573465352, 
    1568.68104718288, -139.010644588655, -6.5306543888255, -5.05960828611762, 
    -139.010644588655, 98.3888371273167), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270926648871718, 0.23251054375274
    ), logphi = c(0.522361148228381, -1.64263554159247)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_137 = structure(list(
    par = c(-0.733383226911481, 0.170452347222286, 0.520931689065172, 
    -1.51905355140488), value = 8.86415693559508, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.380966087063, 3.35437719289899, 
    70.4664641757446, -10.9409589921228, 3.35437719289899, 20.1720901316094, 
    -9.42283379590236, -5.29989398501129, 70.4664641757446, -9.42283379590236, 
    1025.95141670658, -130.293874544662, -10.9409589921228, -5.29989398501129, 
    -130.293874544662, 77.6403905025091), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.733383226911481, 0.170452347222286
    ), logphi = c(0.520931689065172, -1.51905355140488)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_138 = structure(list(
    par = c(-0.867063238290065, -0.20208987077284, 0.568662126512288, 
    -1.66796834924275), value = 15.0428444752754, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.3158274065152, -1.63793226803932, 
    56.9055401413721, -11.9382104291077, -1.63793226803932, 7.47774569376247, 
    -20.160831541105, -0.955250998302404, 56.9055401413721, -20.160831541105, 
    1307.61222584574, -180.418848325203, -11.9382104291077, -0.955250998302404, 
    -180.418848325203, 95.676143484269), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.867063238290065, -0.20208987077284
    ), logphi = c(0.568662126512288, -1.66796834924275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_139 = structure(list(
    par = c(-0.38003550990429, 0.724839725048851, 0.501928412442513, 
    -1.32584683047481), value = 7.11569634858118, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.7370344943567, 10.5361964020112, 
    39.464153287927, -2.04441338436112, 10.5361964020112, 30.3012085844934, 
    2.3217009705867, -4.05542847015106, 39.464153287927, 2.3217009705867, 
    432.411133763466, -48.045763895832, -2.04441338436112, -4.05542847015106, 
    -48.045763895832, 33.0734988329695), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38003550990429, 0.724839725048851
    ), logphi = c(0.501928412442513, -1.32584683047481)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_140 = structure(list(
    par = c(-0.48147596699132, 0.101938883341429, 0.569713590895523, 
    -1.53743050418055), value = 19.1413844862869, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.6210114012653, -1.45369846116239, 
    56.6051247661292, -9.57923602840083, -1.45369846116239, 11.7327518696086, 
    -12.678699564006, -2.71578152322149, 56.6051247661292, -12.678699564006, 
    916.058552396848, -130.662048709596, -9.57923602840083, -2.71578152322149, 
    -130.662048709596, 73.2333415234265), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.48147596699132, 0.101938883341429
    ), logphi = c(0.569713590895523, -1.53743050418055)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_141 = structure(list(
    par = c(-0.430605032387266, 0.494544574700562, 0.537685969810852, 
    -1.76003932606248), value = 8.13496954852778, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.3548078328831, -0.0438596625684795, 
    63.0055530290718, -5.90424208901652, -0.0438596625684795, 
    15.425611611164, -4.41450705945812, -4.97792446241263, 63.0055530290718, 
    -4.41450705945812, 1359.42220131735, -129.27157718412, -5.90424208901652, 
    -4.97792446241263, -129.27157718412, 77.4834472254682), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.430605032387266, 0.494544574700562
    ), logphi = c(0.537685969810852, -1.76003932606248)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_142 = structure(list(
    par = c(-0.140110819968622, 0.123958937126487, 0.459950437274604, 
    -1.53709106227817), value = 20.7940718798073, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.8774817105758, -1.03364027204123, 
    56.1743079963151, -0.427737450792165, -1.03364027204123, 
    13.17063894124, -2.52407893697182, -3.29222008144114, 56.1743079963151, 
    -2.52407893697182, 1003.4672375534, -43.727172705843, -0.427737450792165, 
    -3.29222008144114, -43.727172705843, 60.2212745812736), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.140110819968622, 0.123958937126487
    ), logphi = c(0.459950437274604, -1.53709106227817)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_143 = structure(list(
    par = c(-0.442825879453337, 0.205915435360491, 0.561457220547556, 
    -1.60485163799501), value = 18.3684266302053, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.5248060223014, -2.25115302043832, 
    74.2250269381017, -10.6999850637557, -2.25115302043832, 14.7327886086401, 
    -14.9356813476942, -4.23099799284898, 74.2250269381017, -14.9356813476942, 
    1322.71126970984, -165.905460211668, -10.6999850637557, -4.23099799284898, 
    -165.905460211668, 95.7935439540591), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.442825879453337, 0.205915435360491
    ), logphi = c(0.561457220547556, -1.60485163799501)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_144 = structure(list(
    par = c(-0.691337422491229, -0.937169926433649, 0.543810405404705, 
    -1.73022623141536), value = 20.4266126137795, counts = structure(c(337L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(7.62156441513895, -1.80320332177075, 
    45.4451552016621, -7.62124740827375, -1.80320332177075, 1.35304897952437, 
    -10.1733623418809, -0.205524719909533, 45.4451552016621, 
    -10.1733623418809, 1343.49805615575, -131.916333063753, -7.62124740827375, 
    -0.205524719909533, -131.916333063753, 82.3890640528901), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.691337422491229, -0.937169926433649
    ), logphi = c(0.543810405404705, -1.73022623141536)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_145 = structure(list(
    par = c(-0.17907748139964, 0.022064355133168, 0.500319396761817, 
    -1.43012356120829), value = 24.7857964088785, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.6289527142713, -1.6640532125578, 
    49.4079154265137, -2.98269284648711, -1.6640532125578, 10.6710167964152, 
    -5.74310715339976, -2.74274982192679, 49.4079154265137, -5.74310715339976, 
    713.073163641553, -55.1866048690286, -2.98269284648711, -2.74274982192679, 
    -55.1866048690286, 49.2067144648445), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17907748139964, 0.022064355133168
    ), logphi = c(0.500319396761817, -1.43012356120829)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_146 = structure(list(
    par = c(-0.255101608132744, 0.282334639507927, 0.48245218910362, 
    -1.75364396394617), value = 9.58035682151803, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.152440176958, -0.440682219160493, 
    79.8068732237311, -3.16667968847106, -0.440682219160493, 
    17.6247071546065, -0.664943144546015, -4.94179892029933, 
    79.8068732237311, -0.664943144546015, 1886.35751721344, -117.045671074845, 
    -3.16667968847106, -4.94179892029933, -117.045671074845, 
    97.9157161080657), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255101608132744, 0.282334639507927
    ), logphi = c(0.48245218910362, -1.75364396394617)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_147 = structure(list(
    par = c(-0.575952801536606, 0.427398676655287, 0.518150397021349, 
    -1.64873318100081), value = 4.9680413618259, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.4367929625803, 4.00874624961745, 
    89.2131087786296, -9.68468281836721, 4.00874624961745, 26.328557365396, 
    -4.25946934790034, -7.80083842455426, 89.2131087786296, -4.25946934790034, 
    1582.39111302461, -169.644769537847, -9.68468281836721, -7.80083842455426, 
    -169.644769537847, 103.25957159818), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.575952801536606, 0.427398676655287
    ), logphi = c(0.518150397021349, -1.64873318100081)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_148 = structure(list(
    par = c(-0.253320495965842, -0.130431141741995, 0.507390236655901, 
    -1.77336068326549), value = 15.0638792809361, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.2502776507104, -3.65116462130999, 
    76.2474188595874, -5.69661103888564, -3.65116462130999, 9.36957184727305, 
    -10.1706191255602, -3.14500612885737, 76.2474188595874, -10.1706191255602, 
    1972.65138744296, -128.550770476465, -5.69661103888564, -3.14500612885737, 
    -128.550770476465, 103.11719489664), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253320495965842, -0.130431141741995
    ), logphi = c(0.507390236655901, -1.77336068326549)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_149 = structure(list(
    par = c(0.0473493351666307, -0.366423224588785, 0.508231140946017, 
    -1.50015312241555), value = 33.9802992014211, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.3422324728045, -4.24141724941762, 
    48.878066479574, -2.24510001878286, -4.24141724941762, 5.72566136192165, 
    -6.25767375694863, -1.67962809349831, 48.878066479574, -6.25767375694863, 
    906.495811250352, -57.1782802074594, -2.24510001878286, -1.67962809349831, 
    -57.1782802074594, 59.4231292332381), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0473493351666307, -0.366423224588785
    ), logphi = c(0.508231140946017, -1.50015312241555)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_150 = structure(list(
    par = c(-0.425143752677708, -0.0935322187126179, 0.483626843530393, 
    -1.4877877337932), value = 25.3431967989777, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.1631756607604, -0.64375931785321, 
    59.1311206079581, -4.93499532749908, -0.64375931785321, 9.51443782692962, 
    -6.18782944616925, -3.33199895763414, 59.1311206079581, -6.18782944616925, 
    888.887096190949, -66.7750016316582, -4.93499532749908, -3.33199895763414, 
    -66.7750016316582, 58.7791409438765), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.425143752677708, -0.0935322187126179
    ), logphi = c(0.483626843530393, -1.4877877337932)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_151 = structure(list(
    par = c(-0.427088346134848, 0.119820720937139, 0.494005641373743, 
    -1.50164992405992), value = 21.3229099811258, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.8527288523355, 1.19265536913105, 
    61.9005057966859, -5.30477459514955, 1.19265536913105, 15.2884751898341, 
    -5.53893204102707, -4.15786240459681, 61.9005057966859, -5.53893204102707, 
    927.766245886197, -80.4623741688104, -5.30477459514955, -4.15786240459681, 
    -80.4623741688104, 62.7157015671287), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.427088346134848, 0.119820720937139
    ), logphi = c(0.494005641373743, -1.50164992405992)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_152 = structure(list(
    par = c(-0.261540116728828, -0.906144750463655, 0.484526048557833, 
    -1.56226652752838), value = 36.3923814847214, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.6532678748725, -2.49131780449829, 
    58.066957990377, -4.65236019664417, -2.49131780449829, 2.4043780832983, 
    -5.93194550901899, -1.29886187227868, 58.066957990377, -5.93194550901899, 
    1153.2481951555, -65.3648703652365, -4.65236019664417, -1.29886187227868, 
    -65.3648703652365, 71.3493296249368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261540116728828, -0.906144750463655
    ), logphi = c(0.484526048557833, -1.56226652752838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_153 = structure(list(
    par = c(0.112111894307498, -0.0209605703536177, 0.456281325836803, 
    -1.55907184314332), value = 25.6398382303882, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.4922408612972, -3.50370587387516, 
    44.5639404942355, 1.16461887156305, -3.50370587387516, 9.89251334537755, 
    -2.96551650702526, -2.09878183987655, 44.5639404942355, -2.96551650702526, 
    954.25369703861, -24.9508516150243, 1.16461887156305, -2.09878183987655, 
    -24.9508516150243, 55.7647836947339), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.112111894307498, -0.0209605703536177
    ), logphi = c(0.456281325836803, -1.55907184314332)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_154 = structure(list(
    par = c(-0.41791855567805, 0.0623813958231559, 0.578792866340976, 
    -1.42870468600093), value = 32.142807769848, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.0142162972745, -2.13375115798442, 
    59.2010300071166, -10.890778406214, -2.13375115798442, 12.0862450785353, 
    -12.8621089601211, -2.51344170099088, 59.2010300071166, -12.8621089601211, 
    801.506913093775, -131.035624654885, -10.890778406214, -2.51344170099088, 
    -131.035624654885, 72.1915562831299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.41791855567805, 0.0623813958231559
    ), logphi = c(0.578792866340976, -1.42870468600093)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_155 = structure(list(
    par = c(-0.454630780924608, 0.00281633618776007, 0.521382680987794, 
    -1.5985374055441), value = 18.7834873621069, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.2880357587415, -1.06596953219906, 
    74.5921275884243, -8.82160207149596, -1.06596953219906, 14.0856820936008, 
    -11.4549761578431, -4.02820547407146, 74.5921275884243, -11.4549761578431, 
    1346.25760813734, -134.051790210865, -8.82160207149596, -4.02820547407146, 
    -134.051790210865, 90.0245981831915), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.454630780924608, 0.00281633618776007
    ), logphi = c(0.521382680987794, -1.5985374055441)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_156 = structure(list(
    par = c(-0.22046825637949, 0.31741286778346, 0.476705578689821, 
    -1.6119526110839), value = 12.4288877571696, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.1420791970733, 0.559920412701587, 
    52.2116098875536, -1.43644502026419, 0.559920412701587, 14.2308070554265, 
    -0.564894855337172, -3.50956224837162, 52.2116098875536, 
    -0.564894855337172, 999.226408551213, -62.7130477082183, 
    -1.43644502026419, -3.50956224837162, -62.7130477082183, 
    58.9885792696698), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.22046825637949, 0.31741286778346
    ), logphi = c(0.476705578689821, -1.6119526110839)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_157 = structure(list(
    par = c(-0.355612970566843, 0.21425131739933, 0.529549111311641, 
    -1.44515345996598), value = 30.2312928378071, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.8837240534982, 0.636550794297364, 
    72.4894336041615, -8.08587158962482, 0.636550794297364, 20.5050518360395, 
    -9.23887833881309, -4.82758708342246, 72.4894336041615, -9.23887833881309, 
    989.979032335775, -115.783083389775, -8.08587158962482, -4.82758708342246, 
    -115.783083389775, 75.5864343080503), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355612970566843, 0.21425131739933
    ), logphi = c(0.529549111311641, -1.44515345996598)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_158 = structure(list(
    par = c(0.0352878237694188, 0.424004565795801, 0.50204334780937, 
    -1.60551320275435), value = 18.5781320811971, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.2390484733032, -0.849833551974655, 
    61.9517175506346, -0.554356486048846, -0.849833551974655, 
    23.2646070275067, -2.71103549565055, -3.9428112916795, 61.9517175506346, 
    -2.71103549565055, 1277.90609299705, -84.1914476872319, -0.554356486048846, 
    -3.9428112916795, -84.1914476872319, 77.5914333281946), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0352878237694188, 0.424004565795801
    ), logphi = c(0.50204334780937, -1.60551320275435)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_159 = structure(list(
    par = c(-0.445102810770273, -0.600491975533108, 0.482155590866946, 
    -1.6790805889491), value = 21.5646016110877, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.8462248024117, -2.02686600125901, 
    50.4457605146058, -4.93488762209893, -2.02686600125901, 2.70451587258691, 
    -6.32345598727824, -1.5078410688929, 50.4457605146058, -6.32345598727824, 
    1144.22758539146, -75.5046289944161, -4.93488762209893, -1.5078410688929, 
    -75.5046289944161, 65.4316794195253), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.445102810770273, -0.600491975533108
    ), logphi = c(0.482155590866946, -1.6790805889491)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_160 = structure(list(
    par = c(-0.742950347030812, 0.0856161136506279, 0.537262091772933, 
    -1.65156544376645), value = 15.6739474956654, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.3024474007284, -0.439023017051454, 
    84.5445249879617, -13.90150892977, -0.439023017051454, 15.882017594393, 
    -18.0647247312038, -4.84142360512863, 84.5445249879617, -18.0647247312038, 
    1621.56042936168, -197.428924259668, -13.90150892977, -4.84142360512863, 
    -197.428924259668, 112.048034742074), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.742950347030812, 0.0856161136506279
    ), logphi = c(0.537262091772933, -1.65156544376645)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_161 = structure(list(
    par = c(-0.284069662583471, -0.361900487084774, 0.501555203104782, 
    -1.557460898555), value = 36.1959924240789, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.6184188217313, -2.76019341605149, 
    62.0193089471144, -5.4841540881867, -2.76019341605149, 6.39826179771319, 
    -8.24494967410772, -2.33999692600406, 62.0193089471144, -8.24494967410772, 
    1138.67867419337, -84.8959693016127, -5.4841540881867, -2.33999692600406, 
    -84.8959693016127, 73.3624234605657), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284069662583471, -0.361900487084774
    ), logphi = c(0.501555203104782, -1.557460898555)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_162 = structure(list(
    par = c(-0.1624555850675, 0.161079030532611, 0.486636144206066, 
    -1.48258151327626), value = 21.4073607407594, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.544998295414, -0.224230560341709, 
    55.1485175321886, -2.00659526283786, -0.224230560341709, 
    16.0528805723814, -4.40848926341886, -3.42630297289759, 55.1485175321886, 
    -4.40848926341886, 871.263130798994, -57.4261078827298, -2.00659526283786, 
    -3.42630297289759, -57.4261078827298, 56.8633163888776), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.1624555850675, 0.161079030532611
    ), logphi = c(0.486636144206066, -1.48258151327626)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_163 = structure(list(
    par = c(-0.122506377034843, 0.41178085056922, 0.550851079933495, 
    -1.48893962790368), value = 21.0208230769155, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.5272826859901, -1.12696565857107, 
    61.0985113285167, -5.38294167462539, -1.12696565857107, 20.994116553652, 
    -7.7535293758757, -4.12740161115366, 61.0985113285167, -7.7535293758757, 
    932.144717619821, -111.418452861667, -5.38294167462539, -4.12740161115366, 
    -111.418452861667, 70.6445281570822), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122506377034843, 0.41178085056922
    ), logphi = c(0.550851079933495, -1.48893962790368)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_164 = structure(list(
    par = c(-0.485421467025079, 0.337518931369541, 0.512419123824204, 
    -1.65563756688269), value = 12.5683270662677, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.6814003395102, 1.35464225614612, 
    68.8608682830605, -6.60713016564785, 1.35464225614612, 17.4339622667219, 
    -4.51591168992849, -5.31746719323323, 68.8608682830605, -4.51591168992849, 
    1277.35425671283, -123.220478450481, -6.60713016564785, -5.31746719323323, 
    -123.220478450481, 80.3410518015468), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.485421467025079, 0.337518931369541
    ), logphi = c(0.512419123824204, -1.65563756688269)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_165 = structure(list(
    par = c(-0.209013278273472, 0.0144621387383736, 0.495896636495553, 
    -1.82779538971366), value = 8.82578461909133, counts = structure(c(293L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0512290529662, -3.03816698288273, 
    68.109723343035, -3.71723882031105, -3.03816698288273, 10.2990468575648, 
    -6.1440646326183, -3.13118048866912, 68.109723343035, -6.1440646326183, 
    1897.35953929482, -108.310324581806, -3.71723882031105, -3.13118048866912, 
    -108.310324581806, 90.5245828177748), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209013278273472, 0.0144621387383736
    ), logphi = c(0.495896636495553, -1.82779538971366)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_166 = structure(list(
    par = c(-0.132076544412962, 0.267020043955171, 0.503283160697041, 
    -1.72257837248594), value = 18.0596735563562, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.4164100265418, -2.48112755851793, 
    62.6616840380123, -2.56412648091953, -2.48112755851793, 12.6276214515997, 
    -3.66194719525481, -3.69204339234486, 62.6616840380123, -3.66194719525481, 
    1457.00110067892, -95.8302536249178, -2.56412648091953, -3.69204339234486, 
    -95.8302536249178, 79.8790023743834), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132076544412962, 0.267020043955171
    ), logphi = c(0.503283160697041, -1.72257837248594)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_167 = structure(list(
    par = c(-0.412517631763145, -0.802122865240226, 0.532980823204412, 
    -1.84618753393468), value = 26.496702108353, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.3884436720754, -3.67506394560735, 
    75.892505529751, -8.55042039882292, -3.67506394560735, 2.82645784732694, 
    -14.7579225302508, -0.916976438336548, 75.892505529751, -14.7579225302508, 
    2631.21149437318, -177.964001198294, -8.55042039882292, -0.916976438336548, 
    -177.964001198294, 128.980783890675), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.412517631763145, -0.802122865240226
    ), logphi = c(0.532980823204412, -1.84618753393468)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_168 = structure(list(
    par = c(-0.552692309113584, 0.314340776354327, 0.509432290736774, 
    -1.59537245110705), value = 10.131524733727, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.866883582637, 2.9954252180886, 
    67.8086890850693, -7.23697494242614, 2.9954252180886, 20.3703478964812, 
    -4.6046507327091, -5.47069270151468, 67.8086890850693, -4.6046507327091, 
    1126.05238261043, -116.678665981418, -7.23697494242614, -5.47069270151468, 
    -116.678665981418, 75.4746243796234), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.552692309113584, 0.314340776354327
    ), logphi = c(0.509432290736774, -1.59537245110705)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_169 = structure(list(
    par = c(-0.261797263649383, -0.0153319219677689, 0.460075344968297, 
    -1.75536024218894), value = 11.505898469616, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.7694452212823, -1.54135938590372, 
    58.0561546832392, -2.21694291857588, -1.54135938590372, 8.52940179907336, 
    -2.1405275449915, -2.86244732139451, 58.0561546832392, -2.1405275449915, 
    1431.1182715292, -71.9264424491328, -2.21694291857588, -2.86244732139451, 
    -71.9264424491328, 71.7598325921109), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261797263649383, -0.0153319219677689
    ), logphi = c(0.460075344968297, -1.75536024218894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_170 = structure(list(
    par = c(-0.375542666145244, 0.347585784959779, 0.489439523818629, 
    -1.67990000785091), value = 6.47373692462233, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.5081143607258, 1.81869343940377, 
    69.8333052566724, -4.12028494567451, 1.81869343940377, 18.3981330135197, 
    -0.687953251699014, -5.10459735503233, 69.8333052566724, 
    -0.687953251699014, 1393.9057090413, -106.69017340259, -4.12028494567451, 
    -5.10459735503233, -106.69017340259, 80.5189939825368), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375542666145244, 0.347585784959779
    ), logphi = c(0.489439523818629, -1.67990000785091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_171 = structure(list(
    par = c(-0.3582112305231, 0.469310283115462, 0.457260612316229, 
    -1.54552401140476), value = 8.79222081022226, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.1112160520209, 9.24417205983019, 
    69.6395093644497, -1.07488595713079, 9.24417205983019, 34.2708184737361, 
    4.84016279411748, -5.48872640937503, 69.6395093644497, 4.84016279411748, 
    1148.61937673627, -68.9884675346697, -1.07488595713079, -5.48872640937503, 
    -68.9884675346697, 68.9819549863913), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3582112305231, 0.469310283115462
    ), logphi = c(0.457260612316229, -1.54552401140476)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_172 = structure(list(
    par = c(-0.664291024773093, 0.321070166940589, 0.561800318684986, 
    -1.62455212161375), value = 10.1460760038039, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.8327617216544, -0.112390754480884, 
    66.5429922470651, -11.1763520500574, -0.112390754480884, 
    15.2897417020625, -13.4094022223863, -4.67854158792136, 66.5429922470651, 
    -13.4094022223863, 1167.45813644759, -161.633402042227, -11.1763520500574, 
    -4.67854158792136, -161.633402042227, 87.0938938248855), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.664291024773093, 0.321070166940589
    ), logphi = c(0.561800318684986, -1.62455212161375)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_173 = structure(list(
    par = c(-0.192325367269627, -0.0418631154444962, 0.520025650505879, 
    -1.48694027674573), value = 27.4211598848608, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.5915286726279, -2.74232717423217, 
    59.0997077525302, -5.04272725709853, -2.74232717423217, 10.5942787751445, 
    -8.34363595814125, -2.90033485317309, 59.0997077525302, -8.34363595814125, 
    940.627773215574, -85.6318573552173, -5.04272725709853, -2.90033485317309, 
    -85.6318573552173, 65.7656390155026), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.192325367269627, -0.0418631154444962
    ), logphi = c(0.520025650505879, -1.48694027674573)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_174 = structure(list(
    par = c(-0.378466086828153, -0.0517057074620132, 0.483550756374197, 
    -1.61650115159192), value = 18.7208077010875, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.1113967669787, -1.05771886627082, 
    74.5487251396781, -5.58344219658835, -1.05771886627082, 12.4772831036069, 
    -6.98921405195563, -4.05832600147704, 74.5487251396781, -6.98921405195563, 
    1408.26715195352, -99.290223309012, -5.58344219658835, -4.05832600147704, 
    -99.290223309012, 85.0202600553018), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378466086828153, -0.0517057074620132
    ), logphi = c(0.483550756374197, -1.61650115159192)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_175 = structure(list(
    par = c(-0.515843685996945, 0.0739924145542088, 0.48570613291798, 
    -1.49036682293708), value = 26.9551786706129, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.9204039448119, 1.02173859062304, 
    67.6790015949891, -6.22329710742164, 1.02173859062304, 13.9999925892198, 
    -5.80803008976005, -4.61804365237128, 67.6790015949891, -5.80803008976005, 
    977.944404420228, -83.342597504199, -6.22329710742164, -4.61804365237128, 
    -83.342597504199, 65.877709376494), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.515843685996945, 0.0739924145542088
    ), logphi = c(0.48570613291798, -1.49036682293708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_176 = structure(list(
    par = c(-0.522015444446234, -0.330099558260369, 0.493167115709161, 
    -1.6139491372825), value = 18.5891807976122, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(17.4420091596517, -1.42921915635696, 
    55.2973574601268, -6.24315305408629, -1.42921915635696, 5.5423529978782, 
    -7.75352367465842, -2.2929398770799, 55.2973574601268, -7.75352367465842, 
    1062.67951250771, -86.4083154148432, -6.24315305408629, -2.2929398770799, 
    -86.4083154148432, 66.4330508985955), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.522015444446234, -0.330099558260369
    ), logphi = c(0.493167115709161, -1.6139491372825)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_177 = structure(list(
    par = c(-0.151302592339528, 0.209788133143452, 0.521853502778858, 
    -1.70410548350005), value = 14.134227610269, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.3405102353408, -3.07365295082462, 
    70.9444829087857, -4.38707643279912, -3.07365295082462, 14.9339799189185, 
    -7.66112019068288, -4.01256513438142, 70.9444829087857, -7.66112019068288, 
    1584.90150169621, -119.504288092376, -4.38707643279912, -4.01256513438142, 
    -119.504288092376, 91.1698215153578), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.151302592339528, 0.209788133143452
    ), logphi = c(0.521853502778858, -1.70410548350005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_178 = structure(list(
    par = c(0.202604659812237, 0.448181884629803, 0.495002929843162, 
    -1.58224084695868), value = 26.5178858486945, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.6643553716773, -3.52915391488295, 
    61.9044567846672, 1.47273403605652, -3.52915391488295, 25.3952564257531, 
    -3.03475258256469, -3.70153223805403, 61.9044567846672, -3.03475258256469, 
    1365.0707329953, -73.9270749177123, 1.47273403605652, -3.70153223805403, 
    -73.9270749177123, 82.3744321296616), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.202604659812237, 0.448181884629803
    ), logphi = c(0.495002929843162, -1.58224084695868)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_179 = structure(list(
    par = c(-0.0304686133399731, -0.216837118922006, 0.482001144924613, 
    -1.76041969416931), value = 22.247302939987, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.2762359799495, -4.56861098374617, 
    62.6319042869028, -1.9078761575031, -4.56861098374617, 6.45984537506195, 
    -5.4078691045234, -2.32376766273745, 62.6319042869028, -5.4078691045234, 
    1732.82630032645, -78.5739897022353, -1.9078761575031, -2.32376766273745, 
    -78.5739897022353, 87.8480497013001), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0304686133399731, -0.216837118922006
    ), logphi = c(0.482001144924613, -1.76041969416931)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_180 = structure(list(
    par = c(-0.513418277196364, -0.247999803362165, 0.519961813084228, 
    -1.6260406512272), value = 25.9358623757873, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.0483997002389, -2.30250415977906, 
    65.9498462853847, -8.66151375644719, -2.30250415977906, 7.00622299909526, 
    -11.7714637042354, -2.6163573725313, 65.9498462853847, -11.7714637042354, 
    1305.46965365941, -125.724758506252, -8.66151375644719, -2.6163573725313, 
    -125.724758506252, 85.1001203141522), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.513418277196364, -0.247999803362165
    ), logphi = c(0.519961813084228, -1.6260406512272)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_181 = structure(list(
    par = c(-0.312523106536556, -0.542159892043152, 0.540557739589269, 
    -1.56891919264601), value = 30.3826299576508, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.3641778034603, -3.36750018270493, 
    59.6853451950707, -7.78499309639358, -3.36750018270493, 4.06741341407724, 
    -10.3689876622681, -1.40803104331511, 59.6853451950707, -10.3689876622681, 
    1169.7887028852, -115.634954157784, -7.78499309639358, -1.40803104331511, 
    -115.634954157784, 80.4391931854553), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312523106536556, -0.542159892043152
    ), logphi = c(0.540557739589269, -1.56891919264601)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_182 = structure(list(
    par = c(-0.564690781314338, 0.163445575198565, 0.50543956102088, 
    -1.52745071373519), value = 12.730819163256, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.8662719301553, 1.31648460577338, 
    56.5199693207674, -6.50366426580007, 1.31648460577338, 13.2443356237744, 
    -5.67224619985041, -4.09460888617375, 56.5199693207674, -5.67224619985041, 
    853.668857063283, -88.5271684376576, -6.50366426580007, -4.09460888617375, 
    -88.5271684376576, 59.6845652003353), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.564690781314338, 0.163445575198565
    ), logphi = c(0.50543956102088, -1.52745071373519)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_183 = structure(list(
    par = c(-0.71058862631173, -0.338194502668641, 0.556637935989918, 
    -1.47596168658), value = 16.65791966721, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(10.8041760693567, -1.12343800307002, 
    36.34669764363, -7.58723498162084, -1.12343800307002, 3.71076147231975, 
    -8.49034719063724, -0.936150483354936, 36.34669764363, -8.49034719063724, 
    565.763614987169, -84.6533730358701, -7.58723498162084, -0.936150483354936, 
    -84.6533730358701, 47.7320077960641), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.71058862631173, -0.338194502668641
    ), logphi = c(0.556637935989918, -1.47596168658)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_184 = structure(list(
    par = c(-0.347425538379306, -0.162690985870807, 0.473177584977904, 
    -1.81103424620563), value = 16.5754065771066, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.9617106523891, -3.17291400264708, 
    85.4006566095578, -5.49443521435933, -3.17291400264708, 8.94322902134093, 
    -7.19024407658253, -3.66072480817436, 85.4006566095578, -7.19024407658253, 
    2291.21417021005, -129.477090875518, -5.49443521435933, -3.66072480817436, 
    -129.477090875518, 110.33566155394), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347425538379306, -0.162690985870807
    ), logphi = c(0.473177584977904, -1.81103424620563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_185 = structure(list(
    par = c(-0.497911201073013, 0.127572271887796, 0.478709570067925, 
    -1.69578516470033), value = 10.5898717696236, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.2040182326118, 0.600626739455379, 
    75.65868982784, -5.92994150494519, 0.600626739455379, 14.8756520026438, 
    -3.98275770230327, -4.92377040117731, 75.65868982784, -3.98275770230327, 
    1541.97155608582, -114.804807603619, -5.92994150494519, -4.92377040117731, 
    -114.804807603619, 87.0165030741887), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.497911201073013, 0.127572271887796
    ), logphi = c(0.478709570067925, -1.69578516470033)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_186 = structure(list(
    par = c(-0.274690546871633, 0.241851660111574, 0.478085177992242, 
    -1.92258466815202), value = 0.801781467024096, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.1363388700283, -1.88961454972159, 
    90.7148768880539, -3.53389535168169, -1.88961454972159, 16.4668207682794, 
    0.651554076469552, -4.80009924874736, 90.7148768880539, 0.651554076469552, 
    2795.34452428276, -143.932006859693, -3.53389535168169, -4.80009924874736, 
    -143.932006859693, 113.699586557381), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274690546871633, 0.241851660111574
    ), logphi = c(0.478085177992242, -1.92258466815202)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_187 = structure(list(
    par = c(-0.27739334598043, 0.184850947351944, 0.455118645390019, 
    -1.6517382423092), value = 19.830105573645, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.661057612657, 0.76023169981454, 
    73.0752681219471, -1.73360951993828, 0.76023169981454, 16.7450373318445, 
    0.0319728510334016, -4.46348921689932, 73.0752681219471, 
    0.0319728510334016, 1492.20437985509, -76.2164438512514, 
    -1.73360951993828, -4.46348921689932, -76.2164438512514, 
    82.1428650823464), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.27739334598043, 0.184850947351944
    ), logphi = c(0.455118645390019, -1.6517382423092)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_188 = structure(list(
    par = c(-0.113440203675116, 0.209995322138315, 0.502108575930172, 
    -1.62471401562857), value = 19.8832537046988, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.2865942331512, -2.3108160673857, 
    58.9411881231072, -2.47127383978807, -2.3108160673857, 12.7166223267139, 
    -4.66986397018587, -3.4778277751002, 58.9411881231072, -4.66986397018587, 
    1187.23300310464, -82.6327527168047, -2.47127383978807, -3.4778277751002, 
    -82.6327527168047, 71.8012564950854), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.113440203675116, 0.209995322138315
    ), logphi = c(0.502108575930172, -1.62471401562857)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_189 = structure(list(
    par = c(-0.698063463794351, 0.393670895682012, 0.515544053822176, 
    -1.64136666981032), value = 3.8221668176938, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(14.121834909453, 1.74824813559127, 
    42.5889574775518, -5.33759615062301, 1.74824813559127, 10.9462163684348, 
    -2.45655483865903, -3.86309312494504, 42.5889574775518, -2.45655483865903, 
    734.354935623127, -83.3597210161408, -5.33759615062301, -3.86309312494504, 
    -83.3597210161408, 49.0667507699882), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.698063463794351, 0.393670895682012
    ), logphi = c(0.515544053822176, -1.64136666981032)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_190 = structure(list(
    par = c(0.0339103430903174, -0.0919142012597023, 0.478565243689215, 
    -1.6541197658781), value = 30.5688901350917, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.8172599037587, -4.79969862521301, 
    67.7415947558657, -0.872801065199269, -4.79969862521301, 
    11.0033624505235, -5.52704563894224, -2.94265963063367, 67.7415947558657, 
    -5.52704563894224, 1602.91494374043, -70.7465343312563, -0.872801065199269, 
    -2.94265963063367, -70.7465343312563, 90.0328079120882), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0339103430903174, -0.0919142012597023
    ), logphi = c(0.478565243689215, -1.6541197658781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_191 = structure(list(
    par = c(-0.139432143737213, 0.301583206459845, 0.49224610549983, 
    -1.85302080840434), value = 5.81042008216722, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.5252174143658, -2.49122066264817, 
    75.0290725712865, -2.22091374624256, -2.49122066264817, 14.8879259067591, 
    -0.748988373100445, -4.10182477073029, 75.0290725712865, 
    -0.748988373100445, 2147.50775796135, -115.50225226431, -2.22091374624256, 
    -4.10182477073029, -115.50225226431, 97.5935266014361), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.139432143737213, 0.301583206459845
    ), logphi = c(0.49224610549983, -1.85302080840434)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_192 = structure(list(
    par = c(-0.396119418345139, 0.372826346572828, 0.467442819578758, 
    -1.5823563863634), value = 9.52051372848076, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.0035326548346, 3.54942939395642, 
    52.5779472573262, -2.06590313678312, 3.54942939395642, 17.2385393004681, 
    1.4745339727007, -4.0682287298921, 52.5779472573262, 1.4745339727007, 
    900.37925088815, -61.3412904730826, -2.06590313678312, -4.0682287298921, 
    -61.3412904730826, 54.2021533203041), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396119418345139, 0.372826346572828
    ), logphi = c(0.467442819578758, -1.5823563863634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_193 = structure(list(
    par = c(-0.471638926393121, -0.333038112663884, 0.470879757244172, 
    -1.41325739742894), value = 28.8770260537867, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.2285258337537, -0.333193182378011, 
    51.1139133383409, -4.24899865247852, -0.333193182378011, 
    7.15545652418825, -5.59865966298645, -2.45652587649303, 51.1139133383409, 
    -5.59865966298645, 683.992015183321, -42.9294386137258, -4.24899865247852, 
    -2.45652587649303, -42.9294386137258, 45.4348821765649), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.471638926393121, -0.333038112663884
    ), logphi = c(0.470879757244172, -1.41325739742894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_194 = structure(list(
    par = c(-0.400691695332688, 0.268765413917917, 0.506080294492621, 
    -1.68432354157552), value = 10.2919768797506, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.4876163069446, -0.144371366417317, 
    82.135914517778, -6.67359126316214, -0.144371366417317, 17.7993382646235, 
    -5.74042854228907, -5.67373706017449, 82.135914517778, -5.74042854228907, 
    1647.14106142316, -139.526748274221, -6.67359126316214, -5.67373706017449, 
    -139.526748274221, 97.8511736517973), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400691695332688, 0.268765413917917
    ), logphi = c(0.506080294492621, -1.68432354157552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_195 = structure(list(
    par = c(-0.116531224892351, -0.677252153747043, 0.462652865447115, 
    -1.62365297841004), value = 31.3841821064516, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.3026315840141, -3.19504332946252, 
    60.1820058196978, -2.24231478362924, -3.19504332946252, 3.74884502907236, 
    -5.12363482396694, -1.70040473790323, 60.1820058196978, -5.12363482396694, 
    1350.67892647101, -50.591987361237, -2.24231478362924, -1.70040473790323, 
    -50.591987361237, 76.6936774168059), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.116531224892351, -0.677252153747043
    ), logphi = c(0.462652865447115, -1.62365297841004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_196 = structure(list(
    par = c(-0.596323642935571, 0.389055376856092, 0.522797435576203, 
    -1.66233210009927), value = 5.90786563395882, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.8993100472368, 3.38180966164003, 
    88.2641837840481, -10.3220033929041, 3.38180966164003, 25.7613931333722, 
    -6.69709872269664, -7.4117977932886, 88.2641837840481, -6.69709872269664, 
    1607.04096430475, -174.789987603674, -10.3220033929041, -7.4117977932886, 
    -174.789987603674, 104.503284938495), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.596323642935571, 0.389055376856092
    ), logphi = c(0.522797435576203, -1.66233210009927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_197 = structure(list(
    par = c(-0.935764061429506, -0.715579031349871, 0.494046344559826, 
    -1.78733005972708), value = 16.6497167867618, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(9.82772042767976, -1.93548600080362, 
    62.766644530754, -10.1752236059127, -1.93548600080362, 2.67773977746799, 
    -14.3901038782701, -1.02679042335296, 62.766644530754, -14.3901038782701, 
    1844.5912046392, -167.885614422936, -10.1752236059127, -1.02679042335296, 
    -167.885614422936, 102.627590084836), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.935764061429506, -0.715579031349871
    ), logphi = c(0.494046344559826, -1.78733005972708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_198 = structure(list(
    par = c(-0.522021892185572, -0.0755379770377286, 0.490264463861077, 
    -1.57415479479152), value = 18.9638783693906, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.1290222333984, 0.0105674526906796, 
    79.1319060144957, -8.15392858655173, 0.0105674526906796, 
    13.8846172053064, -9.03318240919049, -4.48586096846171, 79.1319060144957, 
    -9.03318240919049, 1352.47349747569, -114.000372846146, -8.15392858655173, 
    -4.48586096846171, -114.000372846146, 87.0193076165648), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.522021892185572, -0.0755379770377286
    ), logphi = c(0.490264463861077, -1.57415479479152)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_199 = structure(list(
    par = c(-0.579469829213765, -0.186448285738995, 0.508221786222058, 
    -1.85732569916262), value = 15.2591236158025, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(15.3352431988552, -3.35095609749203, 
    77.3283743829012, -8.65582663545084, -3.35095609749203, 6.75861613519402, 
    -15.1577013038917, -2.84882462242564, 77.3283743829012, -15.1577013038917, 
    2269.19100528988, -169.548756967064, -8.65582663545084, -2.84882462242564, 
    -169.548756967064, 109.860959525143), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.579469829213765, -0.186448285738995
    ), logphi = c(0.508221786222058, -1.85732569916262)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_60_200 = structure(list(
    par = c(-0.195242285007553, 0.296260024933768, 0.472946322574319, 
    -1.76245974906524), value = 4.71867861860441, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.0973705228126, -0.152831590938263, 
    66.1159230266328, -1.53737270025545, -0.152831590938263, 
    15.6738089440722, 1.03390301831041, -3.90492905921747, 66.1159230266328, 
    1.03390301831041, 1636.61639293977, -90.0172285767109, -1.53737270025545, 
    -3.90492905921747, -90.0172285767109, 82.4149109850403), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195242285007553, 0.296260024933768
    ), logphi = c(0.472946322574319, -1.76245974906524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_1 = structure(list(
    par = c(-0.160375367490702, 0.235821501307808, 0.514634915358194, 
    -1.6319248433144), value = 27.2766550640086, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.4053649591704, -3.63343458431586, 
    98.5004586775418, -5.77326307826809, -3.63343458431586, 21.5227576756405, 
    -9.27973946396321, -5.98426378939365, 98.5004586775418, -9.27973946396321, 
    1951.98940572716, -154.415012294074, -5.77326307826809, -5.98426378939365, 
    -154.415012294074, 120.40993428819), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.160375367490702, 0.235821501307808
    ), logphi = c(0.514634915358194, -1.6319248433144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_2 = structure(list(
    par = c(-0.223925692561448, 0.0680863342889872, 0.510395579176492, 
    -1.49231811250805), value = 42.525899610489, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.773648985976, -2.89755112348189, 
    93.5764229623715, -7.06438616937533, -2.89755112348189, 19.7474717111845, 
    -11.2594125027954, -5.31830679673106, 93.5764229623715, -11.2594125027954, 
    1469.96580852665, -127.515530548905, -7.06438616937533, -5.31830679673106, 
    -127.515530548905, 100.989002550733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223925692561448, 0.0680863342889872
    ), logphi = c(0.510395579176492, -1.49231811250805)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_3 = structure(list(
    par = c(-0.293201095618123, 0.302173087149595, 0.521859231317099, 
    -1.63978047364813), value = 23.8962670308944, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.6472353761985, -0.666098643797852, 
    110.43169381697, -8.87003011174059, -0.666098643797852, 28.6022381210671, 
    -10.2952070797357, -7.47368698483797, 110.43169381697, -10.2952070797357, 
    2102.20095796476, -191.472239080781, -8.87003011174059, -7.47368698483797, 
    -191.472239080781, 132.792000250959), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293201095618123, 0.302173087149595
    ), logphi = c(0.521859231317099, -1.63978047364813)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_4 = structure(list(
    par = c(-0.115701903540712, -0.232581379582861, 0.508139128560596, 
    -1.60945964039484), value = 46.3595389930602, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.2735714648798, -6.06262522317991, 
    88.1018734215644, -5.70913737796275, -6.06262522317991, 9.65489718041113, 
    -11.4727191480313, -3.4727818638558, 88.1018734215644, -11.4727191480313, 
    1823.62320646234, -124.028154829148, -5.70913737796275, -3.4727818638558, 
    -124.028154829148, 112.266890731405), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.115701903540712, -0.232581379582861
    ), logphi = c(0.508139128560596, -1.60945964039484)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_5 = structure(list(
    par = c(-0.343664937206255, -0.490465138569443, 0.472568533244547, 
    -1.75256542270239), value = 27.8038973595004, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(25.9590667468501, -3.61594015796385, 
    84.9511602822872, -6.25836533085788, -3.61594015796385, 5.53600916397556, 
    -8.98000123061848, -2.73324309363332, 84.9511602822872, -8.98000123061848, 
    2179.55489310295, -120.635195314911, -6.25836533085788, -2.73324309363332, 
    -120.635195314911, 112.666309792786), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343664937206255, -0.490465138569443
    ), logphi = c(0.472568533244547, -1.75256542270239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_6 = structure(list(
    par = c(-0.483582398995744, -0.138585114728072, 0.496939967943516, 
    -1.66647472653041), value = 29.2303642265772, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.9990462767095, -2.84027134789255, 
    103.446894271997, -10.6675940783063, -2.84027134789255, 12.739517631033, 
    -13.7096264172243, -5.03942028107218, 103.446894271997, -13.7096264172243, 
    2123.10294185691, -171.365071431673, -10.6675940783063, -5.03942028107218, 
    -171.365071431673, 127.149407431304), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.483582398995744, -0.138585114728072
    ), logphi = c(0.496939967943516, -1.66647472653041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_7 = structure(list(
    par = c(-0.307353407650519, 0.0825159235367576, 0.527901741499157, 
    -1.65391455913933), value = 33.6562793697948, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.4377695559788, -5.03749793345776, 
    117.623669911637, -11.3610519418827, -5.03749793345776, 18.7983074582121, 
    -17.3904310969419, -6.3002012122837, 117.623669911637, -17.3904310969419, 
    2369.86227105795, -213.752105032938, -11.3610519418827, -6.3002012122837, 
    -213.752105032938, 148.470448854354), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.307353407650519, 0.0825159235367576
    ), logphi = c(0.527901741499157, -1.65391455913933)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_8 = structure(list(
    par = c(-0.419041922551766, 0.116935032860893, 0.526631656815353, 
    -1.54411673614753), value = 39.2624087199159, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.9060604185355, -1.75218148257272, 
    97.2032373649512, -11.3541006090401, -1.75218148257272, 18.9581462226585, 
    -13.7911557231973, -5.91480969625024, 97.2032373649512, -13.7911557231973, 
    1575.34055910169, -169.720511317806, -11.3541006090401, -5.91480969625024, 
    -169.720511317806, 111.576887249498), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419041922551766, 0.116935032860893
    ), logphi = c(0.526631656815353, -1.54411673614753)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_9 = structure(list(
    par = c(-0.41814564895592, 0.350218833766726, 0.528760238431192, 
    -1.78151619421453), value = 5.81244058145726, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.6616607348431, -1.13049821326427, 
    106.339037852621, -9.74641944306853, -1.13049821326427, 23.5857385382232, 
    -10.785993790563, -7.26934307326843, 106.339037852621, -10.785993790563, 
    2452.6468132553, -211.702008606096, -9.74641944306853, -7.26934307326843, 
    -211.702008606096, 133.323038530087), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.41814564895592, 0.350218833766726
    ), logphi = c(0.528760238431192, -1.78151619421453)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_10 = structure(list(
    par = c(-0.297508571322503, -0.264518412647121, 0.496937433713302, 
    -1.65049210402124), value = 35.3914465882217, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.8163201669108, -4.5556303280847, 
    89.8344601036882, -7.44999126744972, -4.5556303280847, 8.38348208631601, 
    -11.3638916126035, -3.64848406597673, 89.8344601036882, -11.3638916126035, 
    1899.88697581001, -132.121962382215, -7.44999126744972, -3.64848406597673, 
    -132.121962382215, 112.82718069161), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297508571322503, -0.264518412647121
    ), logphi = c(0.496937433713302, -1.65049210402124)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_11 = structure(list(
    par = c(-0.322498529305437, -0.0768607742121656, 0.523935554263872, 
    -1.65707725559835), value = 30.115582719536, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.160320746513, -4.1152024961022, 
    89.4150334911359, -9.01629917660074, -4.1152024961022, 11.8157708657307, 
    -14.2313545303807, -4.0745444263024, 89.4150334911359, -14.2313545303807, 
    1860.38596664151, -160.868056166663, -9.01629917660074, -4.0745444263024, 
    -160.868056166663, 115.276154144972), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.322498529305437, -0.0768607742121656
    ), logphi = c(0.523935554263872, -1.65707725559835)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_12 = structure(list(
    par = c(-0.313934876118282, -0.258756117168748, 0.463209227688254, 
    -1.82512014832364), value = 26.9262385892118, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.5107887107262, -4.99770352568873, 
    119.907068381053, -6.77986084740567, -4.99770352568873, 10.6936740751351, 
    -9.02097082811082, -4.61935568729643, 119.907068381053, -9.02097082811082, 
    3366.98978527483, -170.053033235806, -6.77986084740567, -4.61935568729643, 
    -170.053033235806, 156.655407303141), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313934876118282, -0.258756117168748
    ), logphi = c(0.463209227688254, -1.82512014832364)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_13 = structure(list(
    par = c(-0.22239212384587, 0.0778951391262079, 0.482139392938149, 
    -1.57812927143172), value = 29.3922131664093, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.7609555028473, -1.04160631941852, 
    90.0452678616048, -4.08983524291529, -1.04160631941852, 20.1976546660987, 
    -6.6756152090619, -5.21497837357998, 90.0452678616048, -6.6756152090619, 
    1649.66399051991, -104.397648224452, -4.08983524291529, -5.21497837357998, 
    -104.397648224452, 100.9207238587), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.22239212384587, 0.0778951391262079
    ), logphi = c(0.482139392938149, -1.57812927143172)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_14 = structure(list(
    par = c(-0.54149590096333, -0.397740583539967, 0.59537300555872, 
    -1.4488899753344), value = 43.0558428975003, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(19.1165152791939, -3.20107374918166, 
    62.5296168887957, -14.28704415396, -3.20107374918166, 6.00501615899418, 
    -15.7908892308711, -0.572662855802264, 62.5296168887957, 
    -15.7908892308711, 974.230001359544, -170.441585071401, -14.28704415396, 
    -0.572662855802264, -170.441585071401, 90.9031528291138), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.54149590096333, -0.397740583539967
    ), logphi = c(0.59537300555872, -1.4488899753344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_15 = structure(list(
    par = c(-0.187067332692212, 0.0173496022555099, 0.45031372215689, 
    -1.72809342449745), value = 21.6033117716294, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.0181969700859, -2.74855858695133, 
    96.1460315593854, -1.74908295091925, -2.74855858695133, 15.3544917598225, 
    -1.70246684039199, -4.71350012531957, 96.1460315593854, -1.70246684039199, 
    2345.41700366897, -100.118747722533, -1.74908295091925, -4.71350012531957, 
    -100.118747722533, 118.665630542303), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.187067332692212, 0.0173496022555099
    ), logphi = c(0.45031372215689, -1.72809342449745)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_16 = structure(list(
    par = c(-0.0280461745169456, 0.188724119435522, 0.528489546207216, 
    -1.55575254478048), value = 44.5077754641268, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0136565967656, -5.97088854803474, 
    100.008700119503, -5.7481529598391, -5.97088854803474, 24.4674493128372, 
    -12.9060706210993, -5.52001857911932, 100.008700119503, -12.9060706210993, 
    1831.21794230345, -157.284004982827, -5.7481529598391, -5.52001857911932, 
    -157.284004982827, 121.907290385082), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0280461745169456, 0.188724119435522
    ), logphi = c(0.528489546207216, -1.55575254478048)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_17 = structure(list(
    par = c(-0.346685048468093, 0.111738727878169, 0.516534609522575, 
    -1.44304244821053), value = 37.0791645576827, counts = structure(c(313L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.0856625648346, -0.834474477073854, 
    86.0704120277944, -8.62373333543331, -0.834474477073854, 
    19.7704898319273, -10.7291627280404, -5.34820700437422, 86.0704120277944, 
    -10.7291627280404, 1190.96203594893, -122.960343496459, -8.62373333543331, 
    -5.34820700437422, -122.960343496459, 87.2506379643312), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346685048468093, 0.111738727878169
    ), logphi = c(0.516534609522575, -1.44304244821053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_18 = structure(list(
    par = c(-0.480489409297836, 0.089710801746229, 0.504773490967983, 
    -1.54875199193935), value = 26.2112882313478, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.275463556277, -3.04147818042111e-05, 
    86.2060416428889, -9.0519572557568, -3.04147818042111e-05, 
    17.0132856132099, -9.62192970543896, -5.55526427836739, 86.2060416428889, 
    -9.62192970543896, 1390.4781264662, -132.660549607699, -9.0519572557568, 
    -5.55526427836739, -132.660549607699, 94.0753956717444), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.480489409297836, 0.089710801746229
    ), logphi = c(0.504773490967983, -1.54875199193935)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_19 = structure(list(
    par = c(-0.126273510359714, 0.278027018201456, 0.536330448485639, 
    -1.5795460349712), value = 28.3967301380808, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.4833551622398, -2.56250520003221, 
    86.1494692161457, -6.40127429329951, -2.56250520003221, 24.1491518409021, 
    -10.8696894915994, -5.25085507030454, 86.1494692161457, -10.8696894915994, 
    1559.64586832003, -149.388266180495, -6.40127429329951, -5.25085507030454, 
    -149.388266180495, 104.835853292684), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126273510359714, 0.278027018201456
    ), logphi = c(0.536330448485639, -1.5795460349712)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_20 = structure(list(
    par = c(-0.583133293267292, 0.28758283029159, 0.500220442437509, 
    -1.64779276091077), value = 11.9281966630926, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.9370975256421, 3.5394572979186, 
    108.285225387306, -11.0025617887644, 3.5394572979186, 27.2448823785965, 
    -6.13327384080264, -8.54505703884456, 108.285225387306, -6.13327384080264, 
    1956.19920077839, -186.974043283605, -11.0025617887644, -8.54505703884456, 
    -186.974043283605, 122.724748960579), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.583133293267292, 0.28758283029159
    ), logphi = c(0.500220442437509, -1.64779276091077)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_21 = structure(list(
    par = c(-0.247387422480001, 0.123024432781561, 0.508157361917262, 
    -1.45675887427252), value = 32.4199582010551, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.1818689891844, -0.382205683990833, 
    71.379788517234, -5.35252854305668, -0.382205683990833, 19.2998073629269, 
    -8.02754192363864, -4.3667612192877, 71.379788517234, -8.02754192363864, 
    1040.98162722721, -92.7721337600218, -5.35252854305668, -4.3667612192877, 
    -92.7721337600218, 73.0149265120161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247387422480001, 0.123024432781561
    ), logphi = c(0.508157361917262, -1.45675887427252)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_22 = structure(list(
    par = c(-0.1828379124274, 0.093886197209492, 0.484303756671706, 
    -1.70623948003727), value = 26.2244992643883, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.4270033517213, -4.13424746614766, 
    106.02644939528, -4.3750784870511, -4.13424746614766, 17.56429560551, 
    -6.57108071600021, -5.68133878831034, 106.02644939528, -6.57108071600021, 
    2428.99745529979, -143.189485882544, -4.3750784870511, -5.68133878831034, 
    -143.189485882544, 132.608630385889), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.1828379124274, 0.093886197209492
    ), logphi = c(0.484303756671706, -1.70623948003727)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_23 = structure(list(
    par = c(-0.132490701124375, 0.23557349791322, 0.492841042548897, 
    -1.55489567070856), value = 28.7863613275649, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.8337917646837, -1.41955261323545, 
    96.9129379937428, -3.39620684552955, -1.41955261323545, 26.7312260753272, 
    -6.59962695070959, -6.08643865085412, 96.9129379937428, -6.59962695070959, 
    1734.83310899325, -118.726282141601, -3.39620684552955, -6.08643865085412, 
    -118.726282141601, 109.404890577203), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132490701124375, 0.23557349791322
    ), logphi = c(0.492841042548897, -1.55489567070856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_24 = structure(list(
    par = c(-0.00400573612294275, 0.191440199496792, 0.505680852681248, 
    -1.50106846036617), value = 34.1489086825228, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.8100171294687, -3.16519558118955, 
    70.2581315668027, -2.23231154006243, -3.16519558118955, 20.0512192840563, 
    -7.30805631299347, -4.05980264783778, 70.2581315668027, -7.30805631299347, 
    1205.61231511829, -86.7148624337233, -2.23231154006243, -4.05980264783778, 
    -86.7148624337233, 79.7309281299619), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00400573612294275, 0.191440199496792
    ), logphi = c(0.505680852681248, -1.50106846036617)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_25 = structure(list(
    par = c(-0.47497540828071, -0.129249357780122, 0.501712114303094, 
    -1.61510948469674), value = 24.7096739883089, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.0336608346209, -1.69647605208212, 
    86.9324700456531, -9.35201694751697, -1.69647605208212, 12.3992273133311, 
    -11.8765240140206, -4.33361460494552, 86.9324700456531, -11.8765240140206, 
    1634.54395096529, -140.548285231024, -9.35201694751697, -4.33361460494552, 
    -140.548285231024, 103.513090674134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.47497540828071, -0.129249357780122
    ), logphi = c(0.501712114303094, -1.61510948469674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_26 = structure(list(
    par = c(-0.0493412400466549, -0.531493359620978, 0.452190632191924, 
    -1.62524988848651), value = 55.2067445689804, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.5470161412709, -6.22730148336359, 
    106.148474356971, -1.61580771518288, -6.22730148336359, 9.22058199037679, 
    -7.940100418935, -3.40197921211427, 106.148474356971, -7.940100418935, 
    2428.69735343021, -70.9407500547599, -1.61580771518288, -3.40197921211427, 
    -70.9407500547599, 135.373853716203), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0493412400466549, -0.531493359620978
    ), logphi = c(0.452190632191924, -1.62524988848651)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_27 = structure(list(
    par = c(-0.3511203182257, 0.302042951347047, 0.468962734589079, 
    -1.70535131426224), value = 15.6237196636188, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.4634005940853, 2.82016341479618, 
    115.76395449886, -4.66805332965947, 2.82016341479618, 28.3321499505718, 
    2.3414133147881, -7.83136929705108, 115.76395449886, 2.3414133147881, 
    2465.34444190516, -156.22981147434, -4.66805332965947, -7.83136929705108, 
    -156.22981147434, 133.138933957611), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3511203182257, 0.302042951347047
    ), logphi = c(0.468962734589079, -1.70535131426224)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_28 = structure(list(
    par = c(-0.162854136655767, -0.300119845625718, 0.576601650830341, 
    -1.42584929447267), value = 46.6103053704288, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.7741926636472, -5.51156430717015, 
    72.0830353078128, -11.0473358621022, -5.51156430717015, 8.67503626267307, 
    -14.1645060516282, -1.68995061855526, 72.0830353078128, -14.1645060516282, 
    1084.27427176672, -151.825033920971, -11.0473358621022, -1.68995061855526, 
    -151.825033920971, 90.3237713778537), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162854136655767, -0.300119845625718
    ), logphi = c(0.576601650830341, -1.42584929447267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_29 = structure(list(
    par = c(-0.116599548122526, 0.24938151353154, 0.5384162156627, 
    -1.60001301879807), value = 24.1970589411264, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.6678613842855, -3.04259410199847, 
    78.5892824834988, -6.14271769361352, -3.04259410199847, 19.7704345321625, 
    -10.2104755317356, -4.84723620264305, 78.5892824834988, -10.2104755317356, 
    1475.21746692814, -137.99904850309, -6.14271769361352, -4.84723620264305, 
    -137.99904850309, 97.5445397299879), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.116599548122526, 0.24938151353154
    ), logphi = c(0.5384162156627, -1.60001301879807)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_30 = structure(list(
    par = c(-0.677643620061203, 0.210333035761335, 0.483795396956299, 
    -1.64547258353757), value = 12.5007200030548, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.9358100310867, 4.76188693276924, 
    110.919713607771, -11.5314556978774, 4.76188693276924, 27.5243340137621, 
    -5.27817735473946, -8.70229717531146, 110.919713607771, -5.27817735473946, 
    1976.90166310416, -179.935622955263, -11.5314556978774, -8.70229717531146, 
    -179.935622955263, 121.384115093548), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.677643620061203, 0.210333035761335
    ), logphi = c(0.483795396956299, -1.64547258353757)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_31 = structure(list(
    par = c(-0.170424624111449, -0.30477488418095, 0.469238812461405, 
    -1.38140204017447), value = 53.0110870371196, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.2915034318031, -3.62506960627229, 
    77.277260384534, -2.57338490783354, -3.62506960627229, 11.3497382656647, 
    -8.13849013070467, -3.47895647934138, 77.277260384534, -8.13849013070467, 
    1067.19326013582, -45.380657683225, -2.57338490783354, -3.47895647934138, 
    -45.380657683225, 70.0456775053482), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170424624111449, -0.30477488418095
    ), logphi = c(0.469238812461405, -1.38140204017447)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_32 = structure(list(
    par = c(-0.204849670165869, 0.179508340299336, 0.511233747874222, 
    -1.64983891943488), value = 29.9367395098462, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.6624977482889, -3.29628142203831, 
    110.883004456497, -7.09783409513776, -3.29628142203831, 23.4062758277531, 
    -10.8653480506149, -6.52619682117717, 110.883004456497, -10.8653480506149, 
    2248.45734726298, -174.377227025069, -7.09783409513776, -6.52619682117717, 
    -174.377227025069, 136.077074414764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204849670165869, 0.179508340299336
    ), logphi = c(0.511233747874222, -1.64983891943488)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_33 = structure(list(
    par = c(-0.202004936840595, 0.215183217720805, 0.485589033880144, 
    -1.77675175325285), value = 12.6313267434732, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.1692467487134, -2.25446902835102, 
    107.627795868481, -4.14069344145673, -2.25446902835102, 22.0319732688878, 
    -3.29526727238516, -6.08132261481487, 107.627795868481, -3.29526727238516, 
    2703.57162690349, -158.310312365018, -4.14069344145673, -6.08132261481487, 
    -158.310312365018, 136.358016581184), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202004936840595, 0.215183217720805
    ), logphi = c(0.485589033880144, -1.77675175325285)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_34 = structure(list(
    par = c(-0.470059498984129, 0.0956220703106774, 0.500283828506745, 
    -1.43302568089562), value = 21.983536079488, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.8816157866285, 1.64151535209101, 
    66.0859902001931, -6.67276384458404, 1.64151535209101, 16.7622220583752, 
    -6.94538286083457, -4.45602781962151, 66.0859902001931, -6.94538286083457, 
    872.529354773555, -84.3106509691438, -6.67276384458404, -4.45602781962151, 
    -84.3106509691438, 62.5875519242314), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.470059498984129, 0.0956220703106774
    ), logphi = c(0.500283828506745, -1.43302568089562)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_35 = structure(list(
    par = c(-0.282530681730862, 0.0938104058966528, 0.458602640235937, 
    -1.68277754942371), value = 19.5342472150102, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.1265116263668, -0.331761341065828, 
    119.793153925407, -3.99018596031198, -0.331761341065828, 
    24.4820654309308, -2.58177025624917, -6.80752470927359, 119.793153925407, 
    -2.58177025624917, 2577.56354776895, -134.727278894076, -3.99018596031198, 
    -6.80752470927359, -134.727278894076, 139.021842123555), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282530681730862, 0.0938104058966528
    ), logphi = c(0.458602640235937, -1.68277754942371)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_36 = structure(list(
    par = c(-0.147108654803015, 0.0388457301465532, 0.443981569810044, 
    -1.641910531287), value = 30.6258995202768, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.6976892701254, -2.28643700239672, 
    85.8054695491717, -0.194039735390561, -2.28643700239672, 
    15.3932830144754, -1.66188869510364, -4.40549564739712, 85.8054695491717, 
    -1.66188869510364, 1856.50167290685, -66.1912768737949, -0.194039735390561, 
    -4.40549564739712, -66.1912768737949, 100.550525370835), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.147108654803015, 0.0388457301465532
    ), logphi = c(0.443981569810044, -1.641910531287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_37 = structure(list(
    par = c(-0.317614081500404, -0.261573794976356, 0.434958328160217, 
    -1.76129346486569), value = 18.9048846260817, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.1334105158848, -1.74832956556514, 
    73.55458360081, -2.69158691645899, -1.74832956556514, 8.07249732126536, 
    -2.61126836154091, -3.01762346177625, 73.55458360081, -2.61126836154091, 
    1853.17113993655, -75.1832114560536, -2.69158691645899, -3.01762346177625, 
    -75.1832114560536, 88.943356469251), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317614081500404, -0.261573794976356
    ), logphi = c(0.434958328160217, -1.76129346486569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_38 = structure(list(
    par = c(-0.338001594264271, 0.26407309192662, 0.443379831133133, 
    -1.46591005458088), value = 22.5559708815525, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.5140421647424, 5.20848300400445, 
    72.6892610503072, -0.520032230610923, 5.20848300400445, 24.6377224240035, 
    0.392371996227325, -5.21591892566065, 72.6892610503072, 0.392371996227325, 
    1063.42175140117, -43.717037881752, -0.520032230610923, -5.21591892566065, 
    -43.717037881752, 64.8954122315359), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338001594264271, 0.26407309192662
    ), logphi = c(0.443379831133133, -1.46591005458088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_39 = structure(list(
    par = c(-0.0992426165183768, 0.294168596168017, 0.473357727675638, 
    -1.56853979896483), value = 29.6506458643546, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.1605219094259, -0.0014355485689066, 
    83.0767106450025, -0.603376626884256, -0.0014355485689066, 
    25.5106015147888, -2.26388722435189, -5.25080713309478, 83.0767106450025, 
    -2.26388722435189, 1567.53789320874, -84.4709661080856, -0.603376626884256, 
    -5.25080713309478, -84.4709661080856, 94.1071330116117), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0992426165183768, 0.294168596168017
    ), logphi = c(0.473357727675638, -1.56853979896483)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_40 = structure(list(
    par = c(-0.402288928539698, 0.215057194787688, 0.551277155551014, 
    -1.58624287371075), value = 28.4332374380473, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.9017131822363, -2.33219541279084, 
    91.335229349454, -11.9323969993701, -2.33219541279084, 19.1360983219369, 
    -15.7946184877744, -5.52924284846767, 91.335229349454, -15.7946184877744, 
    1576.1137570145, -188.783308068707, -11.9323969993701, -5.52924284846767, 
    -188.783308068707, 113.341604487616), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.402288928539698, 0.215057194787688
    ), logphi = c(0.551277155551014, -1.58624287371075)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_41 = structure(list(
    par = c(-0.229299077235002, -0.572536198274358, 0.496307046356028, 
    -1.58856283770937), value = 38.8890004630197, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.8551017995076, -3.6528024516258, 
    74.4951762836621, -5.94922381758067, -3.6528024516258, 5.46522880462419, 
    -9.12338252945233, -2.22545565886634, 74.4951762836621, -9.12338252945233, 
    1507.16513174665, -97.374674620454, -5.94922381758067, -2.22545565886634, 
    -97.374674620454, 93.2998758127468), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229299077235002, -0.572536198274358
    ), logphi = c(0.496307046356028, -1.58856283770937)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_42 = structure(list(
    par = c(-0.416023037498294, 0.163006413548992, 0.498816384023792, 
    -1.72735704858674), value = 13.1272840501811, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.2887641834034, -1.06723743797943, 
    101.843038748939, -8.2501967444415, -1.06723743797943, 19.2457114058797, 
    -8.32720006727072, -6.32534927813566, 101.843038748939, -8.32720006727072, 
    2221.50226806139, -172.329562302398, -8.2501967444415, -6.32534927813566, 
    -172.329562302398, 124.201200646823), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416023037498294, 0.163006413548992
    ), logphi = c(0.498816384023792, -1.72735704858674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_43 = structure(list(
    par = c(-0.693247098890254, -0.556154704785056, 0.511734718983232, 
    -1.87286644068131), value = 18.2186485566889, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(13.5882126226505, -3.69268706634784, 
    86.5107605925175, -11.305827592345, -3.69268706634784, 4.50707459798139, 
    -20.781272082715, -1.53905908639729, 86.5107605925175, -20.781272082715, 
    2945.22757068094, -224.488484090735, -11.305827592345, -1.53905908639729, 
    -224.488484090735, 142.197366445274), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.693247098890254, -0.556154704785056
    ), logphi = c(0.511734718983232, -1.87286644068131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_44 = structure(list(
    par = c(-0.236291866182128, 0.0837350475122381, 0.540460631774733, 
    -1.56624767572846), value = 37.4029105508893, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.5454756194624, -4.24282992206315, 
    99.0220523888752, -10.2401182946465, -4.24282992206315, 19.0464038993809, 
    -16.0233567285673, -5.12304573874189, 99.0220523888752, -16.0233567285673, 
    1748.59035307229, -180.166938736903, -10.2401182946465, -5.12304573874189, 
    -180.166938736903, 121.213595424052), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236291866182128, 0.0837350475122381
    ), logphi = c(0.540460631774733, -1.56624767572846)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_45 = structure(list(
    par = c(-0.291749863616192, -0.0484928600093518, 0.504940280749395, 
    -1.59550614295083), value = 30.7444882182112, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.0666156812335, -2.73420725616091, 
    100.762428550283, -8.26499517714296, -2.73420725616091, 17.7512590111562, 
    -12.4126499363442, -5.14353993885663, 100.762428550283, -12.4126499363442, 
    1881.93627027911, -149.300673780939, -8.26499517714296, -5.14353993885663, 
    -149.300673780939, 119.252834138273), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291749863616192, -0.0484928600093518
    ), logphi = c(0.504940280749395, -1.59550614295083)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_46 = structure(list(
    par = c(-0.382286832070318, -0.0364129679115597, 0.476180297063078, 
    -1.70864341949758), value = 23.4005104192128, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.1578848269726, -2.56675735954559, 
    108.791348540471, -7.382764656505, -2.56675735954559, 15.2025343727047, 
    -8.26212424698269, -5.75071271313732, 108.791348540471, -8.26212424698269, 
    2390.17000009589, -153.849783012028, -7.382764656505, -5.75071271313732, 
    -153.849783012028, 130.783053429617), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382286832070318, -0.0364129679115597
    ), logphi = c(0.476180297063078, -1.70864341949758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_47 = structure(list(
    par = c(-0.118404932842179, 0.000520105936437022, 0.466540927800058, 
    -1.65986830619976), value = 37.5815806256477, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.2159224299511, -3.67240879128872, 
    88.0448815525625, -1.84159471672274, -3.67240879128872, 15.0921311288243, 
    -4.79438463685256, -4.37645943840437, 88.0448815525625, -4.79438463685256, 
    1958.5328541929, -91.426788736193, -1.84159471672274, -4.37645943840437, 
    -91.426788736193, 108.34390396397), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.118404932842179, 0.000520105936437022
    ), logphi = c(0.466540927800058, -1.65986830619976)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_48 = structure(list(
    par = c(-0.67782273990483, 0.306165391833518, 0.544218761639819, 
    -1.54641896999351), value = 18.8948010162042, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.6046233771253, 2.97057096609876, 
    111.730959259759, -18.1437289317188, 2.97057096609876, 29.5412817763463, 
    -16.4769934922759, -8.79387122942887, 111.730959259759, -16.4769934922759, 
    1691.41857635857, -236.669814693613, -18.1437289317188, -8.79387122942887, 
    -236.669814693613, 132.571589672281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.67782273990483, 0.306165391833518
    ), logphi = c(0.544218761639819, -1.54641896999351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_49 = structure(list(
    par = c(-0.285328932771569, 0.0446292326869058, 0.491844165783981, 
    -1.67928996919062), value = 28.4174489881923, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.3138767414692, -3.29341842508768, 
    100.495334523387, -6.44853186893002, -3.29341842508768, 15.5152569849548, 
    -8.80392830548971, -5.48506110931157, 100.495334523387, -8.80392830548971, 
    2135.6596756581, -146.398985289231, -6.44853186893002, -5.48506110931157, 
    -146.398985289231, 122.46800744542), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285328932771569, 0.0446292326869058
    ), logphi = c(0.491844165783981, -1.67928996919062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_50 = structure(list(
    par = c(-0.26401458389751, 0.123228998354818, 0.52843943935337, 
    -1.63215886987634), value = 26.9094281450312, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.4622306940323, -3.261392855336, 
    92.6847850957202, -8.40141536873062, -3.261392855336, 18.0537736076403, 
    -12.9722981174751, -5.14844255494751, 92.6847850957202, -12.9722981174751, 
    1804.94821336374, -163.980855739432, -8.40141536873062, -5.14844255494751, 
    -163.980855739432, 115.227124302564), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26401458389751, 0.123228998354818
    ), logphi = c(0.52843943935337, -1.63215886987634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_51 = structure(list(
    par = c(-0.223606733459657, 0.126619704373984, 0.488650184166523, 
    -1.63849444931469), value = 30.6485230459849, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.3298814761259, -2.56804253240261, 
    104.828027886583, -5.18516315395345, -2.56804253240261, 21.1072551090652, 
    -7.35413202512802, -6.11144448381395, 104.828027886583, -7.35413202512802, 
    2105.80566080321, -139.779822021957, -5.18516315395345, -6.11144448381395, 
    -139.779822021957, 124.20106417288), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223606733459657, 0.126619704373984
    ), logphi = c(0.488650184166523, -1.63849444931469)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_52 = structure(list(
    par = c(-0.290477455360632, 0.497753440463313, 0.515375947543652, 
    -1.50380090150566), value = 16.8584129074348, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.8892978109042, 5.95357952271058, 
    76.1839097593864, -5.15695144454043, 5.95357952271058, 34.1468784377241, 
    -2.65023622691984, -6.32880348616638, 76.1839097593864, -2.65023622691984, 
    1145.31636262694, -117.216499122996, -5.15695144454043, -6.32880348616638, 
    -117.216499122996, 80.9184687771136), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290477455360632, 0.497753440463313
    ), logphi = c(0.515375947543652, -1.50380090150566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_53 = structure(list(
    par = c(-0.371550531598521, 0.00564407718557417, 0.448458797149388, 
    -1.66801338365372), value = 23.8401254375093, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.0216791449142, 0.554475120040365, 
    107.989670717679, -4.39554197217973, 0.554475120040365, 20.0428132552943, 
    -2.66315437347231, -6.06163659266912, 107.989670717679, -2.66315437347231, 
    2219.45536987977, -112.125637574678, -4.39554197217973, -6.06163659266912, 
    -112.125637574678, 119.787703650509), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371550531598521, 0.00564407718557417
    ), logphi = c(0.448458797149388, -1.66801338365372)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_54 = structure(list(
    par = c(-0.449007194590718, 0.431514041913521, 0.532027175357763, 
    -1.57167949381266), value = 14.5540856233792, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.969172528411, 4.18098187005, 
    102.112632887952, -11.1091984322798, 4.18098187005, 33.5850919714886, 
    -7.91483967965689, -8.4919219460744, 102.112632887952, -7.91483967965689, 
    1637.74984588727, -190.442113392031, -11.1091984322798, -8.4919219460744, 
    -190.442113392031, 116.700176242546), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449007194590718, 0.431514041913521
    ), logphi = c(0.532027175357763, -1.57167949381266)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_55 = structure(list(
    par = c(0.0498379595671579, 0.283177491395841, 0.465313790859622, 
    -1.65391676358689), value = 17.9293493829214, counts = structure(c(309L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.9487212049202, -1.95387670220981, 
    73.8413761869339, 1.39899430706691, -1.95387670220981, 24.9289927563012, 
    -0.782997461534762, -4.001827976996, 73.8413761869339, -0.782997461534762, 
    1759.61750804632, -71.8672393880126, 1.39899430706691, -4.001827976996, 
    -71.8672393880126, 96.6099342880611), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0498379595671579, 0.283177491395841
    ), logphi = c(0.465313790859622, -1.65391676358689)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_56 = structure(list(
    par = c(-0.2772955283639, 0.154908925521384, 0.496647632122774, 
    -1.76985725616264), value = 23.475153433164, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.8151217163043, -3.99655587646208, 
    121.309102998346, -7.25315725302877, -3.99655587646208, 20.1437334421684, 
    -8.57691661959592, -6.82456158163092, 121.309102998346, -8.57691661959592, 
    2945.46090187353, -194.796368970351, -7.25315725302877, -6.82456158163092, 
    -194.796368970351, 153.217396243299), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2772955283639, 0.154908925521384
    ), logphi = c(0.496647632122774, -1.76985725616264)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_57 = structure(list(
    par = c(-0.349533851219588, 0.0840254937487336, 0.465112572990311, 
    -1.7912250666723), value = 10.542127843189, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.6941115575963, -0.713864535484277, 
    92.8751842748099, -4.56120338609978, -0.713864535484277, 
    16.4879819690711, -2.27121674711839, -5.06297629554453, 92.8751842748099, 
    -2.27121674711839, 2322.47012751863, -131.740500013855, -4.56120338609978, 
    -5.06297629554453, -131.740500013855, 113.189335559483), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349533851219588, 0.0840254937487336
    ), logphi = c(0.465112572990311, -1.7912250666723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_58 = structure(list(
    par = c(-0.581007368891479, 0.309366551330381, 0.465528609082694, 
    -1.73019572720446), value = 9.19779574538839, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.4036211650077, 5.34559446485616, 
    126.719105392858, -8.55313762304633, 5.34559446485616, 29.4193106595841, 
    4.6577773291645, -9.75455734986141, 126.719105392858, 4.6577773291645, 
    2612.18393190354, -192.465589361923, -8.55313762304633, -9.75455734986141, 
    -192.465589361923, 139.826763388307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.581007368891479, 0.309366551330381
    ), logphi = c(0.465528609082694, -1.73019572720446)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_59 = structure(list(
    par = c(-0.0176585144717519, 0.182593377833452, 0.47575608541524, 
    -1.75360009328037), value = 18.1817587381318, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.5721806869036, -4.03544375870979, 
    92.5107359970312, -0.707008255940167, -4.03544375870979, 
    19.9127527951148, -2.29754293545881, -4.64537303201951, 92.5107359970312, 
    -2.29754293545881, 2465.43568028201, -114.517879553855, -0.707008255940167, 
    -4.64537303201951, -114.517879553855, 124.644014953823), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0176585144717519, 0.182593377833452
    ), logphi = c(0.47575608541524, -1.75360009328037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_60 = structure(list(
    par = c(-0.0380940611401738, 0.278243566494567, 0.512219077074341, 
    -1.57513614665107), value = 30.1509611070233, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.6182846004298, -2.34948893584885, 
    95.9976419689923, -3.65606221830461, -2.34948893584885, 30.108083020508, 
    -8.67163389361991, -5.83523957864429, 95.9976419689923, -8.67163389361991, 
    1813.59448303642, -137.279521529532, -3.65606221830461, -5.83523957864429, 
    -137.279521529532, 115.729707832024), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0380940611401738, 0.278243566494567
    ), logphi = c(0.512219077074341, -1.57513614665107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_61 = structure(list(
    par = c(-0.126128280292136, -0.329040168344432, 0.495563648021542, 
    -1.80334533831796), value = 31.271179289309, counts = structure(c(375L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.2562961875312, -6.84893506175399, 
    108.859563779262, -5.96867230306941, -6.84893506175399, 9.42940187265151, 
    -12.5165764810475, -3.53827080745717, 108.859563779262, -12.5165764810475, 
    3165.58562866565, -162.718095360503, -5.96867230306941, -3.53827080745717, 
    -162.718095360503, 155.216415073767), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126128280292136, -0.329040168344432
    ), logphi = c(0.495563648021542, -1.80334533831796)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_62 = structure(list(
    par = c(-0.211007858536945, 0.109966957883335, 0.534279745254855, 
    -1.64153230838052), value = 25.7142529021741, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(33.9176953882969, -4.10812892326362, 
    91.2991149570885, -8.0397341282179, -4.10812892326362, 17.0874063840643, 
    -13.6612107031198, -4.79953566578928, 91.2991149570885, -13.6612107031198, 
    1834.26269497566, -164.544895603136, -8.0397341282179, -4.79953566578928, 
    -164.544895603136, 116.090219631992), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211007858536945, 0.109966957883335
    ), logphi = c(0.534279745254855, -1.64153230838052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_63 = structure(list(
    par = c(-0.119628647171316, 0.533756088479351, 0.440879342730671, 
    -1.70933242765823), value = 2.61837505234364, counts = structure(c(319L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.2488562690139, 8.30021006947845, 
    93.6141798368872, 3.08391714565204, 8.30021006947845, 41.7638521965635, 
    13.4782775682574, -5.19014757838221, 93.6141798368872, 13.4782775682574, 
    2361.99105504742, -93.9045626060508, 3.08391714565204, -5.19014757838221, 
    -93.9045626060508, 118.05497565387), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.119628647171316, 0.533756088479351
    ), logphi = c(0.440879342730671, -1.70933242765823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_64 = structure(list(
    par = c(-0.299659180355081, -0.151826296274939, 0.481109156340377, 
    -1.74602988269053), value = 21.4914907238087, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.3372146198153, -2.77589456842975, 
    96.1162258450443, -6.17881879616533, -2.77589456842975, 13.2936732359923, 
    -9.03470104240967, -4.25971563267069, 96.1162258450443, -9.03470104240967, 
    2341.56493362292, -139.347483982366, -6.17881879616533, -4.25971563267069, 
    -139.347483982366, 122.965331810221), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299659180355081, -0.151826296274939
    ), logphi = c(0.481109156340377, -1.74602988269053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_65 = structure(list(
    par = c(-0.359418810471173, 0.385019358960106, 0.486887452095343, 
    -1.6047584638443), value = 11.4233370933156, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.1738803392534, 4.25319099139898, 
    91.0137739262851, -4.82193616235804, 4.25319099139898, 28.4727158446074, 
    -0.221464485861134, -7.00623458627092, 91.0137739262851, 
    -0.221464485861134, 1616.09814312946, -126.746288648061, 
    -4.82193616235804, -7.00623458627092, -126.746288648061, 
    99.4506298459541), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359418810471173, 0.385019358960106
    ), logphi = c(0.486887452095343, -1.6047584638443)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_66 = structure(list(
    par = c(-0.293806009230205, -0.122882916569578, 0.504187939309005, 
    -1.63605347067504), value = 34.0825055648787, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.4360820857001, -4.65285946482652, 
    99.6196417339945, -8.27222532251426, -4.65285946482652, 12.1227446800987, 
    -12.7960770601732, -4.63468741607187, 99.6196417339945, -12.7960770601732, 
    2016.54069084611, -152.395438104413, -8.27222532251426, -4.63468741607187, 
    -152.395438104413, 122.960684961981), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293806009230205, -0.122882916569578
    ), logphi = c(0.504187939309005, -1.63605347067504)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_67 = structure(list(
    par = c(-0.220357814165585, -0.433395949519909, 0.504765220733212, 
    -1.64801252230145), value = 45.1531747964939, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.2159792958132, -5.32410568077069, 
    90.7391798126156, -7.36087646835415, -5.32410568077069, 6.82029028808984, 
    -12.1582178280732, -2.94123673327817, 90.7391798126156, -12.1582178280732, 
    2008.07511352608, -135.645812044061, -7.36087646835415, -2.94123673327817, 
    -135.645812044061, 119.825366262205), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220357814165585, -0.433395949519909
    ), logphi = c(0.504765220733212, -1.64801252230145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_68 = structure(list(
    par = c(-0.637664100474947, 0.173961767715501, 0.551962078366197, 
    -1.76660487477479), value = 11.3823814440416, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(23.9465908684622, -3.48938929306541, 
    112.834048541899, -16.3419368268691, -3.48938929306541, 18.88852691323, 
    -28.1032761133559, -5.94090942396264, 112.834048541899, -28.1032761133559, 
    2661.39075320559, -283.064460764315, -16.3419368268691, -5.94090942396264, 
    -283.064460764315, 157.929597737194), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.637664100474947, 0.173961767715501
    ), logphi = c(0.551962078366197, -1.76660487477479)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_69 = structure(list(
    par = c(-0.225160401835848, 0.028379365822602, 0.439368406306573, 
    -1.67626777741615), value = 25.4075194815451, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.1771673106479, -1.12862738088637, 
    97.0355586966676, -1.10982389722736, -1.12862738088637, 17.5151603869494, 
    -0.635472918730784, -5.0098895321149, 97.0355586966676, -0.635472918730784, 
    2152.01474353588, -82.195015682629, -1.10982389722736, -5.0098895321149, 
    -82.195015682629, 112.518888545132), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225160401835848, 0.028379365822602
    ), logphi = c(0.439368406306573, -1.67626777741615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_70 = structure(list(
    par = c(-0.207435874920936, -0.215155719893417, 0.482285035366324, 
    -1.75388008804806), value = 26.7836871500623, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.8648908486999, -5.01077827763652, 
    109.771542942561, -6.00213789958559, -5.01077827763652, 12.7094502424541, 
    -10.5040232627474, -4.38513546852093, 109.771542942561, -10.5040232627474, 
    2811.33754162521, -152.55406652015, -6.00213789958559, -4.38513546852093, 
    -152.55406652015, 145.409470555968), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207435874920936, -0.215155719893417
    ), logphi = c(0.482285035366324, -1.75388008804806)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_71 = structure(list(
    par = c(-0.268497980364306, 0.25146697411671, 0.482346071791284, 
    -1.48927439992801), value = 26.6289331802538, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.0193986315477, 1.98866771405903, 
    71.6937454505739, -3.07144490463429, 1.98866771405903, 22.1328504865781, 
    -3.73491094407541, -5.0089533316644, 71.6937454505739, -3.73491094407541, 
    1096.44053303626, -77.0249159285363, -3.07144490463429, -5.0089533316644, 
    -77.0249159285363, 71.4899853493378), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.268497980364306, 0.25146697411671
    ), logphi = c(0.482346071791284, -1.48927439992801)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_72 = structure(list(
    par = c(-0.256220639187465, 0.238852620424236, 0.51816077966919, 
    -1.68233029163911), value = 25.5780738790121, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.2426347979888, -2.56439501988837, 
    109.710380939987, -8.01311159159823, -2.56439501988837, 23.7682128236827, 
    -10.826531353203, -6.79078224896656, 109.710380939987, -10.826531353203, 
    2284.88553667816, -187.405018571063, -8.01311159159823, -6.79078224896656, 
    -187.405018571063, 136.002656787149), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256220639187465, 0.238852620424236
    ), logphi = c(0.51816077966919, -1.68233029163911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_73 = structure(list(
    par = c(-0.239753613450854, 0.393395982285457, 0.492097434359731, 
    -1.54514081331178), value = 21.7967766872339, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.9944609551546, 2.68860870011878, 
    80.019069051751, -3.28106870828293, 2.68860870011878, 27.0137370970147, 
    -2.03553499567022, -5.93764602330182, 80.019069051751, -2.03553499567022, 
    1340.23098867697, -103.652059924464, -3.28106870828293, -5.93764602330182, 
    -103.652059924464, 86.1404549370448), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239753613450854, 0.393395982285457
    ), logphi = c(0.492097434359731, -1.54514081331178)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_74 = structure(list(
    par = c(-0.510621147471747, 0.328268497159938, 0.54959377275259, 
    -1.67780094142813), value = 11.2215657920187, counts = structure(c(309L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.4147214166808, -1.17454277592799, 
    96.8413970632298, -12.6054759412852, -1.17454277592799, 21.4008673449229, 
    -15.7017598176878, -6.73487476809953, 96.8413970632298, -15.7017598176878, 
    1874.96460564063, -213.64450862027, -12.6054759412852, -6.73487476809953, 
    -213.64450862027, 123.403486659512), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.510621147471747, 0.328268497159938
    ), logphi = c(0.54959377275259, -1.67780094142813)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_75 = structure(list(
    par = c(-0.347704924375694, -0.100109518878474, 0.465639564601493, 
    -1.74956378002648), value = 24.2234922348778, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.5168943224626, -3.32606879815955, 
    102.013048381977, -5.8570205259123, -3.32606879815955, 11.5524326673722, 
    -6.52477129925444, -4.9096634553436, 102.013048381977, -6.52477129925444, 
    2443.22022566301, -137.414546252046, -5.8570205259123, -4.9096634553436, 
    -137.414546252046, 125.287214460812), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347704924375694, -0.100109518878474
    ), logphi = c(0.465639564601493, -1.74956378002648)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_76 = structure(list(
    par = c(-0.338069050651656, 0.101068209478004, 0.486787208583652, 
    -1.76087382385608), value = 20.3229535105297, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.3750828666414, -2.82435659748614, 
    124.942807202544, -7.90509046311172, -2.82435659748614, 20.5408401310336, 
    -8.21742288881211, -6.99821783900489, 124.942807202544, -8.21742288881211, 
    2966.40948843052, -194.788405126545, -7.90509046311172, -6.99821783900489, 
    -194.788405126545, 154.920246567158), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338069050651656, 0.101068209478004
    ), logphi = c(0.486787208583652, -1.76087382385608)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_77 = structure(list(
    par = c(-0.139978806378264, -0.048563815083517, 0.537673599430131, 
    -1.45684446659336), value = 48.9255152927157, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.8817580128346, -4.46484623140009, 
    71.9156539048527, -7.04210062885124, -4.46484623140009, 12.8715910552302, 
    -11.5565037823728, -3.21439449635363, 71.9156539048527, -11.5565037823728, 
    1102.13847025697, -115.360302016754, -7.04210062885124, -3.21439449635363, 
    -115.360302016754, 81.3278113156457), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.139978806378264, -0.048563815083517
    ), logphi = c(0.537673599430131, -1.45684446659336)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_78 = structure(list(
    par = c(-0.0084724425320007, -0.212522528174592, 0.487393619042568, 
    -1.56072004950245), value = 44.1995061769192, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.523901412712, -6.23487046347293, 
    80.8367267399746, -2.40036908660812, -6.23487046347293, 10.430182152632, 
    -8.60476496455931, -3.36635867981272, 80.8367267399746, -8.60476496455931, 
    1610.47821271332, -82.5320860720069, -2.40036908660812, -3.36635867981272, 
    -82.5320860720069, 98.8090170022105), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0084724425320007, -0.212522528174592
    ), logphi = c(0.487393619042568, -1.56072004950245)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_79 = structure(list(
    par = c(-0.592179366544613, -0.00180432296993956, 0.465547065577117, 
    -1.59077223025649), value = 27.2367939844122, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.4084377585434, 1.45425413222711, 
    104.860447695643, -9.03091585335858, 1.45425413222711, 17.6422196656034, 
    -6.7413862492316, -6.80609168668411, 104.860447695643, -6.7413862492316, 
    1780.1785241236, -129.637955186723, -9.03091585335858, -6.80609168668411, 
    -129.637955186723, 108.00155195767), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.592179366544613, -0.00180432296993956
    ), logphi = c(0.465547065577117, -1.59077223025649)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_80 = structure(list(
    par = c(-0.29828042650063, -0.205952130052173, 0.528295131059882, 
    -1.6964240982583), value = 37.1209748422686, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.7987828670188, -5.4065434529349, 
    100.30078320078, -10.205831172172, -5.4065434529349, 10.876014862049, 
    -17.4341868444117, -3.72886860766641, 100.30078320078, -17.4341868444117, 
    2309.56599801324, -188.45130469991, -10.205831172172, -3.72886860766641, 
    -188.45130469991, 136.945833798308), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29828042650063, -0.205952130052173
    ), logphi = c(0.528295131059882, -1.6964240982583)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_81 = structure(list(
    par = c(-0.511833719085492, 0.0222510896119181, 0.501425854421414, 
    -1.76474537049525), value = 17.6296282461895, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.9305998875686, -2.74984633996667, 
    115.200151309836, -11.4985852741611, -2.74984633996667, 16.2609591640717, 
    -14.6844456914152, -6.21767800090822, 115.200151309836, -14.6844456914152, 
    2707.43999229239, -214.863349031091, -11.4985852741611, -6.21767800090822, 
    -214.863349031091, 146.853270447167), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.511833719085492, 0.0222510896119181
    ), logphi = c(0.501425854421414, -1.76474537049525)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_82 = structure(list(
    par = c(0.0113053235344062, 0.163828875822568, 0.50650003035596, 
    -1.47398140909221), value = 34.6557160698089, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9171568939447, -3.14259433586983, 
    66.1266097186086, -2.1102164780018, -3.14259433586983, 19.6964012317835, 
    -7.38147942591638, -3.73849490209466, 66.1266097186086, -7.38147942591638, 
    1092.77449108269, -79.119959418783, -2.1102164780018, -3.73849490209466, 
    -79.119959418783, 73.4098019936624), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0113053235344062, 0.163828875822568
    ), logphi = c(0.50650003035596, -1.47398140909221)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_83 = structure(list(
    par = c(-0.03375764287672, 0.0680591993038439, 0.440670875145721, 
    -1.53208617441632), value = 35.7265886031627, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.3372913437423, -2.61180275096251, 
    77.9090455971243, 2.0322882186008, -2.61180275096251, 18.934947918936, 
    -2.89493100069649, -4.13485857908569, 77.9090455971243, -2.89493100069649, 
    1483.60434701367, -32.8905277342528, 2.0322882186008, -4.13485857908569, 
    -32.8905277342528, 86.4061294247875), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.03375764287672, 0.0680591993038439
    ), logphi = c(0.440670875145721, -1.53208617441632)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_84 = structure(list(
    par = c(-0.1107512535442, -0.230835826762136, 0.466943845211223, 
    -1.46607299872351), value = 44.7005122116459, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.8119768055856, -3.44180891964641, 
    72.776133418273, -1.63275756737136, -3.44180891964641, 11.679569846379, 
    -6.9270140539146, -3.32860672358493, 72.776133418273, -6.9270140539146, 
    1188.94653004276, -47.9505720125672, -1.63275756737136, -3.32860672358493, 
    -47.9505720125672, 74.9739651784154), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.1107512535442, -0.230835826762136
    ), logphi = c(0.466943845211223, -1.46607299872351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_85 = structure(list(
    par = c(-0.267288344615992, -0.0590461131224926, 0.506018824942739, 
    -1.79862178795636), value = 21.7412934758006, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.5257363881186, -5.11517103607417, 
    95.6163436907076, -6.91005537944989, -5.11517103607417, 10.9707971915896, 
    -11.9973841732346, -4.20096287800931, 95.6163436907076, -11.9973841732346, 
    2536.50263604666, -163.142477455303, -6.91005537944989, -4.20096287800931, 
    -163.142477455303, 128.194662807779), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267288344615992, -0.0590461131224926
    ), logphi = c(0.506018824942739, -1.79862178795636)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_86 = structure(list(
    par = c(-0.291208042625119, 0.0862047090177749, 0.529501732912379, 
    -1.62136831903296), value = 31.6823171703431, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.591453777073, -4.07807347713174, 
    97.5672109229109, -9.52071192106274, -4.07807347713174, 16.6227925193496, 
    -14.4456600699172, -5.26882141471674, 97.5672109229109, -14.4456600699172, 
    1866.09190061304, -174.585107006742, -9.52071192106274, -5.26882141471674, 
    -174.585107006742, 121.059930399348), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291208042625119, 0.0862047090177749
    ), logphi = c(0.529501732912379, -1.62136831903296)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_87 = structure(list(
    par = c(-0.408480767014111, 0.251165392331516, 0.502412872128025, 
    -1.59347906605123), value = 20.7125376701964, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.3474846891451, 2.03898453055018, 
    94.7977011094281, -7.88026751941118, 2.03898453055018, 25.5423368358265, 
    -6.73274430607051, -6.78596165926137, 94.7977011094281, -6.73274430607051, 
    1638.96583429235, -146.539687873926, -7.88026751941118, -6.78596165926137, 
    -146.539687873926, 105.752669750991), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.408480767014111, 0.251165392331516
    ), logphi = c(0.502412872128025, -1.59347906605123)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_88 = structure(list(
    par = c(-0.191854618449228, 0.243609988005898, 0.514632322151728, 
    -1.63308372084278), value = 20.0069571844002, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.6327155964826, -1.5805570612315, 
    91.9799494329965, -5.76632740845184, -1.5805570612315, 23.5763484619511, 
    -8.51463375095562, -5.70635526919716, 91.9799494329965, -8.51463375095562, 
    1805.09812238316, -146.117510264165, -5.76632740845184, -5.70635526919716, 
    -146.117510264165, 111.674553656016), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191854618449228, 0.243609988005898
    ), logphi = c(0.514632322151728, -1.63308372084278)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_89 = structure(list(
    par = c(-0.427244090297642, -0.244050874333383, 0.493552850457199, 
    -1.38510214785616), value = 35.158972474264, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.4953988354839, -0.342411297538092, 
    59.9325316095189, -5.98459891776315, -0.342411297538092, 
    10.4746941111955, -7.66389995376926, -2.9129687888485, 59.9325316095189, 
    -7.66389995376926, 766.775811682052, -63.6296734031205, -5.98459891776315, 
    -2.9129687888485, -63.6296734031205, 54.2217919559107), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.427244090297642, -0.244050874333383
    ), logphi = c(0.493552850457199, -1.38510214785616)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_90 = structure(list(
    par = c(-0.0242583779993937, 0.517853941000196, 0.493183007800229, 
    -1.56585187666129), value = 14.4782715499284, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3807958455706, 3.07279792588488, 
    74.2311455605993, -0.211169972841319, 3.07279792588488, 34.7029158191958, 
    -0.496698036922538, -5.16115709103815, 74.2311455605993, 
    -0.496698036922538, 1411.28510738042, -94.7295682718341, 
    -0.211169972841319, -5.16115709103815, -94.7295682718341, 
    87.5629495347141), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0242583779993937, 0.517853941000196
    ), logphi = c(0.493183007800229, -1.56585187666129)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_91 = structure(list(
    par = c(-0.291832652162169, -0.0960953587140879, 0.508969970413747, 
    -1.72330514898899), value = 33.1473749704673, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.476443135503, -4.91847369765708, 
    99.0321253340198, -8.14046168340354, -4.91847369765708, 11.7912802259923, 
    -13.3908417421225, -4.42910683862152, 99.0321253340198, -13.3908417421225, 
    2319.22987855882, -167.064804912798, -8.14046168340354, -4.42910683862152, 
    -167.064804912798, 129.927623707005), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291832652162169, -0.0960953587140879
    ), logphi = c(0.508969970413747, -1.72330514898899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_92 = structure(list(
    par = c(-0.418557346374171, 0.0125032066031683, 0.526979413658788, 
    -1.61609999271772), value = 25.8393737330474, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.2445203380918, -3.1698665958757, 
    94.2881002243823, -10.9946567885544, -3.1698665958757, 14.3784953658965, 
    -15.1752327965937, -4.93768877429801, 94.2881002243823, -15.1752327965937, 
    1766.45174088907, -175.089208280355, -10.9946567885544, -4.93768877429801, 
    -175.089208280355, 116.768880162432), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418557346374171, 0.0125032066031683
    ), logphi = c(0.526979413658788, -1.61609999271772)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_93 = structure(list(
    par = c(-0.452837996226688, -0.159051279835641, 0.535007833712427, 
    -1.60634840026691), value = 30.3529403280972, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.5784198731088, -3.06664886196018, 
    90.8964274746182, -12.2268253086588, -3.06664886196018, 12.6502378048343, 
    -17.3250481285692, -3.71472304117049, 90.8964274746182, -17.3250481285692, 
    1735.07191833089, -181.118909406308, -12.2268253086588, -3.71472304117049, 
    -181.118909406308, 117.722679146226), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.452837996226688, -0.159051279835641
    ), logphi = c(0.535007833712427, -1.60634840026691)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_94 = structure(list(
    par = c(-0.609314476862035, -0.00220211076812974, 0.544249110192038, 
    -1.78605195509184), value = 13.4977321380296, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(18.3526647390408, -3.96826316695353, 
    91.4990105744806, -12.7259105955346, -3.96826316695353, 11.3726103467826, 
    -23.6254938634772, -3.75120722662103, 91.4990105744806, -23.6254938634772, 
    2346.00523784856, -226.970107537028, -12.7259105955346, -3.75120722662103, 
    -226.970107537028, 132.673302772446), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.609314476862035, -0.00220211076812974
    ), logphi = c(0.544249110192038, -1.78605195509184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_95 = structure(list(
    par = c(-0.423850853687465, 0.291101915682929, 0.486826462058168, 
    -1.6985136510765), value = 16.3778597468753, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.9203371570591, 2.30305799497899, 
    126.804905637989, -8.41214186664274, 2.30305799497899, 31.466917930878, 
    -2.63827444335618, -9.04176503313536, 126.804905637989, -2.63827444335618, 
    2587.70455109492, -197.038290119522, -8.41214186664274, -9.04176503313536, 
    -197.038290119522, 146.668748429057), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423850853687465, 0.291101915682929
    ), logphi = c(0.486826462058168, -1.6985136510765)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_96 = structure(list(
    par = c(-0.468261250527891, -0.906920318927412, 0.529279750552785, 
    -1.53435471916067), value = 56.6834886835511, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(26.3940228180104, -3.51017039079693, 
    87.8573432583352, -13.2406670125818, -3.51017039079693, 3.32253523005477, 
    -13.1589022629441, -1.36434858344359, 87.8573432583352, -13.1589022629441, 
    1667.32103834732, -167.593566823498, -13.2406670125818, -1.36434858344359, 
    -167.593566823498, 117.484577314642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.468261250527891, -0.906920318927412
    ), logphi = c(0.529279750552785, -1.53435471916067)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_97 = structure(list(
    par = c(-0.0801754864946043, 0.0270302255041698, 0.521104721085012, 
    -1.68168269919787), value = 31.607912407658, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.4217422772484, -5.81819516831672, 
    91.072591482444, -5.42846548379217, -5.81819516831672, 14.8268642377047, 
    -11.8849797479115, -4.28087340775818, 91.072591482444, -11.8849797479115, 
    2065.71436441028, -146.128622450004, -5.42846548379217, -4.28087340775818, 
    -146.128622450004, 120.568867408188), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0801754864946043, 0.0270302255041698
    ), logphi = c(0.521104721085012, -1.68168269919787)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_98 = structure(list(
    par = c(-0.140654809485766, -0.502069417827666, 0.481641238010688, 
    -1.68104688885442), value = 42.8856059171524, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.4151226927875, -5.75718919293422, 
    100.299529018244, -5.32200875191791, -5.75718919293422, 7.45690101311425, 
    -10.3396615589446, -3.12615509834302, 100.299529018244, -10.3396615589446, 
    2415.67935953135, -121.089093543247, -5.32200875191791, -3.12615509834302, 
    -121.089093543247, 134.258993112368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.140654809485766, -0.502069417827666
    ), logphi = c(0.481641238010688, -1.68104688885442)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_99 = structure(list(
    par = c(-0.048160213915413, 0.14079627027741, 0.494567470366137, 
    -1.57014961823832), value = 29.2252331654045, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.1011617987309, -3.44855571654534, 
    78.7086051072805, -2.27773336192172, -3.44855571654534, 18.6494033922457, 
    -6.82258816731007, -4.39903846860545, 78.7086051072805, -6.82258816731007, 
    1506.58444812368, -94.6361509326366, -2.27773336192172, -4.39903846860545, 
    -94.6361509326366, 93.4314028588901), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.048160213915413, 0.14079627027741
    ), logphi = c(0.494567470366137, -1.57014961823832)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_100 = structure(list(
    par = c(-0.202410404572563, -0.703133501260587, 0.444292911447463, 
    -1.54553955950763), value = 53.1516905910537, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.9700936783491, -4.16806993186469, 
    92.8098716048709, -2.78961481470219, -4.16806993186469, 5.57826271574413, 
    -7.1476385823388, -2.85592012616576, 92.8098716048709, -7.1476385823388, 
    1761.73713364314, -46.6519691020295, -2.78961481470219, -2.85592012616576, 
    -46.6519691020295, 103.101434433484), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202410404572563, -0.703133501260587
    ), logphi = c(0.444292911447463, -1.54553955950763)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_101 = structure(list(
    par = c(-0.358829271438247, 0.26213547427591, 0.456934037267357, 
    -1.82389066165694), value = 9.95763373711324, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.6074427726489, 0.790407485240507, 
    105.15896996921, -3.62165061007502, 0.790407485240507, 20.530728447099, 
    5.28763936369359, -6.29376407390581, 105.15896996921, 5.28763936369359, 
    2725.20417818889, -149.158507297464, -3.62165061007502, -6.29376407390581, 
    -149.158507297464, 125.600481979404), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358829271438247, 0.26213547427591
    ), logphi = c(0.456934037267357, -1.82389066165694)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_102 = structure(list(
    par = c(0.0506256842843445, 0.110465897948548, 0.489298774550245, 
    -1.53315740437992), value = 43.3818420687937, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.5618954340152, -5.71192794041053, 
    89.7293096233653, -0.89863925190059, -5.71192794041053, 22.4072786636498, 
    -8.23832355933973, -4.7926792534625, 89.7293096233653, -8.23832355933973, 
    1702.32935002623, -92.381446789247, -0.89863925190059, -4.7926792534625, 
    -92.381446789247, 106.494955796066), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0506256842843445, 0.110465897948548
    ), logphi = c(0.489298774550245, -1.53315740437992)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_103 = structure(list(
    par = c(-0.155072300385023, -0.162809091711775, 0.488799893717249, 
    -1.64784809864699), value = 31.6864168428563, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.3909204688423, -4.89052673025014, 
    97.9408798968961, -5.03153393927036, -4.89052673025014, 13.2918124089443, 
    -10.0858774985113, -4.28845005373546, 97.9408798968961, -10.0858774985113, 
    2120.13281124701, -124.269736724081, -5.03153393927036, -4.28845005373546, 
    -124.269736724081, 123.027148571708), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.155072300385023, -0.162809091711775
    ), logphi = c(0.488799893717249, -1.64784809864699)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_104 = structure(list(
    par = c(-0.231370882155476, -0.649012979580283, 0.490652085577465, 
    -1.69433376000856), value = 46.863153710013, counts = structure(c(325L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.7841217947529, -5.5913088559123, 
    110.016866308627, -8.26817336374575, -5.5913088559123, 6.06147566628579, 
    -12.8368699776615, -2.88524253200251, 110.016866308627, -12.8368699776615, 
    2704.83910795605, -155.208319585043, -8.26817336374575, -2.88524253200251, 
    -155.208319585043, 151.236765582041), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231370882155476, -0.649012979580283
    ), logphi = c(0.490652085577465, -1.69433376000856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_105 = structure(list(
    par = c(-0.281842161239246, -0.0117917308850485, 0.501470361030303, 
    -1.78501761251134), value = 18.8884051611866, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.2103015809059, -4.18925279088711, 
    110.220449794696, -7.72838853180247, -4.18925279088711, 16.1889416272487, 
    -12.284933044171, -5.21839946632241, 110.220449794696, -12.284933044171, 
    2819.53736544516, -183.603424408041, -7.72838853180247, -5.21839946632241, 
    -183.603424408041, 144.671825294651), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281842161239246, -0.0117917308850485
    ), logphi = c(0.501470361030303, -1.78501761251134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_106 = structure(list(
    par = c(-0.0476347152754083, 0.0447546102564119, 0.463673441350933, 
    -1.63389738548656), value = 25.515824967069, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.0587566387879, -2.86447576680615, 
    70.6042769085258, -0.375632726701269, -2.86447576680615, 
    14.9714390254019, -3.49311963976362, -3.55300753795973, 70.6042769085258, 
    -3.49311963976362, 1554.85105032138, -64.9270884416353, -0.375632726701269, 
    -3.55300753795973, -64.9270884416353, 87.2278750181366), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0476347152754083, 0.0447546102564119
    ), logphi = c(0.463673441350933, -1.63389738548656)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_107 = structure(list(
    par = c(-0.618234616783588, -0.383514436719933, 0.501916960358363, 
    -1.56839700084802), value = 39.4704782118345, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8937552347667, -2.07507252270034, 
    97.4029863911596, -13.3609670065482, -2.07507252270034, 9.78466458434468, 
    -15.5621779054371, -3.78996481842364, 97.4029863911596, -15.5621779054371, 
    1733.7746868975, -162.897692293384, -13.3609670065482, -3.78996481842364, 
    -162.897692293384, 115.844730348869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.618234616783588, -0.383514436719933
    ), logphi = c(0.501916960358363, -1.56839700084802)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_108 = structure(list(
    par = c(-0.441491169717368, 0.170140808884545, 0.4983329382317, 
    -1.60393985202758), value = 21.4304925941458, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9855852396012, 0.508909232088683, 
    107.055452360783, -9.4006026762905, 0.508909232088683, 23.4359876607471, 
    -8.84678425094876, -7.24898932702445, 107.055452360783, -8.84678425094876, 
    1888.90254636842, -164.174004760653, -9.4006026762905, -7.24898932702445, 
    -164.174004760653, 120.084847352153), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.441491169717368, 0.170140808884545
    ), logphi = c(0.4983329382317, -1.60393985202758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_109 = structure(list(
    par = c(-0.175134943034707, -0.440299239338817, 0.477025879810483, 
    -1.74297541519933), value = 35.4365162914441, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.0484393713278, -5.49004145966592, 
    99.9398446666078, -5.29660012826838, -5.49004145966592, 7.42515774199148, 
    -9.77463929707767, -3.22297325805465, 99.9398446666078, -9.77463929707767, 
    2622.33777802656, -128.792616777673, -5.29660012826838, -3.22297325805465, 
    -128.792616777673, 136.118694697984), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175134943034707, -0.440299239338817
    ), logphi = c(0.477025879810483, -1.74297541519933)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_110 = structure(list(
    par = c(-0.45298081506784, -0.0447065969928605, 0.465343510443021, 
    -1.53396632251644), value = 29.5045661791773, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.8117220125843, 0.391371322905343, 
    76.8530269112944, -5.15076535112513, 0.391371322905343, 13.9781187504795, 
    -5.54440856426197, -4.62248635546558, 76.8530269112944, -5.54440856426197, 
    1232.19075619474, -77.9935484853667, -5.15076535112513, -4.62248635546558, 
    -77.9935484853667, 76.4592657800378), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.45298081506784, -0.0447065969928605
    ), logphi = c(0.465343510443021, -1.53396632251644)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_111 = structure(list(
    par = c(-0.304919523442323, -0.477454261498746, 0.489014397367391, 
    -1.5467174845175), value = 45.7227189082498, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.3784898045338, -4.13147646582956, 
    89.8478801527602, -7.4373743670364, -4.13147646582956, 7.14712421867603, 
    -10.8524784927511, -3.1736576779906, 89.8478801527602, -10.8524784927511, 
    1630.10548362053, -107.970455468731, -7.4373743670364, -3.1736576779906, 
    -107.970455468731, 103.399225526601), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304919523442323, -0.477454261498746
    ), logphi = c(0.489014397367391, -1.5467174845175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_112 = structure(list(
    par = c(-0.351849777576318, 0.265555238791388, 0.537237122015706, 
    -1.42611060154241), value = 26.262824512764, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.5313033670373, 0.833513738029978, 
    81.1907130389145, -9.61242808950047, 0.833513738029978, 24.0950554655228, 
    -10.514822577079, -5.57329331085654, 81.1907130389145, -10.514822577079, 
    1065.79161204312, -134.622753943603, -9.61242808950047, -5.57329331085654, 
    -134.622753943603, 84.4594284892253), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351849777576318, 0.265555238791388
    ), logphi = c(0.537237122015706, -1.42611060154241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_113 = structure(list(
    par = c(-0.148111186525548, 0.279046635327634, 0.539597104398246, 
    -1.43722981763299), value = 43.1823721969751, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.1522522274579, -1.51816678695127, 
    87.3268567040952, -7.79981419984921, -1.51816678695127, 28.4261035332634, 
    -11.7784215785122, -5.46243770571664, 87.3268567040952, -11.7784215785122, 
    1236.47029669449, -141.996299561242, -7.79981419984921, -5.46243770571664, 
    -141.996299561242, 94.4513066230002), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148111186525548, 0.279046635327634
    ), logphi = c(0.539597104398246, -1.43722981763299)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_114 = structure(list(
    par = c(-0.220324717975268, 0.419596897251607, 0.525851114419253, 
    -1.68614180140468), value = 18.912382065333, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.5990603634953, -0.266580994612298, 
    103.359693190086, -6.70830727811378, -0.266580994612298, 
    30.1415074970279, -6.81828428650277, -7.25401932433201, 103.359693190086, 
    -6.81828428650277, 2128.6354092851, -183.194622969562, -6.70830727811378, 
    -7.25401932433201, -183.194622969562, 127.386382569483), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220324717975268, 0.419596897251607
    ), logphi = c(0.525851114419253, -1.68614180140468)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_115 = structure(list(
    par = c(-0.521464301400605, 0.0326170033747446, 0.529719982614504, 
    -1.56249566874535), value = 28.9038801032546, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.0806010689128, -0.348275396078179, 
    111.814039495783, -15.2922478440232, -0.348275396078179, 
    23.8587903460541, -18.622391364076, -6.26080749022151, 111.814039495783, 
    -18.622391364076, 1870.8185609384, -211.486042754672, -15.2922478440232, 
    -6.26080749022151, -211.486042754672, 133.318507783642), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.521464301400605, 0.0326170033747446
    ), logphi = c(0.529719982614504, -1.56249566874535)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_116 = structure(list(
    par = c(-0.309958830107414, -0.344616099719694, 0.458052401327006, 
    -1.84892892535647), value = 30.2585275288636, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.0750454519423, -5.05033070030692, 
    111.811544836193, -6.16912812034798, -5.05033070030692, 8.35942432342307, 
    -8.31838078152458, -3.89266810429945, 111.811544836193, -8.31838078152458, 
    3311.21687263281, -157.455987602084, -6.16912812034798, -3.89266810429945, 
    -157.455987602084, 148.26015210101), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309958830107414, -0.344616099719694
    ), logphi = c(0.458052401327006, -1.84892892535647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_117 = structure(list(
    par = c(-0.402557884926447, 0.323913803428464, 0.525162185588831, 
    -1.26177877836571), value = 27.4584361450824, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.8180123508426, 5.8192584742045, 
    59.9332203403691, -6.8845296832265, 5.8192584742045, 29.5490870287907, 
    -6.14688617961434, -4.66612719129955, 59.9332203403691, -6.14688617961434, 
    579.64451549708, -75.9474060956222, -6.8845296832265, -4.66612719129955, 
    -75.9474060956222, 48.5775717651293), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.402557884926447, 0.323913803428464
    ), logphi = c(0.525162185588831, -1.26177877836571)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_118 = structure(list(
    par = c(-0.156957283962677, 0.153368240787398, 0.501629435344248, 
    -1.55322366811581), value = 31.4075676404629, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.8162066657432, -2.35816752880424, 
    88.7343151347864, -4.57577902635009, -2.35816752880424, 21.0330043488582, 
    -8.34676955285829, -5.26326531069543, 88.7343151347864, -8.34676955285829, 
    1571.10991321119, -117.250123804702, -4.57577902635009, -5.26326531069543, 
    -117.250123804702, 101.047017575517), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.156957283962677, 0.153368240787398
    ), logphi = c(0.501629435344248, -1.55322366811581)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_119 = structure(list(
    par = c(-0.19008624437868, 0.603039021585085, 0.502079865104389, 
    -1.57504129084022), value = 9.64240889703157, counts = structure(c(385L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.881030752656, 6.91903241367697, 
    92.837400877066, -2.76334682158819, 6.91903241367697, 40.8044933069007, 
    2.66699031925555, -7.46721420563645, 92.837400877066, 2.66699031925555, 
    1645.15912386065, -137.80877170122, -2.76334682158819, -7.46721420563645, 
    -137.80877170122, 105.235268832438), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19008624437868, 0.603039021585085
    ), logphi = c(0.502079865104389, -1.57504129084022)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_120 = structure(list(
    par = c(-0.222949563056537, 0.328441762748959, 0.509322649264552, 
    -1.64930385432996), value = 18.6265899104963, counts = structure(c(301L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.6298395130617, -0.697051851794583, 
    104.988631869141, -6.02232295943139, -0.697051851794583, 
    27.7852873713513, -6.45427350320915, -7.0628308259657, 104.988631869141, 
    -6.45427350320915, 2079.0992738684, -166.082999756512, -6.02232295943139, 
    -7.0628308259657, -166.082999756512, 126.055398946612), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222949563056537, 0.328441762748959
    ), logphi = c(0.509322649264552, -1.64930385432996)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_121 = structure(list(
    par = c(-0.200727151747142, 0.0387698431452481, 0.498294439555441, 
    -1.70831844401241), value = 27.824175659814, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.2579583105053, -4.69106764633409, 
    113.432505951749, -6.49364605020963, -4.69106764633409, 18.6457485673586, 
    -10.793095307271, -5.78758146829728, 113.432505951749, -10.793095307271, 
    2595.16657443726, -169.362983561072, -6.49364605020963, -5.78758146829728, 
    -169.362983561072, 144.474533486871), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.200727151747142, 0.0387698431452481
    ), logphi = c(0.498294439555441, -1.70831844401241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_122 = structure(list(
    par = c(-0.0530276306837468, -0.233807565210517, 0.497174753361758, 
    -1.54319317635621), value = 53.1246196928446, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.4690343656664, -6.0320391668256, 
    83.2101474355085, -3.85914518652442, -6.0320391668256, 10.597294238579, 
    -9.86058315888272, -3.40435815893159, 83.2101474355085, -9.86058315888272, 
    1576.44579636873, -95.4771407037924, -3.85914518652442, -3.40435815893159, 
    -95.4771407037924, 99.7583142776648), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0530276306837468, -0.233807565210517
    ), logphi = c(0.497174753361758, -1.54319317635621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_123 = structure(list(
    par = c(-0.175531333055264, 0.118877406512161, 0.493517977000658, 
    -1.68941131140982), value = 26.6616796606361, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.0686928904199, -3.82926358089009, 
    105.26481775841, -4.92193718848455, -3.82926358089009, 19.5859517218011, 
    -7.86978219480261, -5.77757007569346, 105.26481775841, -7.86978219480261, 
    2335.08204561961, -148.985361647203, -4.92193718848455, -5.77757007569346, 
    -148.985361647203, 131.484942139437), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175531333055264, 0.118877406512161
    ), logphi = c(0.493517977000658, -1.68941131140982)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_124 = structure(list(
    par = c(-0.204518748728804, 0.23303218523495, 0.520752685517357, 
    -1.58155666585585), value = 28.028926042753, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.4687354801657, -2.21856194304593, 
    92.2927423490094, -6.71309069044668, -2.21856194304593, 22.6775693121795, 
    -9.97464250129809, -5.76955662801026, 92.2927423490094, -9.97464250129809, 
    1655.57330846244, -148.07705055464, -6.71309069044668, -5.76955662801026, 
    -148.07705055464, 108.878890137554), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204518748728804, 0.23303218523495
    ), logphi = c(0.520752685517357, -1.58155666585585)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_125 = structure(list(
    par = c(-0.637482140982746, -1.16169938581549, 0.478336297189008, 
    -1.96737248266413), value = 16.221232402208, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(12.4573622368729, -2.63590355054077, 
    82.7589509739823, -8.73103045773149, -2.63590355054077, 1.48612199346587, 
    -12.3387587738222, -0.696374275577227, 82.7589509739823, 
    -12.3387587738222, 3582.43528245872, -201.811911504812, -8.73103045773149, 
    -0.696374275577227, -201.811911504812, 142.50182504405), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.637482140982746, -1.16169938581549
    ), logphi = c(0.478336297189008, -1.96737248266413)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_126 = structure(list(
    par = c(-0.377033765134567, -0.256569909076336, 0.472294281145381, 
    -1.64726408195562), value = 27.2153101651894, counts = structure(c(361L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.1003734895272, -2.34428766976436, 
    95.8552042913396, -6.91941956088016, -2.34428766976436, 11.6096739839477, 
    -9.27193842947815, -4.29005023594442, 95.8552042913396, -9.27193842947815, 
    1962.06245659614, -119.646586337563, -6.91941956088016, -4.29005023594442, 
    -119.646586337563, 112.848452325842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377033765134567, -0.256569909076336
    ), logphi = c(0.472294281145381, -1.64726408195562)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_127 = structure(list(
    par = c(-0.303387423549607, 0.356960680736486, 0.483167149135396, 
    -1.72459006891512), value = 4.0473890981588, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.8112684300547, 2.61372113463665, 
    90.8008917361869, -3.86423498310862, 2.61372113463665, 26.7324694540605, 
    1.00339904829383, -6.19781041599765, 90.8008917361869, 1.00339904829383, 
    2000.83279689256, -134.623123700717, -3.86423498310862, -6.19781041599765, 
    -134.623123700717, 108.018267332533), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303387423549607, 0.356960680736486
    ), logphi = c(0.483167149135396, -1.72459006891512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_128 = structure(list(
    par = c(-0.293480273196607, 0.240095990375539, 0.493538193740527, 
    -1.66909227984658), value = 19.2996572635983, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.7351897773844, -0.0100592822960266, 
    123.284213810138, -7.09979160751217, -0.0100592822960266, 
    29.7577458390208, -6.35891525035959, -8.00054343574885, 123.284213810138, 
    -6.35891525035959, 2505.59875677503, -182.988792914784, -7.09979160751217, 
    -8.00054343574885, -182.988792914784, 145.940367950459), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293480273196607, 0.240095990375539
    ), logphi = c(0.493538193740527, -1.66909227984658)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_129 = structure(list(
    par = c(-0.0431635272897962, -0.00765368363814745, 0.493388759110834, 
    -1.69396190818437), value = 43.3595354333349, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.6226700102181, -7.83977395357738, 
    121.377552712687, -4.0433532557671, -7.83977395357738, 19.1020336153258, 
    -10.9298952217785, -5.63905232020545, 121.377552712687, -10.9298952217785, 
    2900.9415711343, -159.699035714667, -4.0433532557671, -5.63905232020545, 
    -159.699035714667, 160.69164396626), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0431635272897962, -0.00765368363814745
    ), logphi = c(0.493388759110834, -1.69396190818437)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_130 = structure(list(
    par = c(-0.40630715424947, -0.0302280581697697, 0.540630789758127, 
    -1.53578517670237), value = 31.9755060155981, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.6434824089122, -2.71377410765439, 
    75.9660274507468, -10.4124735673672, -2.71377410765439, 11.7863823305697, 
    -13.6460136141991, -3.82717795321952, 75.9660274507468, -13.6460136141991, 
    1252.22189612195, -144.229294016363, -10.4124735673672, -3.82717795321952, 
    -144.229294016363, 91.7356321208374), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40630715424947, -0.0302280581697697
    ), logphi = c(0.540630789758127, -1.53578517670237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_131 = structure(list(
    par = c(-0.303008012852962, -0.422345024253627, 0.474844679898604, 
    -1.55018132448569), value = 37.5715493473693, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.8651342787746, -3.01250983980594, 
    74.4673055503853, -5.04321469296798, -3.01250983980594, 6.84450811583304, 
    -7.89504285414466, -2.8998358336807, 74.4673055503853, -7.89504285414466, 
    1344.32972245335, -76.1803489641721, -5.04321469296798, -2.8998358336807, 
    -76.1803489641721, 82.8927117488831), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303008012852962, -0.422345024253627
    ), logphi = c(0.474844679898604, -1.55018132448569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_132 = structure(list(
    par = c(-0.135819790638657, -0.16264715768818, 0.471901826503054, 
    -1.54818834027886), value = 33.3190053700022, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.9215993144585, -3.11817950837678, 
    77.9548601101965, -2.48416920811678, -3.11817950837678, 12.8349530292837, 
    -6.96352154250235, -3.65013421710358, 77.9548601101965, -6.96352154250235, 
    1442.20559114494, -69.5803240038373, -2.48416920811678, -3.65013421710358, 
    -69.5803240038373, 87.7284068145912), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135819790638657, -0.16264715768818
    ), logphi = c(0.471901826503054, -1.54818834027886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_133 = structure(list(
    par = c(-0.597984377380181, 0.0908772721711838, 0.508233512295132, 
    -1.65492658379702), value = 17.7780246084395, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.1472315167881, -0.428260486629028, 
    105.602702996421, -12.6784153273718, -0.428260486629028, 
    19.0044649546195, -13.5960855391914, -6.71324631085213, 105.602702996421, 
    -13.5960855391914, 2006.76467897409, -195.171814590722, -12.6784153273718, 
    -6.71324631085213, -195.171814590722, 126.860080838398), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.597984377380181, 0.0908772721711838
    ), logphi = c(0.508233512295132, -1.65492658379702)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_134 = structure(list(
    par = c(-0.461852871961352, -0.0054916726227083, 0.494331553585133, 
    -1.66153358760273), value = 17.5229058644624, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.3463447453846, -1.15450571502862, 
    87.7458555805788, -8.18619797904319, -1.15450571502862, 14.108076369368, 
    -9.55620214870834, -4.94259669991948, 87.7458555805788, -9.55620214870834, 
    1746.51428564054, -139.910513737185, -8.18619797904319, -4.94259669991948, 
    -139.910513737185, 104.464843682095), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.461852871961352, -0.0054916726227083
    ), logphi = c(0.494331553585133, -1.66153358760273)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_135 = structure(list(
    par = c(-0.204353724914212, 0.281944892628236, 0.486944887998097, 
    -1.68266554955975), value = 16.5591825328577, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.4742711407951, -0.541870495140984, 
    102.883601396542, -3.8028610944707, -0.541870495140984, 25.6106898124386, 
    -2.86950082450943, -6.49666680896388, 102.883601396542, -2.86950082450943, 
    2207.48066534693, -142.859723797351, -3.8028610944707, -6.49666680896388, 
    -142.859723797351, 124.26038151947), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204353724914212, 0.281944892628236
    ), logphi = c(0.486944887998097, -1.68266554955975)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_136 = structure(list(
    par = c(-0.469309252829746, 0.145343145862952, 0.473285483942879, 
    -1.7229674501912), value = 13.5757958557915, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.5152805558938, 0.795106678275204, 
    90.1892082660893, -6.20033667564357, 0.795106678275204, 18.1874036320195, 
    -3.09984269897257, -5.78688081054324, 90.1892082660893, -3.09984269897257, 
    1930.68130991136, -134.05524797161, -6.20033667564357, -5.78688081054324, 
    -134.05524797161, 104.464933613713), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.469309252829746, 0.145343145862952
    ), logphi = c(0.473285483942879, -1.7229674501912)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_137 = structure(list(
    par = c(-0.503102524193455, -0.516306393309581, 0.532473536610683, 
    -1.65309614485008), value = 35.8046440343692, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.3027126054754, -3.64917826800593, 
    85.4758287029966, -12.193793688553, -3.64917826800593, 5.99397985290295, 
    -16.9179570868039, -2.04128884284671, 85.4758287029966, -16.9179570868039, 
    1912.11234806588, -184.248903828177, -12.193793688553, -2.04128884284671, 
    -184.248903828177, 123.098005003541), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.503102524193455, -0.516306393309581
    ), logphi = c(0.532473536610683, -1.65309614485008)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_138 = structure(list(
    par = c(0.144553501494988, 0.337052989062813, 0.492900022808302, 
    -1.59028187998086), value = 37.6601165844629, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.5139663541744, -6.35590464881375, 
    88.3409238880972, 0.970624703278133, -6.35590464881375, 27.7484436033149, 
    -5.35940338508567, -5.09694263151061, 88.3409238880972, -5.35940338508567, 
    1913.90633966115, -102.958837930878, 0.970624703278133, -5.09694263151061, 
    -102.958837930878, 114.928644364909), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.144553501494988, 0.337052989062813
    ), logphi = c(0.492900022808302, -1.59028187998086)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_139 = structure(list(
    par = c(-0.149205462987606, 0.048787156958208, 0.554025016120543, 
    -1.67164761746449), value = 37.9832842359042, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.8504011041846, -7.61031961005187, 
    114.2094818114, -10.8873229152096, -7.61031961005187, 18.6898732366103, 
    -21.4213244724704, -5.01610236991468, 114.2094818114, -21.4213244724704, 
    2480.61158779045, -226.669066003993, -10.8873229152096, -5.01610236991468, 
    -226.669066003993, 154.043977591556), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.149205462987606, 0.048787156958208
    ), logphi = c(0.554025016120543, -1.67164761746449)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_140 = structure(list(
    par = c(-0.211317483933087, -0.119605463260123, 0.48803196751563, 
    -1.59448602658099), value = 33.7699041279392, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.0355406857925, -3.85043705541932, 
    83.9625018151935, -4.8263134768689, -3.85043705541932, 11.5265248723517, 
    -8.665340002878, -4.0256329718602, 83.9625018151935, -8.665340002878, 
    1620.36651894581, -102.66347846688, -4.8263134768689, -4.0256329718602, 
    -102.66347846688, 98.6854694371431), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211317483933087, -0.119605463260123
    ), logphi = c(0.48803196751563, -1.59448602658099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_141 = structure(list(
    par = c(-0.206042652841725, 0.386423160295838, 0.486172006990699, 
    -1.67469444808621), value = 18.2879508168866, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.246368030469, 2.17283691661407, 
    100.625410689226, -3.04935338313328, 2.17283691661407, 31.6657503267592, 
    0.286017123762861, -6.81250792755606, 100.625410689226, 0.286017123762861, 
    2119.27533451561, -140.420586214329, -3.04935338313328, -6.81250792755606, 
    -140.420586214329, 120.109568872984), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206042652841725, 0.386423160295838
    ), logphi = c(0.486172006990699, -1.67469444808621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_142 = structure(list(
    par = c(-0.042039212735634, -0.12719181726836, 0.44904871395559, 
    -1.62208731862371), value = 36.3765296392797, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.3395479926021, -4.27100627042876, 
    81.2262238731876, 0.160116068848026, -4.27100627042876, 13.1233717635126, 
    -4.31594891203702, -3.61109031121742, 81.2262238731876, -4.31594891203702, 
    1799.74744621347, -55.0585992273867, 0.160116068848026, -3.61109031121742, 
    -55.0585992273867, 99.8120224693366), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.042039212735634, -0.12719181726836
    ), logphi = c(0.44904871395559, -1.62208731862371)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_143 = structure(list(
    par = c(-0.540710376438109, -0.449162547964379, 0.500419452657281, 
    -1.68250965114619), value = 40.628927820005, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.3838020432323, -4.60544964653309, 
    115.995482211417, -14.0405553086254, -4.60544964653309, 7.7114635175235, 
    -18.6741316365868, -3.81316558417666, 115.995482211417, -18.6741316365868, 
    2597.71647824003, -211.275598771543, -14.0405553086254, -3.81316558417666, 
    -211.275598771543, 154.757304295927), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.540710376438109, -0.449162547964379
    ), logphi = c(0.500419452657281, -1.68250965114619)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_144 = structure(list(
    par = c(-0.286878743380414, -0.181370748096518, 0.537080172041553, 
    -1.46022728096076), value = 45.3375041730584, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.297784441672, -4.27870311447975, 
    90.4249085049713, -11.1629866950125, -4.27870311447975, 13.3085707236802, 
    -15.2416327061644, -3.62427373445939, 90.4249085049713, -15.2416327061644, 
    1369.875315266, -151.643375179589, -11.1629866950125, -3.62427373445939, 
    -151.643375179589, 102.550067076379), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286878743380414, -0.181370748096518
    ), logphi = c(0.537080172041553, -1.46022728096076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_145 = structure(list(
    par = c(-0.270239630969156, -0.00188516391368299, 0.505766655289181, 
    -1.52083072375817), value = 38.5619818055562, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.6394387937326, -2.56661821751436, 
    88.3940924616411, -7.05007748891262, -2.56661821751436, 16.2090439985718, 
    -10.674803840871, -4.80689955395519, 88.3940924616411, -10.674803840871, 
    1451.77945416997, -120.982267977965, -7.05007748891262, -4.80689955395519, 
    -120.982267977965, 97.3095496217269), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270239630969156, -0.00188516391368299
    ), logphi = c(0.505766655289181, -1.52083072375817)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_146 = structure(list(
    par = c(-0.21914668747363, 0.405513790446153, 0.497393990853665, 
    -1.40069160399793), value = 28.7823472617174, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.3060884827231, 3.52684723914365, 
    76.33723175271, -3.35866593026424, 3.52684723914365, 30.2982055622181, 
    -4.06765802374309, -5.88242217158808, 76.33723175271, -4.06765802374309, 
    1005.72620067574, -86.0555317134803, -3.35866593026424, -5.88242217158808, 
    -86.0555317134803, 70.939327056152), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21914668747363, 0.405513790446153
    ), logphi = c(0.497393990853665, -1.40069160399793)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_147 = structure(list(
    par = c(-0.0589827735357466, -0.223152465621171, 0.4995824258443, 
    -1.65738797010363), value = 48.1835951710905, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.2017311697593, -7.61746750654879, 
    107.139481711371, -5.16640038483729, -7.61746750654879, 12.1020076484513, 
    -12.420071380248, -4.17925243745287, 107.139481711371, -12.420071380248, 
    2454.10830259019, -142.40621196393, -5.16640038483729, -4.17925243745287, 
    -142.40621196393, 142.188922879427), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0589827735357466, -0.223152465621171
    ), logphi = c(0.4995824258443, -1.65738797010363)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_148 = structure(list(
    par = c(-0.107737528431633, -0.525981688183329, 0.482174874292079, 
    -1.74941781647633), value = 32.9097253919357, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.5883864376617, -5.37010632228885, 
    93.3833964200659, -4.59942260544466, -5.37010632228885, 6.61991547801222, 
    -9.39017426127009, -2.66797605608105, 93.3833964200659, -9.39017426127009, 
    2564.59155402311, -120.244714285178, -4.59942260544466, -2.66797605608105, 
    -120.244714285178, 132.443568055862), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.107737528431633, -0.525981688183329
    ), logphi = c(0.482174874292079, -1.74941781647633)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_149 = structure(list(
    par = c(-0.270143615889416, -0.167791096693138, 0.484115492812184, 
    -1.5924697689858), value = 40.1982975903893, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.6292177390385, -3.91789566833722, 
    103.122971530922, -6.61843147220509, -3.91789566833722, 13.7439092480207, 
    -10.6682305442973, -4.87414229244365, 103.122971530922, -10.6682305442973, 
    1959.18358484803, -124.777588042413, -6.61843147220509, -4.87414229244365, 
    -124.777588042413, 119.277994151901), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270143615889416, -0.167791096693138
    ), logphi = c(0.484115492812184, -1.5924697689858)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_150 = structure(list(
    par = c(-0.389082742906526, -0.125027889089361, 0.491929080737663, 
    -1.63261309939714), value = 25.2337551867794, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8629691091179, -2.37374047262762, 
    83.4294216769393, -7.20047652791322, -2.37374047262762, 10.8879487479285, 
    -9.62192472453438, -4.13907995744367, 83.4294216769393, -9.62192472453438, 
    1636.91163534718, -121.838152588261, -7.20047652791322, -4.13907995744367, 
    -121.838152588261, 99.1050482568312), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389082742906526, -0.125027889089361
    ), logphi = c(0.491929080737663, -1.63261309939714)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_151 = structure(list(
    par = c(-0.500992231604049, 0.0990479040354642, 0.566667020615419, 
    -1.41637717164634), value = 38.1784039889833, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.6825513520297, -1.0911863927987, 
    87.9920044365434, -16.0688054027247, -1.0911863927987, 20.0881869893976, 
    -17.543980588286, -4.50179413835627, 87.9920044365434, -17.543980588286, 
    1137.58932317332, -182.679526094631, -16.0688054027247, -4.50179413835627, 
    -182.679526094631, 101.713815427118), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.500992231604049, 0.0990479040354642
    ), logphi = c(0.566667020615419, -1.41637717164634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_152 = structure(list(
    par = c(-0.0659560955779763, 0.0513495453074853, 0.51460735295886, 
    -1.65508692100131), value = 26.0903445332776, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.496123485108, -5.14475278112769, 
    84.1758689320571, -4.40266377843557, -5.14475278112769, 15.00907850982, 
    -9.98733093737769, -4.13468583149168, 84.1758689320571, -9.98733093737769, 
    1835.02346702102, -127.28767715009, -4.40266377843557, -4.13468583149168, 
    -127.28767715009, 109.121682430491), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0659560955779763, 0.0513495453074853
    ), logphi = c(0.51460735295886, -1.65508692100131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_153 = structure(list(
    par = c(-0.264579013267677, 0.048366607614208, 0.559967602801806, 
    -1.52931560748905), value = 37.1669702192098, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.8494724724208, -4.16635011113442, 
    77.0547105162223, -10.0794642712287, -4.16635011113442, 13.455870622181, 
    -14.938051211999, -3.51263214426467, 77.0547105162223, -14.938051211999, 
    1279.15705146719, -156.607224225169, -10.0794642712287, -3.51263214426467, 
    -156.607224225169, 96.1514757484849), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264579013267677, 0.048366607614208
    ), logphi = c(0.559967602801806, -1.52931560748905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_154 = structure(list(
    par = c(-0.281632999174556, -0.0421335315150691, 0.45242783155477, 
    -1.52402139611942), value = 30.7902405086839, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.2226394385136, 0.825260620729296, 
    83.7987419135544, -2.34377638941297, 0.825260620729296, 20.7904892999267, 
    -4.76248410130609, -4.70631880578054, 83.7987419135544, -4.76248410130609, 
    1399.01554725874, -60.3361610487241, -2.34377638941297, -4.70631880578054, 
    -60.3361610487241, 84.0901523453397), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281632999174556, -0.0421335315150691
    ), logphi = c(0.45242783155477, -1.52402139611942)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_155 = structure(list(
    par = c(-0.327958008668726, -0.0638472892589058, 0.489181156671879, 
    -1.46476156262609), value = 45.591600008077, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.1267618274944, -1.21681896914083, 
    85.8398489320678, -6.33128883897882, -1.21681896914083, 16.2521078550526, 
    -9.30665946086151, -4.76002603999603, 85.8398489320678, -9.30665946086151, 
    1268.67504334704, -94.4376787721524, -6.33128883897882, -4.76002603999603, 
    -94.4376787721524, 85.1116133890883), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.327958008668726, -0.0638472892589058
    ), logphi = c(0.489181156671879, -1.46476156262609)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_156 = structure(list(
    par = c(-0.489856995829273, 0.311394000928174, 0.484076612776697, 
    -1.62300494870091), value = 17.9717027029437, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.0383484619767, 4.40365061837866, 
    103.657072378915, -7.56325572659478, 4.40365061837866, 28.1158926327407, 
    -1.53055388096845, -8.10106593229776, 103.657072378915, -1.53055388096845, 
    1833.97812623021, -151.247519658337, -7.56325572659478, -8.10106593229776, 
    -151.247519658337, 112.168219458475), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.489856995829273, 0.311394000928174
    ), logphi = c(0.484076612776697, -1.62300494870091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_157 = structure(list(
    par = c(-0.103155416035128, 0.453616050986105, 0.502793392697956, 
    -1.48988175864822), value = 20.813043135681, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.7082657351625, 2.87769744922173, 
    72.6555887604619, -2.13729474740632, 2.87769744922173, 32.5790799680092, 
    -3.3430031969317, -5.29950271532798, 72.6555887604619, -3.3430031969317, 
    1160.01392806009, -93.8617361434524, -2.13729474740632, -5.29950271532798, 
    -93.8617361434524, 78.0221836951256), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.103155416035128, 0.453616050986105
    ), logphi = c(0.502793392697956, -1.48988175864822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_158 = structure(list(
    par = c(-0.352969673627978, -0.0801085518396722, 0.44173554567855, 
    -1.73024232920869), value = 17.9873496487394, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.1972017419801, -1.14824813746139, 
    111.382877507893, -4.26807106634897, -1.14824813746139, 15.9142139004587, 
    -2.52251601029485, -5.53469031627785, 111.382877507893, -2.52251601029485, 
    2579.84006731427, -119.486108337785, -4.26807106634897, -5.53469031627785, 
    -119.486108337785, 129.509143501849), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.352969673627978, -0.0801085518396722
    ), logphi = c(0.44173554567855, -1.73024232920869)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_159 = structure(list(
    par = c(-0.233796772535542, 0.149631994046571, 0.464224562696305, 
    -1.75603687621687), value = 14.7514220646799, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.4268698122293, -1.27560433949014, 
    89.2717331142379, -2.648519215942, -1.27560433949014, 17.7290738978542, 
    -0.779713887233413, -4.89628610544912, 89.2717331142379, 
    -0.779713887233413, 2188.66404909424, -114.06646943346, -2.648519215942, 
    -4.89628610544912, -114.06646943346, 110.025240960709), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233796772535542, 0.149631994046571
    ), logphi = c(0.464224562696305, -1.75603687621687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_160 = structure(list(
    par = c(-0.416132765565342, -0.436234630366759, 0.487980771599883, 
    -1.61847436369204), value = 43.743333205346, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.6906638523639, -3.83804448844671, 
    97.3773335246619, -9.36397549544665, -3.83804448844671, 7.44886309078652, 
    -12.4158923284767, -3.56130419731926, 97.3773335246619, -12.4158923284767, 
    1946.88247745134, -137.748532100801, -9.36397549544665, -3.56130419731926, 
    -137.748532100801, 118.39063373742), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416132765565342, -0.436234630366759
    ), logphi = c(0.487980771599883, -1.61847436369204)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_161 = structure(list(
    par = c(-0.77366121033938, 0.195253893778892, 0.545160901801475, 
    -1.69670111206583), value = 12.7819017371546, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(21.9342703076109, -1.00948848391624, 
    94.8537252760673, -15.6932300674484, -1.00948848391624, 17.7805209649051, 
    -21.5750557632788, -5.88153801039937, 94.8537252760673, -21.5750557632788, 
    1931.95828834902, -237.368654886438, -15.6932300674484, -5.88153801039937, 
    -237.368654886438, 129.336298705596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.77366121033938, 0.195253893778892
    ), logphi = c(0.545160901801475, -1.69670111206583)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_162 = structure(list(
    par = c(-0.0973422145859199, -0.146176536564103, 0.473756603994059, 
    -1.8507735987805), value = 13.5923926106592, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.1487143148619, -4.49351591313984, 
    73.017616449178, -2.31817494622533, -4.49351591313984, 7.83756867583918, 
    -4.73158055225298, -2.75160121043783, 73.017616449178, -4.73158055225298, 
    2265.03991702076, -98.2458935432362, -2.31817494622533, -2.75160121043783, 
    -98.2458935432362, 101.491833644385), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0973422145859199, -0.146176536564103
    ), logphi = c(0.473756603994059, -1.8507735987805)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_163 = structure(list(
    par = c(-0.174882647455073, 0.034964156810063, 0.533174065984446, 
    -1.6319296674499), value = 32.075193408201, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.5754638195502, -5.41354145333628, 
    98.7605751952003, -8.42747468965399, -5.41354145333628, 16.8001176099608, 
    -15.1872575369083, -4.77329997039533, 98.7605751952003, -15.1872575369083, 
    1997.1573222648, -173.686715937649, -8.42747468965399, -4.77329997039533, 
    -173.686715937649, 126.597761283875), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174882647455073, 0.034964156810063
    ), logphi = c(0.533174065984446, -1.6319296674499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_164 = structure(list(
    par = c(-0.202194508220384, -0.209378371370421, 0.488512792125539, 
    -1.53595731783042), value = 37.5857908714202, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.4307205837663, -3.47689338475732, 
    83.3939020434826, -4.96912265646188, -3.47689338475732, 12.3608266395792, 
    -9.32417266774621, -3.75816026831899, 83.3939020434826, -9.32417266774621, 
    1476.43081258053, -93.3661674036301, -4.96912265646188, -3.75816026831899, 
    -93.3661674036301, 93.6184466802104), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202194508220384, -0.209378371370421
    ), logphi = c(0.488512792125539, -1.53595731783042)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_165 = structure(list(
    par = c(-0.337439543848413, 0.361102048771106, 0.447579933525059, 
    -1.60352606905555), value = 14.4169013433959, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.6480794267314, 8.30069773893882, 
    94.5248036323676, -1.1391046692566, 8.30069773893882, 35.8537940803316, 
    5.58107031700672, -6.65772787655783, 94.5248036323676, 5.58107031700672, 
    1744.07540245269, -89.5367295887795, -1.1391046692566, -6.65772787655783, 
    -89.5367295887795, 98.452310904662), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337439543848413, 0.361102048771106
    ), logphi = c(0.447579933525059, -1.60352606905555)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_166 = structure(list(
    par = c(0.00441816871539572, 0.0648088074047897, 0.517208710748944, 
    -1.41276596756988), value = 47.4374708450938, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3237891604205, -5.06225177154818, 
    74.2572687819631, -3.73838926392978, -5.06225177154818, 18.941728676225, 
    -10.0670953866455, -3.82376837393394, 74.2572687819631, -10.0670953866455, 
    1103.09957199206, -92.0221307394442, -3.73838926392978, -3.82376837393394, 
    -92.0221307394442, 78.2284597029559), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00441816871539572, 0.0648088074047897
    ), logphi = c(0.517208710748944, -1.41276596756988)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_167 = structure(list(
    par = c(-0.122934018295246, 0.149168795949929, 0.492834401529141, 
    -1.5546085710995), value = 28.7068872709614, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.2359896029527, -2.49014007280834, 
    71.7575414279636, -2.72055410022176, -2.49014007280834, 16.107273724586, 
    -5.94799374376009, -4.20790797939219, 71.7575414279636, -5.94799374376009, 
    1297.41885784185, -86.2818175253466, -2.72055410022176, -4.20790797939219, 
    -86.2818175253466, 81.6695512089183), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122934018295246, 0.149168795949929
    ), logphi = c(0.492834401529141, -1.5546085710995)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_168 = structure(list(
    par = c(-0.360005761600299, -0.245944518038382, 0.501849227161352, 
    -1.49309021312107), value = 47.7765194235473, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.4029149400363, -2.87440443536013, 
    96.5601340645605, -9.46968595361142, -2.87440443536013, 13.2796175087435, 
    -12.9688088783553, -4.31524116706328, 96.5601340645605, -12.9688088783553, 
    1527.12020641665, -127.343036689709, -9.46968595361142, -4.31524116706328, 
    -127.343036689709, 103.81013599492), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360005761600299, -0.245944518038382
    ), logphi = c(0.501849227161352, -1.49309021312107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_169 = structure(list(
    par = c(-0.326195133822465, -0.263072663864438, 0.504718329811199, 
    -1.84780104685824), value = 19.3944051205488, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.0594427966842, -5.27620786439087, 
    107.76056414219, -8.83696415465707, -5.27620786439087, 10.176165948117, 
    -16.1959149442836, -3.65466873564202, 107.76056414219, -16.1959149442836, 
    3210.94642827191, -196.489867680505, -8.83696415465707, -3.65466873564202, 
    -196.489867680505, 151.969748993785), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326195133822465, -0.263072663864438
    ), logphi = c(0.504718329811199, -1.84780104685824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_170 = structure(list(
    par = c(-0.342356989581624, 0.229976026265113, 0.499723086564007, 
    -1.71485097356695), value = 20.2947989609927, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9252185688279, -1.03469410550616, 
    116.313718452332, -8.01670463301818, -1.03469410550616, 24.5620384671241, 
    -7.43999478025614, -7.45662003476255, 116.313718452332, -7.43999478025614, 
    2506.12916975257, -189.604011647138, -8.01670463301818, -7.45662003476255, 
    -189.604011647138, 141.158037402001), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342356989581624, 0.229976026265113
    ), logphi = c(0.499723086564007, -1.71485097356695)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_171 = structure(list(
    par = c(-0.278547926610365, -0.161490683401551, 0.499067168020513, 
    -1.54318412454723), value = 45.9366948856376, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.4692106800204, -4.34665768977993, 
    103.21991973683, -8.17635115968329, -4.34665768977993, 13.9036436355156, 
    -12.8428147654347, -4.8627269446655, 103.21991973683, -12.8428147654347, 
    1797.66134489689, -135.903537894499, -8.17635115968329, -4.8627269446655, 
    -135.903537894499, 116.755927420442), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278547926610365, -0.161490683401551
    ), logphi = c(0.499067168020513, -1.54318412454723)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_172 = structure(list(
    par = c(-0.445039511764892, -0.282469812019977, 0.507094595033695, 
    -1.61669981698613), value = 37.5152736031471, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.0231085336454, -3.46192638467357, 
    97.1308933621629, -10.9263327807696, -3.46192638467357, 10.14461219917, 
    -14.7731784068128, -3.93764271322539, 97.1308933621629, -14.7731784068128, 
    1899.93174614145, -161.919508856911, -10.9263327807696, -3.93764271322539, 
    -161.919508856911, 120.58829232231), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.445039511764892, -0.282469812019977
    ), logphi = c(0.507094595033695, -1.61669981698613)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_173 = structure(list(
    par = c(-0.0814665588208774, 0.384874006112387, 0.500130769285912, 
    -1.552666400687), value = 29.4511138289712, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.3327345657666, 1.51798724434826, 
    104.806315047057, -2.80800357899125, 1.51798724434826, 40.7911964517282, 
    -5.30326573855433, -7.08988770625751, 104.806315047057, -5.30326573855433, 
    1882.99976026318, -138.009027652153, -2.80800357899125, -7.08988770625751, 
    -138.009027652153, 120.246872016061), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0814665588208774, 0.384874006112387
    ), logphi = c(0.500130769285912, -1.552666400687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_174 = structure(list(
    par = c(-0.376511331186811, -0.155983020521539, 0.480929265191838, 
    -1.59169835846945), value = 38.0579387213672, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.0049667512973, -2.17600275220775, 
    93.1415225728927, -7.10125366332193, -2.17600275220775, 13.3165131046553, 
    -9.50020357670667, -4.66701509527212, 93.1415225728927, -9.50020357670667, 
    1711.79479494832, -116.420262585848, -7.10125366332193, -4.66701509527212, 
    -116.420262585848, 104.70469913848), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376511331186811, -0.155983020521539
    ), logphi = c(0.480929265191838, -1.59169835846945)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_175 = structure(list(
    par = c(0.193908051946549, -0.215441287751387, 0.471896523913457, 
    -1.62607651534804), value = 54.3432540965242, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.602432733006, -9.26724938032919, 
    89.2752371051131, 1.16515402304174, -9.26724938032919, 13.4642751064007, 
    -7.64654676643772, -3.39351698208645, 89.2752371051131, -7.64654676643772, 
    2245.01176973391, -70.3853752899164, 1.16515402304174, -3.39351698208645, 
    -70.3853752899164, 127.415648703888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.193908051946549, -0.215441287751387
    ), logphi = c(0.471896523913457, -1.62607651534804)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_176 = structure(list(
    par = c(0.0724584436558566, 0.10451453491408, 0.51005670741157, 
    -1.68474028601414), value = 36.6413104752939, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.0331439486624, -8.39065733337918, 
    100.215457573327, -2.59412821623783, -8.39065733337918, 19.2698552190507, 
    -10.2415219096486, -4.83113466476226, 100.215457573327, -10.2415219096486, 
    2422.63119767294, -141.922621647694, -2.59412821623783, -4.83113466476226, 
    -141.922621647694, 137.15684183957), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0724584436558566, 0.10451453491408
    ), logphi = c(0.51005670741157, -1.68474028601414)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_177 = structure(list(
    par = c(-0.353132739092188, -0.0858481324727223, 0.54536871636176, 
    -1.61378815674412), value = 33.2941866441128, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.6590126984358, -3.91870977978215, 
    77.8514205084235, -9.84196433684303, -3.91870977978215, 10.3059541451955, 
    -15.1688332010735, -3.22827546028748, 77.8514205084235, -15.1688332010735, 
    1511.5226463962, -158.036278226525, -9.84196433684303, -3.22827546028748, 
    -158.036278226525, 102.178969768829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353132739092188, -0.0858481324727223
    ), logphi = c(0.54536871636176, -1.61378815674412)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_178 = structure(list(
    par = c(-0.287224928838619, 0.693591467644681, 0.521416722932432, 
    -1.64283721711078), value = 9.94371683079078, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.2461990071221, 9.16745187939938, 
    107.976323267422, -5.79124638022677, 9.16745187939938, 47.4846065987578, 
    5.67302614751242, -9.61458169701501, 107.976323267422, 5.67302614751242, 
    2003.97339995906, -194.661749977065, -5.79124638022677, -9.61458169701501, 
    -194.661749977065, 126.971438207057), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287224928838619, 0.693591467644681
    ), logphi = c(0.521416722932432, -1.64283721711078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_179 = structure(list(
    par = c(-0.304448336852663, 0.310843625999783, 0.573848271808117, 
    -1.43933211462153), value = 42.8168507734687, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.2464081320537, -1.15145795476224, 
    94.4122349011423, -14.1904297983331, -1.15145795476224, 29.0159675788715, 
    -16.7463890736741, -5.72654691044505, 94.4122349011423, -16.7463890736741, 
    1268.4376253258, -196.822151867337, -14.1904297983331, -5.72654691044505, 
    -196.822151867337, 110.510737977521), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304448336852663, 0.310843625999783
    ), logphi = c(0.573848271808117, -1.43933211462153)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_180 = structure(list(
    par = c(-0.35516780413728, -0.0270827334034561, 0.508389389436751, 
    -1.56672653307494), value = 38.0471196984135, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.6584434455273, -2.2059531712415, 
    97.6309251985441, -9.23020393095442, -2.2059531712415, 16.9209956890626, 
    -12.5856775063937, -5.22728972285336, 97.6309251985441, -12.5856775063937, 
    1703.25405434291, -148.667244450174, -9.23020393095442, -5.22728972285336, 
    -148.667244450174, 112.184542778948), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35516780413728, -0.0270827334034561
    ), logphi = c(0.508389389436751, -1.56672653307494)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_181 = structure(list(
    par = c(-0.519059798460646, 0.11819407832471, 0.513542559957795, 
    -1.5919222832432), value = 21.7073161150667, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.7145216905461, -0.700113249152423, 
    106.649017524774, -12.3652045171951, -0.700113249152423, 
    19.902585261633, -13.310090196228, -6.90701016736739, 106.649017524774, 
    -13.310090196228, 1834.72842242693, -185.491242156388, -12.3652045171951, 
    -6.90701016736739, -185.491242156388, 123.068902398771), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.519059798460646, 0.11819407832471
    ), logphi = c(0.513542559957795, -1.5919222832432)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_182 = structure(list(
    par = c(-0.160837995457083, -0.0952701491648348, 0.492684104410154, 
    -1.46949063157901), value = 48.2972510310641, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.1169300908514, -4.29987943384447, 
    86.0881675901481, -4.60574637006772, -4.29987943384447, 14.3305731654664, 
    -9.79555983882108, -4.30320673583395, 86.0881675901481, -9.79555983882108, 
    1358.79116084681, -90.8474625713751, -4.60574637006772, -4.30320673583395, 
    -90.8474625713751, 90.0354651722779), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.160837995457083, -0.0952701491648348
    ), logphi = c(0.492684104410154, -1.46949063157901)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_183 = structure(list(
    par = c(-0.54438489770657, -0.567166743599663, 0.523802214297085, 
    -1.65812997086657), value = 35.8955748864961, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(22.0273309157193, -3.92024997353246, 
    90.1899255527638, -12.833193402173, -3.92024997353246, 5.14991134892284, 
    -17.1296089224171, -2.14102407447569, 90.1899255527638, -17.1296089224171, 
    2033.90413589766, -190.141714568881, -12.833193402173, -2.14102407447569, 
    -190.141714568881, 129.191231005521), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.54438489770657, -0.567166743599663
    ), logphi = c(0.523802214297085, -1.65812997086657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_184 = structure(list(
    par = c(-0.15902807861143, 0.00579673785291889, 0.49642020877903, 
    -1.73154446930072), value = 23.9395429110916, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.2520470409986, -4.62581612836743, 
    100.060368307453, -5.09284264094134, -4.62581612836743, 15.690499890475, 
    -9.3726428298524, -4.80656752754882, 100.060368307453, -9.3726428298524, 
    2424.04711402777, -146.852891935723, -5.09284264094134, -4.80656752754882, 
    -146.852891935723, 130.570172339084), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.15902807861143, 0.00579673785291889
    ), logphi = c(0.49642020877903, -1.73154446930072)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_185 = structure(list(
    par = c(-0.465777759684259, -0.142732480561671, 0.471379550223382, 
    -1.42558912666418), value = 37.9085646273148, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.0976366858051, 0.497058836756992, 
    80.5670983972107, -6.18491092030382, 0.497058836756992, 14.4880127734837, 
    -7.89490722041819, -4.60750565522972, 80.5670983972107, -7.89490722041819, 
    1078.32458104973, -71.032400953186, -6.18491092030382, -4.60750565522972, 
    -71.032400953186, 71.5553854213624), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.465777759684259, -0.142732480561671
    ), logphi = c(0.471379550223382, -1.42558912666418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_186 = structure(list(
    par = c(-0.0671627716455193, -0.0509978055590433, 0.483836663918486, 
    -1.71337135105428), value = 34.6774908203056, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4277108482352, -6.91715793266212, 
    118.736431796052, -3.66498043558039, -6.91715793266212, 18.0910181413196, 
    -9.43101575856531, -5.3361340004443, 118.736431796052, -9.43101575856531, 
    2931.30685719412, -149.097073864901, -3.66498043558039, -5.3361340004443, 
    -149.097073864901, 157.346882449616), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0671627716455193, -0.0509978055590433
    ), logphi = c(0.483836663918486, -1.71337135105428)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_187 = structure(list(
    par = c(-0.610794335657829, -0.097392704550645, 0.513079950935835, 
    -1.66280003570818), value = 27.4977260449451, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.6323410474409, -2.65110774932964, 
    105.15278898815, -13.9129054383957, -2.65110774932964, 13.0256388946037, 
    -17.9968481859305, -5.20893961386548, 105.15278898815, -17.9968481859305, 
    2119.69380000454, -206.119123162374, -13.9129054383957, -5.20893961386548, 
    -206.119123162374, 133.946437911092), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.610794335657829, -0.097392704550645
    ), logphi = c(0.513079950935835, -1.66280003570818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_188 = structure(list(
    par = c(-0.514065805404893, 0.135807766330439, 0.501589075372628, 
    -1.64465076200094), value = 20.9481560575295, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.1178808017115, -0.233632594159872, 
    105.868837966483, -10.7188061049257, -0.233632594159872, 
    20.3843301100903, -10.4699275471631, -6.98864681059064, 105.868837966483, 
    -10.4699275471631, 1980.70443971687, -178.410751210833, -10.7188061049257, 
    -6.98864681059064, -178.410751210833, 123.317215010132), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.514065805404893, 0.135807766330439
    ), logphi = c(0.501589075372628, -1.64465076200094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_189 = structure(list(
    par = c(-0.251543594181621, 0.0630590262782103, 0.486069634365009, 
    -1.66887709716566), value = 28.3494356304245, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.7970002676828, -2.53296548002879, 
    97.1970553118595, -5.24064268292435, -2.53296548002879, 17.5899694694337, 
    -7.24652700423434, -5.36821621466288, 97.1970553118595, -7.24652700423434, 
    2049.74639961542, -132.151219743193, -5.24064268292435, -5.36821621466288, 
    -132.151219743193, 117.044556712464), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251543594181621, 0.0630590262782103
    ), logphi = c(0.486069634365009, -1.66887709716566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_190 = structure(list(
    par = c(-0.610463580365791, 0.00848688540390403, 0.51334060233713, 
    -1.63439291031512), value = 25.3635418233495, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(29.6187297372796, -0.98745881516038, 
    99.5395327976212, -13.005946067679, -0.98745881516038, 16.4395315280785, 
    -15.3137318399388, -5.73537532844171, 99.5395327976212, -15.3137318399388, 
    1861.39539595764, -188.638328651791, -13.005946067679, -5.73537532844171, 
    -188.638328651791, 121.423789401831), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.610463580365791, 0.00848688540390403
    ), logphi = c(0.51334060233713, -1.63439291031512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_191 = structure(list(
    par = c(-0.703763405690629, 0.210736158008136, 0.559562408633821, 
    -1.5749448900326), value = 21.319338266227, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.7035719459539, 0.53749007378201, 
    98.0277135020913, -17.876830042951, 0.53749007378201, 24.1176923143627, 
    -21.2390110991834, -6.16329992109144, 98.0277135020913, -21.2390110991834, 
    1612.75251519122, -235.295848783679, -17.876830042951, -6.16329992109144, 
    -235.295848783679, 127.550362160278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.703763405690629, 0.210736158008136
    ), logphi = c(0.559562408633821, -1.5749448900326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_192 = structure(list(
    par = c(0.0771580115102635, 0.351823753561431, 0.487604476162497, 
    -1.41278917845087), value = 39.5806266361835, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.3221717221628, -1.6169540248967, 
    69.9784730766595, 0.654818660628109, -1.6169540248967, 30.4500771601823, 
    -5.540120112002, -4.52295394381963, 69.9784730766595, -5.540120112002, 
    1084.5700777864, -62.0098426828974, 0.654818660628109, -4.52295394381963, 
    -62.0098426828974, 71.9854629203098), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0771580115102635, 0.351823753561431
    ), logphi = c(0.487604476162497, -1.41278917845087)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_193 = structure(list(
    par = c(-0.306859065418419, -0.145942366317781, 0.451791765104902, 
    -1.65386796304506), value = 29.5835732898042, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.0513710279735, -2.38650442785371, 
    98.1056031159611, -4.0018983797907, -2.38650442785371, 12.8260008418479, 
    -5.3385227927194, -4.77671785326095, 98.1056031159611, -5.3385227927194, 
    2043.0432907963, -95.8541520592604, -4.0018983797907, -4.77671785326095, 
    -95.8541520592604, 111.986333385161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306859065418419, -0.145942366317781
    ), logphi = c(0.451791765104902, -1.65386796304506)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_194 = structure(list(
    par = c(-0.317230563318402, 0.46166251298464, 0.516366097433882, 
    -1.57927854394509), value = 20.0466569651836, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.3934982391193, 2.84292451624424, 
    92.2979069741814, -6.65142862743551, 2.84292451624424, 29.2286182634882, 
    -3.59532410865171, -7.41688154271003, 92.2979069741814, -3.59532410865171, 
    1557.66139240665, -152.272631474215, -6.65142862743551, -7.41688154271003, 
    -152.272631474215, 104.07197210327), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317230563318402, 0.46166251298464
    ), logphi = c(0.516366097433882, -1.57927854394509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_195 = structure(list(
    par = c(-0.627829076362184, -0.334633278429306, 0.496607539450666, 
    -1.70340659865934), value = 32.0507340676339, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(28.4377361143839, -3.44970805521427, 
    114.847873744495, -14.4864122217925, -3.44970805521427, 9.82860300346999, 
    -19.0087771265723, -4.40936396284286, 114.847873744495, -19.0087771265723, 
    2582.59886518886, -218.236424387008, -14.4864122217925, -4.40936396284286, 
    -218.236424387008, 151.580852049804), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.627829076362184, -0.334633278429306
    ), logphi = c(0.496607539450666, -1.70340659865934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_196 = structure(list(
    par = c(-0.351906496477708, -0.63004231968033, 0.515848966284992, 
    -1.58918844597562), value = 53.5319062195461, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.0066018207352, -5.00275456438715, 
    104.839603647378, -12.0791427447031, -5.00275456438715, 6.14175419499929, 
    -15.5960191996485, -2.66297227646817, 104.839603647378, -15.5960191996485, 
    2114.00589581601, -175.528296041172, -12.0791427447031, -2.66297227646817, 
    -175.528296041172, 137.095991554759), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351906496477708, -0.63004231968033
    ), logphi = c(0.515848966284992, -1.58918844597562)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_197 = structure(list(
    par = c(-0.437919986936253, 0.496851603079171, 0.501310490915884, 
    -1.70724551449604), value = 6.40319320155332, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.6051471961463, 5.78705716325345, 
    112.580223820657, -7.58782572685135, 5.78705716325345, 35.1539262926082, 
    2.94131153033561, -9.37064412287469, 112.580223820657, 2.94131153033561, 
    2256.84939145854, -194.318104446367, -7.58782572685135, -9.37064412287469, 
    -194.318104446367, 130.499299942244), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.437919986936253, 0.496851603079171
    ), logphi = c(0.501310490915884, -1.70724551449604)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_198 = structure(list(
    par = c(-0.289763372366239, -0.0907177523247592, 0.457629564694051, 
    -1.65294698209184), value = 40.0460836757613, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.8556318131449, -2.79106563461085, 
    115.312342575891, -4.75423545687192, -2.79106563461085, 16.5480323559564, 
    -6.38930450769237, -5.82654872971489, 115.312342575891, -6.38930450769237, 
    2395.86670613612, -119.460681061057, -4.75423545687192, -5.82654872971489, 
    -119.460681061057, 132.670161113069), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289763372366239, -0.0907177523247592
    ), logphi = c(0.457629564694051, -1.65294698209184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_199 = structure(list(
    par = c(-0.354195487872482, 0.148408336048875, 0.526269421011011, 
    -1.58698323845425), value = 26.0920352799961, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4998595462064, -1.86361504450616, 
    92.8404553217632, -9.58325592481657, -1.86361504450616, 19.0884544499781, 
    -12.5450800467775, -5.61864536852141, 92.8404553217632, -12.5450800467775, 
    1632.91234404461, -163.157868735553, -9.58325592481657, -5.61864536852141, 
    -163.157868735553, 110.198607868206), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.354195487872482, 0.148408336048875
    ), logphi = c(0.526269421011011, -1.58698323845425)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_90_200 = structure(list(
    par = c(-0.448820401504081, 0.264469577026775, 0.47177257661253, 
    -1.70070599041512), value = 11.5909084585443, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.9303023861702, 2.72186380900763, 
    115.400192162163, -6.72628608588965, 2.72186380900763, 26.1127623835122, 
    0.337046781595518, -8.13002164923304, 115.400192162163, 0.337046781595518, 
    2363.80240734668, -164.980032443918, -6.72628608588965, -8.13002164923304, 
    -164.980032443918, 130.251466235798), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.448820401504081, 0.264469577026775
    ), logphi = c(0.47177257661253, -1.70070599041512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_1 = structure(list(
    par = c(-0.385088804634561, -0.0111965287213097, 0.450417369472818, 
    -1.55235823126706), value = 34.3597707639282, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.2111648224904, 1.04913607756885, 
    116.4923884307, -4.76812948946304, 1.04913607756885, 22.3951585098803, 
    -5.20044680030196, -6.94538314682802, 116.4923884307, -5.20044680030196, 
    1963.17619145958, -96.4461988104404, -4.76812948946304, -6.94538314682802, 
    -96.4461988104404, 116.148173741948), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385088804634561, -0.0111965287213097
    ), logphi = c(0.450417369472818, -1.55235823126706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_2 = structure(list(
    par = c(-0.149792238656341, -0.02894495248091, 0.494426788023514, 
    -1.6403654897913), value = 43.4182118501506, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.7807358654542, -6.07867155011377, 
    121.334752387625, -6.140358568274, -6.07867155011377, 18.9673675663471, 
    -12.1083650519438, -5.96153895671137, 121.334752387625, -12.1083650519438, 
    2550.6936141344, -161.252203623619, -6.140358568274, -5.96153895671137, 
    -161.252203623619, 150.40084786655), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.149792238656341, -0.02894495248091
    ), logphi = c(0.494426788023514, -1.6403654897913)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_3 = structure(list(
    par = c(0.118694972790238, 0.186512820468492, 0.512217443241357, 
    -1.50881699753791), value = 45.0328528826918, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.8790376710714, -7.12563929994303, 
    89.2058795241013, -1.81288725364936, -7.12563929994303, 25.6575737846987, 
    -10.4229874455797, -4.83153158192806, 89.2058795241013, -10.4229874455797, 
    1634.38577822816, -113.668905345143, -1.81288725364936, -4.83153158192806, 
    -113.668905345143, 107.545164881984), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.118694972790238, 0.186512820468492
    ), logphi = c(0.512217443241357, -1.50881699753791)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_4 = structure(list(
    par = c(-0.231489832531931, 0.0648516340914881, 0.519710210099891, 
    -1.59525574376803), value = 50.6520309141751, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.3020330982009, -5.10549751808753, 
    142.722285181307, -11.765704182487, -5.10549751808753, 28.249431624161, 
    -18.771717366306, -7.6757313038911, 142.722285181307, -18.771717366306, 
    2661.22590191742, -230.150659802142, -11.765704182487, -7.6757313038911, 
    -230.150659802142, 172.411309797837), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231489832531931, 0.0648516340914881
    ), logphi = c(0.519710210099891, -1.59525574376803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_5 = structure(list(
    par = c(-0.327507334770466, 0.030489551617253, 0.512692379356261, 
    -1.45642401228272), value = 57.7726974583371, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.7307205541707, -2.28860307593948, 
    104.135969966279, -9.99829548842257, -2.28860307593948, 20.59443498581, 
    -13.4105865097212, -5.96917945028252, 104.135969966279, -13.4105865097212, 
    1498.65809045124, -144.355972974353, -9.99829548842257, -5.96917945028252, 
    -144.355972974353, 107.198106045203), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.327507334770466, 0.030489551617253
    ), logphi = c(0.512692379356261, -1.45642401228272)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_6 = structure(list(
    par = c(-0.313360776949078, -0.169372864914019, 0.508756140891655, 
    -1.51907030117921), value = 43.2418491338121, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.220354723175, -3.67400575029819, 
    95.1616166720015, -9.05534180617451, -3.67400575029819, 13.3193326643521, 
    -13.1095814701609, -4.39575536503867, 95.1616166720015, -13.1095814701609, 
    1577.93388272331, -135.316210245762, -9.05534180617451, -4.39575536503867, 
    -135.316210245762, 106.712556439348), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313360776949078, -0.169372864914019
    ), logphi = c(0.508756140891655, -1.51907030117921)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_7 = structure(list(
    par = c(-0.459167371183451, -0.0285125612090618, 0.548760643955719, 
    -1.69083252588362), value = 41.2928411727141, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.4589361918632, -6.6333897645876, 
    141.342269300182, -18.9963222076983, -6.6333897645876, 18.4931928686183, 
    -31.3931128239631, -5.96525112772639, 141.342269300182, -31.3931128239631, 
    3084.82876530469, -317.378335393137, -18.9963222076983, -5.96525112772639, 
    -317.378335393137, 195.14837021184), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.459167371183451, -0.0285125612090618
    ), logphi = c(0.548760643955719, -1.69083252588362)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_8 = structure(list(
    par = c(-0.410442862677347, -0.222800058251751, 0.45912542809504, 
    -1.70276396191901), value = 38.658495200412, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.6856676350224, -3.75355194748295, 
    136.470123390353, -8.89995626440765, -3.75355194748295, 13.8564753822124, 
    -10.1624769630604, -6.27648814788273, 136.470123390353, -10.1624769630604, 
    3018.15956976093, -169.348468100239, -8.89995626440765, -6.27648814788273, 
    -169.348468100239, 161.532654594509), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.410442862677347, -0.222800058251751
    ), logphi = c(0.45912542809504, -1.70276396191901)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_9 = structure(list(
    par = c(-0.190054277919733, 0.200947962671494, 0.491512781324144, 
    -1.65862402571697), value = 36.3366780072457, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.9252539398666, -2.91390169415706, 
    153.762690791481, -6.6800536853151, -2.91390169415706, 34.5809837547506, 
    -9.00615319032738, -9.23176157918704, 153.762690791481, -9.00615319032738, 
    3202.62525262294, -212.116880432767, -6.6800536853151, -9.23176157918704, 
    -212.116880432767, 185.753830693969), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190054277919733, 0.200947962671494
    ), logphi = c(0.491512781324144, -1.65862402571697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_10 = structure(list(
    par = c(-0.316447646262445, -0.042285716588043, 0.492275422515032, 
    -1.62833583518779), value = 43.6429410518062, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.3190904322729, -4.48594736290886, 
    147.177297764145, -10.7896711938338, -4.48594736290886, 22.4272021291938, 
    -15.2356829357103, -7.71951457068099, 147.177297764145, -15.2356829357103, 
    2882.50217422892, -206.57765325538, -10.7896711938338, -7.71951457068099, 
    -206.57765325538, 173.978764264504), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316447646262445, -0.042285716588043
    ), logphi = c(0.492275422515032, -1.62833583518779)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_11 = structure(list(
    par = c(-0.314410380585899, 0.0832423037979997, 0.494878162444822, 
    -1.69597328656947), value = 33.9803529933681, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.4060939040253, -3.73891887761602, 
    135.602531264212, -9.31137350512756, -3.73891887761602, 22.8125164891679, 
    -11.766353267717, -7.66002106278307, 135.602531264212, -11.766353267717, 
    2919.99696467826, -207.939571942539, -9.31137350512756, -7.66002106278307, 
    -207.939571942539, 165.974497402743), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314410380585899, 0.0832423037979997
    ), logphi = c(0.494878162444822, -1.69597328656947)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_12 = structure(list(
    par = c(-0.199715193917965, 0.325697977602808, 0.531102500838763, 
    -1.65024774670347), value = 25.1622315927354, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.788579462247, -2.65301008983698, 
    113.035011301221, -8.3187648156624, -2.65301008983698, 28.2194531333602, 
    -11.8114724019236, -7.33225816462735, 113.035011301221, -11.8114724019236, 
    2233.71125490335, -200.786642225559, -8.3187648156624, -7.33225816462735, 
    -200.786642225559, 139.854072397583), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199715193917965, 0.325697977602808
    ), logphi = c(0.531102500838763, -1.65024774670347)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_13 = structure(list(
    par = c(-0.493271883976625, 0.114514552578936, 0.499613505009062, 
    -1.60543128237847), value = 33.4021692353582, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.4790010553127, -0.0121944339070978, 
    131.520570819887, -13.0140239740228, -0.0121944339070978, 
    25.5122748917813, -12.9350940589745, -8.62403626555874, 131.520570819887, 
    -12.9350940589745, 2319.26408172001, -208.455403609697, -13.0140239740228, 
    -8.62403626555874, -208.455403609697, 148.556934357558), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.493271883976625, 0.114514552578936
    ), logphi = c(0.499613505009062, -1.60543128237847)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_14 = structure(list(
    par = c(-0.466261167015449, -0.329682351952262, 0.501594003992497, 
    -1.49303897820802), value = 55.2003073660861, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.9139899273708, -3.32555202930962, 
    117.02680534853, -13.5691696367957, -3.32555202930962, 12.7259239146582, 
    -16.5840888222135, -4.91499177979193, 117.02680534853, -16.5840888222135, 
    1834.05195879516, -162.473068390234, -13.5691696367957, -4.91499177979193, 
    -162.473068390234, 126.102267469008), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.466261167015449, -0.329682351952262
    ), logphi = c(0.501594003992497, -1.49303897820802)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_15 = structure(list(
    par = c(-0.24556122958465, 0.0743771372471179, 0.512607996035704, 
    -1.60345756508031), value = 43.3637086393749, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.4991102436352, -4.93071655682797, 
    137.54849920744, -10.628954999703, -4.93071655682797, 25.0357437838744, 
    -16.4224226910648, -7.61507204316558, 137.54849920744, -16.4224226910648, 
    2588.40133125382, -213.587831078499, -10.628954999703, -7.61507204316558, 
    -213.587831078499, 164.653611578913), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24556122958465, 0.0743771372471179
    ), logphi = c(0.512607996035704, -1.60345756508031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_16 = structure(list(
    par = c(-0.131325617940845, -0.122050032382656, 0.499582929416484, 
    -1.50577356126818), value = 75.8179305793441, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.2471913659176, -7.02980243261209, 
    134.673814201847, -7.7036377454931, -7.02980243261209, 22.6700339425179, 
    -16.2191716288618, -6.32472134931561, 134.673814201847, -16.2191716288618, 
    2290.74091866721, -158.913222847445, -7.7036377454931, -6.32472134931561, 
    -158.913222847445, 150.330674351551), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.131325617940845, -0.122050032382656
    ), logphi = c(0.499582929416484, -1.50577356126818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_17 = structure(list(
    par = c(-0.0633921951464924, -0.24502577663686, 0.484989503237042, 
    -1.6208443486418), value = 62.5159225474801, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0017918705761, -9.29921685255408, 
    132.964641398559, -4.97067065552415, -9.29921685255408, 14.8041941727683, 
    -13.5073069760239, -5.33640717481632, 132.964641398559, -13.5073069760239, 
    2879.60227962358, -147.953691516989, -4.97067065552415, -5.33640717481632, 
    -147.953691516989, 168.88400020143), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0633921951464924, -0.24502577663686
    ), logphi = c(0.484989503237042, -1.6208443486418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_18 = structure(list(
    par = c(-0.403077884268958, 0.0876886393830522, 0.501408676288652, 
    -1.53662282323621), value = 40.2445949451543, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.2527859998264, 0.0706053349119884, 
    128.528158477081, -11.6712866482516, 0.0706053349119884, 
    27.6209570166941, -13.4707650740751, -8.08906508176221, 128.528158477081, 
    -13.4707650740751, 2067.03880940928, -183.560223791623, -11.6712866482516, 
    -8.08906508176221, -183.560223791623, 138.406703445781), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403077884268958, 0.0876886393830522
    ), logphi = c(0.501408676288652, -1.53662282323621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_19 = structure(list(
    par = c(-0.16567458570762, -0.0160001256211981, 0.496586301952519, 
    -1.7158481356318), value = 33.3947906553739, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.4981808330787, -6.24780505731337, 
    125.856363476728, -6.67934075870846, -6.24780505731337, 18.7497678023618, 
    -12.3097206579104, -6.00575289233518, 125.856363476728, -12.3097206579104, 
    2973.84610851203, -183.162916665758, -6.67934075870846, -6.00575289233518, 
    -183.162916665758, 163.212905295751), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.16567458570762, -0.0160001256211981
    ), logphi = c(0.496586301952519, -1.7158481356318)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_20 = structure(list(
    par = c(-0.586265448150841, 0.414143834931658, 0.52142708581624, 
    -1.67399226375383), value = 10.7200070957721, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.8560179725539, 5.34654652462052, 
    148.572261904789, -16.6515794113309, 5.34654652462052, 42.7041349819746, 
    -9.28960831991787, -12.6740603549891, 148.572261904789, -9.28960831991787, 
    2748.53034797928, -292.898752516813, -16.6515794113309, -12.6740603549891, 
    -292.898752516813, 175.655984229195), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.586265448150841, 0.414143834931658
    ), logphi = c(0.52142708581624, -1.67399226375383)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_21 = structure(list(
    par = c(-0.341385130979951, -0.514434065483858, 0.458561767456492, 
    -1.82630354559052), value = 30.9028083734268, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.4443447988805, -5.11978978234851, 
    124.751692179181, -7.98670411672475, -5.11978978234851, 7.65243601730248, 
    -11.003789433417, -3.77362593662056, 124.751692179181, -11.003789433417, 
    3622.29184302354, -176.197190059124, -7.98670411672475, -3.77362593662056, 
    -176.197190059124, 167.806453085895), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341385130979951, -0.514434065483858
    ), logphi = c(0.458561767456492, -1.82630354559052)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_22 = structure(list(
    par = c(-0.493733916989949, 0.161049690142894, 0.555920098245114, 
    -1.50247263997424), value = 38.4616672332129, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.3935654665116, -0.187684531027799, 
    121.618795610345, -19.3076766770162, -0.187684531027799, 
    30.8982781529465, -22.6247144272662, -7.11463867020257, 121.618795610345, 
    -22.6247144272662, 1808.96238136796, -252.917896075289, -19.3076766770162, 
    -7.11463867020257, -252.917896075289, 145.481542901393), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.493733916989949, 0.161049690142894
    ), logphi = c(0.555920098245114, -1.50247263997424)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_23 = structure(list(
    par = c(-0.39788307893466, -0.140155260869155, 0.527411306415254, 
    -1.58477207928432), value = 52.4453612309594, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.2934476916673, -5.6840239448519, 
    145.972653218251, -17.6835989504909, -5.6840239448519, 19.5464691099545, 
    -24.8333209587059, -6.40667651552462, 145.972653218251, -24.8333209587059, 
    2676.70297473899, -265.019220095475, -17.6835989504909, -6.40667651552462, 
    -265.019220095475, 181.090657145333), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.39788307893466, -0.140155260869155
    ), logphi = c(0.527411306415254, -1.58477207928432)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_24 = structure(list(
    par = c(-0.334465322763399, 0.126122179475732, 0.539948066052609, 
    -1.66671896551953), value = 40.9670525022994, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.2024730233092, -6.09402723128483, 
    141.037849884285, -15.187392833127, -6.09402723128483, 23.5899597917921, 
    -23.6447133961093, -7.60755264206381, 141.037849884285, -23.6447133961093, 
    2871.55497322722, -278.332501892464, -15.187392833127, -7.60755264206381, 
    -278.332501892464, 181.58588435746), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334465322763399, 0.126122179475732
    ), logphi = c(0.539948066052609, -1.66671896551953)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_25 = structure(list(
    par = c(-0.310161182235285, 0.0960152474903823, 0.477456782275747, 
    -1.78009818826573), value = 19.9516756637027, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.6805222248421, -3.45195250783803, 
    138.54442252903, -7.2839474265507, -3.45195250783803, 21.9452956375932, 
    -6.33524007476183, -7.54085517584713, 138.54442252903, -6.33524007476183, 
    3429.84310081373, -204.872425421776, -7.2839474265507, -7.54085517584713, 
    -204.872425421776, 172.067199632586), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310161182235285, 0.0960152474903823
    ), logphi = c(0.477456782275747, -1.78009818826573)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_26 = structure(list(
    par = c(0.000289605062288058, -0.260819824971214, 0.51193275849191, 
    -1.64568356763378), value = 58.9323659550391, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.5954233288626, -10.1381872159578, 
    124.241125769586, -6.32264619504497, -10.1381872159578, 13.5964739857997, 
    -16.0796951576003, -4.48144184161947, 124.241125769586, -16.0796951576003, 
    2858.90656278731, -175.444507968692, -6.32264619504497, -4.48144184161947, 
    -175.444507968692, 169.345245462083), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.000289605062288058, -0.260819824971214
    ), logphi = c(0.51193275849191, -1.64568356763378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_27 = structure(list(
    par = c(-0.187013223227322, -0.0395732785800457, 0.499108319916367, 
    -1.61240833658098), value = 55.0676564716938, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.9407955932633, -6.622420485769, 
    132.378828334723, -8.05622617683355, -6.622420485769, 19.6825648934862, 
    -14.5535246414141, -6.58187996549486, 132.378828334723, -14.5535246414141, 
    2622.14363575097, -181.033282027343, -8.05622617683355, -6.58187996549486, 
    -181.033282027343, 160.221022719398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.187013223227322, -0.0395732785800457
    ), logphi = c(0.499108319916367, -1.61240833658098)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_28 = structure(list(
    par = c(-0.0454968399277015, -0.0416765325610095, 0.509928255726908, 
    -1.63793226899625), value = 53.5316461816111, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.92848903702, -9.36485331237691, 
    133.537068853329, -6.58251713936409, -9.36485331237691, 20.6631499821697, 
    -16.0807291784693, -6.08127608892062, 133.537068853329, -16.0807291784693, 
    2893.68550791203, -190.386589330238, -6.58251713936409, -6.08127608892062, 
    -190.386589330238, 173.295574914079), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0454968399277015, -0.0416765325610095
    ), logphi = c(0.509928255726908, -1.63793226899625)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_29 = structure(list(
    par = c(-0.216907697661936, 0.417699240499939, 0.475312372991258, 
    -1.59293317751529), value = 28.3974993022342, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.5782131450737, 5.80702701125091, 
    127.158601845423, -2.41839709236302, 5.80702701125091, 44.8782622983757, 
    2.2016693668192, -9.07613030864951, 127.158601845423, 2.2016693668192, 
    2361.23129281296, -150.221901106473, -2.41839709236302, -9.07613030864951, 
    -150.221901106473, 141.020060307362), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216907697661936, 0.417699240499939
    ), logphi = c(0.475312372991258, -1.59293317751529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_30 = structure(list(
    par = c(-0.139177007375283, -0.424938417083117, 0.503739248500111, 
    -1.66157833951505), value = 58.8355251310728, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.7291293730909, -8.0925135002019, 
    123.965709434515, -8.44996352711291, -8.0925135002019, 9.67284537267687, 
    -15.8095522593271, -3.97295279697119, 123.965709434515, -15.8095522593271, 
    2865.60740208053, -177.68391759887, -8.44996352711291, -3.97295279697119, 
    -177.68391759887, 167.226682513899), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.139177007375283, -0.424938417083117
    ), logphi = c(0.503739248500111, -1.66157833951505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_31 = structure(list(
    par = c(-0.127779528495572, 0.23007311563801, 0.528779504236754, 
    -1.5869934598611), value = 36.8054785108171, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.4685512203481, -4.58456713126054, 
    116.9982766136, -8.08743606750539, -4.58456713126054, 28.3115593902039, 
    -14.2224133767854, -6.92754104836268, 116.9982766136, -14.2224133767854, 
    2164.44899428048, -193.679255522383, -8.08743606750539, -6.92754104836268, 
    -193.679255522383, 142.255185252793), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.127779528495572, 0.23007311563801
    ), logphi = c(0.528779504236754, -1.5869934598611)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_32 = structure(list(
    par = c(-0.305342364597695, -0.293613706334189, 0.528859244174433, 
    -1.44651441395238), value = 52.1401163340187, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.8634216751929, -4.33024037249652, 
    83.9678581350256, -10.1818254520936, -4.33024037249652, 9.66262674495511, 
    -13.4529642128456, -3.10984396456604, 83.9678581350256, -13.4529642128456, 
    1255.42671582934, -131.10249928161, -10.1818254520936, -3.10984396456604, 
    -131.10249928161, 92.7663997174477), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305342364597695, -0.293613706334189
    ), logphi = c(0.528859244174433, -1.44651441395238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_33 = structure(list(
    par = c(-0.549281494088743, -0.328392134879864, 0.51091304690834, 
    -1.66388817711645), value = 46.9217183120988, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.999120306471, -5.04723489846981, 
    146.389981543038, -18.8135283991642, -5.04723489846981, 13.453204529057, 
    -25.5957525787665, -5.37695704849739, 146.389981543038, -25.5957525787665, 
    3123.06900123716, -279.609272118897, -18.8135283991642, -5.37695704849739, 
    -279.609272118897, 193.633446183838), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.549281494088743, -0.328392134879864
    ), logphi = c(0.51091304690834, -1.66388817711645)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_34 = structure(list(
    par = c(-0.44634371719793, 0.152427152954893, 0.533468142266508, 
    -1.50759990826147), value = 36.5385859951258, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.8020621397235, -0.292207408492118, 
    117.7528442593, -15.1262581775669, -0.292207408492118, 28.5868528546729, 
    -17.3030975645361, -7.43433240124602, 117.7528442593, -17.3030975645361, 
    1772.86029911627, -210.49279672436, -15.1262581775669, -7.43433240124602, 
    -210.49279672436, 132.431500345476), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.44634371719793, 0.152427152954893
    ), logphi = c(0.533468142266508, -1.50759990826147)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_35 = structure(list(
    par = c(-0.162108485584371, -0.0540855144863885, 0.520093586214698, 
    -1.59288362897779), value = 53.1186169902171, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.1735733102748, -7.25496814446558, 
    120.30882175651, -9.28004100941848, -7.25496814446558, 17.5988316648557, 
    -16.8726094411653, -5.59585719894784, 120.30882175651, -16.8726094411653, 
    2321.34222360081, -188.354630287435, -9.28004100941848, -5.59585719894784, 
    -188.354630287435, 149.041274738693), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162108485584371, -0.0540855144863885
    ), logphi = c(0.520093586214698, -1.59288362897779)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_36 = structure(list(
    par = c(-0.226128854532691, -0.488240379684173, 0.509585314186624, 
    -1.66727062644961), value = 61.7209265904464, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.6547897110844, -8.21597750011449, 
    148.562780101003, -12.7791967132751, -8.21597750011449, 11.0625801763575, 
    -20.7854439171484, -4.38411282388529, 148.562780101003, -20.7854439171484, 
    3433.70068150151, -235.401624893328, -12.7791967132751, -4.38411282388529, 
    -235.401624893328, 202.501794422716), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226128854532691, -0.488240379684173
    ), logphi = c(0.509585314186624, -1.66727062644961)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_37 = structure(list(
    par = c(-0.116819510302625, 0.484882494395638, 0.461078322140276, 
    -1.62046765227189), value = 14.2220848474023, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.4034421808214, 8.47591163566364, 
    117.787056129082, 1.59711813285668, 8.47591163566364, 54.6677344965829, 
    7.1317710510499, -7.68736107392698, 117.787056129082, 7.1317710510499, 
    2453.74210649363, -122.133990482887, 1.59711813285668, -7.68736107392698, 
    -122.133990482887, 138.210710920461), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.116819510302625, 0.484882494395638
    ), logphi = c(0.461078322140276, -1.62046765227189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_38 = structure(list(
    par = c(-0.350842954542798, 0.207702590513771, 0.530635225685946, 
    -1.6370237199407), value = 36.8863699180104, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.6475337902162, -3.52859624719315, 
    128.512206607923, -12.9726853144163, -3.52859624719315, 25.1661530636937, 
    -17.2064311616538, -7.9957998408986, 128.512206607923, -17.2064311616538, 
    2436.16691192017, -238.6972687205, -12.9726853144163, -7.9957998408986, 
    -238.6972687205, 157.761966626424), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350842954542798, 0.207702590513771
    ), logphi = c(0.530635225685946, -1.6370237199407)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_39 = structure(list(
    par = c(-0.265837061166899, -0.186259126789473, 0.485901052145542, 
    -1.66275649491408), value = 54.7083337383257, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.0082519938685, -6.54182351844668, 
    153.184439930953, -10.0275029568664, -6.54182351844668, 18.0530329707551, 
    -16.0236356876453, -6.80860657542581, 153.184439930953, -16.0236356876453, 
    3293.22358274631, -205.558235848891, -10.0275029568664, -6.80860657542581, 
    -205.558235848891, 189.447526825148), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265837061166899, -0.186259126789473
    ), logphi = c(0.485901052145542, -1.66275649491408)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_40 = structure(list(
    par = c(-0.278798809097659, -0.0392541869118985, 0.482305085837083, 
    -1.70646585374662), value = 34.7049180706778, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.6996494958354, -4.73497088826491, 
    141.417009652756, -8.29517063305474, -4.73497088826491, 20.6578101309418, 
    -11.64532878839, -7.08886752498472, 141.417009652756, -11.64532878839, 
    3190.66552886937, -196.510802612515, -8.29517063305474, -7.08886752498472, 
    -196.510802612515, 175.037312768467), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278798809097659, -0.0392541869118985
    ), logphi = c(0.482305085837083, -1.70646585374662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_41 = structure(list(
    par = c(-0.521623150827353, -0.150827536550979, 0.530933702998838, 
    -1.59410138015467), value = 39.7646799868888, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.0338730073032, -4.22029629199017, 
    142.895355075723, -20.2246142766427, -4.22029629199017, 18.9301428257238, 
    -27.0418124568295, -6.15645871704373, 142.895355075723, -27.0418124568295, 
    2634.89189792487, -283.655048520792, -20.2246142766427, -6.15645871704373, 
    -283.655048520792, 181.718512752838), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.521623150827353, -0.150827536550979
    ), logphi = c(0.530933702998838, -1.59410138015467)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_42 = structure(list(
    par = c(-0.382686127259201, -0.50758774603078, 0.529646523739486, 
    -1.58127279314551), value = 49.9426621407686, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.0382408463569, -4.78896697941877, 
    108.70205157687, -14.096337988434, -4.78896697941877, 8.85478281809071, 
    -18.6256556151676, -2.92094520037978, 108.70205157687, -18.6256556151676, 
    2130.51011828647, -202.833463315955, -14.096337988434, -2.92094520037978, 
    -202.833463315955, 143.654142117811), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382686127259201, -0.50758774603078
    ), logphi = c(0.529646523739486, -1.58127279314551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_43 = structure(list(
    par = c(-0.174385054204923, -0.236027129943056, 0.493516832822927, 
    -1.66843859713275), value = 45.5824933249636, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.5132080783046, -6.98833509105157, 
    124.461748276516, -7.48467344813264, -6.98833509105157, 13.6276759512555, 
    -14.115898714806, -5.00939297065628, 124.461748276516, -14.115898714806, 
    2798.29872104465, -169.373911171888, -7.48467344813264, -5.00939297065628, 
    -169.373911171888, 160.654180074715), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174385054204923, -0.236027129943056
    ), logphi = c(0.493516832822927, -1.66843859713275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_44 = structure(list(
    par = c(-0.446524003030796, -0.01263716438951, 0.473044095717527, 
    -1.67662258819529), value = 34.7572343753982, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.2382442073073, -2.31705042708086, 
    157.09016905241, -11.517148437612, -2.31705042708086, 23.045909795627, 
    -11.0813133140653, -8.9437450148111, 157.09016905241, -11.0813133140653, 
    3204.30539269445, -216.532265735481, -11.517148437612, -8.9437450148111, 
    -216.532265735481, 181.115330786241), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.446524003030796, -0.01263716438951
    ), logphi = c(0.473044095717527, -1.67662258819529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_45 = structure(list(
    par = c(-0.243547272268797, -0.380059661811075, 0.489724907257149, 
    -1.61620525048065), value = 54.5893518549619, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.1395313410313, -6.25532375586602, 
    128.906007109464, -9.22528398739075, -6.25532375586602, 11.828274809389, 
    -15.1549027602726, -4.77185530023405, 128.906007109464, -15.1549027602726, 
    2649.21633354476, -165.761268548614, -9.22528398739075, -4.77185530023405, 
    -165.761268548614, 159.208746170592), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243547272268797, -0.380059661811075
    ), logphi = c(0.489724907257149, -1.61620525048065)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_46 = structure(list(
    par = c(-0.574350738332861, -0.0325363625765511, 0.494311918418612, 
    -1.70897807433089), value = 36.899371129448, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.7111868938683, -2.67975457113323, 
    171.892302947896, -18.5287603899909, -2.67975457113323, 24.401272476382, 
    -21.3559420743081, -9.48683623658297, 171.892302947896, -21.3559420743081, 
    3661.93445199237, -305.55535803245, -18.5287603899909, -9.48683623658297, 
    -305.55535803245, 211.684269403989), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.574350738332861, -0.0325363625765511
    ), logphi = c(0.494311918418612, -1.70897807433089)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_47 = structure(list(
    par = c(-0.519383159129825, 0.123202024865136, 0.574137688760158, 
    -1.64629107105321), value = 34.2010019554192, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(37.8596430152811, -5.62920599023187, 
    146.226438760166, -23.8819319537953, -5.62920599023187, 25.6945977099576, 
    -38.2326615415707, -6.56847732916077, 146.226438760166, -38.2326615415707, 
    2877.68151606116, -370.264447928648, -23.8819319537953, -6.56847732916077, 
    -370.264447928648, 204.776457731981), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.519383159129825, 0.123202024865136
    ), logphi = c(0.574137688760158, -1.64629107105321)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_48 = structure(list(
    par = c(-0.250660711998547, -0.000777562147784676, 0.511385670662794, 
    -1.41579607936176), value = 61.2209272878824, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.388122237763, -3.22180946987771, 
    98.0844649003387, -8.35097580242916, -3.22180946987771, 19.5346363263127, 
    -12.7895987525051, -5.34397816220888, 98.0844649003387, -12.7895987525051, 
    1349.0665892828, -124.117347750641, -8.35097580242916, -5.34397816220888, 
    -124.117347750641, 97.0893378742232), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250660711998547, -0.000777562147784676
    ), logphi = c(0.511385670662794, -1.41579607936176)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_49 = structure(list(
    par = c(-0.449620858596118, -0.0744479748927578, 0.513366290871967, 
    -1.63922164958075), value = 44.676500815368, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.1570918507116, -4.12133861793507, 
    141.889997077982, -15.7490208172462, -4.12133861793507, 19.7878771839299, 
    -21.3373914412784, -7.06519295068375, 141.889997077982, -21.3373914412784, 
    2783.57977246024, -250.591267084488, -15.7490208172462, -7.06519295068375, 
    -250.591267084488, 175.793287855441), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449620858596118, -0.0744479748927578
    ), logphi = c(0.513366290871967, -1.63922164958075)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_50 = structure(list(
    par = c(-0.284441261047271, 0.236622629991582, 0.476519887318907, 
    -1.68006411964539), value = 23.555124634949, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0854503622658, 1.31630399824445, 
    144.411688315138, -6.00028601649427, 1.31630399824445, 35.9697769276579, 
    -2.77603314735586, -9.20815670335529, 144.411688315138, -2.77603314735586, 
    3025.11803532113, -191.703639539131, -6.00028601649427, -9.20815670335529, 
    -191.703639539131, 168.931364699532), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284441261047271, 0.236622629991582
    ), logphi = c(0.476519887318907, -1.68006411964539)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_51 = structure(list(
    par = c(-0.398846180919297, 0.115129159281213, 0.518905931701418, 
    -1.62822999537554), value = 35.5151695163778, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0804844218171, -2.15191429298045, 
    145.340361020985, -14.8257735617108, -2.15191429298045, 29.0250598347086, 
    -18.9735322049245, -8.67331964560236, 145.340361020985, -18.9735322049245, 
    2728.56044005287, -255.928707756148, -14.8257735617108, -8.67331964560236, 
    -255.928707756148, 175.430449502301), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.398846180919297, 0.115129159281213
    ), logphi = c(0.518905931701418, -1.62822999537554)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_52 = structure(list(
    par = c(-0.130214328523472, 0.208190318182546, 0.500527021168914, 
    -1.49670501639571), value = 44.5036594525022, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.3903021086392, -1.69550033035648, 
    108.96190105214, -4.84143367263101, -1.69550033035648, 31.4715838687363, 
    -9.85594891211861, -6.79866493591419, 108.96190105214, -9.85594891211861, 
    1764.89557077808, -133.640953917435, -4.84143367263101, -6.79866493591419, 
    -133.640953917435, 117.409634357912), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130214328523472, 0.208190318182546
    ), logphi = c(0.500527021168914, -1.49670501639571)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_53 = structure(list(
    par = c(-0.0595086839774539, 0.137848720092625, 0.524031285412528, 
    -1.59258982669649), value = 45.9884688627146, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.2513439827939, -6.63195901928759, 
    119.329401451651, -6.97490404277801, -6.63195901928759, 26.3750076250346, 
    -15.0911692280431, -6.36742976034554, 119.329401451651, -15.0911692280431, 
    2314.88604612728, -186.722024841046, -6.97490404277801, -6.36742976034554, 
    -186.722024841046, 148.457908382582), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0595086839774539, 0.137848720092625
    ), logphi = c(0.524031285412528, -1.59258982669649)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_54 = structure(list(
    par = c(-0.487441517840848, 0.0914162612895166, 0.503173425751925, 
    -1.66041143132181), value = 28.6746156576765, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.0899623102337, -1.54536062346722, 
    148.719189905222, -14.9125913369019, -1.54536062346722, 25.8034234921212, 
    -16.4110537959061, -9.17022653901256, 148.719189905222, -16.4110537959061, 
    2897.41361770091, -253.74878258333, -14.9125913369019, -9.17022653901256, 
    -253.74878258333, 177.30052471876), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.487441517840848, 0.0914162612895166
    ), logphi = c(0.503173425751925, -1.66041143132181)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_55 = structure(list(
    par = c(-0.290189114722198, 0.00929015310749732, 0.49931948547432, 
    -1.45246901197516), value = 49.3963340789889, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.7657369480703, -1.97466859752637, 
    105.36347575929, -8.05499849754199, -1.97466859752637, 21.5703784274268, 
    -12.0315019902506, -6.03954996858391, 105.36347575929, -12.0315019902506, 
    1527.15117746993, -125.793305145727, -8.05499849754199, -6.03954996858391, 
    -125.793305145727, 105.309029166278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290189114722198, 0.00929015310749732
    ), logphi = c(0.49931948547432, -1.45246901197516)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_56 = structure(list(
    par = c(-0.288903888286329, -0.0438936560274056, 0.519564826637561, 
    -1.6090790797554), value = 42.0897751229041, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.1397718137514, -5.01387326323766, 
    121.790918019116, -11.447683479382, -5.01387326323766, 18.5360563698111, 
    -17.6581483017912, -5.93792127556725, 121.790918019116, -17.6581483017912, 
    2332.15638093576, -202.86189604235, -11.447683479382, -5.93792127556725, 
    -202.86189604235, 149.929742409682), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288903888286329, -0.0438936560274056
    ), logphi = c(0.519564826637561, -1.6090790797554)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_57 = structure(list(
    par = c(-0.318657142518254, 0.0903543225703267, 0.507847620579824, 
    -1.83585140317874), value = 17.6936116770385, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.3958788531465, -4.85092648183638, 
    111.287188569342, -8.11481197615649, -4.85092648183638, 15.5155319276901, 
    -12.4044398477352, -5.60815619810029, 111.287188569342, -12.4044398477352, 
    3013.88831465577, -198.768182137599, -8.11481197615649, -5.60815619810029, 
    -198.768182137599, 145.466105919034), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318657142518254, 0.0903543225703267
    ), logphi = c(0.507847620579824, -1.83585140317874)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_58 = structure(list(
    par = c(-0.45985348113094, 0.241560546936097, 0.567533968630857, 
    -1.54411963106988), value = 42.5133127577711, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.9564450263628, -2.70451808503935, 
    131.489884303448, -20.7463568857591, -2.70451808503935, 29.5131111585079, 
    -26.0900773678685, -7.82623830808404, 131.489884303448, -26.0900773678685, 
    2088.63600409437, -294.944870967484, -20.7463568857591, -7.82623830808404, 
    -294.944870967484, 165.380000234805), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.45985348113094, 0.241560546936097
    ), logphi = c(0.567533968630857, -1.54411963106988)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_59 = structure(list(
    par = c(-0.430726224140155, 0.0864129988000877, 0.508249954471912, 
    -1.5768739740031), value = 33.5055710722402, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.992384496709, -0.926573424209209, 
    124.492990609681, -12.498507607539, -0.926573424209209, 24.5580073716667, 
    -14.5142350334027, -7.68244196613921, 124.492990609681, -14.5142350334027, 
    2132.90574748548, -198.098981107009, -12.498507607539, -7.68244196613921, 
    -198.098981107009, 141.195318823506), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.430726224140155, 0.0864129988000877
    ), logphi = c(0.508249954471912, -1.5768739740031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_60 = structure(list(
    par = c(-0.18339104540795, -0.309147159211475, 0.490722526265567, 
    -1.70657014180574), value = 47.9577517612297, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.3565080471068, -7.65080825537723, 
    140.709260371352, -8.55646417541323, -7.65080825537723, 13.7425565949201, 
    -15.8304057222836, -5.18187863995934, 140.709260371352, -15.8304057222836, 
    3401.7072378596, -195.220782658545, -8.55646417541323, -5.18187863995934, 
    -195.220782658545, 187.166262723082), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18339104540795, -0.309147159211475
    ), logphi = c(0.490722526265567, -1.70657014180574)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_61 = structure(list(
    par = c(-0.418142323753378, 0.352427474840278, 0.512030430387582, 
    -1.59016982112731), value = 28.4873348419966, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.7174186040282, 3.6697809893127, 
    144.818853868856, -12.7884965310798, 3.6697809893127, 41.2316610596264, 
    -8.91949384218549, -11.2674131580448, 144.818853868856, -8.91949384218549, 
    2447.79267385553, -240.159438346765, -12.7884965310798, -11.2674131580448, 
    -240.159438346765, 162.440721759083), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418142323753378, 0.352427474840278
    ), logphi = c(0.512030430387582, -1.59016982112731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_62 = structure(list(
    par = c(-0.0655096330955822, 0.362641948032636, 0.482704899117271, 
    -1.48982194628861), value = 35.120695854081, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.6475243897271, 0.479425843025183, 
    94.8735108696752, -0.643285527957005, 0.479425843025183, 
    34.5252171403132, -4.09409905621771, -6.39774698374396, 94.8735108696752, 
    -4.09409905621771, 1574.51870917313, -95.5270248566009, -0.643285527957005, 
    -6.39774698374396, -95.5270248566009, 100.861953290732), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0655096330955822, 0.362641948032636
    ), logphi = c(0.482704899117271, -1.48982194628861)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_63 = structure(list(
    par = c(-0.301168149383311, 0.223056691353237, 0.48390422260827, 
    -1.68935015511118), value = 21.2038400972062, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.4878911705737, 0.0734298728488625, 
    132.697407646987, -6.76542924793466, 0.0734298728488625, 
    30.2642886538251, -4.70229769788943, -8.4396769799433, 132.697407646987, 
    -4.70229769788943, 2796.8845469859, -188.595890337595, -6.76542924793466, 
    -8.4396769799433, -188.595890337595, 157.02651794669), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301168149383311, 0.223056691353237
    ), logphi = c(0.48390422260827, -1.68935015511118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_64 = structure(list(
    par = c(-0.378379780669022, -0.0858285773791306, 0.536493545214535, 
    -1.58312125949974), value = 60.1361013680358, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3460471905062, -6.85823113144579, 
    142.945952221751, -17.8577762861565, -6.85823113144579, 18.5594762829311, 
    -25.6604336659194, -6.36997199610079, 142.945952221751, -25.6604336659194, 
    2605.59293400142, -272.193617291805, -17.8577762861565, -6.36997199610079, 
    -272.193617291805, 179.490122752313), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378379780669022, -0.0858285773791306
    ), logphi = c(0.536493545214535, -1.58312125949974)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_65 = structure(list(
    par = c(-0.522973646614418, 0.39759786888063, 0.491854348526172, 
    -1.65883119624193), value = 4.08242350225449, counts = structure(c(289L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.4221253733213, 7.9956923144664, 
    139.63488988189, -10.9838623023606, 7.9956923144664, 42.5943316262334, 
    0.506958937052104, -11.6682905195731, 139.63488988189, 0.506958937052104, 
    2566.57333804711, -226.752538148745, -10.9838623023606, -11.6682905195731, 
    -226.752538148745, 155.274608607314), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.522973646614418, 0.39759786888063
    ), logphi = c(0.491854348526172, -1.65883119624193)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_66 = structure(list(
    par = c(-0.425737005788099, -0.281280493192586, 0.489487704464585, 
    -1.68196751806107), value = 41.7049191405165, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.7456397133218, -4.7024084484093, 
    140.654837744947, -13.1009360444523, -4.7024084484093, 14.4500371792589, 
    -17.8791718550286, -5.83410450261113, 140.654837744947, -17.8791718550286, 
    3061.87986183204, -218.476286814706, -13.1009360444523, -5.83410450261113, 
    -218.476286814706, 176.715972306951), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.425737005788099, -0.281280493192586
    ), logphi = c(0.489487704464585, -1.68196751806107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_67 = structure(list(
    par = c(-0.341027191012898, -0.2027436655529, 0.46415664437308, 
    -1.69468565459625), value = 43.1211110852027, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.4013017467124, -3.9973636170032, 
    125.869611697027, -7.42065315151308, -3.9973636170032, 14.1024452045002, 
    -9.66679381519953, -5.73032913031568, 125.869611697027, -9.66679381519953, 
    2794.55865628364, -153.748836289935, -7.42065315151308, -5.73032913031568, 
    -153.748836289935, 151.309189954318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341027191012898, -0.2027436655529
    ), logphi = c(0.46415664437308, -1.69468565459625)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_68 = structure(list(
    par = c(-0.198716277936437, -0.256437395991093, 0.487572797115767, 
    -1.64858786843757), value = 51.0605756561453, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.2804733402468, -6.74703431791102, 
    138.431959278762, -8.25158431538853, -6.74703431791102, 15.6789182792494, 
    -14.9993137981141, -5.64326133556392, 138.431959278762, -14.9993137981141, 
    2994.84636065728, -177.604368705175, -8.25158431538853, -5.64326133556392, 
    -177.604368705175, 173.896895619308), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198716277936437, -0.256437395991093
    ), logphi = c(0.487572797115767, -1.64858786843757)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_69 = structure(list(
    par = c(-0.189224507862948, 0.146749435849905, 0.461851458386792, 
    -1.56278145214183), value = 42.7842005177562, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.657240322016, 0.0875521237730936, 
    129.146625889476, -2.15140678072601, 0.0875521237730936, 
    33.3344114178402, -4.76017968509268, -7.77714140376418, 129.146625889476, 
    -4.76017968509268, 2352.23169566723, -114.445009651298, -2.15140678072601, 
    -7.77714140376418, -114.445009651298, 139.65384462189), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189224507862948, 0.146749435849905
    ), logphi = c(0.461851458386792, -1.56278145214183)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_70 = structure(list(
    par = c(-0.195138733283763, 0.220979464025808, 0.480776515695782, 
    -1.75187200970027), value = 15.0081934701737, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.381134365729, -2.35141215210177, 
    120.942767913412, -4.07550147496494, -2.35141215210177, 25.0822330585265, 
    -2.74432504099309, -6.93702232412718, 120.942767913412, -2.74432504099309, 
    2937.3279259719, -169.400078325666, -4.07550147496494, -6.93702232412718, 
    -169.400078325666, 151.639663107161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195138733283763, 0.220979464025808
    ), logphi = c(0.480776515695782, -1.75187200970027)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_71 = structure(list(
    par = c(-0.280186810312836, 0.0357094788885729, 0.483392335900965, 
    -1.67920955859512), value = 37.3136095093179, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.3326117784723, -2.79212600773349, 
    119.864594035235, -6.81051009010503, -2.79212600773349, 20.2349131512847, 
    -8.92524300688535, -6.5275740039894, 119.864594035235, -8.92524300688535, 
    2557.67630032722, -163.802557507253, -6.81051009010503, -6.5275740039894, 
    -163.802557507253, 144.571279605543), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280186810312836, 0.0357094788885729
    ), logphi = c(0.483392335900965, -1.67920955859512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_72 = structure(list(
    par = c(-0.416758300836027, 0.429861472013727, 0.528226453580009, 
    -1.64930549914404), value = 12.3346330966392, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.4725368214403, 3.40092452866259, 
    124.841598134751, -11.9437884311679, 3.40092452866259, 38.9956994304441, 
    -8.67166821016951, -9.94344534621661, 124.841598134751, -8.67166821016951, 
    2291.40985002729, -236.042499023092, -11.9437884311679, -9.94344534621661, 
    -236.042499023092, 148.301066520418), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.416758300836027, 0.429861472013727
    ), logphi = c(0.528226453580009, -1.64930549914404)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_73 = structure(list(
    par = c(-0.479520172980457, -0.0783134891219937, 0.537794834611286, 
    -1.64847041173597), value = 36.3913215482894, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(34.9618720587586, -4.61509307037034, 
    124.661591559772, -16.769686133955, -4.61509307037034, 17.0849301390774, 
    -24.8935460920308, -5.45741279189826, 124.661591559772, -24.8935460920308, 
    2521.44842361268, -261.536791962946, -16.769686133955, -5.45741279189826, 
    -261.536791962946, 165.480965613085), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.479520172980457, -0.0783134891219937
    ), logphi = c(0.537794834611286, -1.64847041173597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_74 = structure(list(
    par = c(-0.407975267278067, -0.166700798555004, 0.52418677547272, 
    -1.6291446318882), value = 60.3580346432474, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.5947199067027, -6.84054396415945, 
    155.763053763636, -18.3165983305145, -6.84054396415945, 17.6964919553768, 
    -26.6474509977854, -6.58700943123591, 155.763053763636, -26.6474509977854, 
    3097.52293417809, -288.410101959791, -18.3165983305145, -6.58700943123591, 
    -288.410101959791, 199.837411651416), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407975267278067, -0.166700798555004
    ), logphi = c(0.52418677547272, -1.6291446318882)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_75 = structure(list(
    par = c(-0.447058685915509, -0.136061223157967, 0.540815126708533, 
    -1.5815772162872), value = 46.0868293325786, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(36.6793572332824, -4.69670873037842, 
    116.689538401715, -16.3646158339859, -4.69670873037842, 15.0238201399588, 
    -22.7909488579314, -4.79212907755766, 116.689538401715, -22.7909488579314, 
    2128.76650224203, -235.886707857347, -16.3646158339859, -4.79212907755766, 
    -235.886707857347, 149.724946250984), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.447058685915509, -0.136061223157967
    ), logphi = c(0.540815126708533, -1.5815772162872)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_76 = structure(list(
    par = c(-0.226776513402598, -0.390861856347252, 0.485168438012463, 
    -1.56869262827395), value = 54.3282512024191, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.7447656653519, -5.44742611019444, 
    108.906278196486, -7.13293560927752, -5.44742611019444, 10.1491721800073, 
    -12.2727878419937, -4.12184213161026, 108.906278196486, -12.2727878419937, 
    2072.03028907266, -123.655343000628, -7.13293560927752, -4.12184213161026, 
    -123.655343000628, 127.843582880871), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226776513402598, -0.390861856347252
    ), logphi = c(0.485168438012463, -1.56869262827395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_77 = structure(list(
    par = c(-0.0820286192616065, -0.490601917336399, 0.484858022538103, 
    -1.69094192498942), value = 52.8235722513928, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.3752095215334, -8.04070455195927, 
    131.1461518263, -6.15318847962953, -8.04070455195927, 10.4558190550108, 
    -13.5365134141807, -4.01104651004403, 131.1461518263, -13.5365134141807, 
    3274.32052659482, -158.780608471965, -6.15318847962953, -4.01104651004403, 
    -158.780608471965, 180.319969288689), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0820286192616065, -0.490601917336399
    ), logphi = c(0.484858022538103, -1.69094192498942)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_78 = structure(list(
    par = c(-0.18917057250418, -0.626473376516149, 0.47748398626867, 
    -1.75604255005007), value = 46.835008774698, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(40.3312797701005, -6.62163579434605, 
    119.126231059141, -7.0469136428386, -6.62163579434605, 5.96415649845028, 
    -11.9823000179764, -3.14771769893696, 119.126231059141, -11.9823000179764, 
    3267.94268720043, -157.625617452695, -7.0469136428386, -3.14771769893696, 
    -157.625617452695, 167.428242409784), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18917057250418, -0.626473376516149
    ), logphi = c(0.47748398626867, -1.75604255005007)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_79 = structure(list(
    par = c(-0.231777052498081, 0.0557654000720204, 0.563989420474963, 
    -1.47677980510175), value = 51.0400315351916, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.6146616465672, -5.41724530300769, 
    98.9558298822857, -13.3570025120378, -5.41724530300769, 19.1498296544523, 
    -19.0532647454944, -4.43087436696743, 98.9558298822857, -19.0532647454944, 
    1506.94939158846, -197.96092021096, -13.3570025120378, -4.43087436696743, 
    -197.96092021096, 119.554038334968), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231777052498081, 0.0557654000720204
    ), logphi = c(0.563989420474963, -1.47677980510175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_80 = structure(list(
    par = c(-0.32076856548657, -0.173079602730481, 0.496251243160083, 
    -1.7328260080807), value = 55.9879225021786, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.5413757225217, -7.39559722973127, 
    154.253706119434, -12.1883576893467, -7.39559722973127, 15.9144911044962, 
    -18.951548993229, -6.59611577358277, 154.253706119434, -18.951548993229, 
    3684.28811710153, -246.875441176186, -12.1883576893467, -6.59611577358277, 
    -246.875441176186, 201.167086325782), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32076856548657, -0.173079602730481
    ), logphi = c(0.496251243160083, -1.7328260080807)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_81 = structure(list(
    par = c(-0.339969056742421, -0.0500848465982115, 0.533026858761, 
    -1.50229242331428), value = 57.6953117316978, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.0211226103507, -4.90971838651433, 
    124.860888410794, -15.0409924675188, -4.90971838651433, 20.1000915680538, 
    -20.4411332251908, -6.02368042734724, 124.860888410794, -20.4411332251908, 
    1970.39261622756, -214.260469573624, -15.0409924675188, -6.02368042734724, 
    -214.260469573624, 143.668520566465), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339969056742421, -0.0500848465982115
    ), logphi = c(0.533026858761, -1.50229242331428)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_82 = structure(list(
    par = c(-0.299786409018679, 0.0591349045817975, 0.511626899543464, 
    -1.64190866445453), value = 44.4718798604006, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.3805593160585, -5.01056484658591, 
    146.43450585794, -12.2018281665248, -5.01056484658591, 24.3491999452061, 
    -17.7605716658036, -8.0382442151361, 146.43450585794, -17.7605716658036, 
    2903.43636199175, -238.079216278386, -12.2018281665248, -8.0382442151361, 
    -238.079216278386, 178.972942665112), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299786409018679, 0.0591349045817975
    ), logphi = c(0.511626899543464, -1.64190866445453)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_83 = structure(list(
    par = c(-0.531920859539142, 0.215703143749813, 0.529449741061596, 
    -1.57112119305306), value = 39.8822986260772, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.8320161401722, -0.466915752284081, 
    138.950259623627, -18.0141158860891, -0.466915752284081, 
    28.9922060296988, -18.7473790109749, -9.67851809274833, 138.950259623627, 
    -18.7473790109749, 2271.03686358809, -262.858221870665, -18.0141158860891, 
    -9.67851809274833, -262.858221870665, 161.923160963084), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.531920859539142, 0.215703143749813
    ), logphi = c(0.529449741061596, -1.57112119305306)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_84 = structure(list(
    par = c(-0.235486551918578, -0.0588660333872982, 0.498422943714871, 
    -1.58444127446128), value = 49.7438465277856, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.4764451961585, -4.95591475235813, 
    133.531197416659, -9.14209060098869, -4.95591475235813, 21.5289586620315, 
    -15.1134275121478, -6.73786006721855, 133.531197416659, -15.1134275121478, 
    2490.97506491758, -180.353987390802, -9.14209060098869, -6.73786006721855, 
    -180.353987390802, 156.330423193296), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.235486551918578, -0.0588660333872982
    ), logphi = c(0.498422943714871, -1.58444127446128)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_85 = structure(list(
    par = c(-0.411110553787284, -0.471052588842591, 0.495803714356809, 
    -1.7388292283541), value = 35.2122025126458, counts = structure(c(315L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.7746522419403, -5.43201973890461, 
    121.779838039515, -11.936668331991, -5.43201973890461, 7.94720203778354, 
    -17.5222498519645, -3.76539685120747, 121.779838039515, -17.5222498519645, 
    3060.05774378271, -209.599872985855, -11.936668331991, -3.76539685120747, 
    -209.599872985855, 167.348882424534), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411110553787284, -0.471052588842591
    ), logphi = c(0.495803714356809, -1.7388292283541)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_86 = structure(list(
    par = c(-0.19499957738406, -0.0245099382984053, 0.497719207879753, 
    -1.60117367219327), value = 39.3730803872647, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.5725047845165, -4.47334075914796, 
    110.757404613082, -6.68482094923206, -4.47334075914796, 18.8410707302467, 
    -11.878481092964, -5.64446473916291, 110.757404613082, -11.878481092964, 
    2143.5212089127, -148.788867377014, -6.68482094923206, -5.64446473916291, 
    -148.788867377014, 132.032780808089), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19499957738406, -0.0245099382984053
    ), logphi = c(0.497719207879753, -1.60117367219327)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_87 = structure(list(
    par = c(-0.32279526376179, 0.530585982974676, 0.538739818430226, 
    -1.51800787766062), value = 26.6108510022181, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.0634052308827, 7.43825209248428, 
    135.316613896208, -12.8717368221842, 7.43825209248428, 54.3479094350374, 
    -8.4774647834962, -11.5114949545969, 135.316613896208, -8.4774647834962, 
    2026.72388409297, -246.434118007954, -12.8717368221842, -11.5114949545969, 
    -246.434118007954, 151.52589821632), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32279526376179, 0.530585982974676
    ), logphi = c(0.538739818430226, -1.51800787766062)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_88 = structure(list(
    par = c(-0.646613710051747, -0.0920046241187189, 0.513217384126481, 
    -1.67624857483325), value = 31.3777018514942, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.4236552944087, -3.2408619290436, 
    136.253583820078, -18.5482234709156, -3.2408619290436, 16.9709097814774, 
    -24.1473901265721, -6.76214643036133, 136.253583820078, -24.1473901265721, 
    2803.94067013923, -275.735425401713, -18.5482234709156, -6.76214643036133, 
    -275.735425401713, 175.764373443243), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.646613710051747, -0.0920046241187189
    ), logphi = c(0.513217384126481, -1.67624857483325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_89 = structure(list(
    par = c(-0.188667260793314, -0.0992745827120749, 0.505553637902263, 
    -1.75757478576737), value = 40.2716088753925, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.9655518952596, -7.60433780833125, 
    133.8444872232, -8.63724176891623, -7.60433780833125, 16.357396189548, 
    -16.3002883208918, -5.68785712751207, 133.8444872232, -16.3002883208918, 
    3406.49728909703, -213.730313871174, -8.63724176891623, -5.68785712751207, 
    -213.730313871174, 180.157573868911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188667260793314, -0.0992745827120749
    ), logphi = c(0.505553637902263, -1.75757478576737)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_90 = structure(list(
    par = c(-0.558183527472967, -0.0340384419076254, 0.504062001429132, 
    -1.59394218643742), value = 43.2199750677567, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.132000475372, -1.42673741621024, 
    131.340759631726, -15.6126138870505, -1.42673741621024, 20.4659566804821, 
    -17.7035469004494, -7.50234735935607, 131.340759631726, -17.7035469004494, 
    2308.390348011, -219.354131874461, -15.6126138870505, -7.50234735935607, 
    -219.354131874461, 151.698410531864), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.558183527472967, -0.0340384419076254
    ), logphi = c(0.504062001429132, -1.59394218643742)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_91 = structure(list(
    par = c(-0.204333940429116, 0.0878629528865321, 0.469238956444118, 
    -1.56024688283687), value = 36.3415897710294, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.3255810074613, -1.58341731903988, 
    107.797603819293, -3.15124260463762, -1.58341731903988, 23.3039849177885, 
    -6.14183405467372, -6.30891132047395, 107.797603819293, -6.14183405467372, 
    1940.27483256853, -104.379524049847, -3.15124260463762, -6.30891132047395, 
    -104.379524049847, 117.119755325135), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204333940429116, 0.0878629528865321
    ), logphi = c(0.469238956444118, -1.56024688283687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_92 = structure(list(
    par = c(-0.671769933414005, -0.657643399315481, 0.559418919567289, 
    -1.59668577209886), value = 64.3109896736114, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(27.5783640759641, -5.2642514027923, 
    126.265686866134, -24.5563803389359, -5.2642514027923, 6.98345123240074, 
    -30.3723049377425, -1.20799143488171, 126.265686866134, -30.3723049377425, 
    2715.06270313893, -345.326939719115, -24.5563803389359, -1.20799143488171, 
    -345.326939719115, 201.13979658376), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.671769933414005, -0.657643399315481
    ), logphi = c(0.559418919567289, -1.59668577209886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_93 = structure(list(
    par = c(-0.197254620947546, 0.314614936221351, 0.512398629545726, 
    -1.61108933267378), value = 34.9343599143424, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.5893883483473, -1.89078084211758, 
    118.691734900978, -6.94257466093973, -1.89078084211758, 30.4824385182201, 
    -8.86017746104528, -7.91331283345187, 118.691734900978, -8.86017746104528, 
    2228.57990932823, -184.735655960999, -6.94257466093973, -7.91331283345187, 
    -184.735655960999, 140.56729516021), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197254620947546, 0.314614936221351
    ), logphi = c(0.512398629545726, -1.61108933267378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_94 = structure(list(
    par = c(-0.277346753331009, -0.099174627385678, 0.483341844001855, 
    -1.52826270316788), value = 60.4316460210395, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.363950161488, -4.26704876943518, 
    133.659389009111, -8.2493877764378, -4.26704876943518, 20.8625287871911, 
    -13.4298774856489, -6.95498544178719, 133.659389009111, -13.4298774856489, 
    2249.86164718644, -147.212833257804, -8.2493877764378, -6.95498544178719, 
    -147.212833257804, 143.046881619924), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277346753331009, -0.099174627385678
    ), logphi = c(0.483341844001855, -1.52826270316788)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_95 = structure(list(
    par = c(-0.254916034209976, -0.0332875853160173, 0.511787194603275, 
    -1.58141354620208), value = 44.8509936774266, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.9595770449824, -4.70775987082561, 
    119.564200664612, -9.90383468835176, -4.70775987082561, 19.6960727105733, 
    -15.6074112833693, -6.03897042594781, 119.564200664612, -15.6074112833693, 
    2197.157880925, -181.289762931414, -9.90383468835176, -6.03897042594781, 
    -181.289762931414, 142.054941594694), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.254916034209976, -0.0332875853160173
    ), logphi = c(0.511787194603275, -1.58141354620208)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_96 = structure(list(
    par = c(-0.438588461718797, -0.561352579238046, 0.546519058255514, 
    -1.62961467967735), value = 66.3844307896879, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(35.6338934928147, -7.03697355319832, 
    137.94524700117, -20.3134234126878, -7.03697355319832, 8.45058197640469, 
    -27.8365702683914, -2.72545447010941, 137.94524700117, -27.8365702683914, 
    3032.68933874534, -309.850521908572, -20.3134234126878, -2.72545447010941, 
    -309.850521908572, 202.464977480332), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438588461718797, -0.561352579238046
    ), logphi = c(0.546519058255514, -1.62961467967735)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_97 = structure(list(
    par = c(-0.267165526887828, -0.109786247503392, 0.516461472339359, 
    -1.52809319434326), value = 50.2057254771413, counts = structure(c(303L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.4257935838551, -4.95214063001015, 
    111.375103079681, -10.4365482993529, -4.95214063001015, 16.5565415297664, 
    -15.8933108505011, -5.23562767806851, 111.375103079681, -15.8933108505011, 
    1883.1318223036, -167.401240701359, -10.4365482993529, -5.23562767806851, 
    -167.401240701359, 128.04145141132), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267165526887828, -0.109786247503392
    ), logphi = c(0.516461472339359, -1.52809319434326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_98 = structure(list(
    par = c(-0.143455427173189, 0.350808042869263, 0.467755890831742, 
    -1.68797728473947), value = 23.0647680405991, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4010807437922, 0.883851410726777, 
    122.108273174604, -0.908385470399509, 0.883851410726777, 
    34.19485141265, 3.03922557698399, -7.49641886610419, 122.108273174604, 
    3.03922557698399, 2763.2007299232, -145.580063618755, -0.908385470399509, 
    -7.49641886610419, -145.580063618755, 148.959186234698), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143455427173189, 0.350808042869263
    ), logphi = c(0.467755890831742, -1.68797728473947)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_99 = structure(list(
    par = c(-0.213420621933775, -0.0311832147125569, 0.50123529267399, 
    -1.55926059458908), value = 42.7287287111703, counts = structure(c(91L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3210127839584, -4.4820515388011, 
    107.076854472865, -7.19939862658947, -4.4820515388011, 18.427470202198, 
    -12.3190603353862, -5.25311423160701, 107.076854472865, -12.3190603353862, 
    1919.23348248402, -143.030947122647, -7.19939862658947, -5.25311423160701, 
    -143.030947122647, 123.152369408075), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.213420621933775, -0.0311832147125569
    ), logphi = c(0.50123529267399, -1.55926059458908)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_100 = structure(list(
    par = c(-0.168667562529632, -0.147815311103536, 0.499542720774997, 
    -1.68011131813905), value = 44.8128545513093, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.9262030843586, -6.8193359226143, 
    124.590525486745, -7.61615097566448, -6.8193359226143, 15.7366108233248, 
    -14.4706369340497, -5.34847193556232, 124.590525486745, -14.4706369340497, 
    2824.39673433643, -179.247700138774, -7.61615097566448, -5.34847193556232, 
    -179.247700138774, 161.627977778522), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168667562529632, -0.147815311103536
    ), logphi = c(0.499542720774997, -1.68011131813905)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_101 = structure(list(
    par = c(-0.317484927812509, -0.109775693948266, 0.514419524209732, 
    -1.69253312075299), value = 39.1973543311008, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.6121074791629, -6.28704405158942, 
    137.194839899379, -12.5818458904803, -6.28704405158942, 16.8824690494063, 
    -20.1601752465308, -6.10596934258467, 137.194839899379, -20.1601752465308, 
    3045.80618198003, -237.806989259681, -12.5818458904803, -6.10596934258467, 
    -237.806989259681, 178.697668962613), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317484927812509, -0.109775693948266
    ), logphi = c(0.514419524209732, -1.69253312075299)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_102 = structure(list(
    par = c(-0.311095829042195, -0.00886360413410634, 0.519551344256071, 
    -1.63539411799154), value = 44.0324476990686, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.6281873118297, -5.24901057907812, 
    143.299682662246, -13.5525531943514, -5.24901057907812, 22.8518117015852, 
    -20.5949844325204, -7.21963040195561, 143.299682662246, -20.5949844325204, 
    2838.51054994244, -245.431373212313, -13.5525531943514, -7.21963040195561, 
    -245.431373212313, 178.568864109607), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311095829042195, -0.00886360413410634
    ), logphi = c(0.519551344256071, -1.63539411799154)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_103 = structure(list(
    par = c(-0.283077025701815, 0.0225093615696963, 0.512438534254265, 
    -1.59537586248659), value = 54.4829611615201, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.6786137463142, -5.19223126005386, 
    157.367648814244, -13.3642764730268, -5.19223126005386, 27.3834664348271, 
    -19.9607784718836, -8.43356464308442, 157.367648814244, -19.9607784718836, 
    2914.03478987817, -245.922942105459, -13.3642764730268, -8.43356464308442, 
    -245.922942105459, 187.341473708358), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283077025701815, 0.0225093615696963
    ), logphi = c(0.512438534254265, -1.59537586248659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_104 = structure(list(
    par = c(-0.560753323878344, 0.196481461972696, 0.525618165758259, 
    -1.59383020886318), value = 35.9911079299869, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.6156067200104, 0.388226064629293, 
    145.748327328832, -18.8644708751795, 0.388226064629293, 31.5549998877174, 
    -19.6505491043553, -10.0741606896548, 145.748327328832, -19.6505491043553, 
    2472.05772503634, -277.727757209689, -18.8644708751795, -10.0741606896548, 
    -277.727757209689, 171.747461177318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.560753323878344, 0.196481461972696
    ), logphi = c(0.525618165758259, -1.59383020886318)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_105 = structure(list(
    par = c(-0.294629503554093, -0.0431546105907394, 0.492682292848505, 
    -1.53936871842417), value = 48.9948808710532, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.4334195790318, -2.80248688788731, 
    122.306834057895, -8.7486017408267, -2.80248688788731, 21.6281290867926, 
    -13.0887724072437, -6.60565493681986, 122.306834057895, -13.0887724072437, 
    2071.79256810441, -153.085364478223, -8.7486017408267, -6.60565493681986, 
    -153.085364478223, 133.668137674903), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294629503554093, -0.0431546105907394
    ), logphi = c(0.492682292848505, -1.53936871842417)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_106 = structure(list(
    par = c(-0.558828103698406, -0.00398221065513615, 0.493606901582481, 
    -1.59906178369756), value = 36.681442355509, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.5206054371947, -0.149458477594067, 
    133.11404863714, -14.3750076286864, -0.149458477594067, 22.8140509914709, 
    -14.9066954655552, -8.07739469088631, 133.11404863714, -14.9066954655552, 
    2334.39419697667, -207.095107583655, -14.3750076286864, -8.07739469088631, 
    -207.095107583655, 149.40292683896), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.558828103698406, -0.00398221065513615
    ), logphi = c(0.493606901582481, -1.59906178369756)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_107 = structure(list(
    par = c(-0.6346366804612, -0.207053140195648, 0.51945123203299, 
    -1.65981735522457), value = 38.1005665983201, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(31.4421291758293, -3.16000094535696, 
    123.810453107609, -17.8240856900658, -3.16000094535696, 14.7094435067885, 
    -24.239368912049, -5.11540849590375, 123.810453107609, -24.239368912049, 
    2561.78534357865, -257.993354392028, -17.8240856900658, -5.11540849590375, 
    -257.993354392028, 164.662821214634), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.6346366804612, -0.207053140195648
    ), logphi = c(0.51945123203299, -1.65981735522457)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_108 = structure(list(
    par = c(-0.248957743138036, 0.212376149465036, 0.525292629203186, 
    -1.63483568571841), value = 30.7897756848799, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.1109291281286, -2.95990088972076, 
    130.6618532535, -10.6811293854037, -2.95990088972076, 30.5337715325038, 
    -15.5207319778583, -7.94091149369791, 130.6618532535, -15.5207319778583, 
    2529.21855598309, -226.068027696869, -10.6811293854037, -7.94091149369791, 
    -226.068027696869, 160.171606083281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.248957743138036, 0.212376149465036
    ), logphi = c(0.525292629203186, -1.63483568571841)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_109 = structure(list(
    par = c(-0.245303107776825, 0.0386432902389214, 0.480087239858516, 
    -1.47741930173142), value = 50.4137331937424, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.2448013826943, -2.15562262972924, 
    103.633511908896, -4.89456910113262, -2.15562262972924, 20.5532791444085, 
    -8.95209138107589, -6.12534106281259, 103.633511908896, -8.95209138107589, 
    1593.22704327636, -101.057965736118, -4.89456910113262, -6.12534106281259, 
    -101.057965736118, 103.470771721348), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245303107776825, 0.0386432902389214
    ), logphi = c(0.480087239858516, -1.47741930173142)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_110 = structure(list(
    par = c(-0.250566283762093, 0.0302110720722082, 0.472756949668828, 
    -1.62435613781889), value = 43.511666172416, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.9905696391027, -3.07171966618114, 
    147.428383442616, -6.39151964509921, -3.07171966618114, 26.6541878399806, 
    -9.25374172844329, -8.17189195867485, 147.428383442616, -9.25374172844329, 
    2912.48984379777, -168.208617981058, -6.39151964509921, -8.17189195867485, 
    -168.208617981058, 169.325389897779), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250566283762093, 0.0302110720722082
    ), logphi = c(0.472756949668828, -1.62435613781889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_111 = structure(list(
    par = c(-0.421877603877535, -0.186588434793334, 0.535163777223569, 
    -1.52815111306696), value = 52.4002986906899, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.9810412180225, -3.88568236786568, 
    110.250429390391, -15.1182555345741, -3.88568236786568, 14.98710386727, 
    -19.8669998425771, -4.48464127256187, 110.250429390391, -19.8669998425771, 
    1842.89754167288, -204.025372024574, -15.1182555345741, -4.48464127256187, 
    -204.025372024574, 133.50165270154), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421877603877535, -0.186588434793334
    ), logphi = c(0.535163777223569, -1.52815111306696)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_112 = structure(list(
    par = c(-0.179537131953502, -0.220162271155439, 0.496428787354325, 
    -1.61277039164399), value = 50.0519999695475, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.1224966283046, -6.40809285812338, 
    113.019244263768, -7.18305060232183, -6.40809285812338, 12.8336232076975, 
    -13.3515081888191, -4.74211309331452, 113.019244263768, -13.3515081888191, 
    2302.3656038994, -149.198443910592, -7.18305060232183, -4.74211309331452, 
    -149.198443910592, 139.656261529453), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.179537131953502, -0.220162271155439
    ), logphi = c(0.496428787354325, -1.61277039164399)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_113 = structure(list(
    par = c(-0.0957109185774834, -0.0447870441817328, 0.489506242960585, 
    -1.62254830191139), value = 52.2796789678933, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.9681795101503, -6.8499698819835, 
    126.663462507892, -4.95683175572026, -6.8499698819835, 20.5025642046053, 
    -12.0356496129403, -6.09590336875243, 126.663462507892, -12.0356496129403, 
    2648.884949771, -153.717448977631, -4.95683175572026, -6.09590336875243, 
    -153.717448977631, 156.701964847628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0957109185774834, -0.0447870441817328
    ), logphi = c(0.489506242960585, -1.62254830191139)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_114 = structure(list(
    par = c(-0.0668219892098477, -0.250643577354391, 0.504156858344394, 
    -1.54944959692714), value = 70.0960713545524, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.8760471324481, -8.34445684816387, 
    116.943515557466, -6.50226928300413, -8.34445684816387, 14.1327972116301, 
    -14.7288544809498, -4.62886004726215, 116.943515557466, -14.7288544809498, 
    2228.1847943546, -146.322097785756, -6.50226928300413, -4.62886004726215, 
    -146.322097785756, 142.07810929534), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0668219892098477, -0.250643577354391
    ), logphi = c(0.504156858344394, -1.54944959692714)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_115 = structure(list(
    par = c(0.147674859717219, 0.456930484005121, 0.485512193805695, 
    -1.61459090098388), value = 30.7233124462522, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.5952351831246, -3.01237048194736, 
    92.533287009644, 2.35210151089404, -3.01237048194736, 37.9631807359004, 
    -1.77824437486152, -5.49690447604334, 92.533287009644, -1.77824437486152, 
    2121.23091290195, -106.738607153822, 2.35210151089404, -5.49690447604334, 
    -106.738607153822, 123.333842698692), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.147674859717219, 0.456930484005121
    ), logphi = c(0.485512193805695, -1.61459090098388)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_116 = structure(list(
    par = c(-0.00735937663102787, 0.195600723411996, 0.499855435119738, 
    -1.61857122674046), value = 45.0610771291567, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.6882292113228, -6.048832444705, 
    120.246122058631, -3.03350486063891, -6.048832444705, 29.5166950401438, 
    -9.78289138409139, -6.70316950035499, 120.246122058631, -9.78289138409139, 
    2517.16261870172, -157.686637837884, -3.03350486063891, -6.70316950035499, 
    -157.686637837884, 150.970368544279), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00735937663102787, 0.195600723411996
    ), logphi = c(0.499855435119738, -1.61857122674046)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_117 = structure(list(
    par = c(-0.30714456641805, 0.252125267257972, 0.527584375753697, 
    -1.75309386650025), value = 23.0139025006512, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.7630088993617, -5.50706692692415, 
    158.149393319817, -13.1057779793053, -5.50706692692415, 29.288335891664, 
    -18.6536998452169, -9.56090990467118, 158.149393319817, -18.6536998452169, 
    3635.22499629276, -297.091089212387, -13.1057779793053, -9.56090990467118, 
    -297.091089212387, 201.913016127264), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30714456641805, 0.252125267257972
    ), logphi = c(0.527584375753697, -1.75309386650025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_118 = structure(list(
    par = c(-0.488250382739389, 0.281713993431648, 0.507869802804819, 
    -1.70587946266533), value = 19.006693807968, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.8369236047388, 0.285557440804496, 
    131.12304641183, -12.1911918053996, 0.285557440804496, 27.9974759340718, 
    -9.57473927165609, -9.42481714538701, 131.12304641183, -9.57473927165609, 
    2663.92500518542, -237.079699727083, -12.1911918053996, -9.42481714538701, 
    -237.079699727083, 156.88980048445), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.488250382739389, 0.281713993431648
    ), logphi = c(0.507869802804819, -1.70587946266533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_119 = structure(list(
    par = c(-0.24463520228103, 0.0263197344788252, 0.472497592500936, 
    -1.56794383518026), value = 39.7314309098794, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.6817454112584, -2.36230159877948, 
    104.561389173696, -4.33321543447107, -2.36230159877948, 18.9445298097723, 
    -7.20910924734142, -5.93065422371808, 104.561389173696, -7.20910924734142, 
    1883.88687665864, -108.204030130565, -4.33321543447107, -5.93065422371808, 
    -108.204030130565, 114.111826967189), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24463520228103, 0.0263197344788252
    ), logphi = c(0.472497592500936, -1.56794383518026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_120 = structure(list(
    par = c(-0.40715378492456, -0.463142233720114, 0.503787691575664, 
    -1.56000442101842), value = 62.9510860405695, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.1701147043384, -5.05037763964822, 
    123.222512206311, -13.6538512141016, -5.05037763964822, 9.75214862464213, 
    -17.6758470313843, -4.20607102835646, 123.222512206311, -17.6758470313843, 
    2253.84268792972, -184.949387919353, -13.6538512141016, -4.20607102835646, 
    -184.949387919353, 147.528692201249), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40715378492456, -0.463142233720114
    ), logphi = c(0.503787691575664, -1.56000442101842)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_121 = structure(list(
    par = c(-0.153419960766363, 0.452664334189629, 0.575871788871976, 
    -1.33417695020454), value = 42.7647887320947, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.6888906486394, 0.519988645919511, 
    90.2191946074993, -12.0677071686615, 0.519988645919511, 40.3322732900335, 
    -13.7044968990807, -5.92175697455843, 90.2191946074993, -13.7044968990807, 
    1033.94747329943, -172.813110702386, -12.0677071686615, -5.92175697455843, 
    -172.813110702386, 96.9581164973476), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153419960766363, 0.452664334189629
    ), logphi = c(0.575871788871976, -1.33417695020454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_122 = structure(list(
    par = c(-0.305372199093072, 0.0505292468840744, 0.514459792446113, 
    -1.54610679056646), value = 41.6121445338352, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.6301227678802, -2.93859209854475, 
    130.775592930732, -11.8785469513938, -2.93859209854475, 26.4424315190581, 
    -16.7023211385953, -7.36443206861281, 130.775592930732, -16.7023211385953, 
    2204.2370593951, -200.527116240856, -11.8785469513938, -7.36443206861281, 
    -200.527116240856, 148.707678023996), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305372199093072, 0.0505292468840744
    ), logphi = c(0.514459792446113, -1.54610679056646)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_123 = structure(list(
    par = c(-0.444358923619106, 0.0965745201426935, 0.52917327611357, 
    -1.60595691804708), value = 34.7532908569244, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.8948348617221, -2.92134178359049, 
    123.592322134769, -14.7958551508509, -2.92134178359049, 22.1128728306041, 
    -19.1194863479183, -7.17095583269156, 123.592322134769, -19.1194863479183, 
    2229.05233522042, -232.612534652787, -14.7958551508509, -7.17095583269156, 
    -232.612534652787, 150.50949228268), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.444358923619106, 0.0965745201426935
    ), logphi = c(0.52917327611357, -1.60595691804708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_124 = structure(list(
    par = c(-0.0365887964671063, 0.156159680124873, 0.517420019463804, 
    -1.55742758497253), value = 47.3471557084227, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.1826364666729, -6.08861165574126, 
    107.975162936924, -5.3097817591663, -6.08861165574126, 25.2294046276802, 
    -12.6670293791875, -5.94157953326402, 107.975162936924, -12.6670293791875, 
    1997.36633175185, -156.254630256925, -5.3097817591663, -5.94157953326402, 
    -156.254630256925, 130.146958507993), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0365887964671063, 0.156159680124873
    ), logphi = c(0.517420019463804, -1.55742758497253)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_125 = structure(list(
    par = c(-0.156362226206947, -0.0586364436524955, 0.492575880378369, 
    -1.61163023538551), value = 47.1503042566777, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.2222521295629, -5.66224005282834, 
    127.219017940661, -6.52280036828046, -5.66224005282834, 20.7436728114629, 
    -12.977321963703, -6.21009136203554, 127.219017940661, -12.977321963703, 
    2553.75851101292, -161.627853985102, -6.52280036828046, -6.21009136203554, 
    -161.627853985102, 153.963965484394), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.156362226206947, -0.0586364436524955
    ), logphi = c(0.492575880378369, -1.61163023538551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_126 = structure(list(
    par = c(-0.438738409716016, -0.0309702728393954, 0.504546208858123, 
    -1.62902520898121), value = 35.8244213756464, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.4076555951558, -2.74951475276453, 
    124.077253490285, -12.5194331905831, -2.74951475276453, 18.9451010452757, 
    -15.9613378514223, -6.6963411615717, 124.077253490285, -15.9613378514223, 
    2366.2652696963, -203.271267425364, -12.5194331905831, -6.6963411615717, 
    -203.271267425364, 148.319736130276), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438738409716016, -0.0309702728393954
    ), logphi = c(0.504546208858123, -1.62902520898121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_127 = structure(list(
    par = c(-0.227495024073671, -0.187798041819702, 0.501859038287832, 
    -1.59368021009638), value = 65.0849434128718, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.88707489585, -7.63224896616066, 
    151.843163482823, -11.3383028104153, -7.63224896616066, 18.706058071416, 
    -19.1308759127651, -6.64885097734214, 151.843163482823, -19.1308759127651, 
    2937.53440231015, -211.274021372887, -11.3383028104153, -6.64885097734214, 
    -211.274021372887, 183.616587154489), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227495024073671, -0.187798041819702
    ), logphi = c(0.501859038287832, -1.59368021009638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_128 = structure(list(
    par = c(-0.198687873222062, 0.00303339960598299, 0.483295620102752, 
    -1.61295662792237), value = 38.0179121235176, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.8851729774167, -2.79648398837651, 
    124.292648459701, -5.78832154474185, -2.79648398837651, 26.044439389139, 
    -10.3027105868847, -6.58075237414124, 124.292648459701, -10.3027105868847, 
    2452.56865386168, -149.412586699427, -5.78832154474185, -6.58075237414124, 
    -149.412586699427, 145.967581786977), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198687873222062, 0.00303339960598299
    ), logphi = c(0.483295620102752, -1.61295662792237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_129 = structure(list(
    par = c(-0.261565696507781, -0.00052324268533965, 0.509474469646055, 
    -1.61442381401567), value = 38.7324589650753, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.5577752881121, -4.29592834194636, 
    113.040093079775, -8.9695138942858, -4.29592834194636, 18.6328091000831, 
    -13.9901406619458, -5.86817201764234, 113.040093079775, -13.9901406619458, 
    2182.11828040538, -173.947716566758, -8.9695138942858, -5.86817201764234, 
    -173.947716566758, 136.731442523796), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261565696507781, -0.00052324268533965
    ), logphi = c(0.509474469646055, -1.61442381401567)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_130 = structure(list(
    par = c(-0.229377118463684, -0.0517018177742849, 0.510793723674508, 
    -1.55304830717394), value = 44.244176090911, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.9486274814795, -4.97236444196858, 
    119.2947499149, -9.51008684779708, -4.97236444196858, 19.5770704731757, 
    -15.5245194033427, -5.93883820787511, 119.2947499149, -15.5245194033427, 
    2109.20384179225, -172.765619052662, -9.51008684779708, -5.93883820787511, 
    -172.765619052662, 138.72105826529), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229377118463684, -0.0517018177742849
    ), logphi = c(0.510793723674508, -1.55304830717394)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_131 = structure(list(
    par = c(-0.322164435672777, 0.322479115916678, 0.479553209811279, 
    -1.73902255449124), value = 7.68585267791033, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.3754949139673, 3.55825150322175, 
    137.674540571453, -6.06640600597785, 3.55825150322175, 39.4712027054211, 
    1.29151225802815, -9.18023116902589, 137.674540571453, 1.29151225802815, 
    3098.54231278539, -203.201678014242, -6.06640600597785, -9.18023116902589, 
    -203.201678014242, 163.873757050403), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.322164435672777, 0.322479115916678
    ), logphi = c(0.479553209811279, -1.73902255449124)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_132 = structure(list(
    par = c(-0.38487283413122, 0.215103405301398, 0.517044257725105, 
    -1.53230698506559), value = 34.8085580144073, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.8151264893256, 0.156900702208418, 
    109.727093304812, -10.7837226881458, 0.156900702208418, 26.4564715521942, 
    -11.7608028098459, -7.50288300555013, 109.727093304812, -11.7608028098459, 
    1728.27343303261, -175.555078691048, -10.7837226881458, -7.50288300555013, 
    -175.555078691048, 120.604349113762), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38487283413122, 0.215103405301398
    ), logphi = c(0.517044257725105, -1.53230698506559)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_133 = structure(list(
    par = c(-0.196333107218245, 0.356927329413298, 0.530395272049908, 
    -1.50994004106428), value = 34.4251812019861, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.5845614732582, 0.299642167078673, 
    115.994282216647, -9.09232199930443, 0.299642167078673, 38.8844953089773, 
    -11.9294768463618, -8.06866905556092, 115.994282216647, -11.9294768463618, 
    1819.50640281414, -190.421683992525, -9.09232199930443, -8.06866905556092, 
    -190.421683992525, 130.168056692526), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196333107218245, 0.356927329413298
    ), logphi = c(0.530395272049908, -1.50994004106428)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_134 = structure(list(
    par = c(-0.0703023820495134, -0.0403744725058058, 0.475958992386546, 
    -1.57223260933206), value = 41.5336975544556, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.5021763788658, -4.75263554022831, 
    96.3240891707073, -2.11855922849224, -4.75263554022831, 17.6403744553966, 
    -7.95231400374519, -4.77643405893957, 96.3240891707073, -7.95231400374519, 
    1884.48886535575, -92.4110833828706, -2.11855922849224, -4.77643405893957, 
    -92.4110833828706, 113.148704784294), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0703023820495134, -0.0403744725058058
    ), logphi = c(0.475958992386546, -1.57223260933206)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_135 = structure(list(
    par = c(-0.346599953520072, -0.139672903571472, 0.52244241365735, 
    -1.67630729641913), value = 39.6362757156258, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.9935298047468, -6.16574520861946, 
    140.232112160632, -14.540728065171, -6.16574520861946, 17.3832628611592, 
    -23.0669628660252, -5.93805764115274, 140.232112160632, -23.0669628660252, 
    3040.29929521477, -256.842182685624, -14.540728065171, -5.93805764115274, 
    -256.842182685624, 184.463834761672), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346599953520072, -0.139672903571472
    ), logphi = c(0.52244241365735, -1.67630729641913)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_136 = structure(list(
    par = c(-0.323796336285453, -0.147443268965826, 0.506048000490521, 
    -1.69792845207572), value = 40.4915491725038, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.5123411531558, -5.97565085413976, 
    132.692579274618, -11.5672978147074, -5.97565085413976, 15.3048607174355, 
    -18.1170258759522, -5.81599675353317, 132.692579274618, -18.1170258759522, 
    2980.82462346549, -220.151696513682, -11.5672978147074, -5.81599675353317, 
    -220.151696513682, 171.795218786741), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323796336285453, -0.147443268965826
    ), logphi = c(0.506048000490521, -1.69792845207572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_137 = structure(list(
    par = c(-0.143939139989175, 0.409787474029856, 0.498007267729668, 
    -1.48071043657955), value = 31.210444515589, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.6421794422712, 3.70006588390481, 
    103.621431129852, -3.39912510449736, 3.70006588390481, 42.4291391336595, 
    -4.96734284105571, -7.54042702855173, 103.621431129852, -4.96734284105571, 
    1610.37178842793, -127.105043242537, -3.39912510449736, -7.54042702855173, 
    -127.105043242537, 108.155166443247), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143939139989175, 0.409787474029856
    ), logphi = c(0.498007267729668, -1.48071043657955)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_138 = structure(list(
    par = c(-0.224119339367453, 0.101339371918463, 0.542170018676903, 
    -1.57506170829636), value = 50.0894265366482, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.9855584339979, -6.59794197943597, 
    130.977964021284, -13.3517576257347, -6.59794197943597, 23.8752821726251, 
    -21.284170456326, -6.8169771090254, 130.977964021284, -21.284170456326, 
    2347.6878661679, -241.089446451959, -13.3517576257347, -6.8169771090254, 
    -241.089446451959, 161.714314204531), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224119339367453, 0.101339371918463
    ), logphi = c(0.542170018676903, -1.57506170829636)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_139 = structure(list(
    par = c(-0.259023050123984, -0.212956018917782, 0.505431441694892, 
    -1.65909785857873), value = 52.3584138820962, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.5496741712317, -7.57146685970156, 
    148.820903197233, -12.0765477387152, -7.57146685970156, 16.3992633783749, 
    -19.9170494852297, -6.12857393100796, 148.820903197233, -19.9170494852297, 
    3209.44428800374, -230.295517312129, -12.0765477387152, -6.12857393100796, 
    -230.295517312129, 190.886259630929), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259023050123984, -0.212956018917782
    ), logphi = c(0.505431441694892, -1.65909785857873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_140 = structure(list(
    par = c(-0.325973084070833, 0.00460519221483966, 0.516935852570674, 
    -1.56354549172004), value = 44.6546212336866, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.3267095307034, -4.95065869188238, 
    131.405565094056, -12.7909564975326, -4.95065869188238, 20.7146610282649, 
    -18.0452646194595, -7.01965570293339, 131.405565094056, -18.0452646194595, 
    2287.00399556381, -210.127765344126, -12.7909564975326, -7.01965570293339, 
    -210.127765344126, 153.210038229545), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325973084070833, 0.00460519221483966
    ), logphi = c(0.516935852570674, -1.56354549172004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_141 = structure(list(
    par = c(-0.318165110411714, -0.12595150443748, 0.482708813316704, 
    -1.60795535613833), value = 44.281223692006, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.6968835036758, -3.73182302304542, 
    125.066853135181, -8.55030075719299, -3.73182302304542, 17.4911138035583, 
    -12.382339056316, -6.23115915843186, 125.066853135181, -12.382339056316, 
    2391.90768919784, -157.367513475393, -8.55030075719299, -6.23115915843186, 
    -157.367513475393, 144.182920257308), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318165110411714, -0.12595150443748
    ), logphi = c(0.482708813316704, -1.60795535613833)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_142 = structure(list(
    par = c(-0.0857009914175159, 0.113579360709076, 0.498390378735976, 
    -1.69654780913181), value = 37.3238844201048, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.452969584901, -7.2783874696114, 
    137.915616432949, -5.27952329232306, -7.2783874696114, 25.3347508056834, 
    -11.3405360480101, -7.17719513687598, 137.915616432949, -11.3405360480101, 
    3196.84028135825, -194.518333025862, -5.27952329232306, -7.17719513687598, 
    -194.518333025862, 178.444732449989), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0857009914175159, 0.113579360709076
    ), logphi = c(0.498390378735976, -1.69654780913181)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_143 = structure(list(
    par = c(-0.518908168711911, -0.115091169556734, 0.512211679831173, 
    -1.57419681712362), value = 50.5933261778824, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.345715249809, -3.49808826172193, 
    143.37941095377, -17.858041642782, -3.49808826172193, 19.4614213651079, 
    -21.9940531671625, -7.21595554509236, 143.37941095377, -21.9940531671625, 
    2498.41978507348, -244.7851025833, -17.858041642782, -7.21595554509236, 
    -244.7851025833, 168.568649485223), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.518908168711911, -0.115091169556734
    ), logphi = c(0.512211679831173, -1.57419681712362)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_144 = structure(list(
    par = c(-0.216653629664306, 0.152995459059678, 0.496068057174851, 
    -1.68537744464836), value = 29.1046269698048, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.183418142171, -3.08235362833642, 
    127.955468750329, -6.7947852175898, -3.08235362833642, 26.1041225160241, 
    -9.43928462682209, -7.37323677979518, 127.955468750329, -9.43928462682209, 
    2764.51527166977, -187.718151672733, -6.7947852175898, -7.37323677979518, 
    -187.718151672733, 157.595389586263), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216653629664306, 0.152995459059678
    ), logphi = c(0.496068057174851, -1.68537744464836)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_145 = structure(list(
    par = c(-0.286464261840061, -0.190353330015201, 0.526321476319273, 
    -1.54999227280147), value = 57.408330240746, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.3235552657391, -6.2844702473086, 
    125.800664415365, -13.5252319424239, -6.2844702473086, 15.7805229061836, 
    -20.1479511208191, -5.17190650395349, 125.800664415365, -20.1479511208191, 
    2233.56242388206, -210.223409194299, -13.5252319424239, -5.17190650395349, 
    -210.223409194299, 152.542212596529), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286464261840061, -0.190353330015201
    ), logphi = c(0.526321476319273, -1.54999227280147)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_146 = structure(list(
    par = c(-0.699652278803428, -0.623738802545738, 0.52077539978906, 
    -1.73015576613884), value = 44.0083085283035, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(24.9325895165242, -4.86189363435585, 
    130.756291300216, -20.1285751693092, -4.86189363435585, 6.90499360267438, 
    -28.875974233955, -2.42028153607521, 130.756291300216, -28.875974233955, 
    3445.22509760559, -321.215540099118, -20.1285751693092, -2.42028153607521, 
    -321.215540099118, 205.867180532948), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.699652278803428, -0.623738802545738
    ), logphi = c(0.52077539978906, -1.73015576613884)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_147 = structure(list(
    par = c(-0.405254593997531, 0.141455420879549, 0.498154616822358, 
    -1.59323335685963), value = 33.1841841454775, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.7681991321648, -0.31375743425599, 
    133.105711034531, -11.2000333096773, -0.31375743425599, 27.5236258175937, 
    -11.7232846505999, -8.67462622533566, 133.105711034531, -11.7232846505999, 
    2337.35348187913, -198.051427178214, -11.2000333096773, -8.67462622533566, 
    -198.051427178214, 149.070023256925), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.405254593997531, 0.141455420879549
    ), logphi = c(0.498154616822358, -1.59323335685963)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_148 = structure(list(
    par = c(-0.418822628377609, -0.246800476219645, 0.507300480436437, 
    -1.60482827074213), value = 53.0475913373509, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.4258990156831, -5.19951859700996, 
    135.637461465166, -14.7154810008487, -5.19951859700996, 14.5058463374426, 
    -20.0925465119184, -5.73591065400336, 135.637461465166, -20.0925465119184, 
    2591.6940827404, -220.388999928822, -14.7154810008487, -5.73591065400336, 
    -220.388999928822, 165.765769713389), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418822628377609, -0.246800476219645
    ), logphi = c(0.507300480436437, -1.60482827074213)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_149 = structure(list(
    par = c(-0.177155334050572, 0.136368831981358, 0.493373768880609, 
    -1.50372501531256), value = 51.6960204519657, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.8171796436876, -1.71932849823975, 
    125.422977964362, -5.91721439935355, -1.71932849823975, 32.4163897005292, 
    -11.2106467895501, -7.60045214587279, 125.422977964362, -11.2106467895501, 
    2039.28082952842, -145.502151877253, -5.91721439935355, -7.60045214587279, 
    -145.502151877253, 133.533951784059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.177155334050572, 0.136368831981358
    ), logphi = c(0.493373768880609, -1.50372501531256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_150 = structure(list(
    par = c(-0.252300406073152, 0.0613420379828343, 0.482488404995648, 
    -1.63227855407694), value = 31.8940323762366, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.1878136552684, -1.4530973517779, 
    130.970660843666, -6.68953573601527, -1.4530973517779, 28.1833642477025, 
    -9.4354371222849, -7.38998267024726, 130.970660843666, -9.4354371222849, 
    2602.59538522512, -166.039530293816, -6.68953573601527, -7.38998267024726, 
    -166.039530293816, 153.009092807466), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252300406073152, 0.0613420379828343
    ), logphi = c(0.482488404995648, -1.63227855407694)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_151 = structure(list(
    par = c(-0.0827571311838028, -0.27325005936134, 0.495791290540963, 
    -1.72864272450099), value = 40.2002650639239, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.7944372642107, -7.37870744060842, 
    113.494254630808, -5.58215637624926, -7.37870744060842, 11.8563112998515, 
    -12.6567899947361, -4.09006224089126, 113.494254630808, -12.6567899947361, 
    2927.31726069562, -157.212091131953, -5.58215637624926, -4.09006224089126, 
    -157.212091131953, 156.989670562879), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0827571311838028, -0.27325005936134
    ), logphi = c(0.495791290540963, -1.72864272450099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_152 = structure(list(
    par = c(-0.331015816290163, 0.159364015940577, 0.456284665636805, 
    -1.67499742455847), value = 21.5081316124237, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.4353131514913, 1.26594794735979, 
    110.473248088105, -3.79208543321852, 1.26594794735979, 23.8891166244315, 
    -0.298810606480515, -6.76693230117209, 110.473248088105, 
    -0.298810606480515, 2295.63939385624, -125.031625294092, 
    -3.79208543321852, -6.76693230117209, -125.031625294092, 
    124.538906100646), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331015816290163, 0.159364015940577
    ), logphi = c(0.456284665636805, -1.67499742455847)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_153 = structure(list(
    par = c(-0.178698072322282, 0.139510867798522, 0.505336440935811, 
    -1.64838912781985), value = 34.1594823466066, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.4892148524621, -4.40766257092662, 
    132.987331431522, -7.58386565813396, -4.40766257092662, 27.3679270321736, 
    -12.5676411517617, -7.53132930420009, 132.987331431522, -12.5676411517617, 
    2734.18147389037, -198.201490235306, -7.58386565813396, -7.53132930420009, 
    -198.201490235306, 163.538779185401), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178698072322282, 0.139510867798522
    ), logphi = c(0.505336440935811, -1.64838912781985)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_154 = structure(list(
    par = c(-0.229968010632967, -0.0395910726308542, 0.478379981651427, 
    -1.61643661545709), value = 39.4742105659593, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.2331769374773, -3.81864058773829, 
    116.905728932082, -5.66000663582145, -3.81864058773829, 18.9285093750158, 
    -9.48057393479473, -6.06838369776597, 116.905728932082, -9.48057393479473, 
    2308.86236421846, -136.609307640256, -5.66000663582145, -6.06838369776597, 
    -136.609307640256, 136.200054992486), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229968010632967, -0.0395910726308542
    ), logphi = c(0.478379981651427, -1.61643661545709)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_155 = structure(list(
    par = c(-0.129358416395022, 0.0645195441179138, 0.499047530287713, 
    -1.64809024936371), value = 38.0985135118964, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.3217908544306, -5.84148799198658, 
    116.065500677109, -5.54683007170098, -5.84148799198658, 20.1968614241821, 
    -11.014652288921, -6.07424222209829, 116.065500677109, -11.014652288921, 
    2456.90634222662, -160.804750194643, -5.54683007170098, -6.07424222209829, 
    -160.804750194643, 144.709394049869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129358416395022, 0.0645195441179138
    ), logphi = c(0.499047530287713, -1.64809024936371)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_156 = structure(list(
    par = c(-0.281876503430008, 0.269530050270944, 0.488668405266603, 
    -1.70201203287016), value = 14.474658325926, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.0761692008875, 0.734075098485221, 
    127.198017056074, -6.32057298188826, 0.734075098485221, 31.9425891062153, 
    -3.93229474138224, -8.22867528027516, 127.198017056074, -3.93229474138224, 
    2734.80812425841, -187.821614583861, -6.32057298188826, -8.22867528027516, 
    -187.821614583861, 152.464241508277), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281876503430008, 0.269530050270944
    ), logphi = c(0.488668405266603, -1.70201203287016)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_157 = structure(list(
    par = c(-0.0670657436081049, 0.109949529468686, 0.490705707114577, 
    -1.50101103628132), value = 53.635056690154, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.0553879785227, -4.58750760401472, 
    115.724839622189, -3.35382552307806, -4.58750760401472, 28.5874620473692, 
    -10.7721505884228, -6.56342792204612, 115.724839622189, -10.7721505884228, 
    1965.15861442137, -122.83617127018, -3.35382552307806, -6.56342792204612, 
    -122.83617127018, 126.82366980421), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0670657436081049, 0.109949529468686
    ), logphi = c(0.490705707114577, -1.50101103628132)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_158 = structure(list(
    par = c(-0.088364869715536, -0.105353691388349, 0.508131212287926, 
    -1.51029704612389), value = 54.6706345238166, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.5605882104021, -6.11996206245635, 
    98.111297916148, -5.77202758300643, -6.11996206245635, 16.2046393885618, 
    -12.5988271584276, -4.50171028454349, 98.111297916148, -12.5988271584276, 
    1700.91964371544, -124.839154123535, -5.77202758300643, -4.50171028454349, 
    -124.839154123535, 112.67871372489), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.088364869715536, -0.105353691388349
    ), logphi = c(0.508131212287926, -1.51029704612389)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_159 = structure(list(
    par = c(-0.521562838149345, 0.161307676120586, 0.548442544649371, 
    -1.60858038533913), value = 32.972229775313, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(39.5613501478209, -2.02451060360431, 
    128.338856187682, -18.6096004952674, -2.02451060360431, 26.5293725494331, 
    -24.3138495132911, -7.55112596806384, 128.338856187682, -24.3138495132911, 
    2289.20456398107, -277.654865247001, -18.6096004952674, -7.55112596806384, 
    -277.654865247001, 163.023166996012), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.521562838149345, 0.161307676120586
    ), logphi = c(0.548442544649371, -1.60858038533913)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_160 = structure(list(
    par = c(-0.0582712804741899, 0.00999618861429019, 0.484631597484957, 
    -1.65385684071595), value = 40.4767739871147, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.3501452991156, -5.91664546867321, 
    113.87167303667, -3.12066858576543, -5.91664546867321, 20.9424514316936, 
    -9.06491042407254, -5.56351031733016, 113.87167303667, -9.06491042407254, 
    2541.39429209665, -135.198399986436, -3.12066858576543, -5.56351031733016, 
    -135.198399986436, 144.797414877829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0582712804741899, 0.00999618861429019
    ), logphi = c(0.484631597484957, -1.65385684071595)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_161 = structure(list(
    par = c(-0.200543070406145, -0.199290432693669, 0.473057541640084, 
    -1.74974636916524), value = 31.5115833707845, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.6898641942376, -6.02159645080036, 
    138.243733022847, -6.453594947331, -6.02159645080036, 16.3920239559801, 
    -11.1060510281646, -5.66913714017403, 138.243733022847, -11.1060510281646, 
    3518.27510578495, -178.502231110045, -6.453594947331, -5.66913714017403, 
    -178.502231110045, 180.454017768561), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.200543070406145, -0.199290432693669
    ), logphi = c(0.473057541640084, -1.74974636916524)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_162 = structure(list(
    par = c(-0.371774084096358, 0.18613968109674, 0.546391763140125, 
    -1.50417527066497), value = 38.4470019036429, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.6687535499186, -1.66629198261603, 
    117.465136638017, -15.2440814007448, -1.66629198261603, 28.1773278132391, 
    -18.835209083079, -7.11327822067176, 117.465136638017, -18.835209083079, 
    1777.4001527453, -222.04616610022, -15.2440814007448, -7.11327822067176, 
    -222.04616610022, 135.983983602372), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371774084096358, 0.18613968109674
    ), logphi = c(0.546391763140125, -1.50417527066497)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_163 = structure(list(
    par = c(-0.454122046389257, 0.0824382964110351, 0.49864754843071, 
    -1.54149007751362), value = 35.432743535103, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.6981862421773, 0.811036727554892, 
    124.121387035103, -11.8621540909913, 0.811036727554892, 26.7268928286768, 
    -12.6751759381705, -7.9780551631714, 124.121387035103, -12.6751759381705, 
    1989.05222448253, -178.36599482024, -11.8621540909913, -7.9780551631714, 
    -178.36599482024, 132.799722255328), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.454122046389257, 0.0824382964110351
    ), logphi = c(0.49864754843071, -1.54149007751362)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_164 = structure(list(
    par = c(-0.0791944445637127, -0.112535269818307, 0.444490554052096, 
    -1.68464038999344), value = 40.4321326933312, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.1224638128173, -5.39117830378189, 
    114.629083228124, -0.255959403006045, -5.39117830378189, 
    16.9903110567304, -4.17710194078325, -4.97830504109231, 114.629083228124, 
    -4.17710194078325, 2777.88928609723, -90.0478444965103, -0.255959403006045, 
    -4.97830504109231, -90.0478444965103, 145.024006862116), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0791944445637127, -0.112535269818307
    ), logphi = c(0.444490554052096, -1.68464038999344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_165 = structure(list(
    par = c(-0.386447548465176, -0.00750326765401222, 0.499696946740105, 
    -1.55918996871225), value = 35.4846226772483, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.4159011408752, -2.17679790104341, 
    106.592682714179, -9.61479570449342, -2.17679790104341, 17.8888758490814, 
    -12.2299550735505, -6.04460721120859, 106.592682714179, -12.2299550735505, 
    1813.94335700702, -152.460629923468, -9.61479570449342, -6.04460721120859, 
    -152.460629923468, 118.520189616333), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.386447548465176, -0.00750326765401222
    ), logphi = c(0.499696946740105, -1.55918996871225)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_166 = structure(list(
    par = c(-0.278166417149688, -0.0216218604389096, 0.471730967256573, 
    -1.72092210026351), value = 26.9166558497824, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.1407393195471, -3.72378140411911, 
    112.344086140581, -5.55734811413799, -3.72378140411911, 15.4417206896795, 
    -6.86053174181467, -5.70054247539531, 112.344086140581, -6.86053174181467, 
    2594.67615176767, -146.83971961027, -5.55734811413799, -5.70054247539531, 
    -146.83971961027, 137.833855911929), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278166417149688, -0.0216218604389096
    ), logphi = c(0.471730967256573, -1.72092210026351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_167 = structure(list(
    par = c(-0.209914647327702, 0.0487740985827182, 0.513016606803697, 
    -1.59656726953822), value = 42.8314133119171, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.5730905308895, -4.65063240007169, 
    126.875896564016, -9.35720755901315, -4.65063240007169, 24.0438781240471, 
    -15.5278212634613, -6.76917817088452, 126.875896564016, -15.5278212634613, 
    2393.73757503536, -193.551732474262, -9.35720755901315, -6.76917817088452, 
    -193.551732474262, 152.557742705284), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209914647327702, 0.0487740985827182
    ), logphi = c(0.513016606803697, -1.59656726953822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_168 = structure(list(
    par = c(-0.00321068075758808, -0.107334444578746, 0.468524491398566, 
    -1.62546028132254), value = 41.8165246904567, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.7857995515337, -5.90192862048866, 
    92.7436604953868, -0.866237009233828, -5.90192862048866, 
    14.7700009431873, -6.8591679074359, -4.12632332924545, 92.7436604953868, 
    -6.8591679074359, 2072.23589022654, -83.6935724821686, -0.866237009233828, 
    -4.12632332924545, -83.6935724821686, 117.795717486047), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00321068075758808, -0.107334444578746
    ), logphi = c(0.468524491398566, -1.62546028132254)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_169 = structure(list(
    par = c(-0.261102006516206, -0.202967256981205, 0.486904562161837, 
    -1.67387919582866), value = 36.9853856026532, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.0931635465632, -4.39054337775246, 
    126.93770019645, -8.38230249566863, -4.39054337775246, 17.8097845839886, 
    -13.5483636842793, -5.49246068093368, 126.93770019645, -13.5483636842793, 
    2791.85372203372, -173.434825856411, -8.38230249566863, -5.49246068093368, 
    -173.434825856411, 159.070262863992), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261102006516206, -0.202967256981205
    ), logphi = c(0.486904562161837, -1.67387919582866)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_170 = structure(list(
    par = c(-0.473422384288282, 0.0905447964828985, 0.515234592250494, 
    -1.73943205477509), value = 31.0896530144862, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.7982074668876, -3.7581654783736, 
    151.428447816571, -16.3189255255602, -3.7581654783736, 23.5070556069417, 
    -20.337875351828, -9.20275670335258, 151.428447816571, -20.337875351828, 
    3387.39471449578, -289.758104700333, -16.3189255255602, -9.20275670335258, 
    -289.758104700333, 192.730254802598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.473422384288282, 0.0905447964828985
    ), logphi = c(0.515234592250494, -1.73943205477509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_171 = structure(list(
    par = c(-0.398978491545979, -0.0421066295680985, 0.505084676794802, 
    -1.61983004298508), value = 43.3339695124654, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.794950822715, -3.98786183630762, 
    131.932317382066, -12.7330932375713, -3.98786183630762, 18.5433457673412, 
    -16.9117817545583, -6.96244467324192, 131.932317382066, -16.9117817545583, 
    2501.89646651222, -210.9645330437, -12.7330932375713, -6.96244467324192, 
    -210.9645330437, 157.422793719775), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.398978491545979, -0.0421066295680985
    ), logphi = c(0.505084676794802, -1.61983004298508)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_172 = structure(list(
    par = c(-0.411836019375578, -0.162753530767833, 0.48749444504684, 
    -1.72487098363267), value = 32.5345694344714, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.6615520122151, -5.15187300464959, 
    145.598392620627, -12.3560200151474, -5.15187300464959, 15.8754175032527, 
    -16.6594534114495, -6.66329495579987, 145.598392620627, -16.6594534114495, 
    3346.56649875953, -230.794362982678, -12.3560200151474, -6.66329495579987, 
    -230.794362982678, 183.851493208209), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411836019375578, -0.162753530767833
    ), logphi = c(0.48749444504684, -1.72487098363267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_173 = structure(list(
    par = c(-0.0146522427213406, -0.0300212839450276, 0.431818496669845, 
    -1.63337519186276), value = 43.6582287745091, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4783331331666, -4.68946628195965, 
    101.07972821416, 2.57004461978738, -4.68946628195965, 19.1312216148987, 
    -2.14056421654618, -4.57848555956986, 101.07972821416, -2.14056421654618, 
    2350.64957219322, -47.9904055641356, 2.57004461978738, -4.57848555956986, 
    -47.9904055641356, 125.693204410027), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0146522427213406, -0.0300212839450276
    ), logphi = c(0.431818496669845, -1.63337519186276)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_174 = structure(list(
    par = c(-0.706171896385826, -0.259956835700868, 0.501956868617002, 
    -1.76776728848305), value = 27.5222142687858, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(30.9617490223957, -3.98067949625158, 
    147.898988780426, -19.7312442971054, -3.98067949625158, 14.7653594133601, 
    -28.7317523071096, -5.68441922510488, 147.898988780426, -28.7317523071096, 
    3704.93946169681, -322.439764884663, -19.7312442971054, -5.68441922510488, 
    -322.439764884663, 206.091728342628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.706171896385826, -0.259956835700868
    ), logphi = c(0.501956868617002, -1.76776728848305)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_175 = structure(list(
    par = c(-0.273720914324381, -0.0511610321630426, 0.466235323310107, 
    -1.72466720472243), value = 25.8809098746824, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.2529594531277, -3.28706669705525, 
    126.712398759388, -5.80312116804649, -3.28706669705525, 19.0852124202223, 
    -7.11923817586779, -6.25067286641467, 126.712398759388, -7.11923817586779, 
    2963.51036868714, -158.805071553303, -5.80312116804649, -6.25067286641467, 
    -158.805071553303, 155.370891944173), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273720914324381, -0.0511610321630426
    ), logphi = c(0.466235323310107, -1.72466720472243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_176 = structure(list(
    par = c(-0.180590309055309, 0.225369371128231, 0.49004831322541, 
    -1.58326091904034), value = 36.7068331053027, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.2747283072539, -1.57713013493321, 
    132.155319244376, -5.26030596503801, -1.57713013493321, 32.8925317845119, 
    -7.98297567250472, -8.3454467407762, 132.155319244376, -7.98297567250472, 
    2439.03582384242, -166.361478980193, -5.26030596503801, -8.3454467407762, 
    -166.361478980193, 150.508525843307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180590309055309, 0.225369371128231
    ), logphi = c(0.49004831322541, -1.58326091904034)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_177 = structure(list(
    par = c(-0.303799999042237, -0.41918992033699, 0.479469422579264, 
    -1.59419304406894), value = 54.1315115571158, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.9770483689256, -5.44518532663574, 
    124.371746521135, -9.01144834042356, -5.44518532663574, 10.4771841318296, 
    -13.6831266726034, -4.69026281635365, 124.371746521135, -13.6831266726034, 
    2426.81528501443, -145.183838921703, -9.01144834042356, -4.69026281635365, 
    -145.183838921703, 146.454166017662), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303799999042237, -0.41918992033699
    ), logphi = c(0.479469422579264, -1.59419304406894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_178 = structure(list(
    par = c(-0.281687512412838, -0.0901823830803861, 0.491277909377736, 
    -1.63956058405305), value = 38.4155336728192, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.6124223284039, -3.90503994829317, 
    140.355642777479, -9.70216734685891, -3.90503994829317, 22.9156225355354, 
    -14.8068045806582, -6.90806007330735, 140.355642777479, -14.8068045806582, 
    2848.73995089896, -194.088887671029, -9.70216734685891, -6.90806007330735, 
    -194.088887671029, 169.243044290113), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281687512412838, -0.0901823830803861
    ), logphi = c(0.491277909377736, -1.63956058405305)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_179 = structure(list(
    par = c(-0.312349969928438, 0.152894395688747, 0.48142163215136, 
    -1.79392021247539), value = 22.5999387656924, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.6582329873904, -2.48030112359743, 
    152.166639095341, -8.03882432443004, -2.48030112359743, 28.6423996946894, 
    -5.96897443738698, -8.59197100222531, 152.166639095341, -5.96897443738698, 
    3815.48384118346, -233.199727714073, -8.03882432443004, -8.59197100222531, 
    -233.199727714073, 189.132837168593), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312349969928438, 0.152894395688747
    ), logphi = c(0.48142163215136, -1.79392021247539)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_180 = structure(list(
    par = c(-0.404624587087591, -0.106885586683214, 0.505198598366428, 
    -1.60826237679929), value = 40.2209710038607, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.9752105818344, -3.50755233036182, 
    133.216487290255, -13.3411783025394, -3.50755233036182, 19.355310090674, 
    -17.9887213516139, -6.60714770361892, 133.216487290255, -17.9887213516139, 
    2501.58614637996, -211.425821312616, -13.3411783025394, -6.60714770361892, 
    -211.425821312616, 158.95610518335), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404624587087591, -0.106885586683214
    ), logphi = c(0.505198598366428, -1.60826237679929)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_181 = structure(list(
    par = c(-0.360205872937219, 0.296478831791682, 0.513414277707408, 
    -1.65531901507849), value = 26.110011400725, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.0670829749432, -0.647191599867369, 
    121.285251797332, -9.91649108161852, -0.647191599867369, 
    27.5859137826018, -9.44382350631656, -8.47307297391353, 121.285251797332, 
    -9.44382350631656, 2332.09879660556, -207.441780192497, -9.91649108161852, 
    -8.47307297391353, -207.441780192497, 144.095862495419), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360205872937219, 0.296478831791682
    ), logphi = c(0.513414277707408, -1.65531901507849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_182 = structure(list(
    par = c(-0.378194164554809, -0.142658248600537, 0.491746030081185, 
    -1.56883127092969), value = 43.7428799770145, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.268432424057, -2.69386927698179, 
    116.419528518819, -10.0428809233222, -2.69386927698179, 17.6591286251693, 
    -13.5573801109956, -5.83793881503425, 116.419528518819, -13.5573801109956, 
    2056.72571018667, -155.913432664079, -10.0428809233222, -5.83793881503425, 
    -155.913432664079, 130.772552859426), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378194164554809, -0.142658248600537
    ), logphi = c(0.491746030081185, -1.56883127092969)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_183 = structure(list(
    par = c(-0.370670298116189, -0.0947501698107593, 0.477849261664862, 
    -1.68302192676503), value = 34.5719755463908, counts = structure(c(285L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(48.8978736399304, -3.9277597085885, 
    136.568471788223, -9.5778101361077, -3.9277597085885, 17.2657254733366, 
    -11.9597504983915, -6.90459974972413, 136.568471788223, -11.9597504983915, 
    2909.09349453194, -187.992766068845, -9.5778101361077, -6.90459974972413, 
    -187.992766068845, 163.599626374022), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370670298116189, -0.0947501698107593
    ), logphi = c(0.477849261664862, -1.68302192676503)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_184 = structure(list(
    par = c(-0.289150558574256, 0.195563613399336, 0.481680165047695, 
    -1.53260332245054), value = 39.0831632376212, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.5169813641691, 1.43915243100423, 
    120.509981513806, -5.85449156531581, 1.43915243100423, 32.1850654838585, 
    -6.7888835229013, -8.04993244862828, 120.509981513806, -6.7888835229013, 
    1976.69453084615, -137.40328100198, -5.85449156531581, -8.04993244862828, 
    -137.40328100198, 125.569112444879), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289150558574256, 0.195563613399336
    ), logphi = c(0.481680165047695, -1.53260332245054)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_185 = structure(list(
    par = c(-0.404903398851561, 0.321337174285192, 0.507221817598768, 
    -1.57332480843019), value = 24.2761155017762, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.5769061196729, 2.37052049101294, 
    109.201816046678, -9.1819696406148, 2.37052049101294, 29.1707788395712, 
    -6.81549860281905, -8.30842654941932, 109.201816046678, -6.81549860281905, 
    1810.46257429607, -171.796293658488, -9.1819696406148, -8.30842654941932, 
    -171.796293658488, 120.244476653042), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404903398851561, 0.321337174285192
    ), logphi = c(0.507221817598768, -1.57332480843019)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_186 = structure(list(
    par = c(-0.243605184530224, 0.121727931291032, 0.498639695625248, 
    -1.69083954327972), value = 43.1802767305808, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.365202311123, -5.23923683815042, 
    166.07304241667, -10.0177007640312, -5.23923683815042, 29.7786623946195, 
    -14.0329027491504, -9.39049525072733, 166.07304241667, -14.0329027491504, 
    3599.38645825864, -251.446268102917, -10.0177007640312, -9.39049525072733, 
    -251.446268102917, 205.380363560437), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243605184530224, 0.121727931291032
    ), logphi = c(0.498639695625248, -1.69083954327972)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_187 = structure(list(
    par = c(-0.0617194939441201, 0.223911529473717, 0.465493677494469, 
    -1.75534756192645), value = 22.2168456490815, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.8489834868022, -3.18843418334325, 
    137.107901031719, -0.459644523775893, -3.18843418334325, 
    33.6006095622565, 0.522226986987562, -7.09482293981267, 137.107901031719, 
    0.522226986987562, 3623.45263364094, -162.743458939296, -0.459644523775893, 
    -7.09482293981267, -162.743458939296, 180.595516376059), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0617194939441201, 0.223911529473717
    ), logphi = c(0.465493677494469, -1.75534756192645)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_188 = structure(list(
    par = c(-0.174919233380429, 0.155395288808673, 0.522362310382646, 
    -1.55119852147323), value = 52.0976474022516, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.0886216617438, -5.65394394413943, 
    146.332720355247, -10.9461966486535, -5.65394394413943, 32.1510977787653, 
    -18.1639764136321, -8.46154732325743, 146.332720355247, -18.1639764136321, 
    2543.03950828749, -228.950479893797, -10.9461966486535, -8.46154732325743, 
    -228.950479893797, 171.101367158144), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174919233380429, 0.155395288808673
    ), logphi = c(0.522362310382646, -1.55119852147323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_189 = structure(list(
    par = c(-0.109952644391196, 0.0993691103752367, 0.521548294889584, 
    -1.76957470168573), value = 27.5934616132214, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.9888395919443, -7.91057236604331, 
    119.123285656997, -6.86609753142164, -7.91057236604331, 18.1247749146962, 
    -14.4988724439798, -5.74819395504633, 119.123285656997, -14.4988724439798, 
    3052.22134825822, -199.953469152803, -6.86609753142164, -5.74819395504633, 
    -199.953469152803, 160.417540824298), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.109952644391196, 0.0993691103752367
    ), logphi = c(0.521548294889584, -1.76957470168573)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_190 = structure(list(
    par = c(-0.544797190809022, -0.107441831541908, 0.544661918477652, 
    -1.5702041266572), value = 50.2084929263679, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.3858380743618, -3.99795174388373, 
    127.82238513509, -20.1820321521495, -3.99795174388373, 17.9871417529398, 
    -26.7554379611568, -5.39653869502388, 127.82238513509, -26.7554379611568, 
    2254.26233963155, -273.2266952572, -20.1820321521495, -5.39653869502388, 
    -273.2266952572, 164.819832420449), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.544797190809022, -0.107441831541908
    ), logphi = c(0.544661918477652, -1.5702041266572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_191 = structure(list(
    par = c(-0.147001041597986, 0.0863159541573876, 0.477948914532108, 
    -1.53956915208989), value = 44.2201160797969, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.394487264721, -3.02064957935499, 
    111.067926955144, -3.24285232444765, -3.02064957935499, 24.5818424602362, 
    -8.11333971739714, -6.36987107416331, 111.067926955144, -8.11333971739714, 
    1966.41317550927, -111.436727650904, -3.24285232444765, -6.36987107416331, 
    -111.436727650904, 121.781104484242), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.147001041597986, 0.0863159541573876
    ), logphi = c(0.477948914532108, -1.53956915208989)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_192 = structure(list(
    par = c(-0.178404849938173, 0.10572189672327, 0.47741293552182, 
    -1.51662528166421), value = 29.8845328665553, counts = structure(c(297L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.7864950292667, -0.685184570414776, 
    93.797182536548, -2.99807418802089, -0.685184570414776, 24.2141914501559, 
    -6.71108553707001, -5.59309234926531, 93.797182536548, -6.71108553707001, 
    1574.9855300573, -91.9965056214167, -2.99807418802089, -5.59309234926531, 
    -91.9965056214167, 99.0628071395605), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178404849938173, 0.10572189672327
    ), logphi = c(0.47741293552182, -1.51662528166421)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_193 = structure(list(
    par = c(-0.185768557758577, -0.179750350436807, 0.523021504434904, 
    -1.59699894600746), value = 48.2020153164054, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(43.3572691616035, -6.46909973767151, 
    111.138082827367, -9.66309630179296, -6.46909973767151, 14.2238877796075, 
    -16.7877543084671, -4.5006587949814, 111.138082827367, -16.7877543084671, 
    2188.68631153057, -179.905209925835, -9.66309630179296, -4.5006587949814, 
    -179.905209925835, 140.763556968793), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.185768557758577, -0.179750350436807
    ), logphi = c(0.523021504434904, -1.59699894600746)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_194 = structure(list(
    par = c(-0.282782337812655, -0.0361443477134192, 0.477727003399969, 
    -1.54752996381096), value = 51.0719612038653, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.1512837284399, -1.85052526369134, 
    130.388098313006, -7.11774123551834, -1.85052526369134, 25.3654275947923, 
    -11.1788054510953, -7.18701167112812, 130.388098313006, -11.1788054510953, 
    2249.98648854857, -140.525054762364, -7.11774123551834, -7.18701167112812, 
    -140.525054762364, 139.973463138432), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282782337812655, -0.0361443477134192
    ), logphi = c(0.477727003399969, -1.54752996381096)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_195 = structure(list(
    par = c(-0.161407747275868, 0.329957992964899, 0.498442761678472, 
    -1.58722543208449), value = 39.2267794928358, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.8667609889393, -0.319116503888495, 
    132.898732474018, -5.25434187714779, -0.319116503888495, 
    38.4374160926626, -6.78126935582668, -8.92315017431144, 132.898732474018, 
    -6.78126935582668, 2454.23760349617, -181.772131219837, -5.25434187714779, 
    -8.92315017431144, -181.772131219837, 153.289791063216), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161407747275868, 0.329957992964899
    ), logphi = c(0.498442761678472, -1.58722543208449)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_196 = structure(list(
    par = c(-0.24973540886381, 0.29437977425685, 0.527411330428724, 
    -1.59865909415463), value = 31.7259402560352, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.3321142872961, -1.04543522638778, 
    137.563749460057, -11.2504988996065, -1.04543522638778, 38.8177376429155, 
    -14.6782979602023, -9.11884697085696, 137.563749460057, -14.6782979602023, 
    2477.42949859386, -237.172531259766, -11.2504988996065, -9.11884697085696, 
    -237.172531259766, 163.791866976126), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24973540886381, 0.29437977425685
    ), logphi = c(0.527411330428724, -1.59865909415463)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_197 = structure(list(
    par = c(-0.355370370246435, 0.12446790511442, 0.550785335034785, 
    -1.42172055345798), value = 50.4185756288911, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.8552984888551, -2.21562008917431, 
    95.4600229459146, -13.4776376423673, -2.21562008917431, 21.6262236900633, 
    -16.1257679529569, -5.29651653558005, 95.4600229459146, -16.1257679529569, 
    1268.12171573398, -173.05243460175, -13.4776376423673, -5.29651653558005, 
    -173.05243460175, 104.240269717337), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355370370246435, 0.12446790511442
    ), logphi = c(0.550785335034785, -1.42172055345798)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_198 = structure(list(
    par = c(0.037776095147889, -0.0813440130239516, 0.496723447357226, 
    -1.47679454104084), value = 63.4291996927639, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.2851998315355, -7.3970245129118, 
    99.4884435510102, -2.68333839947843, -7.3970245129118, 20.2516356058169, 
    -11.7626459470443, -4.63438810882622, 99.4884435510102, -11.7626459470443, 
    1720.05659744201, -101.386759899569, -2.68333839947843, -4.63438810882622, 
    -101.386759899569, 112.497151267377), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.037776095147889, -0.0813440130239516
    ), logphi = c(0.496723447357226, -1.47679454104084)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_199 = structure(list(
    par = c(-0.205947326991242, 0.38144523314816, 0.4968488512685, 
    -1.4617468965239), value = 27.3617728508907, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.3222034491132, 3.50714498242866, 
    85.6659247920888, -3.63915614887134, 3.50714498242866, 33.2714606665618, 
    -4.36472108411579, -6.36327486081001, 85.6659247920888, -4.36472108411579, 
    1260.34014587262, -103.145479636524, -3.63915614887134, -6.36327486081001, 
    -103.145479636524, 85.9287852454926), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205947326991242, 0.38144523314816
    ), logphi = c(0.4968488512685, -1.4617468965239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_120_200 = structure(list(
    par = c(-0.532795932822068, -0.231311261152627, 0.482783291841314, 
    -1.5781383317828), value = 37.9404622631482, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(45.159751772772, -1.78270472872555, 
    127.218169740928, -13.0986026034563, -1.78270472872555, 15.924662660538, 
    -15.1406018016331, -6.25626898553833, 127.218169740928, -15.1406018016331, 
    2234.18450931589, -173.754232529078, -13.0986026034563, -6.25626898553833, 
    -173.754232529078, 140.810229751764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.532795932822068, -0.231311261152627
    ), logphi = c(0.482783291841314, -1.5781383317828)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_1 = structure(list(
    par = c(-0.252373658063087, 0.133921172019028, 0.461642923994322, 
    -1.62089546631732), value = 57.0406271070399, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.2115668716734, -0.470533896290704, 
    194.582338618687, -5.47673058726161, -0.470533896290704, 
    42.5791600786596, -5.34900438964314, -11.6371606457832, 194.582338618687, 
    -5.34900438964314, 3808.08433585855, -200.359466077771, -5.47673058726161, 
    -11.6371606457832, -200.359466077771, 217.462263664814), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252373658063087, 0.133921172019028
    ), logphi = c(0.461642923994322, -1.62089546631732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_2 = structure(list(
    par = c(-0.320973305952023, -0.0856743071690072, 0.466938450096843, 
    -1.62716086651124), value = 44.8478938062227, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.7450636692117, -3.32421758386658, 
    148.551996288049, -7.89632595754597, -3.32421758386658, 21.6559674246497, 
    -10.5410703277187, -7.74320668028849, 148.551996288049, -10.5410703277187, 
    2918.2616842558, -165.758615975342, -7.89632595754597, -7.74320668028849, 
    -165.758615975342, 168.311683141908), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320973305952023, -0.0856743071690072
    ), logphi = c(0.466938450096843, -1.62716086651124)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_3 = structure(list(
    par = c(-0.174976744173647, 0.0367538764071069, 0.499563898604639, 
    -1.57800919436066), value = 54.8837560994762, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.6583822017755, -6.15942377280021, 
    160.129961745525, -9.12717826295761, -6.15942377280021, 30.2256468405204, 
    -16.7170916007819, -8.61089916881497, 160.129961745525, -16.7170916007819, 
    2976.76272868586, -212.310046721953, -9.12717826295761, -8.61089916881497, 
    -212.310046721953, 187.134346353091), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174976744173647, 0.0367538764071069
    ), logphi = c(0.499563898604639, -1.57800919436066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_4 = structure(list(
    par = c(-0.165100886996603, 0.261290989258451, 0.476425823691538, 
    -1.65236959232814), value = 33.11096753424, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.1259246186231, 0.379130018046681, 
    169.526822114463, -3.92073471999765, 0.379130018046681, 46.5854761699802, 
    -3.49005274813408, -10.4293819154222, 169.526822114463, -3.49005274813408, 
    3557.7835602929, -205.83144034525, -3.92073471999765, -10.4293819154222, 
    -205.83144034525, 201.865748689301), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165100886996603, 0.261290989258451
    ), logphi = c(0.476425823691538, -1.65236959232814)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_5 = structure(list(
    par = c(-0.252302296335386, 0.0781370266003186, 0.482595084949379, 
    -1.58201063780343), value = 54.1842662517987, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.2448358160553, -2.74306041703198, 
    155.155523996697, -7.79532126049531, -2.74306041703198, 31.6514186931016, 
    -11.5038320878114, -9.09740824717176, 155.155523996697, -11.5038320878114, 
    2830.01490386958, -184.645604997868, -7.79532126049531, -9.09740824717176, 
    -184.645604997868, 173.240175477929), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252302296335386, 0.0781370266003186
    ), logphi = c(0.482595084949379, -1.58201063780343)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_6 = structure(list(
    par = c(-0.278421144197629, -0.0088595976401565, 0.488170823197168, 
    -1.50881873520507), value = 62.2650336155406, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.6604120281895, -3.04052724153792, 
    143.212071394672, -9.05001727602439, -3.04052724153792, 27.0893710876408, 
    -14.1873222201383, -8.07677214709202, 143.212071394672, -14.1873222201383, 
    2304.95763613447, -163.228843613084, -9.05001727602439, -8.07677214709202, 
    -163.228843613084, 150.0295000465), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278421144197629, -0.0088595976401565
    ), logphi = c(0.488170823197168, -1.50881873520507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_7 = structure(list(
    par = c(-0.116575842868932, 0.0970016570378552, 0.493895924435574, 
    -1.68009242090809), value = 43.4070320012726, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.4369153819707, -6.38597152757825, 
    157.238518220026, -6.26529374958551, -6.38597152757825, 31.0866664232634, 
    -12.468374777086, -8.29055314088833, 157.238518220026, -12.468374777086, 
    3521.54961705509, -214.909615377401, -6.26529374958551, -8.29055314088833, 
    -214.909615377401, 199.254104543911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.116575842868932, 0.0970016570378552
    ), logphi = c(0.493895924435574, -1.68009242090809)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_8 = structure(list(
    par = c(-0.525411967268534, -0.0737959673629211, 0.489080383867432, 
    -1.7723233979433), value = 38.0054482944743, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.1105775459744, -5.31186906371772, 
    184.151345429484, -17.6978249601945, -5.31186906371772, 21.4786730605709, 
    -21.9180244958039, -9.22564870542431, 184.151345429484, -21.9180244958039, 
    4430.86010712612, -327.977057221318, -17.6978249601945, -9.22564870542431, 
    -327.977057221318, 233.979987640964), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.525411967268534, -0.0737959673629211
    ), logphi = c(0.489080383867432, -1.7723233979433)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_9 = structure(list(
    par = c(-0.340388002268647, -0.211837495565631, 0.485896733376986, 
    -1.56243192218299), value = 62.4042115728899, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.5820072393802, -4.80612852804541, 
    149.117092993478, -11.5707445971225, -4.80612852804541, 18.8186940519586, 
    -16.722926602597, -7.00499548944578, 149.117092993478, -16.722926602597, 
    2653.37186347558, -182.938606354099, -11.5707445971225, -7.00499548944578, 
    -182.938606354099, 166.640500021131), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340388002268647, -0.211837495565631
    ), logphi = c(0.485896733376986, -1.56243192218299)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_10 = structure(list(
    par = c(-0.472984618853371, -0.318332213777537, 0.509847543682378, 
    -1.6658642470292), value = 60.1585507463041, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.3385129473344, -7.44061781965399, 
    178.113117758727, -20.8218745152422, -7.44061781965399, 15.3656337076313, 
    -29.2193387441131, -6.62078001134603, 178.113117758727, -29.2193387441131, 
    3828.35530545123, -323.442218951087, -20.8218745152422, -6.62078001134603, 
    -323.442218951087, 233.77538108349), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.472984618853371, -0.318332213777537
    ), logphi = c(0.509847543682378, -1.6658642470292)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_11 = structure(list(
    par = c(-0.509502165348732, 0.247444294171363, 0.499959782671706, 
    -1.72642341743455), value = 15.3538978147759, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.7089219954181, 0.881938401420257, 
    194.842997348843, -17.5819561389901, 0.881938401420257, 40.2814052318234, 
    -12.8643386858585, -13.666193313, 194.842997348843, -12.8643386858585, 
    4096.79581522226, -346.227190290094, -17.5819561389901, -13.666193313, 
    -346.227190290094, 232.865211534872), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.509502165348732, 0.247444294171363
    ), logphi = c(0.499959782671706, -1.72642341743455)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_12 = structure(list(
    par = c(-0.242720041441739, 0.15702644766144, 0.502165531516968, 
    -1.54578795164566), value = 51.6000291567169, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.6666811244029, -1.73450358431637, 
    144.957633136045, -9.37857191729563, -1.73450358431637, 35.0480759241378, 
    -13.591464840701, -8.99092750472619, 144.957633136045, -13.591464840701, 
    2458.59543793614, -197.754680316464, -9.37857191729563, -8.99092750472619, 
    -197.754680316464, 160.759446320213), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242720041441739, 0.15702644766144
    ), logphi = c(0.502165531516968, -1.54578795164566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_13 = structure(list(
    par = c(-0.189009793747926, 0.00235144340557924, 0.505825499897077, 
    -1.68042071405879), value = 53.2772691586526, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.9512946588306, -7.9759429247872, 
    163.818747296318, -10.4382997516694, -7.9759429247872, 25.4271161121977, 
    -18.5379476604908, -8.08487377312872, 163.818747296318, -18.5379476604908, 
    3606.5888969361, -250.063695890645, -10.4382997516694, -8.08487377312872, 
    -250.063695890645, 208.855709363576), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189009793747926, 0.00235144340557924
    ), logphi = c(0.505825499897077, -1.68042071405879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_14 = structure(list(
    par = c(-0.221394807133913, 0.0568105482679326, 0.477933303382245, 
    -1.71316654070794), value = 44.5046637226994, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.35005183198, -5.94898624939333, 
    172.686503882247, -7.45162402182586, -5.94898624939333, 27.4428877364841, 
    -9.94863226644327, -9.12388292384492, 172.686503882247, -9.94863226644327, 
    3972.25336715223, -228.060758552751, -7.45162402182586, -9.12388292384492, 
    -228.060758552751, 213.840505333351), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221394807133913, 0.0568105482679326
    ), logphi = c(0.477933303382245, -1.71316654070794)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_15 = structure(list(
    par = c(-0.221350209822364, -0.0711120587724681, 0.523486374352252, 
    -1.55631540172325), value = 64.0273587482167, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.943606184414, -6.64147143680793, 
    141.952609389762, -12.9483919906193, -6.64147143680793, 23.2026619926273, 
    -21.0425125573011, -6.61703717774742, 141.952609389762, -21.0425125573011, 
    2536.81163911068, -227.052226570379, -12.9483919906193, -6.61703717774742, 
    -227.052226570379, 170.340779678924), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221350209822364, -0.0711120587724681
    ), logphi = c(0.523486374352252, -1.55631540172325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_16 = structure(list(
    par = c(-0.247710082285415, 0.0098335738969028, 0.533473768714122, 
    -1.6209805661621), value = 59.576921037325, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.1385927958801, -8.27566501016008, 
    157.527183326067, -15.3782250942314, -8.27566501016008, 23.9915895345888, 
    -25.2748349556242, -7.60017991474626, 157.527183326067, -25.2748349556242, 
    3085.07622998988, -284.273110176869, -15.3782250942314, -7.60017991474626, 
    -284.273110176869, 199.902217206116), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247710082285415, 0.0098335738969028
    ), logphi = c(0.533473768714122, -1.6209805661621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_17 = structure(list(
    par = c(-0.162147030915563, 0.244557030106895, 0.479766673942246, 
    -1.54906880514019), value = 43.6986080070128, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.9914346511151, 0.141914631157647, 
    128.806081439947, -3.28384432535245, 0.141914631157647, 37.7068884240828, 
    -6.01946210743165, -8.28015176601582, 128.806081439947, -6.01946210743165, 
    2277.05920445054, -139.557225248943, -3.28384432535245, -8.28015176601582, 
    -139.557225248943, 140.935385658736), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.162147030915563, 0.244557030106895
    ), logphi = c(0.479766673942246, -1.54906880514019)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_18 = structure(list(
    par = c(-0.341673615308542, 0.103767601849297, 0.5210037785408, 
    -1.69721661546169), value = 40.0152743594696, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.7969179606488, -6.21129986910773, 
    172.450242001077, -15.9164808692935, -6.21129986910773, 27.8859160403044, 
    -23.3339370616648, -9.53763676125874, 172.450242001077, -23.3339370616648, 
    3690.56945942425, -312.748804807583, -15.9164808692935, -9.53763676125874, 
    -312.748804807583, 218.885208813191), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341673615308542, 0.103767601849297
    ), logphi = c(0.5210037785408, -1.69721661546169)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_19 = structure(list(
    par = c(-0.453398079869351, 0.0322387375084153, 0.498652193466849, 
    -1.45361040666708), value = 61.6277613876775, counts = structure(c(293L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.4255299080737, 1.35734264183895, 
    145.908799568772, -14.4678993398983, 1.35734264183895, 32.2323614465603, 
    -16.2589108239075, -9.17480450368657, 145.908799568772, -16.2589108239075, 
    2021.78152872001, -186.517749035886, -14.4678993398983, -9.17480450368657, 
    -186.517749035886, 142.207518239346), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.453398079869351, 0.0322387375084153
    ), logphi = c(0.498652193466849, -1.45361040666708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_20 = structure(list(
    par = c(-0.233905448607942, 0.159655794476788, 0.478942711779766, 
    -1.53830853545745), value = 42.7962236799719, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.4487604421049, 0.26722712753724, 
    143.934483253005, -5.68798509359425, 0.26722712753724, 37.0352475016489, 
    -8.68528849906625, -9.08981151415134, 143.934483253005, -8.68528849906625, 
    2442.15955011029, -154.858717310802, -5.68798509359425, -9.08981151415134, 
    -154.858717310802, 152.833596960278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233905448607942, 0.159655794476788
    ), logphi = c(0.478942711779766, -1.53830853545745)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_21 = structure(list(
    par = c(-0.0922421325093614, 0.118080897818573, 0.512562039545501, 
    -1.52081440352121), value = 52.9459282634062, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0881437473363, -5.95997200925069, 
    119.24032916788, -6.58347107318491, -5.95997200925069, 26.4654605004466, 
    -13.9511478725041, -6.62761511804888, 119.24032916788, -13.9511478725041, 
    2044.33739175336, -163.310972924435, -6.58347107318491, -6.62761511804888, 
    -163.310972924435, 136.414128293794), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0922421325093614, 0.118080897818573
    ), logphi = c(0.512562039545501, -1.52081440352121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_22 = structure(list(
    par = c(-0.114341783981733, 0.0542519126832359, 0.523879295026336, 
    -1.75968450745989), value = 36.5563106827115, counts = structure(c(297L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.8442416231107, -10.2792330665125, 
    163.570345229402, -10.1358295516718, -10.2792330665125, 25.6346220286474, 
    -21.6851574545984, -7.58064781880563, 163.570345229402, -21.6851574545984, 
    4149.34089297603, -277.554641941791, -10.1358295516718, -7.58064781880563, 
    -277.554641941791, 221.544257842154), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.114341783981733, 0.0542519126832359
    ), logphi = c(0.523879295026336, -1.75968450745989)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_23 = structure(list(
    par = c(-0.231518146356466, 0.11623868090647, 0.493166645296029, 
    -1.51791324555168), value = 44.8984210800246, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.1107074514101, -2.1780159773499, 
    126.611653351816, -7.08741228017118, -2.1780159773499, 28.6669854521193, 
    -11.3316983689771, -7.7060850092181, 126.611653351816, -11.3316983689771, 
    2071.88955535642, -152.617827245294, -7.08741228017118, -7.7060850092181, 
    -152.617827245294, 135.150635696135), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.231518146356466, 0.11623868090647
    ), logphi = c(0.493166645296029, -1.51791324555168)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_24 = structure(list(
    par = c(-0.438873466494002, 0.250898100942198, 0.533846278627898, 
    -1.62413499190631), value = 30.3167335759598, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.8100511597861, -0.822577788994749, 
    156.016959723004, -17.9560776922827, -0.822577788994749, 
    35.8687707056049, -21.0495843262493, -10.4941509917467, 156.016959723004, 
    -21.0495843262493, 2821.65963126779, -302.616383939025, -17.9560776922827, 
    -10.4941509917467, -302.616383939025, 189.482950355924), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438873466494002, 0.250898100942198
    ), logphi = c(0.533846278627898, -1.62413499190631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_25 = structure(list(
    par = c(0.0131530589091651, 0.154916292980913, 0.513338311826504, 
    -1.64630642691538), value = 46.5380672092578, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.4615095981324, -8.92670208862967, 
    138.518609059446, -4.95807069977872, -8.92670208862967, 30.9099005555424, 
    -14.4807331690089, -7.24785902672664, 138.518609059446, -14.4807331690089, 
    3036.78113696471, -202.44734629582, -4.95807069977872, -7.24785902672664, 
    -202.44734629582, 180.653280001053), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0131530589091651, 0.154916292980913
    ), logphi = c(0.513338311826504, -1.64630642691538)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_26 = structure(list(
    par = c(0.048467801677203, 0.116398445727572, 0.504565680917045, 
    -1.63856343091162), value = 56.4460268611062, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.8728770693959, -11.2124194906471, 
    149.868211423154, -3.71227086493064, -11.2124194906471, 30.661871658566, 
    -14.6369917430889, -7.58308005277541, 149.868211423154, -14.6369917430889, 
    3335.70752200707, -200.498597275001, -3.71227086493064, -7.58308005277541, 
    -200.498597275001, 196.804861028355), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.048467801677203, 0.116398445727572
    ), logphi = c(0.504565680917045, -1.63856343091162)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_27 = structure(list(
    par = c(-0.324177641811355, -0.0429235752182334, 0.515072034463568, 
    -1.63456453409391), value = 59.7235943986593, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.458442778355, -6.43130041844131, 
    171.5795367776, -16.1089450454455, -6.43130041844131, 25.5989543642698, 
    -24.1101571152313, -8.4944468934367, 171.5795367776, -24.1101571152313, 
    3401.33339177129, -287.060969172082, -16.1089450454455, -8.4944468934367, 
    -287.060969172082, 212.732936613946), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.324177641811355, -0.0429235752182334
    ), logphi = c(0.515072034463568, -1.63456453409391)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_28 = structure(list(
    par = c(-0.228679308878376, -0.095960744022387, 0.482238840535903, 
    -1.65606907148263), value = 48.5321130295107, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.4397545134769, -5.34479205960281, 
    152.360312947408, -8.22695310720434, -5.34479205960281, 23.7917020733391, 
    -13.7265892874439, -7.33141542763605, 152.360312947408, -13.7265892874439, 
    3236.46835889591, -193.355295521336, -8.22695310720434, -7.33141542763605, 
    -193.355295521336, 185.670426478879), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228679308878376, -0.095960744022387
    ), logphi = c(0.482238840535903, -1.65606907148263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_29 = structure(list(
    par = c(-0.400262536278532, -0.226356207117318, 0.509464943601392, 
    -1.59540761971089), value = 47.8214769645448, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.1485582495606, -4.56007718696583, 
    154.496304613616, -16.6151858502772, -4.56007718696583, 20.5844061422766, 
    -22.936146324426, -6.63224049901601, 154.496304613616, -22.936146324426, 
    2905.24675929937, -250.201553063434, -16.6151858502772, -6.63224049901601, 
    -250.201553063434, 187.68042542483), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400262536278532, -0.226356207117318
    ), logphi = c(0.509464943601392, -1.59540761971089)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_30 = structure(list(
    par = c(-0.382554318290475, -0.111145698567155, 0.450532173740302, 
    -1.67246629133756), value = 40.8342672928442, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.6560816588674, -2.13153835915136, 
    154.167719683684, -7.61757488021431, -2.13153835915136, 20.9582845158707, 
    -7.35204415391877, -7.92136475080696, 154.167719683684, -7.35204415391877, 
    3217.12490055148, -164.508510867023, -7.61757488021431, -7.92136475080696, 
    -164.508510867023, 173.885989568134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382554318290475, -0.111145698567155
    ), logphi = c(0.450532173740302, -1.67246629133756)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_31 = structure(list(
    par = c(-0.383720059419547, 0.0380326896956139, 0.490554347347771, 
    -1.53671991583822), value = 53.9848003721299, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.5823136897266, -0.0798654973266366, 
    159.074348220045, -12.5917782085594, -0.0798654973266366, 
    33.0336699132516, -15.2030209719101, -9.66362972043555, 159.074348220045, 
    -15.2030209719101, 2588.31582965868, -204.375346718244, -12.5917782085594, 
    -9.66362972043555, -204.375346718244, 168.487182049759), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383720059419547, 0.0380326896956139
    ), logphi = c(0.490554347347771, -1.53671991583822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_32 = structure(list(
    par = c(-0.306478215200532, 0.418922373562136, 0.499215935178002, 
    -1.60128380438823), value = 31.7050611544954, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.7441543728038, 5.01770937688661, 
    148.029879763811, -8.21716031040864, 5.01770937688661, 46.5344386775257, 
    -2.66189151965079, -11.379017908375, 148.029879763811, -2.66189151965079, 
    2634.61487284289, -220.690843986127, -8.21716031040864, -11.379017908375, 
    -220.690843986127, 165.929927275599), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306478215200532, 0.418922373562136
    ), logphi = c(0.499215935178002, -1.60128380438823)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_33 = structure(list(
    par = c(-0.202972939928957, 0.0275166331665332, 0.498693680646877, 
    -1.58226632119791), value = 50.665136083077, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.358472336134, -4.89010411186541, 
    152.872750240007, -9.26542599088975, -4.89010411186541, 30.0771957419954, 
    -15.9319375505618, -8.24710020275177, 152.872750240007, -15.9319375505618, 
    2838.96160974706, -204.485927143061, -9.26542599088975, -8.24710020275177, 
    -204.485927143061, 178.12523017291), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202972939928957, 0.0275166331665332
    ), logphi = c(0.498693680646877, -1.58226632119791)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_34 = structure(list(
    par = c(-0.266675886889392, -0.451303491269949, 0.551037996549139, 
    -1.44649084644864), value = 87.6782385894193, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.161585953949, -7.37044163301448, 
    131.951508894446, -18.8121207003178, -7.37044163301448, 13.3742030534734, 
    -22.993219669587, -3.31700363531695, 131.951508894446, -22.993219669587, 
    2054.6901944769, -244.694941084589, -18.8121207003178, -3.31700363531695, 
    -244.694941084589, 159.022665201292), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266675886889392, -0.451303491269949
    ), logphi = c(0.551037996549139, -1.44649084644864)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_35 = structure(list(
    par = c(0.0177179856833259, -0.0667830983716244, 0.484267233526711, 
    -1.61211367072455), value = 64.4713866911983, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.5149052973111, -9.95312189289166, 
    145.706008396473, -2.6980920946329, -9.95312189289166, 25.4795733596325, 
    -13.274578048339, -6.64693400764804, 145.706008396473, -13.274578048339, 
    3165.90782564319, -154.927065722177, -2.6980920946329, -6.64693400764804, 
    -154.927065722177, 185.903127281506), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0177179856833259, -0.0667830983716244
    ), logphi = c(0.484267233526711, -1.61211367072455)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_36 = structure(list(
    par = c(-0.137354035979549, -0.0462552026426656, 0.482090449427575, 
    -1.62253801427612), value = 68.3481915526054, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.4555635021131, -8.30763641701537, 
    171.152799001817, -6.6153007480807, -8.30763641701537, 26.6228448175809, 
    -14.643920049906, -8.43018887763947, 171.152799001817, -14.643920049906, 
    3533.02282388057, -197.9966261203, -6.6153007480807, -8.43018887763947, 
    -197.9966261203, 207.203353891572), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137354035979549, -0.0462552026426656
    ), logphi = c(0.482090449427575, -1.62253801427612)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_37 = structure(list(
    par = c(-0.090583130126022, -0.293467875315364, 0.452924547198381, 
    -1.73814329677388), value = 52.003386642686, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.6403708513316, -8.79263434860889, 
    154.802035549295, -3.05875722261817, -8.79263434860889, 15.6301230713751, 
    -8.96826252194671, -5.66640930621531, 154.802035549295, -8.96826252194671, 
    4112.84399755196, -150.205044737284, -3.05875722261817, -5.66640930621531, 
    -150.205044737284, 206.567414902992), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.090583130126022, -0.293467875315364
    ), logphi = c(0.452924547198381, -1.73814329677388)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_38 = structure(list(
    par = c(-0.215059678693894, 0.103634759205006, 0.468994308477585, 
    -1.7792744303253), value = 22.6871614436495, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.4943126973158, -4.68593459146405, 
    174.538769669219, -5.8223484034059, -4.68593459146405, 30.1873450236911, 
    -4.41351713309501, -9.05265366313301, 174.538769669219, -4.41351713309501, 
    4478.4682836525, -232.694952258417, -5.8223484034059, -9.05265366313301, 
    -232.694952258417, 220.437592541423), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215059678693894, 0.103634759205006
    ), logphi = c(0.468994308477585, -1.7792744303253)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_39 = structure(list(
    par = c(-0.366211167313572, 0.0191522089712986, 0.50929568826241, 
    -1.58417038835873), value = 49.8196276227702, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4984320157249, -4.62760500852255, 
    166.8549176852, -15.7842573171862, -4.62760500852255, 27.3052770314308, 
    -20.9532031636428, -9.31825127814534, 166.8549176852, -20.9532031636428, 
    2970.10757882887, -261.813670053179, -15.7842573171862, -9.31825127814534, 
    -261.813670053179, 193.774061555629), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.366211167313572, 0.0191522089712986
    ), logphi = c(0.50929568826241, -1.58417038835873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_40 = structure(list(
    par = c(-0.254166358839219, 0.037025949879401, 0.504191470735471, 
    -1.71894696413112), value = 36.7092555424053, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.388494844408, -5.98747514324316, 
    166.557909141218, -11.4819902989893, -5.98747514324316, 28.2291566726656, 
    -17.9883972073469, -8.54062112143339, 166.557909141218, -17.9883972073469, 
    3814.12292484029, -266.673342570023, -11.4819902989893, -8.54062112143339, 
    -266.673342570023, 212.679746795175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.254166358839219, 0.037025949879401
    ), logphi = c(0.504191470735471, -1.71894696413112)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_41 = structure(list(
    par = c(-0.143820734716778, 0.302977331881335, 0.509874242923015, 
    -1.57252762089316), value = 53.8762609208905, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.2176433989388, -3.25529809508396, 
    157.938624353093, -7.90150671736711, -3.25529809508396, 43.0154302382135, 
    -12.3688018280887, -10.3261299573276, 157.938624353093, -12.3688018280887, 
    2847.33293753092, -230.278196238665, -7.90150671736711, -10.3261299573276, 
    -230.278196238665, 183.543185780621), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143820734716778, 0.302977331881335
    ), logphi = c(0.509874242923015, -1.57252762089316)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_42 = structure(list(
    par = c(-0.157088281378767, 0.303299432707241, 0.518234561483943, 
    -1.63520928137312), value = 42.4193278818828, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.858146465104, -3.70305420993589, 
    173.587175929413, -11.0924313947436, -3.70305420993589, 43.4585305839619, 
    -13.7840282370405, -12.1002965673966, 173.587175929413, -13.7840282370405, 
    3407.52105242892, -278.43618892387, -11.0924313947436, -12.1002965673966, 
    -278.43618892387, 211.982191489213), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.157088281378767, 0.303299432707241
    ), logphi = c(0.518234561483943, -1.63520928137312)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_43 = structure(list(
    par = c(-0.449773046916521, 0.241099970453055, 0.523863586428166, 
    -1.50934514303695), value = 37.7736096132934, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.8992485380594, 2.4776137266258, 
    152.636967740705, -17.4966748751615, 2.4776137266258, 41.3992542522834, 
    -17.3752112413439, -10.9335559601575, 152.636967740705, -17.3752112413439, 
    2267.87974597542, -256.607697466826, -17.4966748751615, -10.9335559601575, 
    -256.607697466826, 165.814972472589), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.449773046916521, 0.241099970453055
    ), logphi = c(0.523863586428166, -1.50934514303695)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_44 = structure(list(
    par = c(-0.383950943569903, -0.112737226623102, 0.512797236960698, 
    -1.73476050933468), value = 51.5883125743216, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.8177076087342, -8.71861013429509, 
    193.179524156761, -18.7869758523362, -8.71861013429509, 21.8506847637912, 
    -29.6109298609792, -8.50300999211129, 193.179524156761, -29.6109298609792, 
    4559.11151459709, -353.27662030582, -18.7869758523362, -8.50300999211129, 
    -353.27662030582, 256.147447220911), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383950943569903, -0.112737226623102
    ), logphi = c(0.512797236960698, -1.73476050933468)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_45 = structure(list(
    par = c(-0.342758117964632, -0.0169992441364818, 0.516287221552342, 
    -1.36883143264032), value = 54.9788255151341, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.5925920470772, -0.209338917755986, 
    112.200966826848, -11.9746437663437, -0.209338917755986, 
    27.8030748415148, -15.4839816364216, -6.17673524061502, 112.200966826848, 
    -15.4839816364216, 1386.38908093291, -144.937405661238, -11.9746437663437, 
    -6.17673524061502, -144.937405661238, 104.760556748573), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342758117964632, -0.0169992441364818
    ), logphi = c(0.516287221552342, -1.36883143264032)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_46 = structure(list(
    par = c(-0.287543008598477, -0.0893957474829923, 0.498740414567037, 
    -1.55826500431004), value = 57.7971984673415, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.6788258019958, -5.1908130984657, 
    153.797298823477, -11.9868282482116, -5.1908130984657, 24.2311119080796, 
    -18.22858872913, -7.76445361960754, 153.797298823477, -18.22858872913, 
    2713.3553621379, -207.197027384254, -11.9868282482116, -7.76445361960754, 
    -207.197027384254, 174.667365465453), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287543008598477, -0.0893957474829923
    ), logphi = c(0.498740414567037, -1.55826500431004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_47 = structure(list(
    par = c(-0.495168111330162, 0.296158011180431, 0.499835663824957, 
    -1.72265365007352), value = 15.9994069397997, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.2359964661287, 3.1143510508258, 
    197.976781091569, -16.9783493815245, 3.1143510508258, 46.3907123418039, 
    -9.73492546130217, -14.4473024619174, 197.976781091569, -9.73492546130217, 
    4114.75645448611, -348.013074480846, -16.9783493815245, -14.4473024619174, 
    -348.013074480846, 234.527361948622), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.495168111330162, 0.296158011180431
    ), logphi = c(0.499835663824957, -1.72265365007352)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_48 = structure(list(
    par = c(-0.261729519080447, 0.271207377879829, 0.492117355669249, 
    -1.53585188429631), value = 44.3474043936951, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.9798402995292, 2.41367584763452, 
    147.580315150719, -7.59033409281074, 2.41367584763452, 43.3454771666675, 
    -8.3664002659134, -10.2348965063115, 147.580315150719, -8.3664002659134, 
    2431.05466733695, -186.642903146961, -7.59033409281074, -10.2348965063115, 
    -186.642903146961, 157.370583773186), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261729519080447, 0.271207377879829
    ), logphi = c(0.492117355669249, -1.53585188429631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_49 = structure(list(
    par = c(-0.0201909957538043, -0.216809447004386, 0.491442802626671, 
    -1.68564680485202), value = 67.0637806559589, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.401778080902, -11.3819362397294, 
    155.630434996112, -5.57437971870911, -11.3819362397294, 18.1862566002167, 
    -16.0170254197567, -6.01226314422831, 155.630434996112, -16.0170254197567, 
    3803.75717831072, -194.18802541793, -5.57437971870911, -6.01226314422831, 
    -194.18802541793, 211.551138924904), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0201909957538043, -0.216809447004386
    ), logphi = c(0.491442802626671, -1.68564680485202)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_50 = structure(list(
    par = c(-0.249547859008828, 0.298872519312377, 0.482640693714052, 
    -1.56305612437431), value = 50.8956395636877, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.63945110807, 3.74891623167173, 
    169.444552792442, -6.48918262857734, 3.74891623167173, 50.9255860752234, 
    -5.41565481348982, -11.7672328494578, 169.444552792442, -5.41565481348982, 
    2945.81860471332, -203.217012147761, -6.48918262857734, -11.7672328494578, 
    -203.217012147761, 183.182049667607), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249547859008828, 0.298872519312377
    ), logphi = c(0.482640693714052, -1.56305612437431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_51 = structure(list(
    par = c(-0.115259894025271, 0.321421914267419, 0.454783247247833, 
    -1.59635144766959), value = 38.8151866859896, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.4115534022194, 1.87950164409756, 
    134.457890279549, 1.33928253731597, 1.87950164409756, 41.4722464103789, 
    1.92339863858138, -8.28571012512214, 134.457890279549, 1.92339863858138, 
    2696.3571914127, -115.960935905157, 1.33928253731597, -8.28571012512214, 
    -115.960935905157, 153.433706266526), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.115259894025271, 0.321421914267419
    ), logphi = c(0.454783247247833, -1.59635144766959)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_52 = structure(list(
    par = c(-0.259361654592136, 0.177019558074152, 0.510334029534574, 
    -1.59915484157646), value = 48.517709323122, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.2917218965714, -3.46192183542371, 
    166.57513718954, -12.1268424546628, -3.46192183542371, 36.5583962036453, 
    -16.6799865048972, -10.2671280464151, 166.57513718954, -16.6799865048972, 
    3056.95765004543, -256.357775931804, -12.1268424546628, -10.2671280464151, 
    -256.357775931804, 195.153076951726), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259361654592136, 0.177019558074152
    ), logphi = c(0.510334029534574, -1.59915484157646)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_53 = structure(list(
    par = c(-0.273431549008241, -0.175375775398629, 0.507219707323608, 
    -1.626471133516), value = 58.4198043309099, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.6499343013475, -7.05343817131165, 
    145.86761026969, -12.3522365091944, -7.05343817131165, 17.2414025740864, 
    -19.693543611865, -6.35512411140127, 145.86761026969, -19.693543611865, 
    2946.24858747028, -223.924740269332, -12.3522365091944, -6.35512411140127, 
    -223.924740269332, 181.626480005193), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273431549008241, -0.175375775398629
    ), logphi = c(0.507219707323608, -1.626471133516)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_54 = structure(list(
    par = c(-0.343313109946913, 0.0748482381994913, 0.502149468854791, 
    -1.49077728838041), value = 47.8822518070835, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.3712711786386, -0.554941161468037, 
    126.33324037914, -10.6434600262162, -0.554941161468037, 29.2387732780952, 
    -13.7307453567104, -7.74980675988246, 126.33324037914, -13.7307453567104, 
    1911.13237648821, -167.465076508222, -10.6434600262162, -7.74980675988246, 
    -167.465076508222, 130.988550845146), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343313109946913, 0.0748482381994913
    ), logphi = c(0.502149468854791, -1.49077728838041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_55 = structure(list(
    par = c(-0.308301218976762, -0.0440444887504575, 0.543237154145701, 
    -1.55942661835602), value = 63.6202897660437, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.3414033781507, -7.27707652714571, 
    151.149406988793, -18.3646287608141, -7.27707652714571, 23.1326312434277, 
    -27.2045056615156, -6.78980896839931, 151.149406988793, -27.2045056615156, 
    2659.4651323073, -287.174401113255, -18.3646287608141, -6.78980896839931, 
    -287.174401113255, 187.99587483187), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308301218976762, -0.0440444887504575
    ), logphi = c(0.543237154145701, -1.55942661835602)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_56 = structure(list(
    par = c(-0.353993295556899, 0.0757511150049361, 0.478378748420346, 
    -1.58621144165333), value = 52.0394285154937, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.4816789897129, -1.92899155315729, 
    168.016529471515, -10.2552996761318, -1.92899155315729, 31.2190037803362, 
    -11.3495710731826, -10.3324734075372, 168.016529471515, -11.3495710731826, 
    2988.51929392896, -204.053991883058, -10.2552996761318, -10.3324734075372, 
    -204.053991883058, 182.637209546144), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353993295556899, 0.0757511150049361
    ), logphi = c(0.478378748420346, -1.58621144165333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_57 = structure(list(
    par = c(-0.234307558001945, 0.209143421923148, 0.502513150423321, 
    -1.64895957261434), value = 51.5161683001083, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.6141176889713, -4.65045486208737, 
    179.239261846931, -10.6026376069934, -4.65045486208737, 36.6125714723609, 
    -13.7989068900168, -11.076484943473, 179.239261846931, -13.7989068900168, 
    3593.70444140517, -269.989463239639, -10.6026376069934, -11.076484943473, 
    -269.989463239639, 215.369595389703), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234307558001945, 0.209143421923148
    ), logphi = c(0.502513150423321, -1.64895957261434)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_58 = structure(list(
    par = c(-0.161980115782025, 0.164490372579786, 0.497086331922606, 
    -1.65556144246164), value = 49.0559438959109, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.5896233610968, -5.59656745480197, 
    163.468716598558, -7.54697502358681, -5.59656745480197, 33.3872425564152, 
    -12.3706010253244, -9.40803987514727, 163.468716598558, -12.3706010253244, 
    3424.96065788644, -230.133365771934, -7.54697502358681, -9.40803987514727, 
    -230.133365771934, 200.44946029607), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161980115782025, 0.164490372579786
    ), logphi = c(0.497086331922606, -1.65556144246164)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_59 = structure(list(
    par = c(-0.399784603751989, 0.141751945728142, 0.488894809381053, 
    -1.71755685569789), value = 21.7644378705255, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.1538676241137, -1.18442803298535, 
    159.075517322194, -11.5006226728553, -1.18442803298535, 30.7259640734969, 
    -10.4012505630635, -9.78160335129985, 159.075517322194, -10.4012505630635, 
    3438.49063491852, -250.161287608464, -11.5006226728553, -9.78160335129985, 
    -250.161287608464, 190.880381875758), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399784603751989, 0.141751945728142
    ), logphi = c(0.488894809381053, -1.71755685569789)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_60 = structure(list(
    par = c(-0.363191220040007, -0.0979136020496565, 0.528244995370596, 
    -1.48601937694277), value = 71.2350846920896, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.6093189407252, -5.13871590968051, 
    148.541826298754, -18.0511064815647, -5.13871590968051, 23.2747424782076, 
    -23.8267244263568, -7.01173131645305, 148.541826298754, -23.8267244263568, 
    2282.04606206361, -244.473702142756, -18.0511064815647, -7.01173131645305, 
    -244.473702142756, 166.738833307534), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363191220040007, -0.0979136020496565
    ), logphi = c(0.528244995370596, -1.48601937694277)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_61 = structure(list(
    par = c(-0.109277053582572, 0.0697971352312937, 0.488136015631436, 
    -1.76021539985246), value = 32.857022039129, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.4430308425779, -7.16854616378271, 
    162.943121354786, -5.69512183901111, -7.16854616378271, 29.4814533372545, 
    -10.7946668119752, -7.95507275519469, 162.943121354786, -10.7946668119752, 
    4194.996812668, -226.995415239628, -5.69512183901111, -7.95507275519469, 
    -226.995415239628, 215.192044482393), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.109277053582572, 0.0697971352312937
    ), logphi = c(0.488136015631436, -1.76021539985246)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_62 = structure(list(
    par = c(-0.268841586685218, -0.117679599543808, 0.488614796051614, 
    -1.69373694060917), value = 54.3264114873712, counts = structure(c(257L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.9066703632714, -8.10037562182231, 
    186.445664763113, -12.1805070172343, -8.10037562182231, 22.8181071335598, 
    -19.0116531193496, -8.65097719504604, 186.445664763113, -19.0116531193496, 
    4177.71065896666, -265.421817761791, -12.1805070172343, -8.65097719504604, 
    -265.421817761791, 234.256764686691), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.268841586685218, -0.117679599543808
    ), logphi = c(0.488614796051614, -1.69373694060917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_63 = structure(list(
    par = c(-0.566937331158327, -0.359841216272154, 0.543706543289683, 
    -1.59155625223328), value = 65.0341716754537, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.5418275717959, -5.62576637364032, 
    160.053391454085, -26.2437371301161, -5.62576637364032, 16.3889079942692, 
    -34.9569417892326, -4.49490933540631, 160.053391454085, -34.9569417892326, 
    3108.46966484846, -359.60726887474, -26.2437371301161, -4.49490933540631, 
    -359.60726887474, 221.203430445627), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.566937331158327, -0.359841216272154
    ), logphi = c(0.543706543289683, -1.59155625223328)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_64 = structure(list(
    par = c(-0.286795980984784, 0.075369816234846, 0.493068753083833, 
    -1.58623358020265), value = 47.3350184283518, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.8152348884091, -2.29493520897961, 
    145.295992469485, -9.5042999923578, -2.29493520897961, 29.9144380875305, 
    -13.0896605554653, -8.53669790501499, 145.295992469485, -13.0896605554653, 
    2631.88530069947, -194.513495965332, -9.5042999923578, -8.53669790501499, 
    -194.513495965332, 164.373337689483), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286795980984784, 0.075369816234846
    ), logphi = c(0.493068753083833, -1.58623358020265)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_65 = structure(list(
    par = c(-0.146784828716487, 0.314712233589831, 0.474420225636281, 
    -1.56432386626576), value = 40.2321297241972, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.9313195297156, 2.49695923137949, 
    139.14775617252, -1.94784179896601, 2.49695923137949, 46.4959513557517, 
    -2.98223619843441, -9.15797536293894, 139.14775617252, -2.98223619843441, 
    2546.48922625833, -146.851635066447, -1.94784179896601, -9.15797536293894, 
    -146.851635066447, 154.154477330692), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.146784828716487, 0.314712233589831
    ), logphi = c(0.474420225636281, -1.56432386626576)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_66 = structure(list(
    par = c(-0.215460270914206, 0.0407933667633537, 0.497984064297615, 
    -1.59950219244446), value = 58.4732506431092, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.1252312564409, -6.17850157880184, 
    172.582065784965, -10.5239195296036, -6.17850157880184, 31.1615211376903, 
    -17.3832986494205, -9.41189718783875, 172.582065784965, -17.3832986494205, 
    3280.61696969151, -235.293070860898, -10.5239195296036, -9.41189718783875, 
    -235.293070860898, 203.077166466059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215460270914206, 0.0407933667633537
    ), logphi = c(0.497984064297615, -1.59950219244446)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_67 = structure(list(
    par = c(-0.271571348715066, 0.101592690053249, 0.500140842182598, 
    -1.59423351751454), value = 42.2537205293385, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.6007334546254, -2.25948936183329, 
    142.595738003237, -9.78161530174049, -2.25948936183329, 30.7603323825845, 
    -13.7586759105801, -8.40643149935261, 142.595738003237, -13.7586759105801, 
    2617.727389854, -202.542773312331, -9.78161530174049, -8.40643149935261, 
    -202.542773312331, 164.570374980855), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271571348715066, 0.101592690053249
    ), logphi = c(0.500140842182598, -1.59423351751454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_68 = structure(list(
    par = c(-0.368769044642587, 0.197316899483111, 0.490126738169696, 
    -1.69213281967434), value = 31.7939091625182, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.3298742684998, 0.0918066707100706, 
    190.166752856769, -12.7201468220761, 0.0918066707100706, 
    41.0010328213417, -10.3843143026694, -12.2546138490165, 190.166752856769, 
    -10.3843143026694, 3945.08021167361, -290.867718188537, -12.7201468220761, 
    -12.2546138490165, -290.867718188537, 224.872464837489), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368769044642587, 0.197316899483111
    ), logphi = c(0.490126738169696, -1.69213281967434)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_69 = structure(list(
    par = c(-0.252452436317134, -0.342161522932796, 0.461272374156398, 
    -1.89114860169264), value = 39.2972315732317, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.9297761755556, -10.0912989733359, 
    201.076899898567, -9.94322104919121, -10.0912989733359, 14.6713074578031, 
    -14.8761175200463, -6.5544444725063, 201.076899898567, -14.8761175200463, 
    6502.61023145759, -289.35209367198, -9.94322104919121, -6.5544444725063, 
    -289.35209367198, 274.24229734585), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252452436317134, -0.342161522932796
    ), logphi = c(0.461272374156398, -1.89114860169264)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_70 = structure(list(
    par = c(-0.175133795975789, -0.000448112847140743, 0.514617669024696, 
    -1.50361072788459), value = 53.8333082402414, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.0981297118608, -4.85415351114682, 
    122.485281526252, -9.18859480325551, -4.85415351114682, 24.7393046226563, 
    -16.0766472436791, -6.30780817534315, 122.485281526252, -16.0766472436791, 
    2007.74352737021, -171.313215958868, -9.18859480325551, -6.30780817534315, 
    -171.313215958868, 137.096887614874), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.175133795975789, -0.000448112847140743
    ), logphi = c(0.514617669024696, -1.50361072788459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_71 = structure(list(
    par = c(-0.195654167100582, 0.246263635093954, 0.482052537246585, 
    -1.57045274793572), value = 39.1092585946682, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.0669007659616, 2.00026800634134, 
    169.03113612976, -5.55933951051912, 2.00026800634134, 50.1969647661582, 
    -7.58256675936764, -10.9727056489817, 169.03113612976, -7.58256675936764, 
    3048.70826793291, -196.631476521603, -5.55933951051912, -10.9727056489817, 
    -196.631476521603, 187.304967470325), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195654167100582, 0.246263635093954
    ), logphi = c(0.482052537246585, -1.57045274793572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_72 = structure(list(
    par = c(-0.22353983358085, 0.044273388231532, 0.495883767725073, 
    -1.6439044973785), value = 52.9353624461168, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.1476109365915, -5.63979334700093, 
    149.911131767766, -8.91285534709851, -5.63979334700093, 25.1699071078804, 
    -14.1747975668238, -8.07852269613107, 149.911131767766, -14.1747975668238, 
    3060.75877419509, -210.58513937966, -8.91285534709851, -8.07852269613107, 
    -210.58513937966, 181.661593609661), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.22353983358085, 0.044273388231532
    ), logphi = c(0.495883767725073, -1.6439044973785)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_73 = structure(list(
    par = c(-0.423871000908231, 0.205289076838761, 0.526275874342064, 
    -1.61410359237585), value = 44.0083223056168, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.2307943414552, -1.36566696795626, 
    188.266209944388, -20.5159297514967, -1.36566696795626, 41.7698120074306, 
    -24.1505385325524, -12.3068232147361, 188.266209944388, -24.1505385325524, 
    3381.76276629554, -346.018939454851, -20.5159297514967, -12.3068232147361, 
    -346.018939454851, 225.182556247816), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423871000908231, 0.205289076838761
    ), logphi = c(0.526275874342064, -1.61410359237585)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_74 = structure(list(
    par = c(-0.285694854369076, 0.0615795328442151, 0.527389591778238, 
    -1.64206483080558), value = 54.2876293207246, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.3762523420955, -7.06788630644439, 
    179.052878682029, -16.9449512101849, -7.06788630644439, 30.6975894659445, 
    -26.4694453822045, -9.37651287458152, 179.052878682029, -26.4694453822045, 
    3566.42422621434, -319.244421479681, -16.9449512101849, -9.37651287458152, 
    -319.244421479681, 225.279259272071), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285694854369076, 0.0615795328442151
    ), logphi = c(0.527389591778238, -1.64206483080558)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_75 = structure(list(
    par = c(-0.337596556222906, 0.0958803170334768, 0.527363580056426, 
    -1.58702985166887), value = 63.840578019661, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.0613926853368, -6.16545359299892, 
    180.144202502674, -18.7421715480696, -6.16545359299892, 32.2776964853944, 
    -25.9911961215664, -10.2069620275813, 180.144202502674, -25.9911961215664, 
    3209.8968260712, -316.882107934902, -18.7421715480696, -10.2069620275813, 
    -316.882107934902, 216.133491777626), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337596556222906, 0.0958803170334768
    ), logphi = c(0.527363580056426, -1.58702985166887)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_76 = structure(list(
    par = c(-0.272346602287807, -0.00222450192609998, 0.502337616138737, 
    -1.60955364435886), value = 60.0952271256031, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.9910212869904, -5.40433096141157, 
    170.718163067463, -12.7588624341257, -5.40433096141157, 29.563516553921, 
    -19.3585135530583, -9.04867763651396, 170.718163067463, -19.3585135530583, 
    3260.16876052648, -249.27826924781, -12.7588624341257, -9.04867763651396, 
    -249.27826924781, 202.814176057942), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.272346602287807, -0.00222450192609998
    ), logphi = c(0.502337616138737, -1.60955364435886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_77 = structure(list(
    par = c(-0.302667037485814, -0.167754553930619, 0.473931110570484, 
    -1.74481933428354), value = 44.768609621981, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.9224981652213, -6.35510615687451, 
    173.854277974783, -10.4378816159212, -6.35510615687451, 20.2279632546265, 
    -14.6424700044889, -7.67904085918758, 173.854277974783, -14.6424700044889, 
    4229.64926632119, -239.994675037103, -10.4378816159212, -7.67904085918758, 
    -239.994675037103, 220.136916272651), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302667037485814, -0.167754553930619
    ), logphi = c(0.473931110570484, -1.74481933428354)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_78 = structure(list(
    par = c(-0.331708496569003, -0.00252220147676966, 0.50435253995359, 
    -1.57735884302188), value = 56.7307664464809, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.8407078955037, -3.87577403060391, 
    162.850831511463, -14.012211097203, -3.87577403060391, 28.26807890699, 
    -19.4048238224553, -8.91680026704478, 162.850831511463, -19.4048238224553, 
    2897.7717764711, -240.415393658822, -14.012211097203, -8.91680026704478, 
    -240.415393658822, 187.229629219132), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331708496569003, -0.00252220147676966
    ), logphi = c(0.50435253995359, -1.57735884302188)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_79 = structure(list(
    par = c(-0.420366839398163, 0.119921221985141, 0.524005429613055, 
    -1.60337664802219), value = 58.4721103531247, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.888131209808, -3.44146418918001, 
    188.2704704812, -20.8695665886438, -3.44146418918001, 36.2386253573987, 
    -26.2648149345068, -11.3393340637202, 188.2704704812, -26.2648149345068, 
    3374.29865897221, -338.904120717132, -20.8695665886438, -11.3393340637202, 
    -338.904120717132, 225.32783524909), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.420366839398163, 0.119921221985141
    ), logphi = c(0.524005429613055, -1.60337664802219)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_80 = structure(list(
    par = c(-0.236712876788762, 0.305844142638634, 0.515823756669141, 
    -1.57552407240041), value = 38.5251953208001, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.3800915581022, -0.631708713783041, 
    149.282873662671, -10.3260335517774, -0.631708713783041, 
    41.1148345893508, -12.6543524530121, -10.1840965758271, 149.282873662671, 
    -12.6543524530121, 2607.76212954639, -234.627260509157, -10.3260335517774, 
    -10.1840965758271, -234.627260509157, 171.823180270536), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236712876788762, 0.305844142638634
    ), logphi = c(0.515823756669141, -1.57552407240041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_81 = structure(list(
    par = c(-0.410343730863681, -0.172373757480312, 0.513787142200581, 
    -1.58665697143989), value = 62.0262469770589, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.4518897068211, -5.94047462065816, 
    162.914446642404, -18.1859482415447, -5.94047462065816, 20.2332927550231, 
    -24.8276166132655, -7.35711143917683, 162.914446642404, -24.8276166132655, 
    2988.35559167898, -270.921822774994, -18.1859482415447, -7.35711143917683, 
    -270.921822774994, 196.641314623491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.410343730863681, -0.172373757480312
    ), logphi = c(0.513787142200581, -1.58665697143989)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_82 = structure(list(
    par = c(-0.269854931596809, 0.3439366261707, 0.513061064367221, 
    -1.68100286935815), value = 28.3902743593175, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.7091434457822, -1.11530411928129, 
    170.174239393361, -11.1011908590086, -1.11530411928129, 42.7093660952949, 
    -10.4880958406994, -11.6691273719383, 170.174239393361, -10.4880958406994, 
    3478.19876534139, -285.464032268479, -11.1011908590086, -11.6691273719383, 
    -285.464032268479, 206.40491922741), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269854931596809, 0.3439366261707
    ), logphi = c(0.513061064367221, -1.68100286935815)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_83 = structure(list(
    par = c(-0.126124911738126, -0.0126782257103113, 0.475337074461699, 
    -1.66126669488927), value = 42.0224363682887, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.7141564046287, -6.53355657931343, 
    129.833182105799, -3.9232013175905, -6.53355657931343, 19.4401869997307, 
    -8.88916748387203, -6.4125894061462, 129.833182105799, -8.88916748387203, 
    2871.9141633804, -147.92916051487, -3.9232013175905, -6.4125894061462, 
    -147.92916051487, 160.945111158384), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126124911738126, -0.0126782257103113
    ), logphi = c(0.475337074461699, -1.66126669488927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_84 = structure(list(
    par = c(-0.144100972748049, -0.392104676477359, 0.461755609027519, 
    -1.66503910219885), value = 63.741946346999, counts = structure(c(501L, 
    NA), .Names = c("function", "gradient")), convergence = 1L, 
    message = NULL, hessian = structure(c(71.2050038860212, -8.08611145508564, 
    161.707125895916, -5.63622772808969, -8.08611145508564, 15.3626047225686, 
    -13.01980497459, -5.85564229549362, 161.707125895916, -13.01980497459, 
    3738.60085366751, -154.007741650197, -5.63622772808969, -5.85564229549362, 
    -154.007741650197, 204.883851596449), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144100972748049, -0.392104676477359
    ), logphi = c(0.461755609027519, -1.66503910219885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_85 = structure(list(
    par = c(0.0140773021897553, 0.0232583083968126, 0.471111773825401, 
    -1.62853079673334), value = 48.1997090706079, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.0227427811956, -7.33034658573217, 
    114.558684810362, -0.441695218178495, -7.33034658573217, 
    21.4737383252839, -7.37433892084027, -5.56082496139254, 114.558684810362, 
    -7.37433892084027, 2565.5008674299, -109.086202872533, -0.441695218178495, 
    -5.56082496139254, -109.086202872533, 145.825986230363), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0140773021897553, 0.0232583083968126
    ), logphi = c(0.471111773825401, -1.62853079673334)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_86 = structure(list(
    par = c(-0.17920059722488, 0.146968163167114, 0.522422023896336, 
    -1.59419928328781), value = 49.5657756486026, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.4837044231062, -6.50740240892844, 
    146.716550796455, -10.8562771856668, -6.50740240892844, 28.6140327663276, 
    -18.1930769702632, -8.31649484211994, 146.716550796455, -18.1930769702632, 
    2738.56663341476, -236.841041484581, -10.8562771856668, -8.31649484211994, 
    -236.841041484581, 177.567847366333), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17920059722488, 0.146968163167114
    ), logphi = c(0.522422023896336, -1.59419928328781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_87 = structure(list(
    par = c(-0.340429342471031, 0.123998227184698, 0.495347971867249, 
    -1.52481841009818), value = 59.2391826456767, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.781693537749, -0.403212318644819, 
    154.359175821739, -11.4138750433312, -0.403212318644819, 
    34.5366369156608, -13.8526754689394, -9.89965500775014, 154.359175821739, 
    -13.8526754689394, 2464.50984296764, -201.35693990575, -11.4138750433312, 
    -9.89965500775014, -201.35693990575, 162.897353810365), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340429342471031, 0.123998227184698
    ), logphi = c(0.495347971867249, -1.52481841009818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_88 = structure(list(
    par = c(-0.275053605310337, -0.256631997663736, 0.48856626178596, 
    -1.5835345626049), value = 67.5637148215818, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.5315434465156, -6.5890671372415, 
    154.575883520636, -11.1099311670415, -6.5890671372415, 17.5775982143023, 
    -17.7227799653679, -6.6803085907452, 154.575883520636, -17.7227799653679, 
    2923.78302576068, -192.550779361866, -11.1099311670415, -6.6803085907452, 
    -192.550779361866, 180.544503610491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275053605310337, -0.256631997663736
    ), logphi = c(0.48856626178596, -1.5835345626049)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_89 = structure(list(
    par = c(-0.301039170659643, -0.129664745439295, 0.498938545160186, 
    -1.65456669916112), value = 61.2863022090259, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.1635397782776, -7.46103448712176, 
    161.619829738058, -12.8282719025208, -7.46103448712176, 19.0126490782205, 
    -19.6304215425158, -7.51350128513906, 161.619829738058, -19.6304215425158, 
    3370.92910254455, -242.9574608378, -12.8282719025208, -7.51350128513906, 
    -242.9574608378, 200.416871896536), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301039170659643, -0.129664745439295
    ), logphi = c(0.498938545160186, -1.65456669916112)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_90 = structure(list(
    par = c(-0.306361423658508, -0.000515022809408134, 0.506274068457121, 
    -1.56545778989342), value = 43.8816819620278, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.5005083541762, -3.24323078437772, 
    128.339963936241, -10.8350629401954, -3.24323078437772, 23.2183880459758, 
    -15.5503706160687, -6.97189748866123, 128.339963936241, -15.5503706160687, 
    2252.13332710616, -187.910068069286, -10.8350629401954, -6.97189748866123, 
    -187.910068069286, 146.974696264124), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306361423658508, -0.000515022809408134
    ), logphi = c(0.506274068457121, -1.56545778989342)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_91 = structure(list(
    par = c(-0.122424053892219, 0.00922057026389688, 0.478251507493584, 
    -1.656521841021), value = 50.2360444704325, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.5192187217848, -6.71653931760829, 
    156.56076617887, -4.8843550066735, -6.71653931760829, 27.5361507924288, 
    -11.0132877626512, -7.87243226696432, 156.56076617887, -11.0132877626512, 
    3428.20902470997, -182.344227038556, -4.8843550066735, -7.87243226696432, 
    -182.344227038556, 193.757266238492), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122424053892219, 0.00922057026389688
    ), logphi = c(0.478251507493584, -1.656521841021)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_92 = structure(list(
    par = c(-0.552451754983985, -0.590828765130125, 0.510737728025718, 
    -1.62625350382061), value = 64.2490717591691, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(41.6226606958503, -5.79346501083933, 
    155.581259342341, -21.2323512336354, -5.79346501083933, 9.252520392522, 
    -26.1863941908302, -4.14154604655437, 155.581259342341, -26.1863941908302, 
    3259.63916741756, -292.08586078866, -21.2323512336354, -4.14154604655437, 
    -292.08586078866, 208.833646105688), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.552451754983985, -0.590828765130125
    ), logphi = c(0.510737728025718, -1.62625350382061)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_93 = structure(list(
    par = c(-0.302048064132913, -0.041637472364056, 0.500013022495654, 
    -1.62338743368716), value = 60.9735181037209, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.5618919451514, -5.78363142800242, 
    177.848682927362, -13.8923767529775, -5.78363142800242, 27.6724994900945, 
    -20.4583040925854, -9.16298258069048, 177.848682927362, -20.4583040925854, 
    3468.7551229311, -262.007521683927, -13.8923767529775, -9.16298258069048, 
    -262.007521683927, 212.906807998792), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302048064132913, -0.041637472364056
    ), logphi = c(0.500013022495654, -1.62338743368716)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_94 = structure(list(
    par = c(-0.463269953397, -0.0660701282125636, 0.520132159129554, 
    -1.59331675664806), value = 56.237047373509, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.8250875872801, -4.17643910033405, 
    167.182193139936, -20.2489128842132, -4.17643910033405, 25.4245641642115, 
    -26.5952501390387, -8.41014846564292, 167.182193139936, -26.5952501390387, 
    3024.45976043764, -298.834793500902, -20.2489128842132, -8.41014846564292, 
    -298.834793500902, 202.599100083134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.463269953397, -0.0660701282125636
    ), logphi = c(0.520132159129554, -1.59331675664806)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_95 = structure(list(
    par = c(-0.219778625095486, 0.296045216034695, 0.492290625939045, 
    -1.78624043461415), value = 18.9581346538147, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.1856966494132, -2.52480027107538, 
    204.174436191806, -8.4533769086903, -2.52480027107538, 47.0243108132706, 
    -4.28360834980879, -12.3002274179385, 204.174436191806, -4.28360834980879, 
    5103.77325656641, -317.105453192745, -8.4533769086903, -12.3002274179385, 
    -317.105453192745, 256.797097314632), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219778625095486, 0.296045216034695
    ), logphi = c(0.492290625939045, -1.78624043461415)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_96 = structure(list(
    par = c(-0.564551701061929, -0.392626312434194, 0.558471193914516, 
    -1.60309163707681), value = 63.2910255774977, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(32.370046520569, -5.99566844172728, 
    131.553671174345, -22.9988419135907, -5.99566844172728, 11.1488171192775, 
    -31.8790608666575, -2.79794145185974, 131.553671174345, -31.8790608666575, 
    2681.93580211928, -327.862259144496, -22.9988419135907, -2.79794145185974, 
    -327.862259144496, 193.854661734605), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.564551701061929, -0.392626312434194
    ), logphi = c(0.558471193914516, -1.60309163707681)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_97 = structure(list(
    par = c(-0.321777642178886, 0.201962724879607, 0.517184452469683, 
    -1.56082915311866), value = 55.9230010582397, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.8717048172077, -1.19288986333288, 
    171.939761409945, -15.2464363587512, -1.19288986333288, 41.9958560318179, 
    -18.744737664278, -11.1749913589421, 171.939761409945, -18.744737664278, 
    2893.83486381389, -275.727540891779, -15.2464363587512, -11.1749913589421, 
    -275.727540891779, 195.395487445182), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.321777642178886, 0.201962724879607
    ), logphi = c(0.517184452469683, -1.56082915311866)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_98 = structure(list(
    par = c(-0.306675082483342, 0.167470681022818, 0.475121853188367, 
    -1.62705991993295), value = 29.1903157782674, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.2435914668721, 1.8703224338168, 
    153.065694481924, -7.17737001743046, 1.8703224338168, 38.8010645515635, 
    -6.13473599564429, -9.68463484962712, 153.065694481924, -6.13473599564429, 
    2936.09757962976, -188.383505239642, -7.17737001743046, -9.68463484962712, 
    -188.383505239642, 171.939296841117), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306675082483342, 0.167470681022818
    ), logphi = c(0.475121853188367, -1.62705991993295)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_99 = structure(list(
    par = c(-0.536737891800154, 0.161564045794074, 0.499828186846422, 
    -1.74565049347429), value = 19.6937693228894, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(51.6929106684216, -1.1128725851961, 
    178.300820039112, -17.3061346435688, -1.1128725851961, 32.1944633672189, 
    -16.6023496506185, -11.4899705314642, 178.300820039112, -16.6023496506185, 
    3916.06628503816, -326.410569131852, -17.3061346435688, -11.4899705314642, 
    -326.410569131852, 218.078396214239), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.536737891800154, 0.161564045794074
    ), logphi = c(0.499828186846422, -1.74565049347429)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_100 = structure(list(
    par = c(-0.144621818255994, -0.346911811868029, 0.467869388902879, 
    -1.71321294535287), value = 58.9615067274636, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.9187427697863, -9.0123117733043, 
    156.707202227935, -6.19049330197186, -9.0123117733043, 13.5981026616605, 
    -12.9846315353177, -5.67441323973128, 156.707202227935, -12.9846315353177, 
    3904.966171282, -175.667666354684, -6.19049330197186, -5.67441323973128, 
    -175.667666354684, 206.197259673857), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144621818255994, -0.346911811868029
    ), logphi = c(0.467869388902879, -1.71321294535287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_101 = structure(list(
    par = c(-0.268890649199186, -0.045039306329868, 0.495561489274679, 
    -1.64304767915325), value = 55.8973263950294, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.8143817263741, -6.74281187329484, 
    179.075251445227, -12.3968405256747, -6.74281187329484, 26.7708092476227, 
    -19.0985816388434, -9.06718499393833, 179.075251445227, -19.0985816388434, 
    3645.49540235259, -255.43832153474, -12.3968405256747, -9.06718499393833, 
    -255.43832153474, 217.335641311323), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.268890649199186, -0.045039306329868
    ), logphi = c(0.495561489274679, -1.64304767915325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_102 = structure(list(
    par = c(-0.0618439193615682, 0.0516854942625685, 0.484819708168816, 
    -1.60098457864736), value = 47.065085521632, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.2025973348079, -6.29023413623031, 
    126.163539654556, -3.2549510828872, -6.29023413623031, 24.9836065577824, 
    -10.2094239533557, -6.5675378557728, 126.163539654556, -10.2094239533557, 
    2564.77235716623, -141.657039229415, -3.2549510828872, -6.5675378557728, 
    -141.657039229415, 152.926437515077), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0618439193615682, 0.0516854942625685
    ), logphi = c(0.484819708168816, -1.60098457864736)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_103 = structure(list(
    par = c(-0.293885240987469, -0.0792366467404637, 0.505079199685785, 
    -1.61590978626187), value = 54.0593109223915, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.8450731837992, -5.95837560091184, 
    167.651057511264, -13.9079992402813, -5.95837560091184, 25.5529272941146, 
    -21.1542423755873, -8.22180474813194, 167.651057511264, -21.1542423755873, 
    3256.05774167492, -253.569605073167, -13.9079992402813, -8.22180474813194, 
    -253.569605073167, 202.701703010177), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293885240987469, -0.0792366467404637
    ), logphi = c(0.505079199685785, -1.61590978626187)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_104 = structure(list(
    par = c(-0.330243709620725, 0.249395600139365, 0.484659610450128, 
    -1.67092966098239), value = 28.2521814702321, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.6889215808914, 2.22863827836761, 
    196.377775122158, -10.6799333305929, 2.22863827836761, 47.9420604868608, 
    -6.22991687926344, -13.0807770259977, 196.377775122158, -6.22991687926344, 
    3966.74509225114, -279.947301367933, -10.6799333305929, -13.0807770259977, 
    -279.947301367933, 227.872828190812), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330243709620725, 0.249395600139365
    ), logphi = c(0.484659610450128, -1.67092966098239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_105 = structure(list(
    par = c(-0.385140532831414, -0.506806410329502, 0.497741223357385, 
    -1.60455732526728), value = 68.9565333598617, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.4545278328928, -6.2627564432205, 
    147.738708214717, -15.0526159696796, -6.2627564432205, 10.5442272371192, 
    -20.1403964616986, -4.7996126859573, 147.738708214717, -20.1403964616986, 
    2949.0049642078, -219.493091154987, -15.0526159696796, -4.7996126859573, 
    -219.493091154987, 183.862394646184), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.385140532831414, -0.506806410329502
    ), logphi = c(0.497741223357385, -1.60455732526728)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_106 = structure(list(
    par = c(-0.0121651138078425, 0.222755280647836, 0.529282334270266, 
    -1.48292438199518), value = 59.6140406820443, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.3111183086282, -7.01193100915987, 
    117.667613729111, -6.77529522263853, -7.01193100915987, 31.7891147396665, 
    -15.4073623690465, -6.7301451407431, 117.667613729111, -15.4073623690465, 
    1912.49279938077, -177.080263313201, -6.77529522263853, -6.7301451407431, 
    -177.080263313201, 134.777550186982), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0121651138078425, 0.222755280647836
    ), logphi = c(0.529282334270266, -1.48292438199518)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_107 = structure(list(
    par = c(-0.206768347853873, -0.360193824981781, 0.496263480112594, 
    -1.68018232506691), value = 58.5099119626716, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.2622036885376, -8.49293531679507, 
    151.198383267825, -10.5904288609793, -8.49293531679507, 13.0586018567413, 
    -18.5539116550615, -5.33598160235016, 151.198383267825, -18.5539116550615, 
    3501.25711820048, -216.050277568769, -10.5904288609793, -5.33598160235016, 
    -216.050277568769, 199.881512326527), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206768347853873, -0.360193824981781
    ), logphi = c(0.496263480112594, -1.68018232506691)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_108 = structure(list(
    par = c(-0.276184722857377, -0.318804109047965, 0.473836648266174, 
    -1.7116724276981), value = 50.9401088325444, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.6050751860937, -7.66650610017905, 
    157.236987369913, -9.40740327415313, -7.66650610017905, 13.625576475107, 
    -15.0572565509322, -6.0935989001365, 157.236987369913, -15.0572565509322, 
    3726.94010527574, -203.829314421533, -9.40740327415313, -6.0935989001365, 
    -203.829314421533, 200.3502119301), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276184722857377, -0.318804109047965
    ), logphi = c(0.473836648266174, -1.7116724276981)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_109 = structure(list(
    par = c(-0.257209562328735, -0.332795689209191, 0.490676596388282, 
    -1.70544018045485), value = 52.3741813410309, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.7952911073301, -8.00235112308201, 
    164.096524349233, -11.7574750095883, -8.00235112308201, 14.9182715034613, 
    -19.4053167330566, -6.03048375857895, 164.096524349233, -19.4053167330566, 
    3893.67246436123, -237.925292637442, -11.7574750095883, -6.03048375857895, 
    -237.925292637442, 215.927689508177), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257209562328735, -0.332795689209191
    ), logphi = c(0.490676596388282, -1.70544018045485)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_110 = structure(list(
    par = c(-0.374338584565314, -0.152405439076399, 0.48194272844443, 
    -1.62215799334073), value = 52.523085684182, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.531917209199, -4.3083131373578, 
    157.276354958213, -12.051874430874, -4.3083131373578, 20.4872986522275, 
    -16.0762504712864, -7.76058782303579, 157.276354958213, -16.0762504712864, 
    3046.54749303523, -206.806174891661, -12.051874430874, -7.76058782303579, 
    -206.806174891661, 182.282213939899), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374338584565314, -0.152405439076399
    ), logphi = c(0.48194272844443, -1.62215799334073)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_111 = structure(list(
    par = c(-0.179211525878849, -0.0758897770330712, 0.498720460880235, 
    -1.50093535501478), value = 69.7384820159792, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.09190255197, -5.86289032611376, 
    134.293443451838, -8.3190886179807, -5.86289032611376, 23.1303837487928, 
    -15.7937104070527, -6.72464226170177, 134.293443451838, -15.7937104070527, 
    2216.02987287284, -160.08490493391, -8.3190886179807, -6.72464226170177, 
    -160.08490493391, 146.387248399549), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.179211525878849, -0.0758897770330712
    ), logphi = c(0.498720460880235, -1.50093535501478)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_112 = structure(list(
    par = c(-0.238488501854728, -0.0241100542164654, 0.501821429893645, 
    -1.52583738833883), value = 70.8597386307841, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.1069210765913, -6.02826905549136, 
    151.508402364442, -10.8774610598772, -6.02826905549136, 25.1883608370917, 
    -17.7220964197033, -8.02722337134298, 151.508402364442, -17.7220964197033, 
    2542.24660170621, -198.242153103934, -10.8774610598772, -8.02722337134298, 
    -198.242153103934, 167.682852175943), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238488501854728, -0.0241100542164654
    ), logphi = c(0.501821429893645, -1.52583738833883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_113 = structure(list(
    par = c(0.0852128971704815, 0.159092491169087, 0.46630602876362, 
    -1.70748658412828), value = 41.2845926812064, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.7493451940499, -8.33380832077069, 
    121.029644482462, 1.73820778748279, -8.33380832077069, 26.1610034968385, 
    -3.27589520843219, -5.80099760227881, 121.029644482462, -3.27589520843219, 
    3219.56472325446, -122.621870231931, 1.73820778748279, -5.80099760227881, 
    -122.621870231931, 168.290610325528), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0852128971704815, 0.159092491169087
    ), logphi = c(0.46630602876362, -1.70748658412828)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_114 = structure(list(
    par = c(-0.353196777916168, -0.274122212548366, 0.475239368098791, 
    -1.50884561190966), value = 70.9799635919714, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.031580227057, -4.1192806641277, 
    149.620611093582, -10.5543152280063, -4.1192806641277, 18.5277016768737, 
    -15.7073553133102, -6.97167598673332, 149.620611093582, -15.7073553133102, 
    2431.15877242417, -149.593732295727, -10.5543152280063, -6.97167598673332, 
    -149.593732295727, 154.53317206493), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353196777916168, -0.274122212548366
    ), logphi = c(0.475239368098791, -1.50884561190966)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_115 = structure(list(
    par = c(-0.51414335811657, -0.196362614561835, 0.545385706986929, 
    -1.54647463511783), value = 59.5316318443079, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(44.1201716725459, -5.00401684533358, 
    141.838373396652, -22.5367807455967, -5.00401684533358, 18.0573793784333, 
    -29.3021229627044, -5.27143343287406, 141.838373396652, -29.3021229627044, 
    2448.71337348229, -297.416413674867, -22.5367807455967, -5.27143343287406, 
    -297.416413674867, 181.774977637161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.51414335811657, -0.196362614561835
    ), logphi = c(0.545385706986929, -1.54647463511783)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_116 = structure(list(
    par = c(-0.30754272901209, 0.136263128813906, 0.50208077674445, 
    -1.62108878466198), value = 38.5753722402832, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.3946233897499, -2.54509930641689, 
    153.595197986078, -11.2694276630521, -2.54509930641689, 31.1291451779994, 
    -14.2886680176701, -9.35583834227316, 153.595197986078, -14.2886680176701, 
    2902.96730076989, -231.460907515135, -11.2694276630521, -9.35583834227316, 
    -231.460907515135, 179.861415109173), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30754272901209, 0.136263128813906
    ), logphi = c(0.50208077674445, -1.62108878466198)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_117 = structure(list(
    par = c(-0.141937679635234, 0.0436626724194067, 0.490171920153274, 
    -1.60525020724156), value = 55.8939263280317, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.0117404222125, -5.89092030089944, 
    163.421802303887, -7.00802319730798, -5.89092030089944, 33.2929240443036, 
    -14.401954304688, -8.70906381322811, 163.421802303887, -14.401954304688, 
    3228.39537676245, -202.176883380645, -7.00802319730798, -8.70906381322811, 
    -202.176883380645, 194.762559480921), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.141937679635234, 0.0436626724194067
    ), logphi = c(0.490171920153274, -1.60525020724156)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_118 = structure(list(
    par = c(-0.366499837333546, -0.22065959064802, 0.49107720272821, 
    -1.67190363282961), value = 50.7034821826865, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.0388200548894, -6.17079176734592, 
    155.641124797157, -13.1796612325985, -6.17079176734592, 16.2386603861364, 
    -18.7967240599107, -6.79134330994202, 155.641124797157, -18.7967240599107, 
    3335.81752759571, -233.126153015739, -13.1796612325985, -6.79134330994202, 
    -233.126153015739, 193.740056966263), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.366499837333546, -0.22065959064802
    ), logphi = c(0.49107720272821, -1.67190363282961)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_119 = structure(list(
    par = c(-0.280940453090836, 0.00126641852167467, 0.482213515605387, 
    -1.57884741950585), value = 51.3375259133405, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.1774000066088, -3.10678540138554, 
    139.327347651985, -8.00222636954118, -3.10678540138554, 24.5537540504159, 
    -11.8289002077887, -7.77735372636812, 139.327347651985, -11.8289002077887, 
    2524.56178879967, -165.562053942025, -8.00222636954118, -7.77735372636812, 
    -165.562053942025, 155.070903494092), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280940453090836, 0.00126641852167467
    ), logphi = c(0.482213515605387, -1.57884741950585)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_120 = structure(list(
    par = c(-0.22420454091343, -0.153346766909972, 0.475354435904295, 
    -1.58961746259964), value = 59.0580757895951, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.1248277184728, -5.3584923964678, 
    133.885960037716, -6.54001155364625, -5.3584923964678, 17.9769185244538, 
    -12.0757879464861, -6.39015707548651, 133.885960037716, -12.0757879464861, 
    2566.67438470792, -143.065953507104, -6.54001155364625, -6.39015707548651, 
    -143.065953507104, 153.562846541888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.22420454091343, -0.153346766909972
    ), logphi = c(0.475354435904295, -1.58961746259964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_121 = structure(list(
    par = c(-0.204593197884539, -0.257116194038875, 0.483162363999129, 
    -1.53516561666832), value = 67.6716133699386, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.516294060013, -5.72067517268238, 
    135.58032729577, -7.61829787343515, -5.72067517268238, 18.2323216790792, 
    -14.6329064456552, -5.91775862446298, 135.58032729577, -14.6329064456552, 
    2409.81371003812, -141.932281595203, -7.61829787343515, -5.91775862446298, 
    -141.932281595203, 151.328879685053), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204593197884539, -0.257116194038875
    ), logphi = c(0.483162363999129, -1.53516561666832)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_122 = structure(list(
    par = c(-0.30713345600957, -0.121755545082528, 0.473478777899932, 
    -1.60091537709768), value = 62.3736136117891, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.7338743640994, -4.38478877029524, 
    167.604968414281, -9.74725607072457, -4.38478877029524, 24.2164923971444, 
    -14.3844157705075, -8.48511123940909, 167.604968414281, -14.3844157705075, 
    3175.59357812236, -189.287549869022, -9.74725607072457, -8.48511123940909, 
    -189.287549869022, 189.036929846509), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.30713345600957, -0.121755545082528
    ), logphi = c(0.473478777899932, -1.60091537709768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_123 = structure(list(
    par = c(-0.312882055212439, 0.167101261981322, 0.491940887311214, 
    -1.7458802313758), value = 24.928131919979, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.0425837734851, -3.247411598295, 
    171.971154637518, -10.5004924177976, -3.247411598295, 32.1179726370246, 
    -10.4657082484749, -10.1451556053789, 171.971154637518, -10.4657082484749, 
    3971.65882680639, -269.821433606765, -10.5004924177976, -10.1451556053789, 
    -269.821433606765, 212.297095602665), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312882055212439, 0.167101261981322
    ), logphi = c(0.491940887311214, -1.7458802313758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_124 = structure(list(
    par = c(-0.388156513033374, 0.0225825040658672, 0.53810301059484, 
    -1.52384954963378), value = 66.0229859233161, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.8072750334118, -5.26173264958629, 
    166.212031107449, -21.3930153343256, -5.26173264958629, 29.0103005653464, 
    -28.1575042535565, -8.6066041724564, 166.212031107449, -28.1575042535565, 
    2668.0876498375, -305.499115491159, -21.3930153343256, -8.6066041724564, 
    -305.499115491159, 195.693715372869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.388156513033374, 0.0225825040658672
    ), logphi = c(0.53810301059484, -1.52384954963378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_125 = structure(list(
    par = c(-0.396448133852814, 0.215317843656742, 0.511500849373479, 
    -1.66883824138657), value = 33.8455222805467, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.6687334176191, -1.63642685713228, 
    174.786918696768, -15.4964084373432, -1.63642685713228, 36.4602921347768, 
    -16.7079369983725, -11.482646600669, 174.786918696768, -16.7079369983725, 
    3449.58537104567, -302.457447565629, -15.4964084373432, -11.482646600669, 
    -302.457447565629, 210.173001882197), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396448133852814, 0.215317843656742
    ), logphi = c(0.511500849373479, -1.66883824138657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_126 = structure(list(
    par = c(-0.34521845536341, -0.062526631247112, 0.507510360329128, 
    -1.56598519700702), value = 74.8221018434319, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.6098703733035, -5.44876680308448, 
    185.885898769556, -17.3970342807195, -5.44876680308448, 29.4365233628469, 
    -24.2797842560094, -9.58651261129262, 185.885898769556, -24.2797842560094, 
    3264.2388422488, -279.577362096717, -17.3970342807195, -9.58651261129262, 
    -279.577362096717, 214.269222166052), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34521845536341, -0.062526631247112
    ), logphi = c(0.507510360329128, -1.56598519700702)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_127 = structure(list(
    par = c(-0.240962877801188, 0.0352583647879554, 0.506288158385415, 
    -1.65376463812616), value = 52.7453068894615, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.5982723299879, -6.54216178119782, 
    159.519003751996, -11.3212488068726, -6.54216178119782, 25.5035000407133, 
    -17.9919632383729, -8.40401001589441, 159.519003751996, -17.9919632383729, 
    3291.15443532402, -245.629201216957, -11.3212488068726, -8.40401001589441, 
    -245.629201216957, 197.221871825803), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240962877801188, 0.0352583647879554
    ), logphi = c(0.506288158385415, -1.65376463812616)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_128 = structure(list(
    par = c(-0.218842980367903, -0.0337876802662851, 0.511882424996364, 
    -1.55535243143213), value = 66.41296616252, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.1792509154586, -6.74329997707446, 
    160.258851067852, -12.578792176754, -6.74329997707446, 27.3207428875821, 
    -20.8138490513932, -8.05935109049472, 160.258851067852, -20.8138490513932, 
    2845.93308064984, -233.858833381007, -12.578792176754, -8.05935109049472, 
    -233.858833381007, 187.083828812717), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218842980367903, -0.0337876802662851
    ), logphi = c(0.511882424996364, -1.55535243143213)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_129 = structure(list(
    par = c(-0.277984865780527, -0.016884572969495, 0.503067458060703, 
    -1.68447468753548), value = 43.3181167356966, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.6870485917455, -6.03827491829634, 
    170.068134741186, -12.6830910325282, -6.03827491829634, 27.0061922051923, 
    -19.5800271320934, -8.5492978367796, 170.068134741186, -19.5800271320934, 
    3686.4170021893, -267.01273866081, -12.6830910325282, -8.5492978367796, 
    -267.01273866081, 213.765104721375), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277984865780527, -0.016884572969495
    ), logphi = c(0.503067458060703, -1.68447468753548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_130 = structure(list(
    par = c(-0.318328485565591, -0.158262716166917, 0.4808700020995, 
    -1.74119363345248), value = 41.9439166579147, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.4001797915002, -6.81326636353674, 
    172.377406116198, -11.5351313549894, -6.81326636353674, 19.1607097796975, 
    -16.4825234332255, -7.67704949744541, 172.377406116198, -16.4825234332255, 
    4148.81249474774, -251.118780742132, -11.5351313549894, -7.67704949744541, 
    -251.118780742132, 219.386233833774), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318328485565591, -0.158262716166917
    ), logphi = c(0.4808700020995, -1.74119363345248)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_131 = structure(list(
    par = c(-0.4042864897376, -0.261685746895712, 0.545099988778171, 
    -1.59586966688913), value = 73.8407480170839, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.7854171516442, -7.77557373510263, 
    168.74387428345, -23.5656646481175, -7.77557373510263, 19.0935285218075, 
    -34.0222284975766, -5.55844531291427, 168.74387428345, -34.0222284975766, 
    3271.76397419393, -351.017477676407, -23.5656646481175, -5.55844531291427, 
    -351.017477676407, 226.114834234181), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.4042864897376, -0.261685746895712
    ), logphi = c(0.545099988778171, -1.59586966688913)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_132 = structure(list(
    par = c(-0.243867063386073, -0.522684580379466, 0.503112734568152, 
    -1.80096012239872), value = 46.9547751392938, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(42.3656477934742, -8.74577026444001, 
    152.604503513842, -11.987139536096, -8.74577026444001, 8.87347769484848, 
    -21.199008145345, -3.98971221482469, 152.604503513842, -21.199008145345, 
    4461.97778278545, -258.530185998751, -11.987139536096, -3.98971221482469, 
    -258.530185998751, 223.469944359067), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243867063386073, -0.522684580379466
    ), logphi = c(0.503112734568152, -1.80096012239872)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_133 = structure(list(
    par = c(-0.308226825491651, -0.112597712249672, 0.475473572940239, 
    -1.63450628557438), value = 51.9782704995208, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.0002135445219, -4.92299188792344, 
    153.045657688367, -9.19346498573503, -4.92299188792344, 20.5196254796647, 
    -13.1148070998677, -7.65602841568125, 153.045657688367, -13.1148070998677, 
    3064.94351621822, -186.000208048931, -9.19346498573503, -7.65602841568125, 
    -186.000208048931, 178.268957675698), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308226825491651, -0.112597712249672
    ), logphi = c(0.475473572940239, -1.63450628557438)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_134 = structure(list(
    par = c(-0.412421565249838, -0.234847021766191, 0.531551017913752, 
    -1.58199282577488), value = 63.220024612624, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.0198243399459, -6.98040672908462, 
    167.264971818071, -21.6961484644784, -6.98040672908462, 19.4009182266086, 
    -30.219202541204, -6.37592041741186, 167.264971818071, -30.219202541204, 
    3110.29782572625, -315.568723947557, -21.6961484644784, -6.37592041741186, 
    -315.568723947557, 212.676861199412), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.412421565249838, -0.234847021766191
    ), logphi = c(0.531551017913752, -1.58199282577488)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_135 = structure(list(
    par = c(-0.402983678482875, -0.0480386191687875, 0.509124173008814, 
    -1.75009415883217), value = 40.385913195663, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.1867521184922, -7.60754445394696, 
    198.84359697464, -18.7433873897191, -7.60754445394696, 25.3662807203625, 
    -28.2521274233005, -9.48523001476076, 198.84359697464, -28.2521274233005, 
    4727.59300650516, -362.078527199827, -18.7433873897191, -9.48523001476076, 
    -362.078527199827, 260.066654844238), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.402983678482875, -0.0480386191687875
    ), logphi = c(0.509124173008814, -1.75009415883217)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_136 = structure(list(
    par = c(-0.202512034627361, 0.0261728708972622, 0.482870209256129, 
    -1.66968220234127), value = 49.4764991039284, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.0466048321479, -5.64968715366376, 
    166.95461170535, -7.66363606885534, -5.64968715366376, 28.6106394185026, 
    -12.400438730964, -8.75028180402637, 166.95461170535, -12.400438730964, 
    3606.01677999917, -215.40677335441, -7.66363606885534, -8.75028180402637, 
    -215.40677335441, 204.12150701965), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202512034627361, 0.0261728708972622
    ), logphi = c(0.482870209256129, -1.66968220234127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_137 = structure(list(
    par = c(-0.16328978233137, -0.0675890153515045, 0.498525718592873, 
    -1.52994052529445), value = 70.2828987011829, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.7456029250532, -6.45513079788884, 
    141.671057598103, -8.33369401398443, -6.45513079788884, 24.3275490809935, 
    -16.3188623361066, -7.04142790830531, 141.671057598103, -16.3188623361066, 
    2468.5056218452, -173.625539666489, -8.33369401398443, -7.04142790830531, 
    -173.625539666489, 159.88418562074), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.16328978233137, -0.0675890153515045
    ), logphi = c(0.498525718592873, -1.52994052529445)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_138 = structure(list(
    par = c(-0.148394830248856, 0.266776502033979, 0.51620645886341, 
    -1.67822846743655), value = 42.2955816367557, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.6090611587152, -5.11705470884749, 
    166.266141224725, -9.16751307222796, -5.11705470884749, 39.5496337493029, 
    -14.5064362140346, -10.0661113338063, 166.266141224725, -14.5064362140346, 
    3549.00217748977, -269.23427359371, -9.16751307222796, -10.0661113338063, 
    -269.23427359371, 208.866794835671), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148394830248856, 0.266776502033979
    ), logphi = c(0.51620645886341, -1.67822846743655)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_139 = structure(list(
    par = c(-0.207173313401026, 0.10555610479182, 0.505536906148826, 
    -1.61104828512395), value = 52.1945582757649, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.779318512947, -4.99275208021288, 
    135.63655474691, -8.64277847334449, -4.99275208021288, 25.5964252016128, 
    -13.9359866615507, -7.68125976513545, 135.63655474691, -13.9359866615507, 
    2608.35978879115, -198.435709942046, -8.64277847334449, -7.68125976513545, 
    -198.435709942046, 162.027609688309), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207173313401026, 0.10555610479182
    ), logphi = c(0.505536906148826, -1.61104828512395)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_140 = structure(list(
    par = c(-0.239820502219466, 0.1621204151242, 0.489418849487423, 
    -1.62559443432199), value = 37.8393570685479, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.5895996733783, -1.62279090254458, 
    161.618142342945, -8.21559490482571, -1.62279090254458, 37.2320330424003, 
    -10.6611832482173, -9.83064053272642, 161.618142342945, -10.6611832482173, 
    3147.44847275605, -216.160260421816, -8.21559490482571, -9.83064053272642, 
    -216.160260421816, 188.335816250884), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239820502219466, 0.1621204151242
    ), logphi = c(0.489418849487423, -1.62559443432199)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_141 = structure(list(
    par = c(-0.210276777633806, -0.110000992300295, 0.499331383181296, 
    -1.59806605502591), value = 67.1643031085706, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.6187970983005, -7.7489057801472, 
    171.844179856606, -11.553169663614, -7.7489057801472, 24.9433194099424, 
    -20.1573843412461, -8.1143509813586, 171.844179856606, -20.1573843412461, 
    3329.41522561114, -233.770516839371, -11.553169663614, -8.1143509813586, 
    -233.770516839371, 206.271088938337), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.210276777633806, -0.110000992300295
    ), logphi = c(0.499331383181296, -1.59806605502591)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_142 = structure(list(
    par = c(-0.309121471871846, 0.0739827655348817, 0.488977136902106, 
    -1.53943619650782), value = 65.4149372163893, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.098495969987, -1.97277369906601, 
    167.508667928473, -10.8891183998594, -1.97277369906601, 34.1177690863503, 
    -14.6457072247586, -10.1700611736533, 167.508667928473, -14.6457072247586, 
    2786.91252119501, -205.884029053749, -10.8891183998594, -10.1700611736533, 
    -205.884029053749, 179.060811593246), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309121471871846, 0.0739827655348817
    ), logphi = c(0.488977136902106, -1.53943619650782)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_143 = structure(list(
    par = c(-0.379117044381888, 0.13166232463413, 0.486211549951302, 
    -1.66477098280609), value = 36.3332836302648, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7810452273396, -1.16878497635753, 
    179.326821209358, -12.3275833310288, -1.16878497635753, 34.1019174907586, 
    -11.5615828786275, -11.1889779095264, 179.326821209358, -11.5615828786275, 
    3579.84259347077, -260.566731490997, -12.3275833310288, -11.1889779095264, 
    -260.566731490997, 208.421758008726), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379117044381888, 0.13166232463413
    ), logphi = c(0.486211549951302, -1.66477098280609)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_144 = structure(list(
    par = c(-0.294536702124893, 0.0526021374653347, 0.504022872767885, 
    -1.52166620405024), value = 61.9135434288508, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.8869955572975, -3.89243570886322, 
    157.670370784402, -12.5114509383906, -3.89243570886322, 30.309503721071, 
    -17.7669326362206, -9.15537616652529, 157.670370784402, -17.7669326362206, 
    2557.09564804896, -215.637593985463, -12.5114509383906, -9.15537616652529, 
    -215.637593985463, 171.392577295038), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294536702124893, 0.0526021374653347
    ), logphi = c(0.504022872767885, -1.52166620405024)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_145 = structure(list(
    par = c(-0.296107763722434, 0.270287669820153, 0.514411588823572, 
    -1.51998202609536), value = 55.0347442742533, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.7702461385558, -0.201030168511807, 
    154.462437704339, -12.3928005519858, -0.201030168511807, 
    39.9411487812529, -14.2914570577801, -10.7313197164061, 154.462437704339, 
    -14.2914570577801, 2426.49254647631, -233.244785253994, -12.3928005519858, 
    -10.7313197164061, -233.244785253994, 167.876467054739), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296107763722434, 0.270287669820153
    ), logphi = c(0.514411588823572, -1.51998202609536)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_146 = structure(list(
    par = c(-0.279256884167809, -0.115124799112168, 0.507174130156434, 
    -1.59787123424635), value = 64.5659427415492, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.1506195856416, -6.47949141452386, 
    154.594935509067, -13.0627681436124, -6.47949141452386, 21.6152259788771, 
    -20.3079300611364, -7.28863943955105, 154.594935509067, -20.3079300611364, 
    2939.46027982628, -231.992339205789, -13.0627681436124, -7.28863943955105, 
    -231.992339205789, 186.144182666936), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279256884167809, -0.115124799112168
    ), logphi = c(0.507174130156434, -1.59787123424635)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_147 = structure(list(
    par = c(-0.26275725110956, 0.249189708622454, 0.482126817448932, 
    -1.68085732269752), value = 37.7774139092186, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.0084216034946, -0.118074185095907, 
    183.637385829272, -7.84851899204853, -0.118074185095907, 
    43.0927306354079, -4.88628912442834, -11.7004602859794, 183.637385829272, 
    -4.88628912442834, 3865.07838360473, -251.791814430469, -7.84851899204853, 
    -11.7004602859794, -251.791814430469, 217.378654054912), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26275725110956, 0.249189708622454
    ), logphi = c(0.482126817448932, -1.68085732269752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_148 = structure(list(
    par = c(-0.258654078738516, 0.0123383331263497, 0.469978310352768, 
    -1.638878498474), value = 43.1538994455078, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.1948780328365, -3.0197402089982, 
    157.850812431803, -6.79043195894735, -3.0197402089982, 28.108777248903, 
    -9.45277994546245, -8.59474436154528, 157.850812431803, -9.45277994546245, 
    3194.30496166717, -179.803339943163, -6.79043195894735, -8.59474436154528, 
    -179.803339943163, 182.623408813143), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258654078738516, 0.0123383331263497
    ), logphi = c(0.469978310352768, -1.638878498474)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_149 = structure(list(
    par = c(-0.291801475381929, -0.185936904416435, 0.524966279513211, 
    -1.61969753021732), value = 54.4311162182755, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.3957741688765, -7.32524975610716, 
    146.874399311159, -15.1098152523232, -7.32524975610716, 17.8579737788453, 
    -23.8087658956943, -5.94139434362262, 146.874399311159, -23.8087658956943, 
    2941.58944045364, -256.939122636801, -15.1098152523232, -5.94139434362262, 
    -256.939122636801, 188.448598509083), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291801475381929, -0.185936904416435
    ), logphi = c(0.524966279513211, -1.61969753021732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_150 = structure(list(
    par = c(-0.42584458129065, 0.0648252521521675, 0.474833826580618, 
    -1.62024339732824), value = 41.2251655519286, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.1749611204622, 0.270210097852441, 
    161.069234545508, -11.0467031202433, 0.270210097852441, 30.0674346824792, 
    -9.95153283156469, -10.0197720653838, 161.069234545508, -9.95153283156469, 
    2974.58704882025, -206.852897250087, -11.0467031202433, -10.0197720653838, 
    -206.852897250087, 177.005501742045), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42584458129065, 0.0648252521521675
    ), logphi = c(0.474833826580618, -1.62024339732824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_151 = structure(list(
    par = c(-0.379491274949419, -0.133166900371724, 0.501120126936141, 
    -1.47520415895516), value = 64.5660233012135, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.4060219246396, -2.89582045809311, 
    129.542833327889, -12.551570533148, -2.89582045809311, 20.9402114492718, 
    -16.6799417975483, -6.61398142831615, 129.542833327889, -16.6799417975483, 
    1943.17382589304, -167.709917748837, -12.551570533148, -6.61398142831615, 
    -167.709917748837, 133.934770495614), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379491274949419, -0.133166900371724
    ), logphi = c(0.501120126936141, -1.47520415895516)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_152 = structure(list(
    par = c(-0.557853475194422, 0.492869137831302, 0.475085447143499, 
    -1.64733055202461), value = 5.19748748761016, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.2269746258251, 14.8071882595247, 
    146.374426794438, -8.92519175188511, 14.8071882595247, 52.1569779632358, 
    12.3078143481337, -13.1696338945275, 146.374426794438, 12.3078143481337, 
    2615.61160415447, -216.922339650871, -8.92519175188511, -13.1696338945275, 
    -216.922339650871, 154.863405567696), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.557853475194422, 0.492869137831302
    ), logphi = c(0.475085447143499, -1.64733055202461)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_153 = structure(list(
    par = c(-0.532361724268186, -0.0364216043939138, 0.455393545412657, 
    -1.71851285126954), value = 22.8129547844528, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.3839957411861, 0.611930587979259, 
    194.362963783945, -13.8590731495469, 0.611930587979259, 30.3373894503522, 
    -8.71343570096883, -11.1133547919806, 194.362963783945, -8.71343570096883, 
    4161.80920412579, -260.908157063255, -13.8590731495469, -11.1133547919806, 
    -260.908157063255, 219.991590325819), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.532361724268186, -0.0364216043939138
    ), logphi = c(0.455393545412657, -1.71851285126954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_154 = structure(list(
    par = c(-0.343286339447718, -0.159644966335882, 0.48702474924654, 
    -1.70787487142797), value = 43.8056207850893, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(54.5575100741047, -5.41769301420914, 
    163.583408445689, -12.3586229294759, -5.41769301420914, 20.2420248971436, 
    -17.6479691429421, -7.43622681920186, 163.583408445689, -17.6479691429421, 
    3704.92015010804, -243.812068406513, -12.3586229294759, -7.43622681920186, 
    -243.812068406513, 205.654170722269), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343286339447718, -0.159644966335882
    ), logphi = c(0.48702474924654, -1.70787487142797)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_155 = structure(list(
    par = c(-0.0311981021085943, 0.206849406650179, 0.498616401369156, 
    -1.53163801985613), value = 59.4724563058132, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.5466864739232, -6.11753444523799, 
    141.874928404562, -3.89304704651039, -6.11753444523799, 38.0491298717089, 
    -12.5128243997352, -8.36865212772153, 141.874928404562, -12.5128243997352, 
    2544.30461619037, -170.76026359053, -3.89304704651039, -8.36865212772153, 
    -170.76026359053, 163.195620100254), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0311981021085943, 0.206849406650179
    ), logphi = c(0.498616401369156, -1.53163801985613)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_156 = structure(list(
    par = c(-0.299271149186096, 0.0698015184710377, 0.496700940152622, 
    -1.72059752300231), value = 35.5048078325726, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.8788221008183, -5.6049520296142, 
    173.238661414388, -11.7740417326928, -5.6049520296142, 27.5247791030608, 
    -15.7765894002182, -9.43297602162829, 173.238661414388, -15.7765894002182, 
    3908.96854483636, -271.995376946776, -11.7740417326928, -9.43297602162829, 
    -271.995376946776, 216.419081967345), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299271149186096, 0.0698015184710377
    ), logphi = c(0.496700940152622, -1.72059752300231)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_157 = structure(list(
    par = c(-0.211465240011847, -0.0174393262792638, 0.487722346763777, 
    -1.6635142369996), value = 52.3701722304603, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.122714726395, -6.619680489095, 
    170.114259224974, -9.03165500965031, -6.619680489095, 26.3258879353856, 
    -15.0405276357901, -8.62325963169042, 170.114259224974, -15.0405276357901, 
    3639.01522311139, -226.942695952026, -9.03165500965031, -8.62325963169042, 
    -226.942695952026, 208.914088281276), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211465240011847, -0.0174393262792638
    ), logphi = c(0.487722346763777, -1.6635142369996)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_158 = structure(list(
    par = c(-0.251824678704218, -0.117009182550399, 0.507344731230392, 
    -1.75496902696384), value = 47.3767497163594, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.9545623168844, -9.03917376149366, 
    177.89636207155, -13.323461794279, -9.03917376149366, 21.1241989855893, 
    -23.4058240842216, -7.54935550162372, 177.89636207155, -23.4058240842216, 
    4451.35998790214, -296.818188360248, -13.323461794279, -7.54935550162372, 
    -296.818188360248, 238.304790004307), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251824678704218, -0.117009182550399
    ), logphi = c(0.507344731230392, -1.75496902696384)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_159 = structure(list(
    par = c(-0.546020300008199, -0.134873122092627, 0.487826228195849, 
    -1.62971010850898), value = 47.5706634971968, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(53.9555794087931, -2.70477458386154, 
    165.336492264245, -17.3935704914641, -2.70477458386154, 21.3432046489714, 
    -19.8265410702447, -8.67354648192986, 165.336492264245, -19.8265410702447, 
    3129.12988008307, -254.56934138024, -17.3935704914641, -8.67354648192986, 
    -254.56934138024, 192.024041277605), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.546020300008199, -0.134873122092627
    ), logphi = c(0.487826228195849, -1.62971010850898)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_160 = structure(list(
    par = c(-0.300286831694661, 0.0513325054427167, 0.498639826053582, 
    -1.5703423708881), value = 54.3248931808442, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.7492375395307, -3.67914805288194, 
    176.849230950182, -13.0830702218532, -3.67914805288194, 34.5655362270492, 
    -18.2320299710881, -10.2121030094438, 176.849230950182, -18.2320299710881, 
    3112.95462440952, -244.459097214822, -13.0830702218532, -10.2121030094438, 
    -244.459097214822, 199.349501638579), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300286831694661, 0.0513325054427167
    ), logphi = c(0.498639826053582, -1.5703423708881)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_161 = structure(list(
    par = c(-0.371876856564204, -0.0205143705340492, 0.475971850389946, 
    -1.57934807917911), value = 54.1304428777789, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0801806646986, -1.25918314530793, 
    146.111057782505, -9.57909991594619, -1.25918314530793, 25.3469306095155, 
    -11.6604771935869, -8.38990737861423, 146.111057782505, -11.6604771935869, 
    2584.53585384721, -171.874206934319, -9.57909991594619, -8.38990737861423, 
    -171.874206934319, 158.086746175456), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371876856564204, -0.0205143705340492
    ), logphi = c(0.475971850389946, -1.57934807917911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_162 = structure(list(
    par = c(-0.20718794573753, 0.216546686743822, 0.458968714946916, 
    -1.54140925832701), value = 48.7901677350183, counts = structure(c(299L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.5987455625682, 2.70476509811601, 
    130.790796417202, -1.53204334107926, 2.70476509811601, 38.3204471550158, 
    -2.83453837646164, -8.37103257556038, 130.790796417202, -2.83453837646164, 
    2278.42002852441, -109.842877500377, -1.53204334107926, -8.37103257556038, 
    -109.842877500377, 136.488679444824), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.20718794573753, 0.216546686743822
    ), logphi = c(0.458968714946916, -1.54140925832701)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_163 = structure(list(
    par = c(-0.299769670169352, 0.093678781591445, 0.515568216859163, 
    -1.58074063091725), value = 58.4319897366172, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.226323579168, -4.47896966804251, 
    167.213768808239, -14.7062106039542, -4.47896966804251, 32.5827848559612, 
    -20.6385625354244, -9.66219141140812, 167.213768808239, -20.6385625354244, 
    2974.41998279879, -266.327308747982, -14.7062106039542, -9.66219141140812, 
    -266.327308747982, 195.60237775984), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299769670169352, 0.093678781591445
    ), logphi = c(0.515568216859163, -1.58074063091725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_164 = structure(list(
    par = c(-0.187122236301172, -0.277054849192137, 0.483751067192416, 
    -1.71588037200376), value = 54.0568516378816, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.1835050689821, -8.55878659145048, 
    172.640613804731, -9.52654445462997, -8.55878659145048, 18.5876227867254, 
    -17.5644322286672, -6.62046970401065, 172.640613804731, -17.5644322286672, 
    4213.24518493549, -230.109603865714, -9.52654445462997, -6.62046970401065, 
    -230.109603865714, 227.477411879562), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.187122236301172, -0.277054849192137
    ), logphi = c(0.483751067192416, -1.71588037200376)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_165 = structure(list(
    par = c(-0.249319080363964, 0.089574172981899, 0.503527715941326, 
    -1.61461899364065), value = 39.916252674556, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.761266991591, -2.73725880894915, 
    152.319030643611, -10.4467477157755, -2.73725880894915, 34.6080408544225, 
    -15.5942338810888, -8.67389085712489, 152.319030643611, -15.5942338810888, 
    2915.31534178446, -224.123215290639, -10.4467477157755, -8.67389085712489, 
    -224.123215290639, 180.731507914089), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249319080363964, 0.089574172981899
    ), logphi = c(0.503527715941326, -1.61461899364065)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_166 = structure(list(
    par = c(-0.316864006775066, 0.13388567964386, 0.486672005695031, 
    -1.53593802366933), value = 64.2023097597337, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.5281535951112, 0.738803365152307, 
    177.88142394437, -10.8461559733541, 0.738803365152307, 42.6288698776034, 
    -13.2505533869676, -11.4388598753123, 177.88142394437, -13.2505533869676, 
    2917.67199512805, -214.9024764595, -10.8461559733541, -11.4388598753123, 
    -214.9024764595, 187.346623931717), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316864006775066, 0.13388567964386
    ), logphi = c(0.486672005695031, -1.53593802366933)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_167 = structure(list(
    par = c(-0.224948658603695, 0.299932545103062, 0.496075080254447, 
    -1.58820729798887), value = 35.0160836745676, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.4021109991545, 0.0229204459856192, 
    148.814851517187, -7.15456643618495, 0.0229204459856192, 
    39.6523748769084, -7.66274418673163, -10.1187249814672, 148.814851517187, 
    -7.66274418673163, 2696.72304965596, -203.989806777827, -7.15456643618495, 
    -10.1187249814672, -203.989806777827, 168.635822129559), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224948658603695, 0.299932545103062
    ), logphi = c(0.496075080254447, -1.58820729798887)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_168 = structure(list(
    par = c(-0.00946365989669825, -0.165054162917177, 0.509169382202204, 
    -1.63723619522915), value = 63.0148925298174, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.4626388707175, -10.4675527889952, 
    133.516202481587, -6.34002118182764, -10.4675527889952, 17.3323388601432, 
    -16.6589011296736, -5.36096076508841, 133.516202481587, -16.6589011296736, 
    2980.50632481761, -184.975173819879, -6.34002118182764, -5.36096076508841, 
    -184.975173819879, 177.615602645176), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00946365989669825, -0.165054162917177
    ), logphi = c(0.509169382202204, -1.63723619522915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_169 = structure(list(
    par = c(-0.349075849129262, 0.0340331888508979, 0.495262267341797, 
    -1.75383053350361), value = 39.6675254614024, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.2934172976339, -6.40523510497815, 
    201.25115239189, -14.9017652866235, -6.40523510497815, 29.7621253100289, 
    -19.5166821921333, -10.5954623155213, 201.25115239189, -19.5166821921333, 
    4764.12995422848, -329.311614088112, -14.9017652866235, -10.5954623155213, 
    -329.311614088112, 254.349871159576), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349075849129262, 0.0340331888508979
    ), logphi = c(0.495262267341797, -1.75383053350361)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_170 = structure(list(
    par = c(-0.396977910165074, 0.0308872748619875, 0.522558937208558, 
    -1.78974955157801), value = 33.0677583122933, counts = structure(c(269L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.8175775245357, -8.37621340998851, 
    191.773122084626, -18.6534240915748, -8.37621340998851, 25.9654301544288, 
    -31.1417081526599, -9.2374906470738, 191.773122084626, -31.1417081526599, 
    4839.85579343127, -377.902172044919, -18.6534240915748, -9.2374906470738, 
    -377.902172044919, 256.458847324836), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396977910165074, 0.0308872748619875
    ), logphi = c(0.522558937208558, -1.78974955157801)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_171 = structure(list(
    par = c(-0.399022704400054, 0.135366939480266, 0.473613500083512, 
    -1.65393197099324), value = 34.6810894785148, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.1052316715806, 0.438897878041189, 
    160.889809233566, -9.701270625051, 0.438897878041189, 31.6592800526649, 
    -6.68500348766088, -10.2822521661494, 160.889809233566, -6.68500348766088, 
    3141.25020979894, -212.217447365326, -9.701270625051, -10.2822521661494, 
    -212.217447365326, 180.749735422481), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399022704400054, 0.135366939480266
    ), logphi = c(0.473613500083512, -1.65393197099324)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_172 = structure(list(
    par = c(-0.19599634357868, 0.0611040650702693, 0.550258689071046, 
    -1.36957540783465), value = 86.0159535139599, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.7750326657551, -5.72551783406539, 
    128.870969788863, -15.8023925926898, -5.72551783406539, 30.94239573187, 
    -21.7209111426087, -6.25062559578282, 128.870969788863, -21.7209111426087, 
    1639.15397162384, -213.945497151258, -15.8023925926898, -6.25062559578282, 
    -213.945497151258, 134.591502064296), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19599634357868, 0.0611040650702693
    ), logphi = c(0.550258689071046, -1.36957540783465)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_173 = structure(list(
    par = c(0.0252802518418393, 0.119840244706062, 0.502710859783023, 
    -1.57954834786171), value = 57.8000118917304, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.8224812469591, -8.63943404461054, 
    131.471431735974, -3.52887395926871, -8.63943404461054, 29.4987848672434, 
    -13.2600958977491, -6.93144967200965, 131.471431735974, -13.2600958977491, 
    2629.56291514094, -166.580854102705, -3.52887395926871, -6.93144967200965, 
    -166.580854102705, 163.036288672203), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.0252802518418393, 0.119840244706062
    ), logphi = c(0.502710859783023, -1.57954834786171)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_174 = structure(list(
    par = c(-0.703631886593912, -0.0276664874500367, 0.540971729248143, 
    -1.69787495627348), value = 35.9108980743904, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(38.3084414927737, -4.86098694452153, 
    172.459675500392, -27.6795809810437, -4.86098694452153, 23.8202089875017, 
    -42.5871707641079, -7.64512768647307, 172.459675500392, -42.5871707641079, 
    3753.16927639346, -424.245197006456, -27.6795809810437, -7.64512768647307, 
    -424.245197006456, 243.773287827764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.703631886593912, -0.0276664874500367
    ), logphi = c(0.540971729248143, -1.69787495627348)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_175 = structure(list(
    par = c(-0.302682292457221, -0.0748427048069213, 0.518050760556282, 
    -1.64018752342879), value = 58.1913569055485, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.7247954606765, -7.32497810140842, 
    160.232994455001, -15.0838235111195, -7.32497810140842, 21.7499867716242, 
    -23.5462104054562, -7.51267451892801, 160.232994455001, -23.5462104054562, 
    3243.44644418773, -272.02875614929, -15.0838235111195, -7.51267451892801, 
    -272.02875614929, 202.03890096937), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302682292457221, -0.0748427048069213
    ), logphi = c(0.518050760556282, -1.64018752342879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_176 = structure(list(
    par = c(-0.249513229382634, 0.0100439619403589, 0.48317124096085, 
    -1.58683069093549), value = 52.0144541339995, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.0440264666515, -3.85051162687944, 
    148.495824682016, -7.9341698979718, -3.85051162687944, 26.3053137086189, 
    -12.5170729710078, -8.19631528869991, 148.495824682016, -12.5170729710078, 
    2752.5995020099, -177.232784201564, -7.9341698979718, -8.19631528869991, 
    -177.232784201564, 167.951343026829), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249513229382634, 0.0100439619403589
    ), logphi = c(0.48317124096085, -1.58683069093549)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_177 = structure(list(
    par = c(-0.127593353469948, -0.0220725827966977, 0.49906448899249, 
    -1.62021897357876), value = 55.3906508241214, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.3873083266678, -7.05961318381298, 
    141.271803029142, -7.26111141347019, -7.05961318381298, 23.7850565429909, 
    -15.0499716742303, -6.94562256864373, 141.271803029142, -15.0499716742303, 
    2887.70478223377, -189.21468751909, -7.26111141347019, -6.94562256864373, 
    -189.21468751909, 174.26820770261), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.127593353469948, -0.0220725827966977
    ), logphi = c(0.49906448899249, -1.62021897357876)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_178 = structure(list(
    par = c(-0.335603346080801, 0.0587282224344645, 0.487787992584063, 
    -1.68539982291705), value = 43.1531760151815, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.0711002109763, -3.52591689001258, 
    169.918817492842, -11.4011769740685, -3.52591689001258, 28.7542384533879, 
    -13.5089713104719, -9.61481696482025, 169.918817492842, -13.5089713104719, 
    3588.81207380968, -248.573275798414, -11.4011769740685, -9.61481696482025, 
    -248.573275798414, 204.246141340292), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335603346080801, 0.0587282224344645
    ), logphi = c(0.487787992584063, -1.68539982291705)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_179 = structure(list(
    par = c(-0.142884264950439, 0.235630066080851, 0.502437466885064, 
    -1.60021756798662), value = 44.7631756672448, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.9007709155097, -4.03751081989867, 
    142.810949553152, -6.5125179879999, -4.03751081989867, 33.7893137825063, 
    -10.9977699978003, -8.81249705120268, 142.810949553152, -10.9977699978003, 
    2724.96287959711, -199.619646545912, -6.5125179879999, -8.81249705120268, 
    -199.619646545912, 169.086304188326), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142884264950439, 0.235630066080851
    ), logphi = c(0.502437466885064, -1.60021756798662)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_180 = structure(list(
    par = c(-0.297624055483683, -0.172854286634544, 0.514070385474149, 
    -1.55262425201149), value = 75.1472436832179, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.4642535944135, -6.94870949047299, 
    172.447563443257, -16.766804492363, -6.94870949047299, 24.1255169051158, 
    -24.8461790164356, -7.6478345754083, 172.447563443257, -24.8461790164356, 
    3048.65130654619, -263.620374390428, -16.766804492363, -7.6478345754083, 
    -263.620374390428, 203.084723011671), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297624055483683, -0.172854286634544
    ), logphi = c(0.514070385474149, -1.55262425201149)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_181 = structure(list(
    par = c(-0.301466554373186, -0.144951042641787, 0.513283831269747, 
    -1.49024878405084), value = 69.9746793577421, counts = structure(c(331L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.9878653048481, -4.88788615626845, 
    155.547872623174, -15.2559264101626, -4.88788615626845, 26.2385996911974, 
    -22.0026134698514, -7.28650450376733, 155.547872623174, -22.0026134698514, 
    2451.85501065492, -221.788898501885, -15.2559264101626, -7.28650450376733, 
    -221.788898501885, 170.456515718342), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301466554373186, -0.144951042641787
    ), logphi = c(0.513283831269747, -1.49024878405084)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_182 = structure(list(
    par = c(-0.382995000214622, -0.528766066649079, 0.499227968624604, 
    -1.67846460702066), value = 61.6751466712778, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.5713943884368, -7.28882022293931, 
    167.905286771131, -16.8757637064587, -7.28882022293931, 11.0548023606327, 
    -23.7343976490223, -5.00870218633764, 167.905286771131, -23.7343976490223, 
    3849.541489096, -274.272907100581, -16.8757637064587, -5.00870218633764, 
    -274.272907100581, 224.931716592991), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382995000214622, -0.528766066649079
    ), logphi = c(0.499227968624604, -1.67846460702066)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_183 = structure(list(
    par = c(-0.170437035426122, 0.183057458900367, 0.518696408265963, 
    -1.47743198594644), value = 72.1697211695464, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.9694322023138, -4.43899632074363, 
    147.294310789192, -10.5810212680524, -4.43899632074363, 37.006333492684, 
    -17.4631769631617, -8.94413084395751, 147.294310789192, -17.4631769631617, 
    2259.5806078094, -210.52193045179, -10.5810212680524, -8.94413084395751, 
    -210.52193045179, 159.190944764021), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170437035426122, 0.183057458900367
    ), logphi = c(0.518696408265963, -1.47743198594644)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_184 = structure(list(
    par = c(-0.320089616991748, -0.0287338795477834, 0.52622715773839, 
    -1.62646966277397), value = 49.0706904506164, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.5777287041507, -6.12659240672997, 
    152.196913481006, -15.6351005458077, -6.12659240672997, 23.2917153404344, 
    -23.9101577381717, -7.37223052471592, 152.196913481006, -23.9101577381717, 
    2979.23780163778, -271.768360647684, -15.6351005458077, -7.37223052471592, 
    -271.768360647684, 191.453311016332), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320089616991748, -0.0287338795477834
    ), logphi = c(0.52622715773839, -1.62646966277397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_185 = structure(list(
    par = c(-0.492249901117117, -0.150886966137158, 0.490009361458925, 
    -1.76300208116633), value = 38.6456037838621, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.9254542116745, -6.35030445472751, 
    185.194672029709, -17.6796756949926, -6.35030445472751, 18.9119248670266, 
    -23.5695820691717, -8.47221396416131, 185.194672029709, -23.5695820691717, 
    4481.66289458563, -324.222664476181, -17.6796756949926, -8.47221396416131, 
    -324.222664476181, 238.70108086399), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.492249901117117, -0.150886966137158
    ), logphi = c(0.490009361458925, -1.76300208116633)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_186 = structure(list(
    par = c(-0.394213922234939, -0.337916618318456, 0.488811004504163, 
    -1.5804618319322), value = 69.5240681940716, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(58.9811797162554, -5.29554725048342, 
    159.412006130566, -14.6336407063075, -5.29554725048342, 16.1226541308679, 
    -19.7901543046441, -6.57803514947375, 159.412006130566, -19.7901543046441, 
    2947.44032380123, -212.525290082866, -14.6336407063075, -6.57803514947375, 
    -212.525290082866, 184.572068754107), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394213922234939, -0.337916618318456
    ), logphi = c(0.488811004504163, -1.5804618319322)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_187 = structure(list(
    par = c(-0.195562695737822, -0.216185502704705, 0.499541106898796, 
    -1.64709194937321), value = 63.4360882963241, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.4346079201528, -8.19868972534721, 
    145.722925928737, -9.87892186365968, -8.19868972534721, 16.3032336395474, 
    -17.779668347373, -6.01143528733417, 145.722925928737, -17.779668347373, 
    3130.48690237139, -206.1891839098, -9.87892186365968, -6.01143528733417, 
    -206.1891839098, 185.393917073284), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195562695737822, -0.216185502704705
    ), logphi = c(0.499541106898796, -1.64709194937321)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_188 = structure(list(
    par = c(-0.358753039574474, 0.0111788674067405, 0.524347884141106, 
    -1.59466685585281), value = 55.414557163993, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.7846753456774, -4.75851482129031, 
    171.09437857421, -18.3301369220956, -4.75851482129031, 29.9709602664677, 
    -25.8418150451689, -8.96369065728209, 171.09437857421, -25.8418150451689, 
    3120.33237418241, -299.702624706022, -18.3301369220956, -8.96369065728209, 
    -299.702624706022, 207.535603284015), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358753039574474, 0.0111788674067405
    ), logphi = c(0.524347884141106, -1.59466685585281)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_189 = structure(list(
    par = c(-0.179177552336717, -0.101021368595812, 0.481946587173204, 
    -1.65633958135227), value = 59.4774829874938, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.8080814071366, -7.58701659897554, 
    165.836253065876, -7.7748344429196, -7.58701659897554, 23.0443468680619, 
    -14.7269433536934, -7.78274224177977, 165.836253065876, -14.7269433536934, 
    3587.90439487677, -203.751131959251, -7.7748344429196, -7.78274224177977, 
    -203.751131959251, 204.830319541216), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.179177552336717, -0.101021368595812
    ), logphi = c(0.481946587173204, -1.65633958135227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_190 = structure(list(
    par = c(-0.346376345157372, -0.152310686077844, 0.482068169588268, 
    -1.71146901935528), value = 49.921903488702, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.3419656936287, -6.9114485565791, 
    181.336792930864, -13.0347686262411, -6.9114485565791, 20.0950645279363, 
    -17.9933092088191, -8.37213314408558, 181.336792930864, -17.9933092088191, 
    4118.42340511726, -262.336308557209, -13.0347686262411, -8.37213314408558, 
    -262.336308557209, 226.016912463933), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346376345157372, -0.152310686077844
    ), logphi = c(0.482068169588268, -1.71146901935528)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_191 = structure(list(
    par = c(-0.839200580385589, 0.30407622012039, 0.557099999127117, 
    -1.46496826692438), value = 32.9114746535919, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.6145495401192, 10.2243600821339, 
    157.674958597198, -32.6228803810835, 10.2243600821339, 54.4015776782203, 
    -26.7514889031872, -12.8576677340675, 157.674958597198, -26.7514889031872, 
    2043.03873509559, -351.728752942648, -32.6228803810835, -12.8576677340675, 
    -351.728752942648, 186.498339182606), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.839200580385589, 0.30407622012039
    ), logphi = c(0.557099999127117, -1.46496826692438)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_192 = structure(list(
    par = c(-0.24166078678357, -0.00579416749691453, 0.455923978885951, 
    -1.6842520109942), value = 38.8640534440573, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.7231358773249, -2.98438492762898, 
    142.706618884603, -4.30401408380021, -2.98438492762898, 24.2069936309264, 
    -5.17159067747741, -7.36025827130504, 142.706618884603, -5.17159067747741, 
    3158.07509900345, -150.414866386228, -4.30401408380021, -7.36025827130504, 
    -150.414866386228, 168.958011391496), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24166078678357, -0.00579416749691453
    ), logphi = c(0.455923978885951, -1.6842520109942)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_193 = structure(list(
    par = c(-0.403592361107079, -0.46179966016542, 0.497914491862758, 
    -1.67228937102794), value = 75.5300052332535, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(52.4397701191504, -7.90454308230437, 
    175.695346797511, -17.7941856343011, -7.90454308230437, 11.9905777928864, 
    -24.9000141927525, -5.75049141460227, 175.695346797511, -24.9000141927525, 
    3920.95601438314, -285.333540803734, -17.7941856343011, -5.75049141460227, 
    -285.333540803734, 230.803201787921), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403592361107079, -0.46179966016542
    ), logphi = c(0.497914491862758, -1.67228937102794)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_194 = structure(list(
    par = c(-0.402778755751556, 0.0306179364953785, 0.510145725389211, 
    -1.59500883409651), value = 49.2291163059565, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(55.8332964715191, -2.68864999064533, 
    150.5582893504, -15.0211481635409, -2.68864999064533, 27.3017899576899, 
    -19.1602487227271, -8.56712128971537, 150.5582893504, -19.1602487227271, 
    2703.2533318625, -243.996821394532, -15.0211481635409, -8.56712128971537, 
    -243.996821394532, 175.98506108385), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.402778755751556, 0.0306179364953785
    ), logphi = c(0.510145725389211, -1.59500883409651)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_195 = structure(list(
    par = c(-0.32526920676491, 0.106068107527748, 0.488640608892691, 
    -1.62701696446357), value = 47.0826512161584, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.2504382115166, -2.81347180397518, 
    169.808951106631, -11.0385486475906, -2.81347180397518, 31.3383958445712, 
    -12.8170542286199, -10.2823308001376, 169.808951106631, -12.8170542286199, 
    3244.59185092429, -234.376722657359, -11.0385486475906, -10.2823308001376, 
    -234.376722657359, 195.282494470206), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32526920676491, 0.106068107527748
    ), logphi = c(0.488640608892691, -1.62701696446357)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_196 = structure(list(
    par = c(-0.265596392114506, -0.0919749756968049, 0.484164307989886, 
    -1.61883885760236), value = 50.0248081092622, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.5592730938677, -4.82137594381982, 
    142.808849604492, -8.6864711077439, -4.82137594381982, 21.1272934151907, 
    -13.6526936707071, -7.13188401491038, 142.808849604492, -13.6526936707071, 
    2813.50333619912, -179.568774311356, -8.6864711077439, -7.13188401491038, 
    -179.568774311356, 167.791470595091), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265596392114506, -0.0919749756968049
    ), logphi = c(0.484164307989886, -1.61883885760236)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_197 = structure(list(
    par = c(-0.221865490077388, 0.138319268626917, 0.496617624831341, 
    -1.6535282620413), value = 40.9680888404023, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.7910674181371, -4.00386881871384, 
    158.399797916431, -8.79661829777945, -4.00386881871384, 32.2112470545477, 
    -12.6815065808472, -9.19616598693551, 158.399797916431, -12.6815065808472, 
    3248.21372327655, -227.348106278669, -8.79661829777945, -9.19616598693551, 
    -227.348106278669, 191.45444126778), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221865490077388, 0.138319268626917
    ), logphi = c(0.496617624831341, -1.6535282620413)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_198 = structure(list(
    par = c(-0.174006604514332, -0.070102994296021, 0.467994084555002, 
    -1.72859633298231), value = 46.5137553430085, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.5542166710229, -6.86040063690996, 
    188.422340507088, -6.46674211779441, -6.86040063690996, 28.5595160480767, 
    -11.0803130048964, -8.69020469984605, 188.422340507088, -11.0803130048964, 
    4610.90981220558, -225.659776866394, -6.46674211779441, -8.69020469984605, 
    -225.659776866394, 239.78599961616), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174006604514332, -0.070102994296021
    ), logphi = c(0.467994084555002, -1.72859633298231)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_199 = structure(list(
    par = c(-0.153396487916482, 0.39346419130645, 0.491032465665691, 
    -1.70377430555635), value = 25.6461230024248, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.8575864293413, 0.820871271400847, 
    175.367801467985, -4.68330276603979, 0.820871271400847, 51.7725144337788, 
    -0.317707984365256, -11.4084834548223, 175.367801467985, 
    -0.317707984365256, 3933.19414115112, -253.39275027747, -4.68330276603979, 
    -11.4084834548223, -253.39275027747, 216.881008972436), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153396487916482, 0.39346419130645
    ), logphi = c(0.491032465665691, -1.70377430555635)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_150_200 = structure(list(
    par = c(-0.314433721164562, 0.263378366824788, 0.498374085913072, 
    -1.72799204282749), value = 31.2646182103964, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.1271524109521, -0.985573917589022, 
    201.118509876252, -12.4510268930678, -0.985573917589022, 
    45.784667936033, -10.1575745894422, -12.9701233912982, 201.118509876252, 
    -10.1575745894422, 4443.24407314944, -324.587830650813, -12.4510268930678, 
    -12.9701233912982, -324.587830650813, 245.138919991561), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314433721164562, 0.263378366824788
    ), logphi = c(0.498374085913072, -1.72799204282749)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_1 = structure(list(
    par = c(-0.404005249897381, -0.0128559178922598, 0.519541083281064, 
    -1.57125844313851), value = 67.808648884422, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.2164453312362, -4.79528928920558, 
    212.702862135927, -23.6993209732361, -4.79528928920558, 37.3077440869451, 
    -31.344496029817, -11.3174651552583, 212.702862135927, -31.344496029817, 
    3702.02443911083, -360.983263743009, -23.6993209732361, -11.3174651552583, 
    -360.983263743009, 250.518318910764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404005249897381, -0.0128559178922598
    ), logphi = c(0.519541083281064, -1.57125844313851)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_2 = structure(list(
    par = c(-0.145262774533582, 0.112640021424461, 0.498093158922053, 
    -1.50009737116415), value = 68.6479123401067, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.0570952520875, -5.27280500151051, 
    161.705643641596, -7.84793818375817, -5.27280500151051, 37.8265209697304, 
    -16.1270718450623, -9.43163772326727, 161.705643641596, -16.1270718450623, 
    2644.18595005012, -192.63377537726, -7.84793818375817, -9.43163772326727, 
    -192.63377537726, 174.58017444838), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.145262774533582, 0.112640021424461
    ), logphi = c(0.498093158922053, -1.50009737116415)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_3 = structure(list(
    par = c(-0.218035631866674, 0.0871874658022136, 0.538837593879531, 
    -1.54772116591747), value = 69.9270221853144, counts = structure(c(361L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.7688725663286, -7.37576521103733, 
    180.446368702292, -18.1034878696806, -7.37576521103733, 37.1065888167266, 
    -28.4457176000785, -9.41942521670569, 180.446368702292, -28.4457176000785, 
    3099.77041457898, -319.493435448237, -18.1034878696806, -9.41942521670569, 
    -319.493435448237, 217.293077476199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218035631866674, 0.0871874658022136
    ), logphi = c(0.538837593879531, -1.54772116591747)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_4 = structure(list(
    par = c(-0.118432959276899, -0.146533270784936, 0.487062743422665, 
    -1.63533637867784), value = 85.747635061341, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.755155628282, -11.5231929207482, 
    193.365098112963, -8.51912493615714, -11.5231929207482, 24.9702254535578, 
    -19.2045138156516, -8.55717742354045, 193.365098112963, -19.2045138156516, 
    4147.43508472526, -233.353712147277, -8.51912493615714, -8.55717742354045, 
    -233.353712147277, 242.013010847586), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.118432959276899, -0.146533270784936
    ), logphi = c(0.487062743422665, -1.63533637867784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_5 = structure(list(
    par = c(-0.414655631683831, -0.0118457773437504, 0.490758966731065, 
    -1.69423451969937), value = 41.4711931356712, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.6897502982994, -4.63755462831728, 
    185.48290048237, -15.4254297255463, -4.63755462831728, 26.0418752073832, 
    -18.6451900958673, -10.0611313929022, 185.48290048237, -18.6451900958673, 
    3941.79478034751, -291.009125634289, -15.4254297255463, -10.0611313929022, 
    -291.009125634289, 225.347361919148), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.414655631683831, -0.0118457773437504
    ), logphi = c(0.490758966731065, -1.69423451969937)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_6 = structure(list(
    par = c(-0.355770315021687, -0.0192694265587387, 0.509571600128238, 
    -1.49725527840803), value = 72.649234380469, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.4180771471385, -3.39230423307413, 
    158.619900481938, -15.4923563489007, -3.39230423307413, 28.7048911928878, 
    -20.584600033402, -8.73612361118603, 158.619900481938, -20.584600033402, 
    2450.25268159793, -226.427456512468, -15.4923563489007, -8.73612361118603, 
    -226.427456512468, 170.060526198057), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355770315021687, -0.0192694265587387
    ), logphi = c(0.509571600128238, -1.49725527840803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_7 = structure(list(
    par = c(-0.445695070237689, -0.447738441668147, 0.503878656544668, 
    -1.63667855630889), value = 77.8782909532362, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.0495345167171, -8.33249411513748, 
    206.659119282193, -23.3476180984127, -8.33249411513748, 15.5649645314782, 
    -31.3076355382691, -6.88514673186091, 206.659119282193, -31.3076355382691, 
    4309.63780743809, -346.310711865527, -23.3476180984127, -6.88514673186091, 
    -346.310711865527, 266.460717334382), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.445695070237689, -0.447738441668147
    ), logphi = c(0.503878656544668, -1.63667855630889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_8 = structure(list(
    par = c(-0.400671268374281, -0.100999921930768, 0.530806702599497, 
    -1.59024863485871), value = 75.1082313046897, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.219186463471, -8.28613595160732, 
    225.323146430867, -27.7143636822075, -8.28613595160732, 31.6553377359696, 
    -39.187073657132, -10.1766376605639, 225.323146430867, -39.187073657132, 
    4145.79902629342, -419.902627644575, -27.7143636822075, -10.1766376605639, 
    -419.902627644575, 281.386907744263), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400671268374281, -0.100999921930768
    ), logphi = c(0.530806702599497, -1.59024863485871)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_9 = structure(list(
    par = c(-0.176113316586074, 0.0774546313975564, 0.506539585275193, 
    -1.55435012169059), value = 71.5006786047901, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.7507766183783, -6.86016444007009, 
    184.085657831901, -11.5269673433005, -6.86016444007009, 37.4551698172354, 
    -20.4199371580671, -10.2381830338061, 184.085657831901, -20.4199371580671, 
    3263.68459276694, -254.076900620959, -11.5269673433005, -10.2381830338061, 
    -254.076900620959, 211.920138099231), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.176113316586074, 0.0774546313975564
    ), logphi = c(0.506539585275193, -1.55435012169059)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_10 = structure(list(
    par = c(-0.112762427637876, 0.240428274296866, 0.466684610427769, 
    -1.71305749246715), value = 49.1470330586545, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.8899178152799, -3.44398841178872, 
    182.555513310589, -1.72481693105908, -3.44398841178872, 42.1143934392632, 
    -0.060204797591723, -10.1905578855366, 182.555513310589, 
    -0.060204797591723, 4380.95640385683, -214.16323279233, -1.72481693105908, 
    -10.1905578855366, -214.16323279233, 229.679311814834), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.112762427637876, 0.240428274296866
    ), logphi = c(0.466684610427769, -1.71305749246715)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_11 = structure(list(
    par = c(-0.268790185208406, -0.0858404142219326, 0.48612195203046, 
    -1.68299087319641), value = 67.8567683701037, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.7534147138733, -9.44114573542265, 
    240.704636158995, -15.0032630052976, -9.44114573542265, 32.1284301989522, 
    -22.8725602724467, -11.6343093274907, 240.704636158995, -22.8725602724467, 
    5272.19520756717, -333.036742848236, -15.0032630052976, -11.6343093274907, 
    -333.036742848236, 297.735142734012), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.268790185208406, -0.0858404142219326
    ), logphi = c(0.48612195203046, -1.68299087319641)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_12 = structure(list(
    par = c(-0.268090603335717, -0.038304485974378, 0.503828874258791, 
    -1.42632465150948), value = 81.5504905434271, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.370410307675, -3.13016061070925, 
    153.93400518704, -12.3675881518182, -3.13016061070925, 33.0698398229856, 
    -19.1602319716822, -8.31198009620948, 153.93400518704, -19.1602319716822, 
    2156.79473098262, -183.450539317676, -12.3675881518182, -8.31198009620948, 
    -183.450539317676, 151.715113592132), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.268090603335717, -0.038304485974378
    ), logphi = c(0.503828874258791, -1.42632465150948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_13 = structure(list(
    par = c(-0.325858247293864, 0.123986749324445, 0.47005913756304, 
    -1.64905208023078), value = 51.9726507984055, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.2825664796441, -1.05918108594949, 
    222.00261839167, -10.5256506941487, -1.05918108594949, 43.3572675326843, 
    -8.50276630082192, -13.5612537270902, 222.00261839167, -8.50276630082192, 
    4412.82470648119, -270.935338556377, -10.5256506941487, -13.5612537270902, 
    -270.935338556377, 251.555466325826), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325858247293864, 0.123986749324445
    ), logphi = c(0.47005913756304, -1.64905208023078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_14 = structure(list(
    par = c(-0.253354496054931, 0.263115733152391, 0.473510844471688, 
    -1.72642345250473), value = 33.2547742886286, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.166526036233, 0.17233138471795, 
    246.224997047406, -8.20851607485906, 0.17233138471795, 57.181189285771, 
    0.00423591828280223, -15.1847177694009, 246.224997047406, 
    0.00423591828280223, 5624.77450054288, -332.553603760388, 
    -8.20851607485906, -15.1847177694009, -332.553603760388, 
    296.934961275142), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253354496054931, 0.263115733152391
    ), logphi = c(0.473510844471688, -1.72642345250473)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_15 = structure(list(
    par = c(-0.508340074399258, -0.212300300508478, 0.505844127576508, 
    -1.57426116241824), value = 62.156617535341, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.2814534086681, -4.81507689542582, 
    181.92689389096, -21.8780529621654, -4.81507689542582, 21.7763230487833, 
    -27.2298203327637, -8.36719047114798, 181.92689389096, -27.2298203327637, 
    3221.33898445642, -295.911908917645, -21.8780529621654, -8.36719047114798, 
    -295.911908917645, 213.532597911126), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508340074399258, -0.212300300508478
    ), logphi = c(0.505844127576508, -1.57426116241824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_16 = structure(list(
    par = c(-0.22006722604131, -0.346882460430135, 0.495484315994823, 
    -1.64671896376858), value = 71.0973284903618, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.3220743781778, -9.11581265228278, 
    177.23279059112, -12.7022013316491, -9.11581265228278, 17.0241945660621, 
    -21.6831037249676, -6.5156146007439, 177.23279059112, -21.6831037249676, 
    3851.46606611997, -245.330425093115, -12.7022013316491, -6.5156146007439, 
    -245.330425093115, 227.067801585434), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.22006722604131, -0.346882460430135
    ), logphi = c(0.495484315994823, -1.64671896376858)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_17 = structure(list(
    par = c(-0.510711665530707, 0.16675826145229, 0.535695424336518, 
    -1.4667277564733), value = 45.2806632308974, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.375400386865, 2.73151874274902, 
    145.305118877559, -20.6783484557604, 2.73151874274902, 39.972739731553, 
    -21.449439008947, -9.59172592907009, 145.305118877559, -21.449439008947, 
    2007.85416375204, -259.265508714357, -20.6783484557604, -9.59172592907009, 
    -259.265508714357, 157.795600447486), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.510711665530707, 0.16675826145229
    ), logphi = c(0.535695424336518, -1.4667277564733)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_18 = structure(list(
    par = c(-0.241701177157535, -0.248367817379376, 0.477390478708745, 
    -1.5589957617668), value = 83.3094971143984, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.1018890232162, -7.24281801467441, 
    177.77150721443, -9.9784217670873, -7.24281801467441, 21.6676209383593, 
    -17.9358627221404, -7.93319365577361, 177.77150721443, -17.9358627221404, 
    3250.08700466611, -185.202508493632, -9.9784217670873, -7.93319365577361, 
    -185.202508493632, 199.516497566776), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.241701177157535, -0.248367817379376
    ), logphi = c(0.477390478708745, -1.5589957617668)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_19 = structure(list(
    par = c(-0.381118615823012, 0.194291101399536, 0.513307070773409, 
    -1.75039278780389), value = 25.4755383086173, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.9786600665483, -5.09892597477801, 
    203.743158992964, -17.2931675672672, -5.09892597477801, 35.7683527099084, 
    -21.2710296523255, -12.3574118795489, 203.743158992964, -21.2710296523255, 
    4634.12907896554, -370.157898681001, -17.2931675672672, -12.3574118795489, 
    -370.157898681001, 256.058278303328), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381118615823012, 0.194291101399536
    ), logphi = c(0.513307070773409, -1.75039278780389)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_20 = structure(list(
    par = c(-0.191339710554393, -0.0302031381641264, 0.497825055569672, 
    -1.71903994944503), value = 57.6492483232798, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.1388190012631, -9.93912104796379, 
    215.649905516813, -12.514894009108, -9.93912104796379, 32.3708039591253, 
    -22.1156228548125, -10.2239529216064, 215.649905516813, -22.1156228548125, 
    5088.79592606704, -321.377903863329, -12.514894009108, -10.2239529216064, 
    -321.377903863329, 279.379220598841), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191339710554393, -0.0302031381641264
    ), logphi = c(0.497825055569672, -1.71903994944503)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_21 = structure(list(
    par = c(-0.35712192676576, 0.104729619464082, 0.49175621102007, 
    -1.58385621747339), value = 54.173385058209, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.3852924369817, -0.420554878033386, 
    192.890828857983, -14.0854060450835, -0.420554878033386, 
    41.9644645006656, -16.1959489535235, -12.0428024636965, 192.890828857983, 
    -16.1959489535235, 3396.06244518897, -263.471443765262, -14.0854060450835, 
    -12.0428024636965, -263.471443765262, 213.893851038094), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35712192676576, 0.104729619464082
    ), logphi = c(0.49175621102007, -1.58385621747339)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_22 = structure(list(
    par = c(-0.330720527587842, 0.103121061266038, 0.499278372798678, 
    -1.57493095527769), value = 54.6263346921488, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.1997660734012, -2.19329269413038, 
    184.683700069854, -14.1583884731844, -2.19329269413038, 38.5706574785871, 
    -17.8306889537794, -11.2998672472386, 184.683700069854, -17.8306889537794, 
    3225.27531936778, -262.414295754354, -14.1583884731844, -11.2998672472386, 
    -262.414295754354, 207.060636519429), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330720527587842, 0.103121061266038
    ), logphi = c(0.499278372798678, -1.57493095527769)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_23 = structure(list(
    par = c(-0.0584957647636344, 0.146773873744863, 0.505160565223558, 
    -1.61119570556899), value = 69.8530533505781, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.8101941655652, -8.60944546943188, 
    175.591068501291, -7.01112691459116, -8.60944546943188, 38.7119083100629, 
    -16.887133998722, -9.64730984875928, 175.591068501291, -16.887133998722, 
    3551.41888521615, -242.182424347703, -7.01112691459116, -9.64730984875928, 
    -242.182424347703, 217.128787284082), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0584957647636344, 0.146773873744863
    ), logphi = c(0.505160565223558, -1.61119570556899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_24 = structure(list(
    par = c(-0.421551202533383, 0.0170210006528591, 0.511213169547586, 
    -1.53665405609308), value = 63.635903887485, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.9672451147492, -1.69588747667149, 
    201.973561949842, -21.4755207146311, -1.69588747667149, 40.4449483362157, 
    -26.3705407128612, -11.6407043808664, 201.973561949842, -26.3705407128612, 
    3273.50755474498, -313.893402307031, -21.4755207146311, -11.6407043808664, 
    -313.893402307031, 224.348059546742), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421551202533383, 0.0170210006528591
    ), logphi = c(0.511213169547586, -1.53665405609308)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_25 = structure(list(
    par = c(-0.208460091471159, 0.115071797758873, 0.464739372623693, 
    -1.64953035610296), value = 39.6761124465427, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.3738741605997, -1.82560590822334, 
    166.43079702483, -4.40590790695694, -1.82560590822334, 36.2197279706322, 
    -5.47587427135454, -9.45548197250901, 166.43079702483, -5.47587427135454, 
    3474.78988581251, -180.109989333488, -4.40590790695694, -9.45548197250901, 
    -180.109989333488, 194.293123096045), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208460091471159, 0.115071797758873
    ), logphi = c(0.464739372623693, -1.64953035610296)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_26 = structure(list(
    par = c(-0.477263742548003, 0.296896878779159, 0.536200730112296, 
    -1.62177959261457), value = 30.5251615548439, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.3033375733212, 0.817926245844092, 
    196.619636241735, -23.700362222101, 0.817926245844092, 48.6661145515654, 
    -25.5991510762499, -14.043843364675, 196.619636241735, -25.5991510762499, 
    3487.40566341021, -390.651323758817, -23.700362222101, -14.043843364675, 
    -390.651323758817, 237.931400683067), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.477263742548003, 0.296896878779159
    ), logphi = c(0.536200730112296, -1.62177959261457)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_27 = structure(list(
    par = c(-0.393246152064578, 0.144207301960306, 0.488579632125151, 
    -1.5643386243101), value = 50.9948990138376, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.1987466849426, 0.764026308885946, 
    188.306304375274, -13.8265367990442, 0.764026308885946, 39.7256284401237, 
    -13.6878496821424, -12.5192500819438, 188.306304375274, -13.6878496821424, 
    3161.19334952347, -249.786769082938, -13.8265367990442, -12.5192500819438, 
    -249.786769082938, 201.643190438361), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.393246152064578, 0.144207301960306
    ), logphi = c(0.488579632125151, -1.5643386243101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_28 = structure(list(
    par = c(-0.336827256425218, 0.344887892470585, 0.501846242880116, 
    -1.65955583628771), value = 33.503829910487, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.5675989286623, 2.99341473564141, 
    201.279587757952, -13.1539790029223, 2.99341473564141, 53.9881676377973, 
    -7.92207348965235, -14.539993467011, 201.279587757952, -7.92207348965235, 
    3913.84580788312, -320.761177984963, -13.1539790029223, -14.539993467011, 
    -320.761177984963, 235.147704852778), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336827256425218, 0.344887892470585
    ), logphi = c(0.501846242880116, -1.65955583628771)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_29 = structure(list(
    par = c(-0.302659255438607, -0.0519332027115711, 0.516401409249825, 
    -1.500633192014), value = 91.4204464346788, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.1444811565425, -7.15730951128535, 
    196.946789387198, -19.2940445771228, -7.15730951128535, 32.9755807051413, 
    -27.5841137415966, -10.0440201755703, 196.946789387198, -27.5841137415966, 
    3118.26962042971, -292.193342239955, -19.2940445771228, -10.0440201755703, 
    -292.193342239955, 217.587291313492), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.302659255438607, -0.0519332027115711
    ), logphi = c(0.516401409249825, -1.500633192014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_30 = structure(list(
    par = c(-0.431333273793063, 0.0400811715584978, 0.515028339198589, 
    -1.52709016941178), value = 56.018796305478, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.5176738470547, -2.69030094202094, 
    179.26782158284, -18.7808774008147, -2.69030094202094, 35.6333815201282, 
    -25.4138048152441, -9.3375192937728, 179.26782158284, -25.4138048152441, 
    2862.02793969537, -285.901007043066, -18.7808774008147, -9.3375192937728, 
    -285.901007043066, 199.838549786335), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431333273793063, 0.0400811715584978
    ), logphi = c(0.515028339198589, -1.52709016941178)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_31 = structure(list(
    par = c(-0.296571539528385, 0.312354726184675, 0.501089401647175, 
    -1.52329848190507), value = 42.7494497164024, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.5309884476534, 5.52053575297862, 
    158.987263450427, -10.1498527538268, 5.52053575297862, 53.3338724260091, 
    -9.73280363680828, -11.5832431415441, 158.987263450427, -9.73280363680828, 
    2514.59645810215, -218.196079335264, -10.1498527538268, -11.5832431415441, 
    -218.196079335264, 168.417337157223), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296571539528385, 0.312354726184675
    ), logphi = c(0.501089401647175, -1.52329848190507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_32 = structure(list(
    par = c(-0.178773446956622, -0.230330818903404, 0.50898635156602, 
    -1.60103063472813), value = 65.561405982278, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.637331724768, -8.96252029747302, 
    167.023835981439, -12.5168282245625, -8.96252029747302, 20.8146462412628, 
    -22.4162231390324, -6.72659828993005, 167.023835981439, -22.4162231390324, 
    3341.00413767757, -242.548486546923, -12.5168282245625, -6.72659828993005, 
    -242.548486546923, 208.863675947413), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178773446956622, -0.230330818903404
    ), logphi = c(0.50898635156602, -1.60103063472813)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_33 = structure(list(
    par = c(-0.198072282394121, -0.209161123996053, 0.476807418823453, 
    -1.51528376311405), value = 81.161500703754, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.3877883797099, -5.77544312108103, 
    157.88393968208, -7.41300577900006, -5.77544312108103, 23.9895816633862, 
    -15.8135490764266, -7.33339489933371, 157.88393968208, -15.8135490764266, 
    2704.37890223718, -147.487572263572, -7.41300577900006, -7.33339489933371, 
    -147.487572263572, 169.809330611059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198072282394121, -0.209161123996053
    ), logphi = c(0.476807418823453, -1.51528376311405)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_34 = structure(list(
    par = c(-0.122982678683928, 0.0637408224660866, 0.479714094525867, 
    -1.5792231868037), value = 74.0842771268725, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.9936450627954, -6.43295917512887, 
    178.725652084211, -5.2051271293152, -6.43295917512887, 36.4143464537392, 
    -13.2451252987664, -9.77840820048925, 178.725652084211, -13.2451252987664, 
    3419.9352678641, -191.150287738751, -5.2051271293152, -9.77840820048925, 
    -191.150287738751, 206.438421923139), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122982678683928, 0.0637408224660866
    ), logphi = c(0.479714094525867, -1.5792231868037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_35 = structure(list(
    par = c(-0.258434715599232, 0.205483841255017, 0.470823513231867, 
    -1.62438437146498), value = 55.6857668228032, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.4949723350751, 1.22671115221351, 
    196.625110666204, -6.67019186906259, 1.22671115221351, 47.559026180366, 
    -5.0478756623562, -12.438559156891, 196.625110666204, -5.0478756623562, 
    3821.08371150025, -227.339210444377, -6.67019186906259, -12.438559156891, 
    -227.339210444377, 221.501596209706), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258434715599232, 0.205483841255017
    ), logphi = c(0.470823513231867, -1.62438437146498)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_36 = structure(list(
    par = c(-0.407704903333105, -0.0933876538866761, 0.494020930877941, 
    -1.65749741108657), value = 57.9429693108066, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.0214672037494, -6.08399654566938, 
    199.983362954015, -17.7899027598016, -6.08399654566938, 25.7765348461447, 
    -23.3304831080972, -10.1189036456617, 199.983362954015, -23.3304831080972, 
    4059.50064022775, -308.065115069311, -17.7899027598016, -10.1189036456617, 
    -308.065115069311, 241.732682074058), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407704903333105, -0.0933876538866761
    ), logphi = c(0.494020930877941, -1.65749741108657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_37 = structure(list(
    par = c(-0.328187687171153, -0.335417520515623, 0.475281135077287, 
    -1.5961087686795), value = 73.9256718281366, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.3067488164445, -6.15142649706968, 
    173.988505473233, -12.169612555013, -6.15142649706968, 17.7228618483127, 
    -18.086558267072, -7.25713330851363, 173.988505473233, -18.086558267072, 
    3341.78391247875, -198.686737029163, -12.169612555013, -7.25713330851363, 
    -198.686737029163, 200.388050643596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328187687171153, -0.335417520515623
    ), logphi = c(0.475281135077287, -1.5961087686795)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_38 = structure(list(
    par = c(-0.318419281105894, 0.0255144457024437, 0.493109481865368, 
    -1.68309761978257), value = 52.3871923288624, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.0786648495705, -6.09844417631678, 
    205.578695629427, -14.5023553601575, -6.09844417631678, 32.2778356203202, 
    -19.3185792589645, -11.1425037108148, 205.578695629427, -19.3185792589645, 
    4366.9222218945, -308.108794854434, -14.5023553601575, -11.1425037108148, 
    -308.108794854434, 250.851032522093), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318419281105894, 0.0255144457024437
    ), logphi = c(0.493109481865368, -1.68309761978257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_39 = structure(list(
    par = c(-0.563060856572079, -0.0671923987882679, 0.510471249155419, 
    -1.761555827693), value = 36.9535891677236, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(49.3939777221897, -6.49221485815588, 
    203.901953643282, -23.6420591033237, -6.49221485815588, 24.922703463659, 
    -34.4440045303429, -9.70340068562336, 203.901953643282, -34.4440045303429, 
    4881.33817400538, -413.625599442469, -23.6420591033237, -9.70340068562336, 
    -413.625599442469, 271.285515424324), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.563060856572079, -0.0671923987882679
    ), logphi = c(0.510471249155419, -1.761555827693)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_40 = structure(list(
    par = c(-0.239095007060745, -0.12589580768989, 0.497156624641489, 
    -1.55776093190094), value = 78.1124889920339, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.1706862536803, -6.78093269712576, 
    175.076578301514, -12.3560264864153, -6.78093269712576, 26.9138551587389, 
    -20.6065877002004, -8.41279122454353, 175.076578301514, -20.6065877002004, 
    3145.59823579685, -226.32829119118, -12.3560264864153, -8.41279122454353, 
    -226.32829119118, 200.738086235219), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239095007060745, -0.12589580768989
    ), logphi = c(0.497156624641489, -1.55776093190094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_41 = structure(list(
    par = c(-0.509423335439114, -0.115421757041392, 0.493936592398117, 
    -1.62227221098785), value = 60.7938622979819, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.8380834839347, -4.7215346192786, 
    221.667464003872, -23.2581212173955, -4.7215346192786, 28.4777746628606, 
    -27.7382191669062, -11.5797716802035, 221.667464003872, -27.7382191669062, 
    4166.98752546552, -346.85644940069, -23.2581212173955, -11.5797716802035, 
    -346.85644940069, 259.438944279822), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.509423335439114, -0.115421757041392
    ), logphi = c(0.493936592398117, -1.62227221098785)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_42 = structure(list(
    par = c(-0.375323989125062, 0.263553143169528, 0.540753646835353, 
    -1.46921277223367), value = 46.1816659256415, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.4996524067146, 1.39782160779589, 
    154.743202239516, -19.0724745996462, 1.39782160779589, 44.4686648020109, 
    -21.0551044830254, -10.5324227899217, 154.743202239516, -21.0551044830254, 
    2175.17071643236, -274.74533103522, -19.0724745996462, -10.5324227899217, 
    -274.74533103522, 169.516070778641), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375323989125062, 0.263553143169528
    ), logphi = c(0.540753646835353, -1.46921277223367)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_43 = structure(list(
    par = c(-0.409032152773994, -0.15717065879962, 0.478472686855387, 
    -1.67871199540869), value = 56.7760023022495, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.3790054491217, -5.30192169634347, 
    202.700159453784, -15.864960691836, -5.30192169634347, 24.9313091043035, 
    -19.9104651521509, -9.81325536031363, 202.700159453784, -19.9104651521509, 
    4287.63399802357, -285.138323434353, -15.864960691836, -9.81325536031363, 
    -285.138323434353, 243.233332641424), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.409032152773994, -0.15717065879962
    ), logphi = c(0.478472686855387, -1.67871199540869)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_44 = structure(list(
    par = c(-0.316106841354497, 0.194023655018033, 0.50490660197647, 
    -1.63909467954919), value = 44.5026940017221, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.2103525993041, -1.94772808370658, 
    191.816982999526, -14.1695365822869, -1.94772808370658, 42.219403932009, 
    -16.4943176308441, -12.2015040346923, 191.816982999526, -16.4943176308441, 
    3694.48927521532, -301.064107185667, -14.1695365822869, -12.2015040346923, 
    -301.064107185667, 226.716169040131), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316106841354497, 0.194023655018033
    ), logphi = c(0.50490660197647, -1.63909467954919)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_45 = structure(list(
    par = c(-0.265702298692486, -0.27235801558321, 0.468677797573179, 
    -1.54369869569253), value = 75.5745087882474, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.3615140654301, -5.64080613685292, 
    171.067861781893, -8.83996944978094, -5.64080613685292, 22.1951187242553, 
    -16.0415563286165, -7.70337884858918, 171.067861781893, -16.0415563286165, 
    3030.72305570851, -157.091762545747, -8.83996944978094, -7.70337884858918, 
    -157.091762545747, 185.220523228224), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265702298692486, -0.27235801558321
    ), logphi = c(0.468677797573179, -1.54369869569253)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_46 = structure(list(
    par = c(-0.346187988986239, 0.0588840696115703, 0.522988361270183, 
    -1.70850283064499), value = 50.1739952876436, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.9861356976992, -8.24654543407632, 
    232.687263970632, -22.2142147716653, -8.24654543407632, 37.8594288541478, 
    -34.2744648449411, -12.1155576682241, 232.687263970632, -34.2744648449411, 
    5120.16483636302, -430.77002927383, -22.2142147716653, -12.1155576682241, 
    -430.77002927383, 300.393262158138), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346187988986239, 0.0588840696115703
    ), logphi = c(0.522988361270183, -1.70850283064499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_47 = structure(list(
    par = c(-0.448715677815636, 0.134420277556236, 0.512922099354886, 
    -1.64806304854128), value = 45.892354224349, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.6380327330482, -3.67849858662339, 
    202.549904061655, -20.6426952811256, -3.67849858662339, 35.2640702008244, 
    -24.0418931483077, -12.6506465782938, 202.549904061655, -24.0418931483077, 
    3873.98831890273, -356.422860894767, -20.6426952811256, -12.6506465782938, 
    -356.422860894767, 243.320539336622), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.448715677815636, 0.134420277556236
    ), logphi = c(0.512922099354886, -1.64806304854128)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_48 = structure(list(
    par = c(-0.340402594795383, -0.424246824744309, 0.492558159488252, 
    -1.53610709350978), value = 85.9088563190443, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.0016927385482, -7.09767626005942, 
    177.304094670205, -15.9875037724078, -7.09767626005942, 16.3901677865397, 
    -22.4019726466906, -6.63135330825071, 177.304094670205, -22.4019726466906, 
    3111.05538771983, -222.81730941387, -15.9875037724078, -6.63135330825071, 
    -222.81730941387, 200.890174028245), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340402594795383, -0.424246824744309
    ), logphi = c(0.492558159488252, -1.53610709350978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_49 = structure(list(
    par = c(-0.112137403477563, 0.303302671179259, 0.504772548514464, 
    -1.5789579941195), value = 48.6094626032402, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.3804396593367, -1.6882365549975, 
    170.299830683618, -6.84731859834642, -1.6882365549975, 53.2222487485967, 
    -12.0224085993215, -10.9647997863505, 170.299830683618, -12.0224085993215, 
    3153.70489688327, -237.516439105079, -6.84731859834642, -10.9647997863505, 
    -237.516439105079, 199.551753606642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.112137403477563, 0.303302671179259
    ), logphi = c(0.504772548514464, -1.5789579941195)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_50 = structure(list(
    par = c(-0.0612355775599152, 0.298681557337687, 0.496577401811527, 
    -1.66273411433134), value = 43.0109401556917, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.2217638249472, -4.90620685944521, 
    175.38360664382, -4.29010497260407, -4.90620685944521, 47.0529401894737, 
    -8.49529354240985, -10.5302037889388, 175.38360664382, -8.49529354240985, 
    3833.23787984402, -241.635193008349, -4.29010497260407, -10.5302037889388, 
    -241.635193008349, 220.66095602824), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0612355775599152, 0.298681557337687
    ), logphi = c(0.496577401811527, -1.66273411433134)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_51 = structure(list(
    par = c(-0.285282103417052, 0.0953835175720611, 0.486992944060534, 
    -1.70133522578982), value = 54.892461940874, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.3801224686681, -4.6245786897714, 
    217.331929018627, -12.5194668187945, -4.6245786897714, 39.3602749308997, 
    -14.9425140723025, -12.2870391292551, 217.331929018627, -14.9425140723025, 
    4760.45540055203, -313.604368290754, -12.5194668187945, -12.2870391292551, 
    -313.604368290754, 264.825569475491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285282103417052, 0.0953835175720611
    ), logphi = c(0.486992944060534, -1.70133522578982)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_52 = structure(list(
    par = c(-0.326500588518662, 0.0946361836393864, 0.498290576226745, 
    -1.61485769449956), value = 51.8838194796847, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.6959797496818, -3.33324693713166, 
    179.818551220734, -13.4280264809661, -3.33324693713166, 34.0752976057956, 
    -16.9945050672027, -10.7273764555771, 179.818551220734, -16.9945050672027, 
    3366.24075687197, -263.342373518327, -13.4280264809661, -10.7273764555771, 
    -263.342373518327, 208.464385545781), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326500588518662, 0.0946361836393864
    ), logphi = c(0.498290576226745, -1.61485769449956)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_53 = structure(list(
    par = c(-0.374851222059724, -0.105705482633351, 0.519598720363218, 
    -1.56207113031485), value = 80.5471593613613, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.9747202282406, -7.14405443602573, 
    194.5412661577, -21.5804607428538, -7.14405443602573, 27.2225736530629, 
    -29.806079812289, -9.26640808884827, 194.5412661577, -29.806079812289, 
    3406.95761677168, -323.988467687997, -21.5804607428538, -9.26640808884827, 
    -323.988467687997, 230.68602248344), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374851222059724, -0.105705482633351
    ), logphi = c(0.519598720363218, -1.56207113031485)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_54 = structure(list(
    par = c(-0.199513444045648, 0.121112651072116, 0.510226969861329, 
    -1.51713697199661), value = 69.5007988333553, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.3836197782459, -5.51257647174452, 
    161.687861442772, -11.1223925909343, -5.51257647174452, 34.4652643420318, 
    -18.2263099013369, -9.48820107637971, 161.687861442772, -18.2263099013369, 
    2653.98118242999, -224.742411182532, -11.1223925909343, -9.48820107637971, 
    -224.742411182532, 179.007351274407), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199513444045648, 0.121112651072116
    ), logphi = c(0.510226969861329, -1.51713697199661)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_55 = structure(list(
    par = c(-0.207943525970579, 0.0167361271538539, 0.490836247365381, 
    -1.64533971364808), value = 67.154559997651, counts = structure(c(85L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.4632053740877, -7.47199669604015, 
    204.241489509371, -11.0255775247481, -7.47199669604015, 34.8067551314557, 
    -18.3730989569142, -10.7248036300689, 204.241489509371, -18.3730989569142, 
    4222.42189427635, -273.944796290948, -11.0255775247481, -10.7248036300689, 
    -273.944796290948, 247.762646825578), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207943525970579, 0.0167361271538539
    ), logphi = c(0.490836247365381, -1.64533971364808)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_56 = structure(list(
    par = c(-0.308190083729477, -0.251694275187699, 0.491720796591966, 
    -1.62491283846344), value = 72.5669981891148, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.1763777420392, -7.24963919296329, 
    193.907926654191, -15.2938394091251, -7.24963919296329, 22.9788098380368, 
    -23.1832909243224, -8.26241981854992, 193.907926654191, -23.1832909243224, 
    3904.89668649252, -267.306424929004, -15.2938394091251, -8.26241981854992, 
    -267.306424929004, 235.440778283191), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308190083729477, -0.251694275187699
    ), logphi = c(0.491720796591966, -1.62491283846344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_57 = structure(list(
    par = c(-0.0437238698632095, -0.127345305788303, 0.500752086324618, 
    -1.65178675746045), value = 64.3136030325511, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.9195963309337, -10.8701796150967, 
    162.885077195085, -7.17140154549156, -10.8701796150967, 23.3326313612281, 
    -18.3850197430502, -6.92131143686936, 162.885077195085, -18.3850197430502, 
    3669.65180986867, -217.048758685223, -7.17140154549156, -6.92131143686936, 
    -217.048758685223, 213.998410536931), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0437238698632095, -0.127345305788303
    ), logphi = c(0.500752086324618, -1.65178675746045)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_58 = structure(list(
    par = c(-0.292554005140787, 0.0779445821520734, 0.497075971071881, 
    -1.5560684245874), value = 80.7977769679215, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.905760163059, -3.36329367911503, 
    229.509460584865, -16.1544916146283, -3.36329367911503, 47.6268778406563, 
    -22.405855968799, -13.6401326003011, 229.509460584865, -22.405855968799, 
    3940.05668503894, -307.731150712698, -16.1544916146283, -13.6401326003011, 
    -307.731150712698, 254.155024432379), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292554005140787, 0.0779445821520734
    ), logphi = c(0.497075971071881, -1.5560684245874)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_59 = structure(list(
    par = c(-0.216864783731314, 0.0692539474814716, 0.510802947737031, 
    -1.5734427626596), value = 64.6627210101072, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.8233166164362, -6.88541686244548, 
    185.319462833178, -13.4557147415393, -6.88541686244548, 35.1323174427876, 
    -21.7822161445724, -10.2488815834079, 185.319462833178, -21.7822161445724, 
    3347.79182038503, -273.741927470539, -13.4557147415393, -10.2488815834079, 
    -273.741927470539, 216.944061634194), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216864783731314, 0.0692539474814716
    ), logphi = c(0.510802947737031, -1.5734427626596)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_60 = structure(list(
    par = c(-0.266585785056557, -0.137451581627465, 0.495952722711769, 
    -1.69140967679638), value = 57.9821205993811, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.2324461757704, -8.64774482423059, 
    209.814222046134, -14.9924801231549, -8.64774482423059, 27.5166103307356, 
    -24.1747623217492, -9.41868138237822, 209.814222046134, -24.1747623217492, 
    4703.78495223933, -313.663515122187, -14.9924801231549, -9.41868138237822, 
    -313.663515122187, 267.259563258904), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266585785056557, -0.137451581627465
    ), logphi = c(0.495952722711769, -1.69140967679638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_61 = structure(list(
    par = c(-0.196747348042336, 0.247087770675774, 0.489290216129169, 
    -1.68746753328582), value = 35.3339047397584, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.7983016602474, -1.71756520117583, 
    187.875408288463, -7.48083497370544, -1.71756520117583, 47.7851325264567, 
    -7.62706465451402, -11.5134211160495, 187.875408288463, -7.62706465451402, 
    4078.33359822973, -264.054097826261, -7.48083497370544, -11.5134211160495, 
    -264.054097826261, 229.145116072971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196747348042336, 0.247087770675774
    ), logphi = c(0.489290216129169, -1.68746753328582)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_62 = structure(list(
    par = c(-0.300466009052313, -0.0199010579914307, 0.510930853024726, 
    -1.61068879783256), value = 70.6238277864628, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.3445071441847, -6.28193615526129, 
    176.844704839141, -15.4039709165943, -6.28193615526129, 28.2853746185197, 
    -22.9590292839532, -9.11301234651773, 176.844704839141, -22.9590292839532, 
    3368.52454372405, -279.194247786663, -15.4039709165943, -9.11301234651773, 
    -279.194247786663, 213.332087920293), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.300466009052313, -0.0199010579914307
    ), logphi = c(0.510930853024726, -1.61068879783256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_63 = structure(list(
    par = c(-0.233744635045314, -0.0326009976153601, 0.483864948564987, 
    -1.62454557079738), value = 66.8050339518414, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.9384218492874, -5.83628393968638, 
    203.484634834439, -10.9175893516777, -5.83628393968638, 35.1507947584651, 
    -17.822147132307, -10.5443091857893, 203.484634834439, -17.822147132307, 
    4059.62083691236, -253.802702379957, -10.9175893516777, -10.5443091857893, 
    -253.802702379957, 240.25870216704), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233744635045314, -0.0326009976153601
    ), logphi = c(0.483864948564987, -1.62454557079738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_64 = structure(list(
    par = c(-0.273949012701531, 0.0510051488258773, 0.516385111669258, 
    -1.5487958720605), value = 69.171900187537, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.8892893634218, -6.59712669204282, 
    185.859732077631, -16.3521039802106, -6.59712669204282, 33.1788523375565, 
    -24.1049133720139, -10.278863669555, 185.859732077631, -24.1049133720139, 
    3173.21117907099, -286.382681354169, -16.3521039802106, -10.278863669555, 
    -286.382681354169, 213.537594646596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273949012701531, 0.0510051488258773
    ), logphi = c(0.516385111669258, -1.5487958720605)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_65 = structure(list(
    par = c(-0.243275978876747, -0.199622096634412, 0.515574352560332, 
    -1.6484719837464), value = 75.7427131047039, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.9539370754535, -9.96664876495856, 
    190.537367327437, -16.5915472134515, -9.96664876495856, 22.5334003793876, 
    -27.9138990251226, -7.69794114496847, 190.537367327437, -27.9138990251226, 
    4051.3554592323, -311.574204745924, -16.5915472134515, -7.69794114496847, 
    -311.574204745924, 246.889337681466), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243275978876747, -0.199622096634412
    ), logphi = c(0.515574352560332, -1.6484719837464)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_66 = structure(list(
    par = c(-0.364661992077453, 0.0924993419073851, 0.486762642877975, 
    -1.5266837858103), value = 61.1630882409613, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.2757307259775, 0.636967413925049, 
    185.110535348088, -12.9674247331124, 0.636967413925049, 40.7941084663577, 
    -15.1856464700728, -11.8033785261318, 185.110535348088, -15.1856464700728, 
    2958.02953793078, -225.313004609262, -12.9674247331124, -11.8033785261318, 
    -225.313004609262, 191.953592700855), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.364661992077453, 0.0924993419073851
    ), logphi = c(0.486762642877975, -1.5266837858103)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_67 = structure(list(
    par = c(-0.345187248052799, 0.202003618017479, 0.487227268258222, 
    -1.54473097774806), value = 53.7482943980772, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.8431558162827, 2.49785918171597, 
    186.0528229507, -11.5787713887983, 2.49785918171597, 47.0736164253083, 
    -11.2833228484988, -12.7688158686468, 186.0528229507, -11.2833228484988, 
    3048.48456417695, -233.955326745416, -11.5787713887983, -12.7688158686468, 
    -233.955326745416, 195.677076794354), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.345187248052799, 0.202003618017479
    ), logphi = c(0.487227268258222, -1.54473097774806)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_68 = structure(list(
    par = c(-0.467530731531992, -0.0347305884841348, 0.5177574911141, 
    -1.47878562441401), value = 58.829457649783, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.5348936920698, -1.72246494578587, 
    155.298047785024, -19.2739745106252, -1.72246494578587, 28.4844756794911, 
    -22.6819861843808, -8.56098765922297, 155.298047785024, -22.6819861843808, 
    2275.5554267917, -242.522110259102, -19.2739745106252, -8.56098765922297, 
    -242.522110259102, 165.855860988273), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467530731531992, -0.0347305884841348
    ), logphi = c(0.5177574911141, -1.47878562441401)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_69 = structure(list(
    par = c(-0.236687321107511, -0.0921689489557847, 0.506297516734164, 
    -1.56254090400626), value = 68.4852996604025, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.1743284438596, -6.79860685792733, 
    159.075162478928, -12.3557029834132, -6.79860685792733, 24.0978661167901, 
    -20.2208647550606, -7.69615154183612, 159.075162478928, -20.2208647550606, 
    2869.67349465783, -224.336859359298, -12.3557029834132, -7.69615154183612, 
    -224.336859359298, 185.751832177061), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236687321107511, -0.0921689489557847
    ), logphi = c(0.506297516734164, -1.56254090400626)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_70 = structure(list(
    par = c(-0.258178410877075, -0.301259734460255, 0.513663861024621, 
    -1.63608345663463), value = 89.9819669999644, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.2268753367293, -11.0836494151556, 
    210.420943140832, -19.1365992350256, -11.0836494151556, 21.2098039185094, 
    -30.9696518918656, -7.7251962977698, 210.420943140832, -30.9696518918656, 
    4438.5877642803, -339.430684546116, -19.1365992350256, -7.7251962977698, 
    -339.430684546116, 273.003315420794), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258178410877075, -0.301259734460255
    ), logphi = c(0.513663861024621, -1.63608345663463)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_71 = structure(list(
    par = c(-0.0715521842757407, 0.202854788142883, 0.490121994126732, 
    -1.66887942325036), value = 57.8705994315846, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.4247652888162, -7.85521891621954, 
    196.639872665827, -4.96888624823555, -7.85521891621954, 43.3241786481631, 
    -11.1195242844531, -11.0611623469481, 196.639872665827, -11.1195242844531, 
    4377.24432388364, -256.881871813164, -4.96888624823555, -11.0611623469481, 
    -256.881871813164, 248.183410956671), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0715521842757407, 0.202854788142883
    ), logphi = c(0.490121994126732, -1.66887942325036)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_72 = structure(list(
    par = c(-0.303718552256654, -0.226031768722409, 0.4984624742106, 
    -1.63960289545531), value = 75.7770276686027, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.8542858112746, -8.30341647528599, 
    202.666440255683, -17.0149186615731, -8.30341647528599, 23.4145110411532, 
    -25.7741337819084, -8.60570831129337, 202.666440255683, -25.7741337819084, 
    4176.91410736154, -299.099131737535, -17.0149186615731, -8.60570831129337, 
    -299.099131737535, 251.673947371245), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303718552256654, -0.226031768722409
    ), logphi = c(0.4984624742106, -1.63960289545531)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_73 = structure(list(
    par = c(-0.196037616656872, -0.0275005153292018, 0.488523630277377, 
    -1.67053863993705), value = 64.8246369059877, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.2607862843181, -7.94509621115935, 
    205.092766378812, -10.650149077307, -7.94509621115935, 33.1127209882709, 
    -18.4637603695137, -10.1857553822526, 205.092766378812, -18.4637603695137, 
    4467.02458904724, -274.799674587101, -10.650149077307, -10.1857553822526, 
    -274.799674587101, 254.723690805037), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196037616656872, -0.0275005153292018
    ), logphi = c(0.488523630277377, -1.67053863993705)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_74 = structure(list(
    par = c(-0.335578041492865, 0.0167156187174233, 0.515678146577038, 
    -1.55054460534647), value = 65.6341295257077, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.1790494237712, -5.25072951518268, 
    164.824359178084, -16.090150310788, -5.25072951518268, 27.6745821210511, 
    -22.1451330126854, -9.02562099369675, 164.824359178084, -22.1451330126854, 
    2792.83886784754, -259.159503821493, -16.090150310788, -9.02562099369675, 
    -259.159503821493, 188.903040658772), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335578041492865, 0.0167156187174233
    ), logphi = c(0.515678146577038, -1.55054460534647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_75 = structure(list(
    par = c(-0.154488732676973, 0.0488609216427582, 0.477565321077115, 
    -1.61255962861906), value = 49.6667737938308, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.1809137589754, -3.94625331701093, 
    173.181008683798, -5.69466215072367, -3.94625331701093, 37.840286472246, 
    -11.9105537947917, -9.35076073904639, 173.181008683798, -11.9105537947917, 
    3467.35074111493, -193.157010858869, -5.69466215072367, -9.35076073904639, 
    -193.157010858869, 203.760316418666), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.154488732676973, 0.0488609216427582
    ), logphi = c(0.477565321077115, -1.61255962861906)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_76 = structure(list(
    par = c(-0.371844474297727, -0.0808631738022661, 0.510424944390389, 
    -1.50286952250113), value = 75.6983207536977, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7995140715714, -4.44260114562667, 
    161.54665616952, -16.6464046724712, -4.44260114562667, 26.2223540374862, 
    -22.090755955162, -8.3548701290681, 161.54665616952, -22.090755955162, 
    2534.07476187917, -235.015536857119, -16.6464046724712, -8.3548701290681, 
    -235.015536857119, 175.651885012229), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371844474297727, -0.0808631738022661
    ), logphi = c(0.510424944390389, -1.50286952250113)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_77 = structure(list(
    par = c(-0.143006610495044, 0.0648935975920122, 0.507461425509632, 
    -1.51601908736698), value = 73.2482388571574, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.1176740595558, -6.89161961986429, 
    169.451784991281, -10.1499230513724, -6.89161961986429, 36.1407269089398, 
    -19.6295517120859, -9.28552622525558, 169.451784991281, -19.6295517120859, 
    2851.56278362209, -223.304936813662, -10.1499230513724, -9.28552622525558, 
    -223.304936813662, 189.827888885219), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143006610495044, 0.0648935975920122
    ), logphi = c(0.507461425509632, -1.51601908736698)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_78 = structure(list(
    par = c(-0.263918026087556, 0.241499447297342, 0.510692186255413, 
    -1.57000976458687), value = 52.7454376172419, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.1616623441015, -0.952599021886158, 
    197.336152233163, -14.1268034710151, -0.952599021886158, 
    50.649155731719, -17.7472006406276, -13.0314678301602, 197.336152233163, 
    -17.7472006406276, 3418.27943995021, -299.051445963983, -14.1268034710151, 
    -13.0314678301602, -299.051445963983, 224.356632786638), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263918026087556, 0.241499447297342
    ), logphi = c(0.510692186255413, -1.57000976458687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_79 = structure(list(
    par = c(-0.101261282845747, -0.0193619557750237, 0.46488932977531, 
    -1.751154236894), value = 49.5084083493618, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.2542865679974, -8.82087271314447, 
    188.363058857277, -3.80723553838891, -8.82087271314447, 29.4099077962073, 
    -8.16329668396065, -8.55317378078979, 188.363058857277, -8.16329668396065, 
    4921.10987685201, -217.96554235376, -3.80723553838891, -8.55317378078979, 
    -217.96554235376, 247.40217121888), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.101261282845747, -0.0193619557750237
    ), logphi = c(0.46488932977531, -1.751154236894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_80 = structure(list(
    par = c(-0.335280134632439, 0.0815544074804931, 0.516911255271329, 
    -1.62397788131088), value = 66.0700919234951, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.8571665125157, -5.51086648670207, 
    219.768659636799, -20.4062404414174, -5.51086648670207, 41.3237426961643, 
    -28.3258998265978, -12.4521140172362, 219.768659636799, -28.3258998265978, 
    4177.20272341171, -370.697911751705, -20.4062404414174, -12.4521140172362, 
    -370.697911751705, 265.951800741959), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335280134632439, 0.0815544074804931
    ), logphi = c(0.516911255271329, -1.62397788131088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_81 = structure(list(
    par = c(-0.41618311036796, 0.0321171271410204, 0.521161824023669, 
    -1.64643545086911), value = 50.3433446808254, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.5143958097566, -5.62722172681163, 
    183.552067092307, -19.9370512738994, -5.62722172681163, 28.5721371184877, 
    -27.4736900820471, -9.8947021296425, 183.552067092307, -27.4736900820471, 
    3602.99780486883, -335.347025835375, -19.9370512738994, -9.8947021296425, 
    -335.347025835375, 228.419722173356), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.41618311036796, 0.0321171271410204
    ), logphi = c(0.521161824023669, -1.64643545086911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_82 = structure(list(
    par = c(-0.433215118553949, 0.105532532607475, 0.518135175474912, 
    -1.59015536325334), value = 48.2404329889924, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.4233451409, -2.33290208484505, 
    186.937312161461, -20.3090855137589, -2.33290208484505, 36.4781273702874, 
    -24.5330982036052, -11.4075903034916, 186.937312161461, -24.5330982036052, 
    3270.8180882608, -322.457489975392, -20.3090855137589, -11.4075903034916, 
    -322.457489975392, 218.836361382202), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.433215118553949, 0.105532532607475
    ), logphi = c(0.518135175474912, -1.59015536325334)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_83 = structure(list(
    par = c(-0.238400132555925, 0.0159944129488251, 0.509586085031256, 
    -1.58304918197015), value = 62.3453265511504, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.4047410555166, -6.63381169374588, 
    161.731222517503, -12.3661923101537, -6.63381169374588, 26.9690774512554, 
    -19.7253125389096, -8.56742357413509, 161.731222517503, -19.7253125389096, 
    2972.80889084028, -240.112322556385, -12.3661923101537, -8.56742357413509, 
    -240.112322556385, 190.972900622199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238400132555925, 0.0159944129488251
    ), logphi = c(0.509586085031256, -1.58304918197015)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_84 = structure(list(
    par = c(-0.343753479305434, -0.230493068135473, 0.498427781710871, 
    -1.59917894261258), value = 74.8200456229465, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.3040356592148, -6.92061440688008, 
    179.178928345181, -16.0692639674664, -6.92061440688008, 20.6356282035358, 
    -23.2125351473655, -7.84248372198704, 179.178928345181, -23.2125351473655, 
    3417.00718688998, -258.921463897721, -16.0692639674664, -7.84248372198704, 
    -258.921463897721, 213.932270455075), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343753479305434, -0.230493068135473
    ), logphi = c(0.498427781710871, -1.59917894261258)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_85 = structure(list(
    par = c(-0.258570244731726, 0.173308380233335, 0.468273810658889, 
    -1.61106926952865), value = 46.8583691048607, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9967408409312, 0.519945299259916, 
    194.590420278473, -6.4257842078419, 0.519945299259916, 45.7861730520648, 
    -5.99456649474917, -12.1138509729946, 194.590420278473, -5.99456649474917, 
    3712.70583023353, -213.982859560424, -6.4257842078419, -12.1138509729946, 
    -213.982859560424, 216.477014125971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258570244731726, 0.173308380233335
    ), logphi = c(0.468273810658889, -1.61106926952865)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_86 = structure(list(
    par = c(-0.206379921805159, 0.141476852228113, 0.480390801826452, 
    -1.66288258473348), value = 44.9088703199188, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.2336061718448, -4.80630497001755, 
    171.590844782799, -6.68685849536388, -4.80630497001755, 32.1935360325654, 
    -8.78440764928712, -9.9117635610213, 171.590844782799, -8.78440764928712, 
    3620.79511716651, -218.444981694432, -6.68685849536388, -9.9117635610213, 
    -218.444981694432, 205.535115568978), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206379921805159, 0.141476852228113
    ), logphi = c(0.480390801826452, -1.66288258473348)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_87 = structure(list(
    par = c(-0.34369506620394, 0.000721966057145256, 0.493664255099397, 
    -1.60353928363341), value = 67.3578544265665, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.200115452873, -4.89259613090098, 
    202.889450804378, -15.6518050058452, -4.89259613090098, 32.8431231970683, 
    -20.6949444674365, -11.319286395306, 202.889450804378, -20.6949444674365, 
    3758.84928547521, -284.708750118767, -15.6518050058452, -11.319286395306, 
    -284.708750118767, 233.189621258845), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34369506620394, 0.000721966057145256
    ), logphi = c(0.493664255099397, -1.60353928363341)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_88 = structure(list(
    par = c(-0.306993254306295, -0.0323704803675578, 0.502596637095827, 
    -1.62510157216276), value = 66.7985159668386, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.3969107982755, -6.78791592534367, 
    198.162687155445, -15.9892333932987, -6.78791592534367, 30.4096764942585, 
    -23.4348346950242, -10.2541507818188, 198.162687155445, -23.4348346950242, 
    3866.39141382972, -298.966551540047, -15.9892333932987, -10.2541507818188, 
    -298.966551540047, 238.218046703764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306993254306295, -0.0323704803675578
    ), logphi = c(0.502596637095827, -1.62510157216276)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_89 = structure(list(
    par = c(-0.268235980821144, -0.33584363387238, 0.479910555543221, 
    -1.56210317928587), value = 88.0781483448741, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.9840305830155, -7.55488164827511, 
    189.738163442144, -12.3621937682117, -7.55488164827511, 21.158158425294, 
    -20.4494834008528, -7.81012040285134, 189.738163442144, -20.4494834008528, 
    3497.29808968391, -206.89904993354, -12.3621937682117, -7.81012040285134, 
    -206.89904993354, 215.501820118646), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.268235980821144, -0.33584363387238
    ), logphi = c(0.479910555543221, -1.56210317928587)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_90 = structure(list(
    par = c(-0.503164290480212, 0.193594854206312, 0.518998021649397, 
    -1.65167619219005), value = 44.3448235880595, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.5989991074982, -0.390762505020348, 
    222.911468863884, -24.9239901322085, -0.390762505020348, 
    47.0446034093186, -27.1754325211759, -14.8808509479181, 222.911468863884, 
    -27.1754325211759, 4206.34137479681, -416.561911990243, -24.9239901322085, 
    -14.8808509479181, -416.561911990243, 268.944677394245), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.503164290480212, 0.193594854206312
    ), logphi = c(0.518998021649397, -1.65167619219005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_91 = structure(list(
    par = c(-0.199093596075233, 0.319752575282533, 0.483317926287109, 
    -1.66408918257934), value = 38.3837807957803, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.7233390807535, -0.0754634523758568, 
    195.332078341437, -6.02728842746814, -0.0754634523758568, 
    50.3273653862379, -2.72213286223177, -12.7005158887528, 195.332078341437, 
    -2.72213286223177, 4079.73675276629, -260.576075270968, -6.02728842746814, 
    -12.7005158887528, -260.576075270968, 232.359358211198), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199093596075233, 0.319752575282533
    ), logphi = c(0.483317926287109, -1.66408918257934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_92 = structure(list(
    par = c(-0.118600128076773, -0.0416656405337322, 0.477938707573185, 
    -1.61544658107498), value = 73.3168737311711, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.1342448252699, -8.34031478547104, 
    198.04906950327, -6.31809325746246, -8.34031478547104, 35.230611736381, 
    -15.877825845223, -9.77766861254281, 198.04906950327, -15.877825845223, 
    4077.15069533765, -214.932654108324, -6.31809325746246, -9.77766861254281, 
    -214.932654108324, 238.519253969116), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.118600128076773, -0.0416656405337322
    ), logphi = c(0.477938707573185, -1.61544658107498)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_93 = structure(list(
    par = c(-0.364530598846476, 0.1308755811315, 0.51615051663201, 
    -1.52408661611777), value = 61.7400232161297, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.1617989284672, -0.953859419894343, 
    168.413576261628, -16.6154455474299, -0.953859419894343, 
    38.7513951505269, -20.3225837367427, -10.5564993830853, 168.413576261628, 
    -20.3225837367427, 2661.01217093428, -262.791869332091, -16.6154455474299, 
    -10.5564993830853, -262.791869332091, 185.325856525864), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.364530598846476, 0.1308755811315
    ), logphi = c(0.51615051663201, -1.52408661611777)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_94 = structure(list(
    par = c(-0.431612943825546, -0.0648623989004634, 0.503734634091396, 
    -1.64758677395105), value = 64.4545309874147, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.9917565586693, -6.72326046213811, 
    214.851756648926, -21.4201730379671, -6.72326046213811, 28.2892572478488, 
    -28.2414560643929, -11.0643237718477, 214.851756648926, -28.2414560643929, 
    4261.76982020721, -355.080331711832, -21.4201730379671, -11.0643237718477, 
    -355.080331711832, 261.571690067797), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431612943825546, -0.0648623989004634
    ), logphi = c(0.503734634091396, -1.64758677395105)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_95 = structure(list(
    par = c(-0.14499054495581, -0.0268583940777958, 0.506955680153103, 
    -1.61360375901812), value = 58.9833358197825, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.3923267094715, -7.66855453449011, 
    171.79027199532, -10.5186160261894, -7.66855453449011, 31.0276509285501, 
    -20.4021783005714, -8.3706918037052, 171.79027199532, -20.4021783005714, 
    3445.53478438669, -245.706072293572, -10.5186160261894, -8.3706918037052, 
    -245.706072293572, 212.191845823995), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.14499054495581, -0.0268583940777958
    ), logphi = c(0.506955680153103, -1.61360375901812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_96 = structure(list(
    par = c(-0.338576619418316, 0.0984765767790768, 0.509999604203516, 
    -1.76363345222993), value = 38.2380045537062, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.2155472992748, -7.28589904674948, 
    232.833216493589, -18.6840096700891, -7.28589904674948, 39.1371440215948, 
    -26.7534192737173, -12.5740249501405, 232.833216493589, -26.7534192737173, 
    5563.52287469331, -411.617757899663, -18.6840096700891, -12.5740249501405, 
    -411.617757899663, 298.877099222494), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338576619418316, 0.0984765767790768
    ), logphi = c(0.509999604203516, -1.76363345222993)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_97 = structure(list(
    par = c(-0.508416345297494, 0.0275137641058018, 0.514614874043504, 
    -1.6557437540799), value = 53.369895011727, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.7226126037358, -4.96635392011058, 
    214.352533461692, -24.778809173398, -4.96635392011058, 32.3839827522932, 
    -31.2946029126238, -12.0432825365668, 214.352533461692, -31.2946029126238, 
    4203.66781800041, -396.077877807599, -24.778809173398, -12.0432825365668, 
    -396.077877807599, 264.557881529015), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.508416345297494, 0.0275137641058018
    ), logphi = c(0.514614874043504, -1.6557437540799)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_98 = structure(list(
    par = c(-0.274707552910008, 0.125407827578678, 0.519244131935716, 
    -1.65654922199925), value = 59.18825986601, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.8391216814874, -6.93877799839981, 
    192.627394712375, -15.9629874474376, -6.93877799839981, 34.9315270451456, 
    -23.8202917124397, -10.9081100321262, 192.627394712375, -23.8202917124397, 
    3895.95369490081, -328.464831709674, -15.9629874474376, -10.9081100321262, 
    -328.464831709674, 239.105880057267), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274707552910008, 0.125407827578678
    ), logphi = c(0.519244131935716, -1.65654922199925)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_99 = structure(list(
    par = c(-0.202320932178295, -0.134030173898986, 0.486026552483593, 
    -1.71136823568527), value = 59.2672256088776, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.9350827481359, -9.3565636571924, 
    187.327696917094, -10.2002036683757, -9.3565636571924, 22.8441492193809, 
    -17.9145604484177, -8.27570874317729, 187.327696917094, -17.9145604484177, 
    4422.85230606387, -256.254978621584, -10.2002036683757, -8.27570874317729, 
    -256.254978621584, 241.03079783977), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202320932178295, -0.134030173898986
    ), logphi = c(0.486026552483593, -1.71136823568527)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_100 = structure(list(
    par = c(-0.324976844898243, -0.0387038543538922, 0.496068407948, 
    -1.66041463581875), value = 62.0385234852, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.5566140382908, -6.35837970008879, 
    191.226647366705, -14.7194839410503, -6.35837970008879, 27.7097486058864, 
    -20.8101382401793, -9.85370351358483, 191.226647366705, -20.8101382401793, 
    3943.72782353258, -286.989315281261, -14.7194839410503, -9.85370351358483, 
    -286.989315281261, 232.90105393059), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.324976844898243, -0.0387038543538922
    ), logphi = c(0.496068407948, -1.66041463581875)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_101 = structure(list(
    par = c(-0.214317750851665, 0.198707303407964, 0.496617268097676, 
    -1.56793658967695), value = 68.3692644147193, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.0329862849107, -3.9975622527777, 
    195.624170334696, -10.2997066200317, -3.9975622527777, 43.936511548992, 
    -14.9812072969269, -12.3565703376016, 195.624170334696, -14.9812072969269, 
    3470.1185254562, -258.94472368293, -10.2997066200317, -12.3565703376016, 
    -258.94472368293, 220.153944852086), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214317750851665, 0.198707303407964
    ), logphi = c(0.496617268097676, -1.56793658967695)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_102 = structure(list(
    par = c(-0.047991444098144, -0.0653645720076798, 0.469381685630942, 
    -1.56391013417546), value = 66.8134877238831, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.9395300715751, -7.73705216872145, 
    146.742859829629, -1.91117784531514, -7.73705216872145, 26.2609557708515, 
    -11.5100903421705, -7.12360471233353, 146.742859829629, -11.5100903421705, 
    2877.95541493807, -124.045797267769, -1.91117784531514, -7.12360471233353, 
    -124.045797267769, 171.775151667219), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.047991444098144, -0.0653645720076798
    ), logphi = c(0.469381685630942, -1.56391013417546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_103 = structure(list(
    par = c(-0.344840671562912, -0.0344957842916899, 0.526441478665759, 
    -1.54032421300781), value = 74.1811718201604, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.6912039675747, -5.32907687045281, 
    175.585030863346, -19.6359188890938, -5.32907687045281, 30.5994316960323, 
    -27.2773601359688, -8.80285335114195, 175.585030863346, -27.2773601359688, 
    2947.07963916352, -297.36347999787, -19.6359188890938, -8.80285335114195, 
    -297.36347999787, 205.683770410303), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344840671562912, -0.0344957842916899
    ), logphi = c(0.526441478665759, -1.54032421300781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_104 = structure(list(
    par = c(-0.217874235395828, -0.0289101028266229, 0.479270463357739, 
    -1.64990969555253), value = 62.2948209608411, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.8017899828574, -7.21480404664021, 
    208.642658058977, -9.86265646396589, -7.21480404664021, 33.3340981004682, 
    -16.3141781257536, -10.6622529472133, 208.642658058977, -16.3141781257536, 
    4370.12536809256, -255.839859980789, -9.86265646396589, -10.6622529472133, 
    -255.839859980789, 250.712051217405), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.217874235395828, -0.0289101028266229
    ), logphi = c(0.479270463357739, -1.64990969555253)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_105 = structure(list(
    par = c(-0.336184350272969, -0.116770390272075, 0.498615239316607, 
    -1.60637230260528), value = 60.1399545039823, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.5843138822074, -5.71793570003365, 
    178.437559130273, -15.0112681591708, -5.71793570003365, 25.5333748011566, 
    -21.7876204740008, -8.58893177557718, 178.437559130273, -21.7876204740008, 
    3392.66754794387, -259.812217069388, -15.0112681591708, -8.58893177557718, 
    -259.812217069388, 211.24370528014), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336184350272969, -0.116770390272075
    ), logphi = c(0.498615239316607, -1.60637230260528)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_106 = structure(list(
    par = c(-0.174964066070871, 0.171834126966944, 0.470298528092332, 
    -1.61929728221535), value = 43.3392916369954, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.9500105558908, -2.42728964572336, 
    166.861683096542, -3.86892594761434, -2.42728964572336, 37.5127631198069, 
    -5.96247824979912, -9.88750325614518, 166.861683096542, -5.96247824979912, 
    3335.72368042745, -180.407071884936, -3.86892594761434, -9.88750325614518, 
    -180.407071884936, 192.769711729213), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174964066070871, 0.171834126966944
    ), logphi = c(0.470298528092332, -1.61929728221535)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_107 = structure(list(
    par = c(-0.201644770182132, 0.191352551219679, 0.532103410927641, 
    -1.59454462181117), value = 58.2576392517496, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.291319366348, -6.85515013465476, 
    190.026943231558, -16.0227207555153, -6.85515013465476, 42.41211139977, 
    -25.4183409147402, -11.0801570656349, 190.026943231558, -25.4183409147402, 
    3493.30515767399, -329.696529976609, -16.0227207555153, -11.0801570656349, 
    -329.696529976609, 231.515824721029), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201644770182132, 0.191352551219679
    ), logphi = c(0.532103410927641, -1.59454462181117)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_108 = structure(list(
    par = c(-0.21039433861344, 0.30481086792897, 0.507770002304025, 
    -1.62453672525996), value = 55.1766294216094, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.1756211224649, -2.27994845403146, 
    216.797821195769, -12.1787560658504, -2.27994845403146, 55.6799293374155, 
    -14.5592648816972, -14.4015913008388, 216.797821195769, -14.5592648816972, 
    4156.99671070691, -331.716326220644, -12.1787560658504, -14.4015913008388, 
    -331.716326220644, 257.032290321035), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21039433861344, 0.30481086792897
    ), logphi = c(0.507770002304025, -1.62453672525996)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_109 = structure(list(
    par = c(-0.324447587324173, -0.531433282377282, 0.491935712513687, 
    -1.68077720766841), value = 86.3745805571455, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.6766555070808, -9.53865509245588, 
    209.902477251944, -18.2772442567369, -9.53865509245588, 13.809035063872, 
    -26.6862322177985, -6.3948899065025, 209.902477251944, -26.6862322177985, 
    4855.79363343191, -313.200190518614, -18.2772442567369, -6.3948899065025, 
    -313.200190518614, 278.218608965375), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.324447587324173, -0.531433282377282
    ), logphi = c(0.491935712513687, -1.68077720766841)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_110 = structure(list(
    par = c(-0.293086658893734, -0.195049868595501, 0.491559986986479, 
    -1.64151224033336), value = 64.0915654177328, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.2219041152621, -7.49593610294141, 
    182.955837587429, -13.6403845765187, -7.49593610294141, 21.5449786296062, 
    -21.0572309100598, -8.14408182847615, 182.955837587429, -21.0572309100598, 
    3772.81836162524, -254.806485779469, -13.6403845765187, -8.14408182847615, 
    -254.806485779469, 223.881275708493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293086658893734, -0.195049868595501
    ), logphi = c(0.491559986986479, -1.64151224033336)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_111 = structure(list(
    par = c(-0.219434923658698, 0.0147451621642028, 0.477239810883511, 
    -1.65865467232069), value = 57.920755781338, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.8632290403041, -5.82006655491796, 
    193.180657989345, -8.48968236866199, -5.82006655491796, 32.666404409909, 
    -13.2111929271872, -10.2027616666334, 193.180657989345, -13.2111929271872, 
    4085.98136458416, -236.528329486951, -8.48968236866199, -10.2027616666334, 
    -236.528329486951, 231.798437541286), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219434923658698, 0.0147451621642028
    ), logphi = c(0.477239810883511, -1.65865467232069)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_112 = structure(list(
    par = c(-0.266426776419005, -0.020449957578843, 0.536214283605217, 
    -1.53029643031124), value = 74.4815548691919, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.8480779054146, -8.10257484218369, 
    168.668141888872, -18.5458793389159, -8.10257484218369, 27.6401504706314, 
    -27.6609803506744, -8.05409396065215, 168.668141888872, -27.6609803506744, 
    2828.66909210355, -294.945756554199, -18.5458793389159, -8.05409396065215, 
    -294.945756554199, 200.931467663423), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266426776419005, -0.020449957578843
    ), logphi = c(0.536214283605217, -1.53029643031124)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_113 = structure(list(
    par = c(-0.206695542392821, -0.0479877424284834, 0.462410037299517, 
    -1.5472039171634), value = 54.4352510092177, counts = structure(c(291L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.56468689108, -2.36101589301541, 
    157.387281108257, -4.47263298397615, -2.36101589301541, 31.7978101715966, 
    -10.7098213071311, -8.38984409945454, 157.387281108257, -10.7098213071311, 
    2806.41209565147, -131.74846201558, -4.47263298397615, -8.38984409945454, 
    -131.74846201558, 168.702405019872), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206695542392821, -0.0479877424284834
    ), logphi = c(0.462410037299517, -1.5472039171634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_114 = structure(list(
    par = c(-0.276891193430497, -0.36334655488982, 0.455255491877015, 
    -1.57179931090428), value = 75.943349157579, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.6220873207571, -5.86770838850725, 
    160.302797439726, -7.08053651088392, -5.86770838850725, 15.9189777519941, 
    -13.1550484674392, -6.69975156952773, 160.302797439726, -13.1550484674392, 
    3000.1347129307, -128.215367041662, -7.08053651088392, -6.69975156952773, 
    -128.215367041662, 175.903235913211), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276891193430497, -0.36334655488982
    ), logphi = c(0.455255491877015, -1.57179931090428)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_115 = structure(list(
    par = c(-0.134750480311083, 0.243244539175432, 0.482975001864655, 
    -1.60206874921953), value = 33.4056684269949, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.9729279541169, 0.906960559987624, 
    156.23467384529, -3.96638050492726, 0.906960559987624, 50.1598051609875, 
    -7.00513954221549, -9.65747554992902, 156.23467384529, -7.00513954221549, 
    3044.11962256701, -185.479044565895, -3.96638050492726, -9.65747554992902, 
    -185.479044565895, 181.913893115393), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.134750480311083, 0.243244539175432
    ), logphi = c(0.482975001864655, -1.60206874921953)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_116 = structure(list(
    par = c(-0.45039667469409, 0.0586712951104454, 0.526733066533554, 
    -1.53750102976891), value = 52.6542501181838, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.6350107904017, -2.17258558699029, 
    165.287423421034, -20.5358492149088, -2.17258558699029, 32.4839604761706, 
    -25.0328971969083, -9.54605466674252, 165.287423421034, -25.0328971969083, 
    2659.67933702704, -290.932609798844, -20.5358492149088, -9.54605466674252, 
    -290.932609798844, 190.066482938178), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.45039667469409, 0.0586712951104454
    ), logphi = c(0.526733066533554, -1.53750102976891)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_117 = structure(list(
    par = c(-0.122944959688398, 0.259234974774648, 0.479993849177831, 
    -1.65635403642131), value = 40.3373546915178, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.5123814639051, -2.35737168097216, 
    181.864223067763, -3.73653326413148, -2.35737168097216, 47.4329901987147, 
    -5.12012807796225, -10.9252181133002, 181.864223067763, -5.12012807796225, 
    3900.94408295205, -223.854282259239, -3.73653326413148, -10.9252181133002, 
    -223.854282259239, 221.118364041928), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.122944959688398, 0.259234974774648
    ), logphi = c(0.479993849177831, -1.65635403642131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_118 = structure(list(
    par = c(-0.237287827650365, 0.0331005487625248, 0.488247444087113, 
    -1.68073939350499), value = 56.3725182664203, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.8758468219302, -6.79251877144793, 
    212.364302726087, -11.6679943893416, -6.79251877144793, 35.8728447515944, 
    -17.368789952954, -11.2596072545657, 212.364302726087, -17.368789952954, 
    4603.13693416303, -294.539643186376, -11.6679943893416, -11.2596072545657, 
    -294.539643186376, 260.77626442067), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237287827650365, 0.0331005487625248
    ), logphi = c(0.488247444087113, -1.68073939350499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_119 = structure(list(
    par = c(-0.242212766369025, 0.0750951126704475, 0.477936418473118, 
    -1.62344023013227), value = 69.0652094700296, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.9434972769866, -5.21062348823875, 
    214.905434361867, -9.63327311254147, -5.21062348823875, 39.0975783908232, 
    -13.6517674604875, -12.2819814158959, 214.905434361867, -13.6517674604875, 
    4224.48590040148, -257.550246004712, -9.63327311254147, -12.2819814158959, 
    -257.550246004712, 247.964176438131), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242212766369025, 0.0750951126704475
    ), logphi = c(0.477936418473118, -1.62344023013227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_120 = structure(list(
    par = c(-0.746809489050351, 0.0842926797342275, 0.545577663346944, 
    -1.66739942284731), value = 43.6176672086843, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(50.3634434600997, -4.17330232593827, 
    213.209031112882, -36.2169166283621, -4.17330232593827, 34.8442587636555, 
    -51.240878313763, -11.305432376929, 213.209031112882, -51.240878313763, 
    4257.7288593364, -527.862767970788, -36.2169166283621, -11.305432376929, 
    -527.862767970788, 293.584499356569), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.746809489050351, 0.0842926797342275
    ), logphi = c(0.545577663346944, -1.66739942284731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_121 = structure(list(
    par = c(-0.219342409970239, -0.0973760229531901, 0.514121811973014, 
    -1.59282400159853), value = 84.3854864560905, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.7270931204584, -10.6607378285162, 
    200.616127322917, -16.3678562294933, -10.6607378285162, 27.7123835026316, 
    -27.5083849032853, -9.26684810131917, 200.616127322917, -27.5083849032853, 
    3833.8362044783, -307.309311807558, -16.3678562294933, -9.26684810131917, 
    -307.309311807558, 245.119015424677), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219342409970239, -0.0973760229531901
    ), logphi = c(0.514121811973014, -1.59282400159853)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_122 = structure(list(
    par = c(-0.18710916670368, -0.0216294298049277, 0.498343585951771, 
    -1.67472922905334), value = 53.7404213903111, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.0626281296433, -8.08434579191442, 
    181.622772945644, -10.6154896153399, -8.08434579191442, 28.4290627412531, 
    -18.9020282181929, -8.89850325691555, 181.622772945644, -18.9020282181929, 
    3982.84514285052, -262.118590844906, -10.6154896153399, -8.89850325691555, 
    -262.118590844906, 229.437506860108), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18710916670368, -0.0216294298049277
    ), logphi = c(0.498343585951771, -1.67472922905334)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_123 = structure(list(
    par = c(-0.291613542485957, -0.145973979820037, 0.499618317186802, 
    -1.61099866967773), value = 68.3249763248039, counts = structure(c(293L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.6446250780555, -6.80859949397927, 
    188.774876306752, -15.1501533167675, -6.80859949397927, 27.2867358930284, 
    -23.2883956758911, -8.79087027527703, 188.774876306752, -23.2883956758911, 
    3673.13102600519, -271.65854681499, -15.1501533167675, -8.79087027527703, 
    -271.65854681499, 227.147412616091), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291613542485957, -0.145973979820037
    ), logphi = c(0.499618317186802, -1.61099866967773)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_124 = structure(list(
    par = c(-0.00451170749706599, -0.0561928795309263, 0.49150310388705, 
    -1.62004663220403), value = 78.7373930554472, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.0193882970559, -12.5959541747989, 
    172.715658493416, -4.82970271775685, -12.5959541747989, 27.2704368668997, 
    -16.974057551522, -7.93185287761844, 172.715658493416, -16.974057551522, 
    3740.167488683, -202.777462167347, -4.82970271775685, -7.93185287761844, 
    -202.777462167347, 220.869610931373), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00451170749706599, -0.0561928795309263
    ), logphi = c(0.49150310388705, -1.62004663220403)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_125 = structure(list(
    par = c(-0.0547465370973706, -0.0736664239861361, 0.510719496482234, 
    -1.68134818971796), value = 57.4714486534452, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.5926913667408, -10.2831949764237, 
    148.318974108719, -7.60742866656727, -10.2831949764237, 21.2244675026341, 
    -18.1025646330824, -6.42071970879954, 148.318974108719, -18.1025646330824, 
    3456.25715972808, -219.176625032347, -7.60742866656727, -6.42071970879954, 
    -219.176625032347, 198.447838005933), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0547465370973706, -0.0736664239861361
    ), logphi = c(0.510719496482234, -1.68134818971796)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_126 = structure(list(
    par = c(-0.351744274634418, 0.212150349016953, 0.493352598145301, 
    -1.65091337861619), value = 52.0461002026051, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.9847036592026, -0.369686970813632, 
    226.871243121707, -15.2866878764257, -0.369686970813632, 
    50.07506245569, -13.575919487252, -14.9822986621473, 226.871243121707, 
    -13.575919487252, 4410.59177273217, -338.798189918776, -15.2866878764257, 
    -14.9822986621473, -338.798189918776, 263.149532411688), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351744274634418, 0.212150349016953
    ), logphi = c(0.493352598145301, -1.65091337861619)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_127 = structure(list(
    par = c(-0.478806893441119, -0.685230863526101, 0.517560520310974, 
    -1.61637424457838), value = 78.9826639527823, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(46.8388526684294, -7.07973779157101, 
    169.573330637718, -22.6685575608343, -7.07973779157101, 8.69767651678899, 
    -27.5925826258572, -3.82153049827139, 169.573330637718, -27.5925826258572, 
    3590.45137434677, -319.080495657431, -22.6685575608343, -3.82153049827139, 
    -319.080495657431, 232.139075109217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.478806893441119, -0.685230863526101
    ), logphi = c(0.517560520310974, -1.61637424457838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_128 = structure(list(
    par = c(-0.31662584066778, -0.00587536342925964, 0.514174629029919, 
    -1.53416144626788), value = 61.8280482954848, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.5199682132992, -4.66960049294585, 
    150.059198718466, -14.234039381833, -4.66960049294585, 26.1314707241667, 
    -20.0670752033005, -8.0507704272037, 150.059198718466, -20.0670752033005, 
    2491.71071816612, -227.73543295429, -14.234039381833, -8.0507704272037, 
    -227.73543295429, 169.516650247559), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31662584066778, -0.00587536342925964
    ), logphi = c(0.514174629029919, -1.53416144626788)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_129 = structure(list(
    par = c(-0.50381945482568, 0.300114775363573, 0.537264019628311, 
    -1.53192011268495), value = 45.073907493788, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.3438336958916, 5.03782817418141, 
    180.486044833117, -23.8293357988084, 5.03782817418141, 54.7682943832228, 
    -22.7829399825907, -13.5001742744834, 180.486044833117, -22.7829399825907, 
    2733.40251435172, -342.757229390145, -23.8293357988084, -13.5001742744834, 
    -342.757229390145, 205.685881152107), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.50381945482568, 0.300114775363573
    ), logphi = c(0.537264019628311, -1.53192011268495)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_130 = structure(list(
    par = c(-0.294864888429455, 0.0210733821417884, 0.505777060818523, 
    -1.53238858570749), value = 70.6775406425374, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.0393178974871, -4.48203633496291, 
    172.342502686718, -14.1741058126144, -4.48203633496291, 32.62819231864, 
    -20.4221009383332, -9.64149703364114, 172.342502686718, -20.4221009383332, 
    2858.15168438575, -241.808241524311, -14.1741058126144, -9.64149703364114, 
    -241.808241524311, 190.743981956842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294864888429455, 0.0210733821417884
    ), logphi = c(0.505777060818523, -1.53238858570749)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_131 = structure(list(
    par = c(-0.275779490111909, -0.180286160139775, 0.50431155453278, 
    -1.52823471883819), value = 83.968136038037, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.0179497910422, -7.13557632181505, 
    191.904259303044, -16.3646207873569, -7.13557632181505, 28.6001975737804, 
    -25.1989338373448, -8.76495318991033, 191.904259303044, -25.1989338373448, 
    3267.79108406683, -260.128467505893, -16.3646207873569, -8.76495318991033, 
    -260.128467505893, 216.517583243814), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275779490111909, -0.180286160139775
    ), logphi = c(0.50431155453278, -1.52823471883819)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_132 = structure(list(
    par = c(-0.413238570264378, -0.346326350760594, 0.489413060421512, 
    -1.67300614909197), value = 72.837774431084, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.5076051628309, -8.01061865374209, 
    215.400538056798, -20.1164389288522, -8.01061865374209, 19.0682713139267, 
    -27.7196913032185, -8.34257886239698, 215.400538056798, -27.7196913032185, 
    4679.42213667527, -329.183265279198, -20.1164389288522, -8.34257886239698, 
    -329.183265279198, 271.880047872486), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.413238570264378, -0.346326350760594
    ), logphi = c(0.489413060421512, -1.67300614909197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_133 = structure(list(
    par = c(-0.351367275024515, -0.0186615647215825, 0.51721042177475, 
    -1.6321185854065), value = 57.1396313853062, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(56.4034716337147, -5.96404035846376, 
    162.674409784458, -16.0763942007591, -5.96404035846376, 24.1275202164104, 
    -23.3151339408266, -8.29261084867028, 162.674409784458, -23.3151339408266, 
    3180.54375434684, -278.944630609956, -16.0763942007591, -8.29261084867028, 
    -278.944630609956, 200.960697432251), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351367275024515, -0.0186615647215825
    ), logphi = c(0.51721042177475, -1.6321185854065)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_134 = structure(list(
    par = c(-0.0965580738821055, -0.138384744758181, 0.476684948806377, 
    -1.54734973198947), value = 72.0623291043724, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.3734803776263, -7.84456586089277, 
    159.08264341391, -4.74079394585658, -7.84456586089277, 26.1611314940069, 
    -14.8196037024206, -7.44964817123162, 159.08264341391, -14.8196037024206, 
    2974.27739926803, -147.951619345221, -4.74079394585658, -7.44964817123162, 
    -147.951619345221, 182.045691108357), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0965580738821055, -0.138384744758181
    ), logphi = c(0.476684948806377, -1.54734973198947)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_135 = structure(list(
    par = c(-0.176185044464766, -0.219744638121375, 0.478353902867882, 
    -1.63281972165538), value = 65.6725332119171, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.7422894308252, -7.99945717844253, 
    162.754462735393, -7.71515493092068, -7.99945717844253, 19.465688442466, 
    -15.4061295383201, -6.98516481101308, 162.754462735393, -15.4061295383201, 
    3440.29914060329, -184.966359732641, -7.71515493092068, -6.98516481101308, 
    -184.966359732641, 199.233240465446), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.176185044464766, -0.219744638121375
    ), logphi = c(0.478353902867882, -1.63281972165538)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_136 = structure(list(
    par = c(-0.476564132086619, -0.141454838735304, 0.50074388479383, 
    -1.60135813196533), value = 65.5539194057235, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.7103522928869, -5.33126657842331, 
    195.44516453962, -21.0798988078409, -5.33126657842331, 24.5732960024725, 
    -26.5214827628313, -9.72000976773302, 195.44516453962, -26.5214827628313, 
    3592.14771316729, -309.097893612886, -21.0798988078409, -9.72000976773302, 
    -309.097893612886, 229.702678044674), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.476564132086619, -0.141454838735304
    ), logphi = c(0.50074388479383, -1.60135813196533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_137 = structure(list(
    par = c(-0.381252524549878, -0.291255876622937, 0.488063785961181, 
    -1.63501563558446), value = 68.2793754811822, counts = structure(c(357L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.615302434845, -6.93820232200437, 
    185.974481286877, -16.2122487825656, -6.93820232200437, 18.5541904542674, 
    -22.5193888709896, -7.80880517758931, 185.974481286877, -22.5193888709896, 
    3765.63699106924, -262.840352144522, -16.2122487825656, -7.80880517758931, 
    -262.840352144522, 225.230091274398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381252524549878, -0.291255876622937
    ), logphi = c(0.488063785961181, -1.63501563558446)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_138 = structure(list(
    par = c(-0.534209761016325, 0.0364115217175714, 0.520252017944174, 
    -1.57147463376494), value = 61.4821125258504, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.8640826968244, -2.81292306425485, 
    203.076264579494, -26.1793592173376, -2.81292306425485, 34.7491800596345, 
    -30.6066365922675, -11.8971576004157, 203.076264579494, -30.6066365922675, 
    3426.12011125354, -365.425693569676, -26.1793592173376, -11.8971576004157, 
    -365.425693569676, 237.600995845355), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.534209761016325, 0.0364115217175714
    ), logphi = c(0.520252017944174, -1.57147463376494)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_139 = structure(list(
    par = c(-0.183902138965863, 0.289055736805303, 0.486655997404885, 
    -1.68623800503727), value = 42.6292044017404, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.4816534572886, -2.02553403916284, 
    190.574349057115, -6.37352855470397, -2.02553403916284, 46.1761608434585, 
    -4.8584672498464, -11.9233481994385, 190.574349057115, -4.8584672498464, 
    4145.32210561447, -263.075729481699, -6.37352855470397, -11.9233481994385, 
    -263.075729481699, 232.029223706576), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183902138965863, 0.289055736805303
    ), logphi = c(0.486655997404885, -1.68623800503727)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_140 = structure(list(
    par = c(-0.189675546943193, -0.441603728105142, 0.491654992829681, 
    -1.58568078262569), value = 85.9578004268192, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.6535243963913, -9.44894452814538, 
    169.020180457835, -11.3485675470315, -9.44894452814538, 14.1172193117711, 
    -19.880580417464, -5.85079421355772, 169.020180457835, -19.880580417464, 
    3375.23858620159, -205.497776970986, -11.3485675470315, -5.85079421355772, 
    -205.497776970986, 207.275139707974), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189675546943193, -0.441603728105142
    ), logphi = c(0.491654992829681, -1.58568078262569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_141 = structure(list(
    par = c(-0.432431365030256, -0.111091322351278, 0.500293397344413, 
    -1.66991179225851), value = 53.4887640831488, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.3271748049254, -5.75700245519783, 
    208.622539977554, -20.3818358368579, -5.75700245519783, 28.1912863027145, 
    -27.4164894467077, -10.1865463193462, 208.622539977554, -27.4164894467077, 
    4330.9761322341, -344.67217569123, -20.3818358368579, -10.1865463193462, 
    -344.67217569123, 258.33716871837), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.432431365030256, -0.111091322351278
    ), logphi = c(0.500293397344413, -1.66991179225851)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_142 = structure(list(
    par = c(-0.270086280616985, 0.110097632206318, 0.51248428984031, 
    -1.57965618965433), value = 66.8682864816145, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.5399058704288, -4.30088617520141, 
    199.038868395007, -15.934237495685, -4.30088617520141, 42.2940492974533, 
    -22.9750687665842, -11.6292485596858, 199.038868395007, -22.9750687665842, 
    3555.32359312249, -306.295621058439, -15.934237495685, -11.6292485596858, 
    -306.295621058439, 231.638411328561), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270086280616985, 0.110097632206318
    ), logphi = c(0.51248428984031, -1.57965618965433)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_143 = structure(list(
    par = c(-0.491292768289932, -0.124818303334407, 0.49507298721812, 
    -1.59496125881088), value = 59.2818602538751, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(65.2675494752231, -3.56898298470298, 
    186.19702831657, -19.4525542998036, -3.56898298470298, 25.5854343098605, 
    -23.449543654408, -9.68088514063936, 186.19702831657, -23.449543654408, 
    3355.17418961295, -281.915629379625, -19.4525542998036, -9.68088514063936, 
    -281.915629379625, 213.641225933259), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.491292768289932, -0.124818303334407
    ), logphi = c(0.49507298721812, -1.59496125881088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_144 = structure(list(
    par = c(-0.356727205259144, -0.0185276686875855, 0.49938228406231, 
    -1.56395873428682), value = 64.7233631333165, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.2799275457173, -4.54431835805735, 
    180.652630021427, -15.5190310433539, -4.54431835805735, 29.3583631858496, 
    -20.6936105442423, -10.0027531484415, 180.652630021427, -20.6936105442423, 
    3127.65070300713, -255.311949398873, -15.5190310433539, -10.0027531484415, 
    -255.311949398873, 202.678836121351), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356727205259144, -0.0185276686875855
    ), logphi = c(0.49938228406231, -1.56395873428682)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_145 = structure(list(
    par = c(-0.325226969978844, -0.0262328281117352, 0.474547161212702, 
    -1.73190533091298), value = 42.5730382173999, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.4002628435587, -5.34206582614161, 
    218.465188581263, -12.7230861410865, -5.34206582614161, 32.6432182404801, 
    -14.7896120878954, -11.1904940940377, 218.465188581263, -14.7896120878954, 
    5062.44383645615, -303.604662129864, -12.7230861410865, -11.1904940940377, 
    -303.604662129864, 268.024003078793), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325226969978844, -0.0262328281117352
    ), logphi = c(0.474547161212702, -1.73190533091298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_146 = structure(list(
    par = c(-0.229730742074916, 0.20812881754108, 0.479890148481741, 
    -1.57349745219315), value = 56.5262923154131, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.2286439499517, 0.294570133618777, 
    185.095086800757, -6.99219006072838, 0.294570133618777, 47.2494726011519, 
    -8.85437279407597, -11.8943411173689, 185.095086800757, -8.85437279407597, 
    3323.47148808942, -213.806860458021, -6.99219006072838, -11.8943411173689, 
    -213.806860458021, 203.433522122154), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.229730742074916, 0.20812881754108
    ), logphi = c(0.479890148481741, -1.57349745219315)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_147 = structure(list(
    par = c(-0.431653777988154, -0.112295630060772, 0.499692549249911, 
    -1.76065876996014), value = 47.4077797407092, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(59.9538960042167, -8.37071251602595, 
    216.907160048407, -20.1854973624904, -8.37071251602595, 24.2507650600743, 
    -29.2643977921614, -9.91159252983209, 216.907160048407, -29.2643977921614, 
    5269.24971507547, -385.343675709748, -20.1854973624904, -9.91159252983209, 
    -385.343675709748, 283.304941143925), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.431653777988154, -0.112295630060772
    ), logphi = c(0.499692549249911, -1.76065876996014)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_148 = structure(list(
    par = c(-0.346142218460643, 0.117546243176349, 0.492987487833548, 
    -1.57348409114104), value = 57.9164462199459, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.9241025925853, -1.47853329401926, 
    189.546581552236, -13.676223777459, -1.47853329401926, 38.442463099031, 
    -15.9609474614797, -11.9404293208447, 189.546581552236, -15.9609474614797, 
    3284.1325131443, -257.811012755127, -13.676223777459, -11.9404293208447, 
    -257.811012755127, 208.810491795219), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.346142218460643, 0.117546243176349
    ), logphi = c(0.492987487833548, -1.57348409114104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_149 = structure(list(
    par = c(-0.401060051925177, -0.0103473922731852, 0.499335629565713, 
    -1.58176211960879), value = 57.8294517096794, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.4701213290571, -2.79706438988114, 
    206.968890989145, -18.9490304176587, -2.79706438988114, 36.986327277333, 
    -23.7691431728138, -11.6708395925258, 206.968890989145, -23.7691431728138, 
    3650.03022020538, -304.832057510751, -18.9490304176587, -11.6708395925258, 
    -304.832057510751, 234.655574622877), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.401060051925177, -0.0103473922731852
    ), logphi = c(0.499335629565713, -1.58176211960879)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_150 = structure(list(
    par = c(-0.355760193124197, -0.297850797079864, 0.489070732795464, 
    -1.76764466799954), value = 51.6205427048894, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(57.0026569786108, -8.82751649733393, 
    197.159374977218, -15.9892661937278, -8.82751649733393, 16.8147528682994, 
    -24.4405696445682, -7.3795494213158, 197.159374977218, -24.4405696445682, 
    5061.603757051, -319.059349901174, -15.9892661937278, -7.3795494213158, 
    -319.059349901174, 263.422035184036), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355760193124197, -0.297850797079864
    ), logphi = c(0.489070732795464, -1.76764466799954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_151 = structure(list(
    par = c(-0.221524688909704, 0.284715466997063, 0.478054333365072, 
    -1.63526187385458), value = 39.34924380684, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.1421080627219, 2.14235266149387, 
    200.863099829363, -6.24970859064433, 2.14235266149387, 54.5856151283886, 
    -3.59012725859031, -13.0958226645106, 200.863099829363, -3.59012725859031, 
    3992.76361583567, -250.009865322198, -6.24970859064433, -13.0958226645106, 
    -250.009865322198, 231.717064879788), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221524688909704, 0.284715466997063
    ), logphi = c(0.478054333365072, -1.63526187385458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_152 = structure(list(
    par = c(-0.381595739133199, 0.0192660044310613, 0.460239776924592, 
    -1.58297941295024), value = 47.1343324320295, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.7159921919032, 2.27534709118515, 
    196.05869210082, -9.71915599645712, 2.27534709118515, 42.5965206591883, 
    -9.75480995712985, -11.6809799903805, 196.05869210082, -9.75480995712985, 
    3443.39853321252, -196.346852148643, -9.71915599645712, -11.6809799903805, 
    -196.346852148643, 205.075973674695), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381595739133199, 0.0192660044310613
    ), logphi = c(0.460239776924592, -1.58297941295024)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_153 = structure(list(
    par = c(-0.329032555903254, -0.0414360607213191, 0.512559997615595, 
    -1.52314227764421), value = 69.2816633349141, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.6977616222985, -4.8188513837033, 
    159.187886595191, -15.4080068011098, -4.8188513837033, 26.5486590080855, 
    -21.5028139010087, -8.33982669412592, 159.187886595191, -21.5028139010087, 
    2598.89446729744, -236.851861007636, -15.4080068011098, -8.33982669412592, 
    -236.851861007636, 177.708064754256), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329032555903254, -0.0414360607213191
    ), logphi = c(0.512559997615595, -1.52314227764421)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_154 = structure(list(
    par = c(-0.407764193776958, 0.182590373829368, 0.477871824564537, 
    -1.50099020405709), value = 43.0953829670184, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.2912399984449, 5.12413157238711, 
    151.329648266696, -9.42330116160406, 5.12413157238711, 40.9604665811969, 
    -8.05230561873316, -10.7755513649721, 151.329648266696, -8.05230561873316, 
    2267.7320441673, -167.420773679261, -9.42330116160406, -10.7755513649721, 
    -167.420773679261, 147.38941169945), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407764193776958, 0.182590373829368
    ), logphi = c(0.477871824564537, -1.50099020405709)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_155 = structure(list(
    par = c(-0.37158175839698, -0.235860010469623, 0.533557669855837, 
    -1.5560093948305), value = 81.7459586703683, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.657001764497, -8.53616789697753, 
    175.606454963173, -22.3986139111787, -8.53616789697753, 19.4960325821114, 
    -31.1410804840762, -6.6441864525757, 175.606454963173, -31.1410804840762, 
    3137.66442223695, -322.840260103874, -22.3986139111787, -6.6441864525757, 
    -322.840260103874, 218.969902874733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37158175839698, -0.235860010469623
    ), logphi = c(0.533557669855837, -1.5560093948305)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_156 = structure(list(
    par = c(-0.140912982685252, 0.166761165973663, 0.498915679534626, 
    -1.5778028972657), value = 60.3660695827047, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.403043632861, -4.51047507787905, 
    174.679728793592, -7.96680158998697, -4.51047507787905, 43.0928769112882, 
    -15.0272652490457, -10.3272186233738, 174.679728793592, -15.0272652490457, 
    3242.31420253263, -230.057946659201, -7.96680158998697, -10.3272186233738, 
    -230.057946659201, 203.329490135573), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.140912982685252, 0.166761165973663
    ), logphi = c(0.498915679534626, -1.5778028972657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_157 = structure(list(
    par = c(-0.21569261898768, -0.190406687293081, 0.500542653448897, 
    -1.68284092339297), value = 73.5412977075679, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.3032672474442, -10.7767705550543, 
    205.014429663919, -14.3103777965337, -10.7767705550543, 23.6184458550781, 
    -25.1864567886173, -8.5311659017151, 205.014429663919, -25.1864567886173, 
    4635.13733138399, -305.293706501786, -14.3103777965337, -8.5311659017151, 
    -305.293706501786, 265.98358568819), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21569261898768, -0.190406687293081
    ), logphi = c(0.500542653448897, -1.68284092339297)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_158 = structure(list(
    par = c(-0.57678865412607, 0.333890838201062, 0.543095483087071, 
    -1.52113135105236), value = 32.7791668606071, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.8694952585486, 5.67990311495237, 
    159.708314761531, -23.576001318304, 5.67990311495237, 49.0521863945048, 
    -20.7032655517025, -12.6294700173446, 159.708314761531, -20.7032655517025, 
    2332.35774734197, -318.192309292087, -23.576001318304, -12.6294700173446, 
    -318.192309292087, 182.996289417758), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.57678865412607, 0.333890838201062
    ), logphi = c(0.543095483087071, -1.52113135105236)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_159 = structure(list(
    par = c(-0.172005332272103, 0.0777405274587281, 0.503938203908559, 
    -1.57006644119925), value = 79.652027460517, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.4118981109007, -7.49082835937998, 
    185.45171138129, -10.9708143920528, -7.49082835937998, 35.7898275780144, 
    -19.7042650178503, -10.2867038176413, 185.45171138129, -19.7042650178503, 
    3383.64764652965, -253.686301855183, -10.9708143920528, -10.2867038176413, 
    -253.686301855183, 215.873775193387), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.172005332272103, 0.0777405274587281
    ), logphi = c(0.503938203908559, -1.57006644119925)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_160 = structure(list(
    par = c(-0.370280906604735, -0.304589882535178, 0.489241924399237, 
    -1.64226954291521), value = 70.9442375538124, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.4950402914901, -6.99240873913709, 
    187.59829193371, -16.2929667659739, -6.99240873913709, 18.4155166778055, 
    -23.0114799215642, -7.6799053960741, 187.59829193371, -23.0114799215642, 
    3866.4462813216, -268.354269513438, -16.2929667659739, -7.6799053960741, 
    -268.354269513438, 230.028737274068), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370280906604735, -0.304589882535178
    ), logphi = c(0.489241924399237, -1.64226954291521)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_161 = structure(list(
    par = c(-0.123537419647748, -0.0961592966209823, 0.487867287433725, 
    -1.61461076809563), value = 82.471540152018, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.0764126545964, -10.4760068673215, 
    187.700917024358, -8.1944032253034, -10.4760068673215, 26.7650715564116, 
    -18.4289401197191, -8.79172253931415, 187.700917024358, -18.4289401197191, 
    3856.39748232691, -224.349244547284, -8.1944032253034, -8.79172253931415, 
    -224.349244547284, 229.4288404876), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.123537419647748, -0.0961592966209823
    ), logphi = c(0.487867287433725, -1.61461076809563)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_162 = structure(list(
    par = c(-0.186279464146607, -0.22822390406254, 0.508846841971017, 
    -1.52635685335003), value = 92.0160653331488, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.7729181343243, -10.2325273090287, 
    176.567494825974, -13.7501313908217, -10.2325273090287, 21.7620800313512, 
    -23.7979290247381, -7.35406547036632, 176.567494825974, -23.7979290247381, 
    3095.48013794014, -238.536653528243, -13.7501313908217, -7.35406547036632, 
    -238.536653528243, 204.884101371761), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186279464146607, -0.22822390406254
    ), logphi = c(0.508846841971017, -1.52635685335003)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_163 = structure(list(
    par = c(-0.0127370193346764, 0.254929293599778, 0.50037873153408, 
    -1.5889985978059), value = 64.7516577462336, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.9703792321752, -6.78165768874806, 
    173.746146028719, -4.13044702263221, -6.78165768874806, 50.1730187956184, 
    -13.2307874736171, -10.2682163802825, 173.746146028719, -13.2307874736171, 
    3439.70100906432, -225.633250359181, -4.13044702263221, -10.2682163802825, 
    -225.633250359181, 211.905257401668), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0127370193346764, 0.254929293599778
    ), logphi = c(0.50037873153408, -1.5889985978059)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_164 = structure(list(
    par = c(-0.458585773436594, -0.257256398323996, 0.479910450426265, 
    -1.64611868086039), value = 65.0538188786978, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(71.0217609984909, -5.0552815764604, 
    211.947506986832, -19.0809132458725, -5.0552815764604, 24.3668430570665, 
    -23.8978916797805, -9.59460841976068, 211.947506986832, -23.8978916797805, 
    4264.92227476061, -297.756054710163, -19.0809132458725, -9.59460841976068, 
    -297.756054710163, 251.087997195754), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.458585773436594, -0.257256398323996
    ), logphi = c(0.479910450426265, -1.64611868086039)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_165 = structure(list(
    par = c(-0.0779411753656909, 0.0201908706401941, 0.472561344394869, 
    -1.61546537410555), value = 70.3512923670643, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.1188995945954, -8.11633992725547, 
    174.496894803866, -3.21512675860447, -8.11633992725547, 32.5138810488568, 
    -11.5900637140953, -8.88598147241737, 174.496894803866, -11.5900637140953, 
    3649.98807938122, -175.799916883435, -3.21512675860447, -8.88598147241737, 
    -175.799916883435, 211.130624958145), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0779411753656909, 0.0201908706401941
    ), logphi = c(0.472561344394869, -1.61546537410555)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_166 = structure(list(
    par = c(-0.403942389413767, 0.00573886943149586, 0.526878809193341, 
    -1.57936694825677), value = 56.9339879523189, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(60.886420055084, -4.48548086495748, 
    171.130190858904, -20.0360764699425, -4.48548086495748, 29.6697179233973, 
    -27.0175315666421, -9.00507756540492, 171.130190858904, -27.0175315666421, 
    3018.19912272094, -307.09604494028, -20.0360764699425, -9.00507756540492, 
    -307.09604494028, 206.104202964852), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403942389413767, 0.00573886943149586
    ), logphi = c(0.526878809193341, -1.57936694825677)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_167 = structure(list(
    par = c(-0.480760848635238, 0.0450256733618853, 0.508434652886556, 
    -1.54884587202985), value = 61.6303247471677, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.578638530274, -0.918563710428089, 
    188.01637861543, -20.7918834735921, -0.918563710428089, 36.2471981638635, 
    -23.4881802683162, -11.460795139584, 188.01637861543, -23.4881802683162, 
    3058.09087952724, -297.32213526934, -20.7918834735921, -11.460795139584, 
    -297.32213526934, 208.372101297982), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.480760848635238, 0.0450256733618853
    ), logphi = c(0.508434652886556, -1.54884587202985)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_168 = structure(list(
    par = c(-0.259435088829176, -0.204915874882762, 0.500781117149558, 
    -1.68441944558031), value = 75.9476593124893, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.7026909852243, -10.3469016963231, 
    218.338855201949, -16.7028174189454, -10.3469016963231, 25.3289448792771, 
    -27.7101915742151, -9.05510819748656, 218.338855201949, -27.7101915742151, 
    4904.79359305596, -334.066777845976, -16.7028174189454, -9.05510819748656, 
    -334.066777845976, 282.37518658969), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259435088829176, -0.204915874882762
    ), logphi = c(0.500781117149558, -1.68441944558031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_169 = structure(list(
    par = c(-0.370888840738116, -0.205505789298487, 0.506233165057427, 
    -1.57578637626297), value = 84.6468832475346, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.5143596567743, -7.76312030126292, 
    201.90410640808, -20.3016357183117, -7.76312030126292, 24.1187250473729, 
    -28.3049898115451, -9.00601869879836, 201.90410640808, -28.3049898115451, 
    3669.52289040512, -307.379869159519, -20.3016357183117, -9.00601869879836, 
    -307.379869159519, 238.530330072706), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370888840738116, -0.205505789298487
    ), logphi = c(0.506233165057427, -1.57578637626297)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_170 = structure(list(
    par = c(-0.322562383829679, 0.289075190626232, 0.520842034478794, 
    -1.55256470079705), value = 43.454099856426, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.6876168043495, 1.79895527629981, 
    172.304189890227, -15.2402848510036, 1.79895527629981, 50.0384299595424, 
    -16.7801244241872, -12.0914770462832, 172.304189890227, -16.7801244241872, 
    2824.52885724993, -282.833425004014, -15.2402848510036, -12.0914770462832, 
    -282.833425004014, 194.207332564034), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.322562383829679, 0.289075190626232
    ), logphi = c(0.520842034478794, -1.55256470079705)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_171 = structure(list(
    par = c(-0.503683686755165, -0.00272529692750905, 0.501287405687435, 
    -1.56361254380852), value = 62.3623135533826, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.8569886122536, -1.48411992739739, 
    184.135915294092, -19.9551554072031, -1.48411992739739, 31.3348567466676, 
    -22.344106875849, -10.9187623991147, 184.135915294092, -22.344106875849, 
    3076.62375668016, -283.448977024037, -19.9551554072031, -10.9187623991147, 
    -283.448977024037, 204.382761570088), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.503683686755165, -0.00272529692750905
    ), logphi = c(0.501287405687435, -1.56361254380852)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_172 = structure(list(
    par = c(-0.236927253425848, 0.0818615658604445, 0.474612516804139, 
    -1.56538893052751), value = 54.9768239544612, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.8699293524693, -2.03972309620326, 
    164.34217370076, -6.54066069039061, -2.03972309620326, 34.9315900702862, 
    -10.5164172374828, -9.70064176719632, 164.34217370076, -10.5164172374828, 
    2939.6626253444, -174.27076177956, -6.54066069039061, -9.70064176719632, 
    -174.27076177956, 179.086586280519), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236927253425848, 0.0818615658604445
    ), logphi = c(0.474612516804139, -1.56538893052751)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_173 = structure(list(
    par = c(-0.169476322494889, 0.0188377942114098, 0.476878235893655, 
    -1.62010486269141), value = 64.5036989721301, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.0226686180995, -5.8218069760585, 
    186.322374325698, -6.68263072967079, -5.8218069760585, 34.4356093364695, 
    -13.2246917239343, -9.85848562429226, 186.322374325698, -13.2246917239343, 
    3766.71851562094, -209.556948499667, -6.68263072967079, -9.85848562429226, 
    -209.556948499667, 219.970680902293), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.169476322494889, 0.0188377942114098
    ), logphi = c(0.476878235893655, -1.62010486269141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_174 = structure(list(
    par = c(-0.330418814542413, -0.0270390105928508, 0.508282352042568, 
    -1.60283971185804), value = 66.850151828689, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.0541869644935, -6.26732191122414, 
    205.345280271274, -18.3999504752563, -6.26732191122414, 33.5165983287311, 
    -26.2449357286698, -10.7343484962996, 205.345280271274, -26.2449357286698, 
    3834.23737494937, -320.032349854671, -18.3999504752563, -10.7343484962996, 
    -320.032349854671, 244.277050203578), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330418814542413, -0.0270390105928508
    ), logphi = c(0.508282352042568, -1.60283971185804)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_175 = structure(list(
    par = c(-0.270356589932437, -0.316409961526179, 0.511117785107237, 
    -1.59682646291398), value = 78.6248208713484, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.3616789573496, -9.04670386248085, 
    180.169088316973, -16.6866005688604, -9.04670386248085, 18.2641842307874, 
    -25.8956806256094, -6.72636547527361, 180.169088316973, -25.8956806256094, 
    3543.29476718007, -276.835708193701, -16.6866005688604, -6.72636547527361, 
    -276.835708193701, 225.077572956423), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270356589932437, -0.316409961526179
    ), logphi = c(0.511117785107237, -1.59682646291398)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_176 = structure(list(
    par = c(-0.271737068063411, -0.0648658432035538, 0.472773698730389, 
    -1.50378002054091), value = 73.136278869124, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.4914839674971, -3.73878297921237, 
    163.238745944483, -7.8682892201698, -3.73878297921237, 28.2055873199738, 
    -14.0761777558396, -8.94601903489445, 163.238745944483, -14.0761777558396, 
    2632.91653423892, -151.601530973267, -7.8682892201698, -8.94601903489445, 
    -151.601530973267, 166.251851339894), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271737068063411, -0.0648658432035538
    ), logphi = c(0.472773698730389, -1.50378002054091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_177 = structure(list(
    par = c(-0.610908647405391, -0.354959746144916, 0.530228288244125, 
    -1.55091800720102), value = 65.0463992382082, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(47.0271565689018, -4.89478068388394, 
    160.985735419672, -26.114516515463, -4.89478068388394, 16.0616804585345, 
    -31.7188826990389, -5.3605620866648, 160.985735419672, -31.7188826990389, 
    2839.5186778063, -324.720288539027, -26.114516515463, -5.3605620866648, 
    -324.720288539027, 205.263055661931), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.610908647405391, -0.354959746144916
    ), logphi = c(0.530228288244125, -1.55091800720102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_178 = structure(list(
    par = c(-0.206015006237557, 0.0276545906119004, 0.493895087210556, 
    -1.55596414178019), value = 73.6907224144604, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.6831379252299, -5.56959357567166, 
    178.877020921675, -10.1377100545363, -5.56959357567166, 34.6903195520554, 
    -17.7496454654147, -9.83822040012683, 178.877020921675, -17.7496454654147, 
    3178.73078850539, -222.718427906443, -10.1377100545363, -9.83822040012683, 
    -222.718427906443, 201.629570543815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206015006237557, 0.0276545906119004
    ), logphi = c(0.493895087210556, -1.55596414178019)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_179 = structure(list(
    par = c(0.00510544871343402, 0.0330404877631094, 0.475618761766977, 
    -1.70236654373271), value = 62.8751371674172, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.9613465888177, -12.2524859147433, 
    186.765057701876, -1.96641595273661, -12.2524859147433, 31.5280665681428, 
    -10.9126733072173, -8.72812598373685, 186.765057701876, -10.9126733072173, 
    4680.69526950288, -209.861070262107, -1.96641595273661, -8.72812598373685, 
    -209.861070262107, 250.252865095391), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(0.00510544871343402, 0.0330404877631094
    ), logphi = c(0.475618761766977, -1.70236654373271)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_180 = structure(list(
    par = c(-0.105998318567692, -0.170604279185104, 0.459516293661306, 
    -1.61610479370322), value = 83.6583465078164, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.9778358448111, -9.15939143908417, 
    194.37202578132, -3.56877868590288, -9.15939143908417, 28.2429604929746, 
    -13.4218662068974, -8.65985722420248, 194.37202578132, -13.4218662068974, 
    4115.64118844154, -162.954822226169, -3.56877868590288, -8.65985722420248, 
    -162.954822226169, 233.530224267753), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.105998318567692, -0.170604279185104
    ), logphi = c(0.459516293661306, -1.61610479370322)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_181 = structure(list(
    par = c(-0.406361299403189, 0.0354489923924522, 0.50541403499245, 
    -1.73051326453812), value = 45.6378939605117, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.5620749182285, -6.76758970641345, 
    212.730703074371, -19.1615021361002, -6.76758970641345, 30.6537148500041, 
    -25.8312966145979, -11.4166498299539, 212.730703074371, -25.8312966145979, 
    4795.74481859402, -373.785986603536, -19.1615021361002, -11.4166498299539, 
    -373.785986603536, 269.232275559972), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.406361299403189, 0.0354489923924522
    ), logphi = c(0.50541403499245, -1.73051326453812)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_182 = structure(list(
    par = c(-0.188746887430929, 0.089424923291996, 0.505957589583699, 
    -1.68536449790642), value = 55.9154134388022, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.9314771783914, -9.02477438025073, 
    219.159543338066, -13.1871634794223, -9.02477438025073, 39.2595803671014, 
    -22.259764650201, -11.6878886728955, 219.159543338066, -22.259764650201, 
    4802.49624920859, -337.030138789274, -13.1871634794223, -11.6878886728955, 
    -337.030138789274, 276.921933862084), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188746887430929, 0.089424923291996
    ), logphi = c(0.505957589583699, -1.68536449790642)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_183 = structure(list(
    par = c(-0.159617267476012, 0.197026701726592, 0.505506067055031, 
    -1.41275389767853), value = 76.7457396120353, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.49129551454, -1.78190981614534, 
    163.432746745684, -9.14198280099754, -1.78190981614534, 50.1245777435599, 
    -17.1687036569779, -10.3709003660413, 163.432746745684, -17.1687036569779, 
    2263.37682930833, -191.916793538027, -9.14198280099754, -10.3709003660413, 
    -191.916793538027, 159.905451436515), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159617267476012, 0.197026701726592
    ), logphi = c(0.505506067055031, -1.41275389767853)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_184 = structure(list(
    par = c(-0.111226350728588, 0.263778178950596, 0.546152873469943, 
    -1.45773166873687), value = 75.5637622682707, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.8454614959546, -6.08553165548642, 
    159.997207155982, -14.5068209214116, -6.08553165548642, 46.722174435132, 
    -23.3982784649811, -9.48198813865986, 159.997207155982, -23.3982784649811, 
    2370.88635492455, -274.464522171058, -14.5068209214116, -9.48198813865986, 
    -274.464522171058, 180.342163730529), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.111226350728588, 0.263778178950596
    ), logphi = c(0.546152873469943, -1.45773166873687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_185 = structure(list(
    par = c(-0.440661606048892, 0.0593098417941026, 0.525717027519844, 
    -1.63080087568267), value = 51.6008674949278, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.8353418917225, -4.80128539592783, 
    199.417504443744, -23.1130331798113, -4.80128539592783, 34.5395586300867, 
    -30.9802867910491, -11.0795107808315, 199.417504443744, -30.9802867910491, 
    3780.59998527291, -374.179455436163, -23.1130331798113, -11.0795107808315, 
    -374.179455436163, 246.807778196967), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.440661606048892, 0.0593098417941026
    ), logphi = c(0.525717027519844, -1.63080087568267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_186 = structure(list(
    par = c(-0.390117361842783, 0.0393122310342265, 0.546066752624474, 
    -1.5143624902241), value = 72.0090070122632, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.1363667760832, -4.20152671765095, 
    191.245553505581, -26.2230138865505, -4.20152671765095, 39.8092521756155, 
    -34.3357260241817, -9.72962311074355, 191.245553505581, -34.3357260241817, 
    3015.62635223007, -367.687970960873, -26.2230138865505, -9.72962311074355, 
    -367.687970960873, 227.622344500134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.390117361842783, 0.0393122310342265
    ), logphi = c(0.546066752624474, -1.5143624902241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_187 = structure(list(
    par = c(-0.0886926339587586, 0.0219424587196855, 0.502492551387474, 
    -1.61306499567244), value = 74.0415231721875, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.1092597419838, -10.6294748221103, 
    194.708097698282, -9.18319683762547, -10.6294748221103, 34.8225346193942, 
    -20.8335361264744, -9.78027441789209, 194.708097698282, -20.8335361264744, 
    3963.487707491, -263.015872553396, -9.18319683762547, -9.78027441789209, 
    -263.015872553396, 241.249725089432), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0886926339587586, 0.0219424587196855
    ), logphi = c(0.502492551387474, -1.61306499567244)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_188 = structure(list(
    par = c(-0.308374882111172, 0.0798697314126006, 0.499554591828856, 
    -1.62821732330709), value = 55.5452693059842, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.9191441712659, -3.73376512108337, 
    191.142015324886, -14.0625873052969, -3.73376512108337, 36.4949945357296, 
    -18.7492610557172, -11.0684143574957, 191.142015324886, -18.7492610557172, 
    3684.97039817051, -283.910114864838, -14.0625873052969, -11.0684143574957, 
    -283.910114864838, 225.599935964382), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308374882111172, 0.0798697314126006
    ), logphi = c(0.499554591828856, -1.62821732330709)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_189 = structure(list(
    par = c(-0.38306246953871, 0.0100958099953444, 0.54454104534724, 
    -1.42647798049354), value = 79.4497048984184, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(68.7958754532758, -3.69247724663069, 
    153.011298618111, -21.7637839590168, -3.69247724663069, 31.0959281399903, 
    -26.3415955856772, -7.69193032468252, 153.011298618111, -26.3415955856772, 
    2075.31337728639, -269.464863752233, -21.7637839590168, -7.69193032468252, 
    -269.464863752233, 166.644590745335), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38306246953871, 0.0100958099953444
    ), logphi = c(0.54454104534724, -1.42647798049354)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_190 = structure(list(
    par = c(-0.0636948347734083, -0.00595040417269461, 0.507025433449178, 
    -1.44354229584031), value = 91.4701465123251, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.805659059143, -8.3686626197732, 
    156.881638499584, -8.04841912227516, -8.3686626197732, 35.3554978396176, 
    -19.7706755535876, -7.96467055153016, 156.881638499584, -19.7706755535876, 
    2420.40150644129, -182.963019344839, -8.04841912227516, -7.96467055153016, 
    -182.963019344839, 166.154006127073), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0636948347734083, -0.00595040417269461
    ), logphi = c(0.507025433449178, -1.44354229584031)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_191 = structure(list(
    par = c(-0.196635669044111, -0.107252395983277, 0.507237746179411, 
    -1.56033044534443), value = 76.9295629008577, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.328368956131, -7.7954186998852, 
    175.720407710855, -12.8656978599651, -7.7954186998852, 28.2922045968803, 
    -22.5023507276489, -8.24336858329389, 175.720407710855, -22.5023507276489, 
    3202.39159128732, -244.583053744307, -12.8656978599651, -8.24336858329389, 
    -244.583053744307, 207.0055240182), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196635669044111, -0.107252395983277
    ), logphi = c(0.507237746179411, -1.56033044534443)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_192 = structure(list(
    par = c(-0.198828410608733, -0.153553575284945, 0.525188224360981, 
    -1.51776365372462), value = 87.1431272201402, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.2428873513652, -9.56087018622043, 
    178.732337051457, -16.7952391088022, -9.56087018622043, 26.2760328979539, 
    -27.2082688752562, -7.59852465748168, 178.732337051457, -27.2082688752562, 
    3044.30731163308, -277.973256112674, -16.7952391088022, -7.59852465748168, 
    -277.973256112674, 210.229518152971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198828410608733, -0.153553575284945
    ), logphi = c(0.525188224360981, -1.51776365372462)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_193 = structure(list(
    par = c(-0.24497294543266, -0.0103722908691763, 0.491565824723278, 
    -1.59242521912459), value = 69.2731355660191, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.2175129974219, -6.30894589193076, 
    196.281215213645, -12.0715591638287, -6.30894589193076, 33.5151641870368, 
    -19.3097800718078, -10.4867819779031, 196.281215213645, -19.3097800718078, 
    3680.43101435589, -253.988693458496, -12.0715591638287, -10.4867819779031, 
    -253.988693458496, 226.980564260515), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24497294543266, -0.0103722908691763
    ), logphi = c(0.491565824723278, -1.59242521912459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_194 = structure(list(
    par = c(-0.400695869020018, -0.285817587787243, 0.488590440959797, 
    -1.64014598754153), value = 64.7815298578346, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.0835810803678, -5.85641641137613, 
    179.991956873238, -16.2175875377812, -5.85641641137613, 19.0814394898098, 
    -22.1355287735037, -7.60828479684506, 179.991956873238, -22.1355287735037, 
    3660.07070170582, -260.162101263006, -16.2175875377812, -7.60828479684506, 
    -260.162101263006, 218.682224879529), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400695869020018, -0.285817587787243
    ), logphi = c(0.488590440959797, -1.64014598754153)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_195 = structure(list(
    par = c(-0.266420232312857, -0.133342630836361, 0.502645010988891, 
    -1.59637490850984), value = 69.3550728608724, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.8842489269587, -7.99544303475841, 
    185.529628677017, -14.6985946187783, -7.99544303475841, 25.2339763804343, 
    -23.3134090024123, -8.6661356029083, 185.529628677017, -23.3134090024123, 
    3538.55627664146, -266.108889160677, -14.6985946187783, -8.6661356029083, 
    -266.108889160677, 222.0680685312), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266420232312857, -0.133342630836361
    ), logphi = c(0.502645010988891, -1.59637490850984)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_196 = structure(list(
    par = c(-0.25046212072115, -0.0179263237952187, 0.468634968673598, 
    -1.443746296631), value = 70.9615479974513, counts = structure(c(239L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.7349470143638, -1.16983094500256, 
    151.769565185589, -5.5797325000384, -1.16983094500256, 33.8464802780436, 
    -12.5708080140896, -8.79034736911422, 151.769565185589, -12.5708080140896, 
    2214.76862318326, -116.567080770125, -5.5797325000384, -8.79034736911422, 
    -116.567080770125, 142.766531880056), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25046212072115, -0.0179263237952187
    ), logphi = c(0.468634968673598, -1.443746296631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_197 = structure(list(
    par = c(-0.291601274539858, 0.0588354322291869, 0.494814755082026, 
    -1.45977327868078), value = 73.7672197914441, counts = structure(c(303L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.1908722030528, -1.65501356264031, 
    176.913029562797, -11.6052941123712, -1.65501356264031, 41.9357880971916, 
    -18.2799494794494, -10.7310043837572, 176.913029562797, -18.2799494794494, 
    2593.95362283499, -205.482127142886, -11.6052941123712, -10.7310043837572, 
    -205.482127142886, 176.56010007272), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291601274539858, 0.0588354322291869
    ), logphi = c(0.494814755082026, -1.45977327868078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_198 = structure(list(
    par = c(-0.323620801610765, -0.0316194470268329, 0.492072069777068, 
    -1.5980895082566), value = 46.3759614138599, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.5877646537608, -3.93069117698985, 
    156.02290583594, -11.5720729132462, -3.93069117698985, 25.1418902283973, 
    -16.1003124201642, -8.41830709141789, 156.02290583594, -16.1003124201642, 
    2892.87992684528, -212.232059072726, -11.5720729132462, -8.41830709141789, 
    -212.232059072726, 179.21187627401), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323620801610765, -0.0316194470268329
    ), logphi = c(0.492072069777068, -1.5980895082566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_199 = structure(list(
    par = c(-0.25987904253052, -0.256966218747313, 0.481039286386459, 
    -1.67625501756781), value = 68.0375666114906, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.1993643568483, -9.18956097706314, 
    201.342327336818, -12.6597676235463, -9.18956097706314, 20.9256233887345, 
    -20.5247375610895, -8.34059186871627, 201.342327336818, -20.5247375610895, 
    4479.97540189959, -262.308233715203, -12.6597676235463, -8.34059186871627, 
    -262.308233715203, 252.232077151859), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25987904253052, -0.256966218747313
    ), logphi = c(0.481039286386459, -1.67625501756781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_180_200 = structure(list(
    par = c(-0.487422332537658, 0.00564144128080036, 0.526208345063595, 
    -1.63163227959694), value = 59.0092931902915, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(61.9181073062691, -4.8017760576613, 
    200.899412266864, -25.0712486575821, -4.8017760576613, 33.2169294345874, 
    -33.6928373236844, -10.5795434706124, 200.899412266864, -33.6928373236844, 
    3832.12946059075, -387.570507406565, -25.0712486575821, -10.5795434706124, 
    -387.570507406565, 251.796104151936), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.487422332537658, 0.00564144128080036
    ), logphi = c(0.526208345063595, -1.63163227959694)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_1 = structure(list(
    par = c(-0.121004005821708, 0.248498687731378, 0.47627621258226, 
    -1.61995782276749), value = 59.5514858606341, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.849661114846, -2.32447946402203, 
    190.607100027052, -3.22787243689504, -2.32447946402203, 50.8872318274456, 
    -5.90032012581787, -11.5698772420458, 190.607100027052, -5.90032012581787, 
    3871.63593018691, -216.06199855384, -3.22787243689504, -11.5698772420458, 
    -216.06199855384, 225.048751053336), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.121004005821708, 0.248498687731378
    ), logphi = c(0.47627621258226, -1.61995782276749)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_2 = structure(list(
    par = c(-0.0671930348154608, 0.144962068381645, 0.468172584450099, 
    -1.64753637084144), value = 62.5117902426039, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.447353975474, -5.90007406486848, 
    203.57658328507, -1.58965476160233, -5.90007406486848, 47.8102963690219, 
    -7.51919678876334, -10.9876058287384, 203.57658328507, -7.51919678876334, 
    4497.6976048865, -209.783307440148, -1.58965476160233, -10.9876058287384, 
    -209.783307440148, 251.271847565349), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0671930348154608, 0.144962068381645
    ), logphi = c(0.468172584450099, -1.64753637084144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_3 = structure(list(
    par = c(-0.271066873117516, 0.120762660856468, 0.508151787712562, 
    -1.55275336585656), value = 72.3831306096489, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.2149882950075, -4.78169361528558, 
    202.32218952998, -15.4500129809776, -4.78169361528558, 41.6781260881294, 
    -21.861413266322, -12.1636636905009, 202.32218952998, -21.861413266322, 
    3450.54995693062, -294.306378425091, -15.4500129809776, -12.1636636905009, 
    -294.306378425091, 227.925335753554), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271066873117516, 0.120762660856468
    ), logphi = c(0.508151787712562, -1.55275336585656)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_4 = structure(list(
    par = c(-0.398004414577522, -0.281329397430732, 0.493452599554359, 
    -1.65464370031889), value = 79.1216905037596, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.4563486076165, -8.18499024290986, 
    230.873766689399, -21.5204204714325, -8.18499024290986, 24.1424210969399, 
    -29.9916408934564, -9.55978857319906, 230.873766689399, -29.9916408934564, 
    4826.75362231433, -352.038581590719, -21.5204204714325, -9.55978857319906, 
    -352.038581590719, 286.984473500951), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.398004414577522, -0.281329397430732
    ), logphi = c(0.493452599554359, -1.65464370031889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_5 = structure(list(
    par = c(-0.260823807709751, -0.159683800583631, 0.515104385859279, 
    -1.62963621055577), value = 79.2838988390576, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.0100139589356, -10.8576826569617, 
    218.973938398648, -19.4664550559054, -10.8576826569617, 27.4571992271433, 
    -31.7026982585844, -9.39399296484567, 218.973938398648, -31.7026982585844, 
    4456.95749604624, -354.715183707555, -19.4664550559054, -9.39399296484567, 
    -354.715183707555, 277.166325204803), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260823807709751, -0.159683800583631
    ), logphi = c(0.515104385859279, -1.62963621055577)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_6 = structure(list(
    par = c(-0.333509014165774, 0.112052987318569, 0.513494364355079, 
    -1.63881744627325), value = 47.1945521331649, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(66.006544532371, -4.20303510217934, 
    179.186986377644, -15.7056515046605, -4.20303510217934, 33.7585413703323, 
    -21.1368679110535, -10.4789005916928, 179.186986377644, -21.1368679110535, 
    3474.65716889062, -298.614868937008, -15.7056515046605, -10.4789005916928, 
    -298.614868937008, 216.785155435772), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333509014165774, 0.112052987318569
    ), logphi = c(0.513494364355079, -1.63881744627325)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_7 = structure(list(
    par = c(-0.397097128592642, 0.00796780099051035, 0.483876283026349, 
    -1.62674006064932), value = 62.8000872903196, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.120365619839, -3.20219281135792, 
    233.080224411708, -17.5498315417855, -3.20219281135792, 39.2717438018053, 
    -20.0327031230074, -13.4417499833006, 233.080224411708, -20.0327031230074, 
    4420.44490233329, -319.436250503458, -17.5498315417855, -13.4417499833006, 
    -319.436250503458, 265.410651682174), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397097128592642, 0.00796780099051035
    ), logphi = c(0.483876283026349, -1.62674006064932)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_8 = structure(list(
    par = c(-0.297299590372894, -0.253186875505793, 0.493382962582009, 
    -1.64225867504731), value = 76.3427433121471, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.7902526795392, -9.97942738223401, 
    216.809606353507, -17.0083727848436, -9.97942738223401, 22.2213858762643, 
    -26.2795158185725, -9.06059221961186, 216.809606353507, -26.2795158185725, 
    4514.22854339967, -307.451452570717, -17.0083727848436, -9.06059221961186, 
    -307.451452570717, 268.417204360105), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.297299590372894, -0.253186875505793
    ), logphi = c(0.493382962582009, -1.64225867504731)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_9 = structure(list(
    par = c(-0.299070934867761, -0.272749340095999, 0.495966426308596, 
    -1.65072379552245), value = 82.9840818167713, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.8712636413134, -9.96683321830005, 
    229.001976567389, -18.5926928040203, -9.96683321830005, 24.3567533324551, 
    -28.8062721800486, -9.26399199130401, 229.001976567389, -28.8062721800486, 
    4855.18613901093, -334.76606351357, -18.5926928040203, -9.26399199130401, 
    -334.76606351357, 287.838106174831), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.299070934867761, -0.272749340095999
    ), logphi = c(0.495966426308596, -1.65072379552245)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_10 = structure(list(
    par = c(-0.401717296262053, -0.0798722201900617, 0.505930086336578, 
    -1.64818084708793), value = 61.4250252184659, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(69.6090210769995, -6.68046081031548, 
    209.050889418805, -20.4538973118673, -6.68046081031548, 28.2304247374299, 
    -28.1594137838681, -10.4159698937067, 209.050889418805, -28.1594137838681, 
    4190.31983182627, -345.790445427596, -20.4538973118673, -10.4159698937067, 
    -345.790445427596, 257.058220826778), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.401717296262053, -0.0798722201900617
    ), logphi = c(0.505930086336578, -1.64818084708793)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_11 = structure(list(
    par = c(-0.10069123765584, 0.262680034356174, 0.487736391668444, 
    -1.61967202364979), value = 65.4301699081197, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.52728161593, -3.80658368825948, 
    221.300776392042, -5.32300244593387, -3.80658368825948, 60.3943854784461, 
    -10.3846939367713, -13.5140025605551, 221.300776392042, -10.3846939367713, 
    4480.77941628355, -276.370152221261, -5.32300244593387, -13.5140025605551, 
    -276.370152221261, 265.404296296623), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.10069123765584, 0.262680034356174
    ), logphi = c(0.487736391668444, -1.61967202364979)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_12 = structure(list(
    par = c(-0.210273945420017, 0.15421462674845, 0.490843891734621, 
    -1.56530990371575), value = 64.1055532956602, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.6429216364447, -3.76752442576844, 
    200.627318093893, -9.73952953131629, -3.76752442576844, 44.9642093371949, 
    -15.2685493119975, -12.2737291565755, 200.627318093893, -15.2685493119975, 
    3573.45668058429, -249.690790733226, -9.73952953131629, -12.2737291565755, 
    -249.690790733226, 224.29779705746), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.210273945420017, 0.15421462674845
    ), logphi = c(0.490843891734621, -1.56530990371575)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_13 = structure(list(
    par = c(-0.0952980330957061, -0.0688091756150744, 0.467034596775313, 
    -1.61274393979005), value = 99.0682425324091, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.142895743745, -12.0015670823648, 
    227.216723118318, -4.44617846540041, -12.0015670823648, 35.0153910986251, 
    -15.7698922862437, -10.9235987011402, 227.216723118318, -15.7698922862437, 
    4745.14196613995, -211.847368664309, -4.44617846540041, -10.9235987011402, 
    -211.847368664309, 272.932889586741), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0952980330957061, -0.0688091756150744
    ), logphi = c(0.467034596775313, -1.61274393979005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_14 = structure(list(
    par = c(-0.168486198811918, -0.159019600665497, 0.502118740725443, 
    -1.51891793201835), value = 96.2812947014089, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.1717340272844, -9.83672349263998, 
    189.401978534676, -12.5959513894713, -9.83672349263998, 27.969770147962, 
    -23.6515347751265, -8.6071015577005, 189.401978534676, -23.6515347751265, 
    3267.07306662399, -236.43658272654, -12.5959513894713, -8.6071015577005, 
    -236.43658272654, 214.329539986124), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168486198811918, -0.159019600665497
    ), logphi = c(0.502118740725443, -1.51891793201835)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_15 = structure(list(
    par = c(-0.338723508304389, 0.126254216049833, 0.506787117281513, 
    -1.60434352422623), value = 72.0309959221182, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.9996218417273, -3.63426113381138, 
    232.784846733836, -19.3417966727338, -3.63426113381138, 46.6111927970303, 
    -24.2620743513555, -14.2445744728548, 232.784846733836, -24.2620743513555, 
    4245.63950547352, -361.931619881517, -19.3417966727338, -14.2445744728548, 
    -361.931619881517, 270.480605603751), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338723508304389, 0.126254216049833
    ), logphi = c(0.506787117281513, -1.60434352422623)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_16 = structure(list(
    par = c(-0.203588020625173, -0.0415641917483741, 0.523249102559634, 
    -1.52814362431548), value = 84.3393481028644, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.1118773194391, -9.34018924070301, 
    193.876937608195, -17.1852299182262, -9.34018924070301, 32.7056894349198, 
    -28.1678217426418, -9.35479070562906, 193.876937608195, -28.1678217426418, 
    3301.59781253769, -300.604098548263, -17.1852299182262, -9.35479070562906, 
    -300.604098548263, 226.231171883029), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203588020625173, -0.0415641917483741
    ), logphi = c(0.523249102559634, -1.52814362431548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_17 = structure(list(
    par = c(-0.312238892412951, -0.0968203074033444, 0.511557224664482, 
    -1.59494991946629), value = 95.4228779483716, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.9578748402664, -10.5168975110814, 
    262.12815260962, -24.296882598307, -10.5168975110814, 36.9617064279737, 
    -36.1955576053674, -12.5766419483142, 262.12815260962, -36.1955576053674, 
    4908.38232680346, -411.877464850718, -24.296882598307, -12.5766419483142, 
    -411.877464850718, 315.584251080026), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.312238892412951, -0.0968203074033444
    ), logphi = c(0.511557224664482, -1.59494991946629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_18 = structure(list(
    par = c(-0.321318274310595, -0.124010373390935, 0.500139600563515, 
    -1.68356587486791), value = 83.4960377148729, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.5009145780773, -11.9987653128817, 
    279.66361660603, -22.9617811413618, -11.9987653128817, 33.4432189994516, 
    -34.7712952937229, -12.8970764183833, 279.66361660603, -34.7712952937229, 
    6094.95485927525, -440.315707507466, -22.9617811413618, -12.8970764183833, 
    -440.315707507466, 353.5364464895), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.321318274310595, -0.124010373390935
    ), logphi = c(0.500139600563515, -1.68356587486791)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_19 = structure(list(
    par = c(-0.328301552800408, -0.00854330504010418, 0.481557913240277, 
    -1.62953589451215), value = 68.4826670934156, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.961414328689, -3.82155823075436, 
    238.961838125107, -15.3270090237356, -3.82155823075436, 42.8941082688539, 
    -19.7425505490401, -13.1845374991002, 238.961838125107, -19.7425505490401, 
    4652.54423933459, -310.321165830629, -15.3270090237356, -13.1845374991002, 
    -310.321165830629, 275.506966108452), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328301552800408, -0.00854330504010418
    ), logphi = c(0.481557913240277, -1.62953589451215)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_20 = structure(list(
    par = c(-0.282433049755592, -0.324761770294515, 0.50143519020351, 
    -1.63261866236158), value = 85.4854057616562, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.0181980976852, -10.2997413371497, 
    204.845778782214, -17.4493447424595, -10.2997413371497, 19.2093223319034, 
    -27.3054854034172, -7.74547827120387, 204.845778782214, -27.3054854034172, 
    4268.37925883206, -304.339540942777, -17.4493447424595, -7.74547827120387, 
    -304.339540942777, 259.029560663038), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282433049755592, -0.324761770294515
    ), logphi = c(0.50143519020351, -1.63261866236158)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_21 = structure(list(
    par = c(-0.245628805032584, 0.191208836961201, 0.503071345601617, 
    -1.69267220085425), value = 53.9525699942721, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.975216918172, -6.88494334077916, 
    236.369491069865, -14.4089058435881, -6.88494334077916, 45.3103415711809, 
    -18.6407093174523, -14.1293661375386, 236.369491069865, -18.6407093174523, 
    5079.64773211356, -369.972462217483, -14.4089058435881, -14.1293661375386, 
    -369.972462217483, 291.454376888822), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.245628805032584, 0.191208836961201
    ), logphi = c(0.503071345601617, -1.69267220085425)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_22 = structure(list(
    par = c(-0.296600145400091, 0.216972113440366, 0.498112797372971, 
    -1.54742190309495), value = 55.4718294878201, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.926675377977, 1.64047312267712, 
    210.283638201858, -13.7747819763945, 1.64047312267712, 57.017186183117, 
    -15.8948101951495, -14.1285682992986, 210.283638201858, -15.8948101951495, 
    3497.20176835966, -285.908646744382, -13.7747819763945, -14.1285682992986, 
    -285.908646744382, 228.199635559534), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296600145400091, 0.216972113440366
    ), logphi = c(0.498112797372971, -1.54742190309495)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_23 = structure(list(
    par = c(-0.0626983804372619, 0.0606534730972033, 0.480883766270285, 
    -1.44002907766752), value = 86.4218926853721, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.863134959108, -5.56994828926349, 
    154.552900450966, -2.89233891415108, -5.56994828926349, 40.4533519713368, 
    -14.6100089430945, -8.68828089295448, 154.552900450966, -14.6100089430945, 
    2390.23187987186, -128.408284528092, -2.89233891415108, -8.68828089295448, 
    -128.408284528092, 156.019528404272), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0626983804372619, 0.0606534730972033
    ), logphi = c(0.480883766270285, -1.44002907766752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_24 = structure(list(
    par = c(-0.168724635747526, -0.0763930604922072, 0.465249114931625, 
    -1.69499326594574), value = 62.7739848573179, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.4923754629341, -7.9807263002607, 
    200.55875408076, -6.23202561911285, -7.9807263002607, 29.4493943187035, 
    -11.7862213713238, -9.40213382794042, 200.55875408076, -11.7862213713238, 
    4662.57678058391, -222.343933966584, -6.23202561911285, -9.40213382794042, 
    -222.343933966584, 249.77129719872), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168724635747526, -0.0763930604922072
    ), logphi = c(0.465249114931625, -1.69499326594574)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_25 = structure(list(
    par = c(-0.503839502038097, -0.129509947476743, 0.526741634596011, 
    -1.68262268977025), value = 71.4263428464925, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.9556250346991, -9.62203126420036, 
    255.397616015784, -32.6271003370238, -9.62203126420036, 30.4096783665386, 
    -48.6211268047043, -10.9194022108738, 255.397616015784, -48.6211268047043, 
    5497.93027757772, -522.733211417048, -32.6271003370238, -10.9194022108738, 
    -522.733211417048, 341.6613270808), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.503839502038097, -0.129509947476743
    ), logphi = c(0.526741634596011, -1.68262268977025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_26 = structure(list(
    par = c(-0.196322183534037, -0.0819863610282102, 0.476683146080294, 
    -1.63446460259478), value = 69.445083825272, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.5904199315682, -7.88124713579919, 
    214.804306612137, -9.43451784429783, -7.88124713579919, 33.2093825434754, 
    -17.5164108995318, -10.5061716677568, 214.804306612137, -17.5164108995318, 
    4449.22058674635, -247.053522292262, -9.43451784429783, -10.5061716677568, 
    -247.053522292262, 257.103486724475), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196322183534037, -0.0819863610282102
    ), logphi = c(0.476683146080294, -1.63446460259478)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_27 = structure(list(
    par = c(-0.257765237404496, 0.0219072368769494, 0.504724707691462, 
    -1.68482916252004), value = 66.5454079276927, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.6177499533287, -8.64482881013373, 
    226.556481894846, -16.2181540588335, -8.64482881013373, 36.1973631655133, 
    -25.3576546569434, -11.6962990066583, 226.556481894846, -25.3576546569434, 
    4909.75965596618, -356.291921580265, -16.2181540588335, -11.6962990066583, 
    -356.291921580265, 284.746747617248), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257765237404496, 0.0219072368769494
    ), logphi = c(0.504724707691462, -1.68482916252004)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_28 = structure(list(
    par = c(-0.406087868520269, 0.0926031117441502, 0.516591288216528, 
    -1.54361849761849), value = 76.4146842898509, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.9151232347845, -2.75031171881324, 
    235.312056275916, -24.9503465568068, -2.75031171881324, 47.6290451523198, 
    -30.2059604422311, -14.3282532931721, 235.312056275916, -30.2059604422311, 
    3829.90041234521, -381.125171323049, -24.9503465568068, -14.3282532931721, 
    -381.125171323049, 264.341566929005), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.406087868520269, 0.0926031117441502
    ), logphi = c(0.516591288216528, -1.54361849761849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_29 = structure(list(
    par = c(-0.255432029491079, -0.0224084343241151, 0.504531877493101, 
    -1.59667168707631), value = 74.5668151419138, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.7025771564586, -8.0595011411333, 
    217.972925426579, -16.4298293832132, -8.0595011411333, 35.4197546741375, 
    -25.865047028617, -11.2669199214821, 217.972925426579, -25.865047028617, 
    4104.18844293048, -317.079811503973, -16.4298293832132, -11.2669199214821, 
    -317.079811503973, 258.612040280326), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255432029491079, -0.0224084343241151
    ), logphi = c(0.504531877493101, -1.59667168707631)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_30 = structure(list(
    par = c(-0.482447094157843, -0.0519948142484664, 0.514936397064139, 
    -1.3930193731018), value = 102.044840602262, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.6530734766118, -0.30604924461386, 
    191.453645005168, -24.2872024323049, -0.30604924461386, 38.6543963770691, 
    -27.117195532611, -10.7365183623642, 191.453645005168, -27.117195532611, 
    2402.95490991471, -264.80384592098, -24.2872024323049, -10.7365183623642, 
    -264.80384592098, 182.60036365092), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.482447094157843, -0.0519948142484664
    ), logphi = c(0.514936397064139, -1.3930193731018)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_31 = structure(list(
    par = c(-0.216988329839706, -0.293550710595831, 0.482519834119279, 
    -1.71732035632814), value = 83.0565726958518, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.9054771973672, -12.7373293281607, 
    251.572690626034, -14.8095725833741, -12.7373293281607, 23.9856729038479, 
    -25.8140636155701, -9.6008305447981, 251.572690626034, -25.8140636155701, 
    6111.87639290733, -338.790699759173, -14.8095725833741, -9.6008305447981, 
    -338.790699759173, 329.680467224591), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216988329839706, -0.293550710595831
    ), logphi = c(0.482519834119279, -1.71732035632814)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_32 = structure(list(
    par = c(-0.324798522372041, 0.126847576622165, 0.523614102972877, 
    -1.57779966076213), value = 74.5084548547791, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.4544256319609, -6.07049693002182, 
    220.615820715864, -21.6015513387902, -6.07049693002182, 42.5750736603447, 
    -29.271649697904, -13.0473083341798, 220.615820715864, -29.271649697904, 
    3859.88822676708, -374.218884948263, -21.6015513387902, -13.0473083341798, 
    -374.218884948263, 259.8506115703), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.324798522372041, 0.126847576622165
    ), logphi = c(0.523614102972877, -1.57779966076213)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_33 = structure(list(
    par = c(-0.349959284868437, 0.0205906731443951, 0.522668559170868, 
    -1.52065959094609), value = 86.8606199855008, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.7674934142763, -5.410328970612, 
    225.697730375174, -24.3434534965559, -5.410328970612, 42.9152877003958, 
    -32.582943131132, -12.3036197141602, 225.697730375174, -32.582943131132, 
    3620.1525473345, -365.8689756314, -24.3434534965559, -12.3036197141602, 
    -365.8689756314, 255.058956970089), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349959284868437, 0.0205906731443951
    ), logphi = c(0.522668559170868, -1.52065959094609)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_34 = structure(list(
    par = c(-0.443793360117984, -0.152405588511452, 0.508956800231193, 
    -1.60264712640293), value = 85.6606098328474, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.9885942634451, -7.57217910773988, 
    231.33652252838, -25.6247589103253, -7.57217910773988, 28.5842961638139, 
    -34.0396726201675, -10.9136104775587, 231.33652252838, -34.0396726201675, 
    4313.28433644751, -383.376076168673, -25.6247589103253, -10.9136104775587, 
    -383.376076168673, 278.751645272024), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443793360117984, -0.152405588511452
    ), logphi = c(0.508956800231193, -1.60264712640293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_35 = structure(list(
    par = c(-0.203742333390156, 0.113763152628879, 0.485047882617914, 
    -1.52668809001422), value = 76.3124179228851, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.598870432303, -2.07734890977918, 
    215.548465590132, -9.37867240935475, -2.07734890977918, 53.6133231676672, 
    -16.9282295914286, -12.981390755229, 215.548465590132, -16.9282295914286, 
    3629.34168395768, -238.383164203881, -9.37867240935475, -12.981390755229, 
    -238.383164203881, 230.892682679951), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203742333390156, 0.113763152628879
    ), logphi = c(0.485047882617914, -1.52668809001422)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_36 = structure(list(
    par = c(-0.366776404821572, -0.0412058450014349, 0.524940783785702, 
    -1.64786179088503), value = 61.2918959555218, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(63.7417099778048, -8.35833778900508, 
    197.627726205241, -21.206837534038, -8.35833778900508, 27.0539787994295, 
    -31.8227682640781, -9.50264329446782, 197.627726205241, -31.8227682640781, 
    3987.42570927446, -362.692089911576, -21.206837534038, -9.50264329446782, 
    -362.692089911576, 251.72764019743), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.366776404821572, -0.0412058450014349
    ), logphi = c(0.524940783785702, -1.64786179088503)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_37 = structure(list(
    par = c(-0.183580754037175, 0.180081947136546, 0.51014835990428, 
    -1.510713887634), value = 89.3366757895862, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.024274531625, -4.53157851865171, 
    195.009216561459, -12.4436726842703, -4.53157851865171, 48.6055419273157, 
    -20.4826406999814, -11.9880313604881, 195.009216561459, -20.4826406999814, 
    3163.04602876016, -269.043592435736, -12.4436726842703, -11.9880313604881, 
    -269.043592435736, 214.151712405908), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.183580754037175, 0.180081947136546
    ), logphi = c(0.51014835990428, -1.510713887634)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_38 = structure(list(
    par = c(-0.28789123592428, -0.0721349672519864, 0.481598352831777, 
    -1.68082248110975), value = 71.0190750330583, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.635367118035, -7.71961449785863, 
    235.500116016141, -14.3256156288629, -7.71961449785863, 33.7970131596421, 
    -20.5252254836807, -11.7033463773453, 235.500116016141, -20.5252254836807, 
    5100.90311743738, -317.578565955046, -14.3256156288629, -11.7033463773453, 
    -317.578565955046, 287.078040624777), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28789123592428, -0.0721349672519864
    ), logphi = c(0.481598352831777, -1.68082248110975)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_39 = structure(list(
    par = c(-0.36511449427821, -0.11178981029095, 0.498357558318618, 
    -1.64139628588274), value = 79.4859704202713, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.4964570023451, -9.19861634329777, 
    248.439083343044, -21.7896521590433, -9.19861634329777, 31.1495510416648, 
    -30.5062029362091, -12.1311593836992, 248.439083343044, -30.5062029362091, 
    4974.35605699437, -379.792287592551, -21.7896521590433, -12.1311593836992, 
    -379.792287592551, 301.491190668912), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36511449427821, -0.11178981029095
    ), logphi = c(0.498357558318618, -1.64139628588274)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_40 = structure(list(
    par = c(-0.00520401873804004, 0.320728546786861, 0.496148316452633, 
    -1.61257480534239), value = 53.9775939553518, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.219446655141, -6.65962025436784, 
    174.977126247811, -2.62722990651554, -6.65962025436784, 49.4234431602791, 
    -9.42360353484162, -10.6325182240852, 174.977126247811, -9.42360353484162, 
    3617.45401192515, -226.332573387111, -2.62722990651554, -10.6325182240852, 
    -226.332573387111, 216.885413585999), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.00520401873804004, 0.320728546786861
    ), logphi = c(0.496148316452633, -1.61257480534239)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_41 = structure(list(
    par = c(-0.569184688398098, 0.104745320838444, 0.500211838984449, 
    -1.57517970653331), value = 48.4465737850903, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.1510806011879, 2.54067067118058, 
    203.806121621852, -22.7625304010104, 2.54067067118058, 42.4703327261966, 
    -21.2243569386317, -13.8394551072452, 203.806121621852, -21.2243569386317, 
    3367.3063796904, -324.933918133041, -22.7625304010104, -13.8394551072452, 
    -324.933918133041, 223.924259419306), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.569184688398098, 0.104745320838444
    ), logphi = c(0.500211838984449, -1.57517970653331)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_42 = structure(list(
    par = c(-0.422165860182591, -0.0504711168946892, 0.497452431892876, 
    -1.61937688009849), value = 75.8819726522928, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.8847536348057, -5.95903959421662, 
    250.951007053857, -23.4429464676111, -5.95903959421662, 36.2333463215236, 
    -29.5735100444006, -13.5135719236956, 250.951007053857, -29.5735100444006, 
    4727.28562218805, -383.364856956447, -23.4429464676111, -13.5135719236956, 
    -383.364856956447, 293.989370995007), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.422165860182591, -0.0504711168946892
    ), logphi = c(0.497452431892876, -1.61937688009849)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_43 = structure(list(
    par = c(-0.355882615156144, -0.341295698201567, 0.512358447833051, 
    -1.63289175185645), value = 87.3080041572614, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.3536169477134, -10.2317218129144, 
    227.919412402855, -23.9111645736756, -10.2317218129144, 21.3936660280467, 
    -35.0650279763443, -8.19197005696992, 227.919412402855, -35.0650279763443, 
    4721.59463472011, -383.188599100137, -23.9111645736756, -8.19197005696992, 
    -383.188599100137, 294.213882586547), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355882615156144, -0.341295698201567
    ), logphi = c(0.512358447833051, -1.63289175185645)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_44 = structure(list(
    par = c(-0.240334336142324, -0.0975623053756507, 0.493898610803981, 
    -1.65439285663019), value = 79.3102880136954, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.995518111228, -9.67519909167436, 
    226.325401794014, -14.8232865502251, -9.67519909167436, 31.4444589974983, 
    -24.4261398840706, -10.7455408553392, 226.325401794014, -24.4261398840706, 
    4772.45182520747, -317.271865405644, -14.8232865502251, -10.7455408553392, 
    -317.271865405644, 279.752769195341), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240334336142324, -0.0975623053756507
    ), logphi = c(0.493898610803981, -1.65439285663019)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_45 = structure(list(
    par = c(-0.319875645230445, 0.0624639015840015, 0.525797751891292, 
    -1.64061169659018), value = 72.4098497992864, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.0859056289535, -8.90745066328691, 
    267.285721495369, -26.2434630524666, -8.90745066328691, 46.9834427541116, 
    -39.2854683575194, -14.2574862671552, 267.285721495369, -39.2854683575194, 
    5268.74380340203, -478.906631782294, -26.2434630524666, -14.2574862671552, 
    -478.906631782294, 334.145094509353), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319875645230445, 0.0624639015840015
    ), logphi = c(0.525797751891292, -1.64061169659018)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_46 = structure(list(
    par = c(-0.408805084662978, 0.0522434663568035, 0.498523192718866, 
    -1.64796720949249), value = 63.5677132346813, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.6591358003084, -2.64436915742294, 
    254.373001855157, -22.2600802395334, -2.64436915742294, 49.1856094626542, 
    -26.4963997018697, -14.8507089221539, 254.373001855157, -26.4963997018697, 
    4961.26847704304, -400.881624242899, -22.2600802395334, -14.8507089221539, 
    -400.881624242899, 301.203847779874), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.408805084662978, 0.0522434663568035
    ), logphi = c(0.498523192718866, -1.64796720949249)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_47 = structure(list(
    par = c(-0.159708144314611, 0.215536385611586, 0.493923633929364, 
    -1.61132743317655), value = 59.1278164948927, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.756230259094, -5.16914097126175, 
    200.348407128459, -8.19276673169611, -5.16914097126175, 45.294796402473, 
    -13.1468786097599, -12.261393703028, 200.348407128459, -13.1468786097599, 
    3897.0895442727, -265.795908722666, -8.19276673169611, -12.261393703028, 
    -265.795908722666, 236.275038659528), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159708144314611, 0.215536385611586
    ), logphi = c(0.493923633929364, -1.61132743317655)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_48 = structure(list(
    par = c(-0.242242442548461, 0.114608649193302, 0.486812623160928, 
    -1.6149219651378), value = 58.9115992569215, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.40924285542, -3.60638826890636, 
    208.873859827818, -10.6780232131953, -3.60638826890636, 43.3729794124815, 
    -14.9368838719965, -12.3277168295743, 208.873859827818, -14.9368838719965, 
    4017.42828989882, -269.177390906705, -10.6780232131953, -12.3277168295743, 
    -269.177390906705, 241.41276585965), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242242442548461, 0.114608649193302
    ), logphi = c(0.486812623160928, -1.6149219651378)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_49 = structure(list(
    par = c(-0.23821881291372, -0.0441087536742844, 0.487213849152606, 
    -1.58778019704511), value = 80.2144952653191, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.5933343093609, -6.48576551753877, 
    209.314721011822, -12.1019636818431, -6.48576551753877, 35.6220703849885, 
    -20.1228709784118, -10.9109648551708, 209.314721011822, -20.1228709784118, 
    3922.11019699573, -257.141990484655, -12.1019636818431, -10.9109648551708, 
    -257.141990484655, 240.605631709911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.23821881291372, -0.0441087536742844
    ), logphi = c(0.487213849152606, -1.58778019704511)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_50 = structure(list(
    par = c(-0.320503357234427, -0.0651905499197414, 0.470926458702152, 
    -1.66527261095971), value = 60.7258922722494, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.0961342651385, -4.36165324657622, 
    227.268363991229, -12.7759902142088, -4.36165324657622, 35.711471385369, 
    -16.2434763026909, -11.7562503225699, 227.268363991229, -16.2434763026909, 
    4747.00310791043, -280.126116233959, -12.7759902142088, -11.7562503225699, 
    -280.126116233959, 266.923150796572), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320503357234427, -0.0651905499197414
    ), logphi = c(0.470926458702152, -1.66527261095971)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_51 = structure(list(
    par = c(-0.443173436272562, -0.0416737598032395, 0.504675098164075, 
    -1.62098401253956), value = 69.173531289937, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.6146566404966, -4.44896796381045, 
    228.59535962283, -23.3981229698088, -4.44896796381045, 36.1615568884588, 
    -29.7697719844336, -12.2618721096757, 228.59535962283, -29.7697719844336, 
    4304.20861807335, -372.747248448491, -23.3981229698088, -12.2618721096757, 
    -372.747248448491, 271.95037862171), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443173436272562, -0.0416737598032395
    ), logphi = c(0.504675098164075, -1.62098401253956)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_52 = structure(list(
    par = c(-0.244301158506427, 0.0994311943946768, 0.480437546909145, 
    -1.67919544171933), value = 57.8913622233816, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.6582831130295, -5.08937288046241, 
    222.709746521943, -10.3373789714922, -5.08937288046241, 41.0765769309762, 
    -12.832167310961, -12.5779873130227, 222.709746521943, -12.832167310961, 
    4778.6516318471, -293.318093216755, -10.3373789714922, -12.5779873130227, 
    -293.318093216755, 267.903489008958), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.244301158506427, 0.0994311943946768
    ), logphi = c(0.480437546909145, -1.67919544171933)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_53 = structure(list(
    par = c(-0.392887602810411, 0.000546770639290705, 0.496799106037499, 
    -1.58212192763648), value = 75.0772806668388, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.6538704320023, -3.85944012748496, 
    234.109826166673, -20.4951670070841, -3.85944012748496, 40.086335985734, 
    -25.5420628434422, -13.374382300313, 234.109826166673, -25.5420628434422, 
    4130.65603490637, -336.849910693715, -20.4951670070841, -13.374382300313, 
    -336.849910693715, 263.877604709251), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392887602810411, 0.000546770639290705
    ), logphi = c(0.496799106037499, -1.58212192763648)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_54 = structure(list(
    par = c(-0.335132179672922, 0.20563312358154, 0.49204941528215, 
    -1.76069794796162), value = 38.5164446783484, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.579011581378, -3.7554911642701, 
    249.550107009, -15.4291071652324, -3.7554911642701, 47.2007519025652, 
    -12.7780802579025, -15.2209139256954, 249.550107009, -12.7780802579025, 
    5831.5694410922, -400.653071187307, -15.4291071652324, -15.2209139256954, 
    -400.653071187307, 306.886516106886), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335132179672922, 0.20563312358154
    ), logphi = c(0.49204941528215, -1.76069794796162)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_55 = structure(list(
    par = c(-0.285802354149146, 0.249400122670804, 0.511746952621274, 
    -1.64254654804803), value = 51.3848461339088, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.2672846755669, -3.15891738011942, 
    226.931437229183, -16.5239315119692, -3.15891738011942, 52.1826761481492, 
    -19.5122082011778, -14.7881473013811, 226.931437229183, -19.5122082011778, 
    4393.47659808043, -369.32223160413, -16.5239315119692, -14.7881473013811, 
    -369.32223160413, 271.215748007592), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285802354149146, 0.249400122670804
    ), logphi = c(0.511746952621274, -1.64254654804803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_56 = structure(list(
    par = c(-0.367333645200963, -0.198764053599309, 0.513732221839556, 
    -1.60283840803017), value = 82.2242728466453, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.4686674849504, -8.88210466598593, 
    215.622757846035, -22.7287871759074, -8.88210466598593, 25.4885512731562, 
    -32.613704462392, -9.27313744014668, 215.622757846035, -32.613704462392, 
    4121.5315262626, -356.685306226012, -22.7287871759074, -9.27313744014668, 
    -356.685306226012, 265.663745597777), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.367333645200963, -0.198764053599309
    ), logphi = c(0.513732221839556, -1.60283840803017)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_57 = structure(list(
    par = c(-0.227469351026601, -0.178170101055189, 0.494121906801092, 
    -1.65050189455025), value = 102.280007270175, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.8684736415921, -12.4002990489203, 
    235.190215192915, -15.6751401529931, -12.4002990489203, 26.3687137831425, 
    -26.8281152244754, -10.2961160060033, 235.190215192915, -26.8281152244754, 
    5004.59471123449, -325.669768155734, -15.6751401529931, -10.2961160060033, 
    -325.669768155734, 293.991178228481), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227469351026601, -0.178170101055189
    ), logphi = c(0.494121906801092, -1.65050189455025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_58 = structure(list(
    par = c(-0.147331101061364, -0.0643050654784584, 0.496240603130911, 
    -1.72264852508037), value = 66.7563915555583, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.6591985548837, -12.7798653402067, 
    226.046534830715, -11.7399925940731, -12.7798653402067, 30.130191287725, 
    -22.9566461378283, -10.2029585242747, 226.046534830715, -22.9566461378283, 
    5473.66402386373, -326.203400115688, -11.7399925940731, -10.2029585242747, 
    -326.203400115688, 297.394791239469), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.147331101061364, -0.0643050654784584
    ), logphi = c(0.496240603130911, -1.72264852508037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_59 = structure(list(
    par = c(-0.232970200761109, -0.0814951764647878, 0.514317832225841, 
    -1.53827638091779), value = 89.7554499037486, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.2595622659087, -8.46639263940574, 
    204.836504622108, -17.450971251165, -8.46639263940574, 33.8841011284785, 
    -28.0802989500728, -9.8484372870189, 204.836504622108, -28.0802989500728, 
    3542.14105207262, -301.210626087567, -17.450971251165, -9.8484372870189, 
    -301.210626087567, 237.149860812025), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232970200761109, -0.0814951764647878
    ), logphi = c(0.514317832225841, -1.53827638091779)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_60 = structure(list(
    par = c(-0.344316209673043, -0.0752044062351195, 0.505529229245476, 
    -1.60749750502364), value = 82.2045851632102, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.0641911358282, -7.87671159230285, 
    236.965714581316, -21.5001867260867, -7.87671159230285, 35.2871911850627, 
    -30.5853701263459, -11.9084435965533, 236.965714581316, -30.5853701263459, 
    4478.44762885907, -365.68980254259, -21.5001867260867, -11.9084435965533, 
    -365.68980254259, 282.904600620526), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344316209673043, -0.0752044062351195
    ), logphi = c(0.505529229245476, -1.60749750502364)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_61 = structure(list(
    par = c(-0.225966978036452, 0.139740193350384, 0.500672851916245, 
    -1.62677880067715), value = 64.2166911709269, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.9542070490518, -4.92165075272055, 
    218.365949571364, -13.1307839428274, -4.92165075272055, 46.6206027098792, 
    -19.3538205870425, -12.8387398596885, 218.365949571364, -19.3538205870425, 
    4272.13841026841, -315.905657354065, -13.1307839428274, -12.8387398596885, 
    -315.905657354065, 260.155567801235), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225966978036452, 0.139740193350384
    ), logphi = c(0.500672851916245, -1.62677880067715)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_62 = structure(list(
    par = c(-0.400608300528302, -0.0110079867972826, 0.516987033436644, 
    -1.67617651087017), value = 60.9713044906216, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.6325363175608, -7.83572050622183, 
    226.081171589954, -23.2443731462695, -7.83572050622183, 32.4843014141152, 
    -33.4510652386655, -11.5232221737926, 226.081171589954, -33.4510652386655, 
    4716.79281539394, -408.915186110193, -23.2443731462695, -11.5232221737926, 
    -408.915186110193, 286.593407995639), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400608300528302, -0.0110079867972826
    ), logphi = c(0.516987033436644, -1.67617651087017)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_63 = structure(list(
    par = c(-0.267728026139179, -0.0838848742345649, 0.497179033192146, 
    -1.66227433989584), value = 87.1367268464405, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.2513948482856, -10.5939582510928, 
    260.969652142506, -18.6452558601502, -10.5939582510928, 36.3470762216878, 
    -29.409201342645, -12.5474370360479, 260.969652142506, -29.409201342645, 
    5521.65688753092, -383.587573095312, -18.6452558601502, -12.5474370360479, 
    -383.587573095312, 323.913657382491), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267728026139179, -0.0838848742345649
    ), logphi = c(0.497179033192146, -1.66227433989584)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_64 = structure(list(
    par = c(-0.211818626835387, 0.171156165605511, 0.527463141349562, 
    -1.56399615426822), value = 76.736936539302, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.0691036340222, -6.97906294533368, 
    218.889946232537, -18.3748245987658, -6.97906294533368, 49.1516646405898, 
    -28.4017168254991, -12.8416338753823, 218.889946232537, -28.4017168254991, 
    3828.63719939053, -362.571417655388, -18.3748245987658, -12.8416338753823, 
    -362.571417655388, 258.84638746021), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211818626835387, 0.171156165605511
    ), logphi = c(0.527463141349562, -1.56399615426822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_65 = structure(list(
    par = c(-0.28424770504589, -0.0755610634367639, 0.496822778064074, 
    -1.66106803769509), value = 68.402020610166, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.3842959870879, -7.77776435612054, 
    225.447518374722, -16.5058692971343, -7.77776435612054, 33.3480543517339, 
    -25.2827901547903, -11.0114191969046, 225.447518374722, -25.2827901547903, 
    4732.65626394337, -333.106805344485, -16.5058692971343, -11.0114191969046, 
    -333.106805344485, 278.281330828634), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28424770504589, -0.0755610634367639
    ), logphi = c(0.496822778064074, -1.66106803769509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_66 = structure(list(
    par = c(-0.278427309358758, -0.072248914190988, 0.481603518855488, 
    -1.56005388692977), value = 73.6864975203703, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.6129614993413, -4.90776975325957, 
    195.809889973475, -11.6231565687741, -4.90776975325957, 32.4916065075342, 
    -18.3690008341841, -10.3324204374644, 195.809889973475, -18.3690008341841, 
    3469.15754270327, -223.082336290759, -11.6231565687741, -10.3324204374644, 
    -223.082336290759, 215.480046016125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278427309358758, -0.072248914190988
    ), logphi = c(0.481603518855488, -1.56005388692977)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_67 = structure(list(
    par = c(-0.569021819483935, -0.184759063961974, 0.505344122552085, 
    -1.65995953214967), value = 65.2730342324328, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(64.0548594894597, -6.24796834358676, 
    227.637898365884, -28.0756957025119, -6.24796834358676, 25.692200701144, 
    -36.3411331960606, -10.4202298842893, 227.637898365884, -36.3411331960606, 
    4639.89090638961, -417.292334173425, -28.0756957025119, -10.4202298842893, 
    -417.292334173425, 287.362537168434), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.569021819483935, -0.184759063961974
    ), logphi = c(0.505344122552085, -1.65995953214967)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_68 = structure(list(
    par = c(-0.188092933338136, -0.000611762135782083, 0.499147909398137, 
    -1.64438782449175), value = 65.0856595754059, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.7333823119386, -9.03182727896024, 
    211.413872367672, -12.4757270416609, -9.03182727896024, 34.9120084059962, 
    -22.0764679284002, -10.7275880303348, 211.413872367672, -22.0764679284002, 
    4393.15251292527, -299.092228116749, -12.4757270416609, -10.7275880303348, 
    -299.092228116749, 261.073969198833), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188092933338136, -0.000611762135782083
    ), logphi = c(0.499147909398137, -1.64438782449175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_69 = structure(list(
    par = c(-0.155018930253043, 0.0245475905782097, 0.478241780730405, 
    -1.50645605347338), value = 100.201615748714, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.200514069296, -6.27847213507948, 
    202.331425210645, -6.63886240559464, -6.27847213507948, 42.6252766274615, 
    -17.1300041067468, -11.2607253193175, 202.331425210645, -17.1300041067468, 
    3390.25869142873, -191.300129195326, -6.63886240559464, -11.2607253193175, 
    -191.300129195326, 214.32829869994), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.155018930253043, 0.0245475905782097
    ), logphi = c(0.478241780730405, -1.50645605347338)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_70 = structure(list(
    par = c(-0.435176979659932, 0.194880807763088, 0.529512948700119, 
    -1.65134982021608), value = 40.112997268429, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.3319513779802, -2.5480735921235, 
    205.621383621235, -22.8976181944063, -2.5480735921235, 43.8097827633044, 
    -28.7642782801356, -12.9886092263831, 205.621383621235, -28.7642782801356, 
    3936.46453144925, -395.881690943511, -22.8976181944063, -12.9886092263831, 
    -395.881690943511, 253.792902917382), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.435176979659932, 0.194880807763088
    ), logphi = c(0.529512948700119, -1.65134982021608)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_71 = structure(list(
    par = c(-0.0880489862159958, -0.336243236684781, 0.499667098751158, 
    -1.58664568342436), value = 107.080076715211, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.5979322435589, -13.7216249527228, 
    202.529925442008, -11.4550340946096, -13.7216249527228, 20.9753302016225, 
    -24.609495927308, -7.39926262482982, 202.529925442008, -24.609495927308, 
    4130.97414040919, -253.317087057781, -11.4550340946096, -7.39926262482982, 
    -253.317087057781, 254.782219709426), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0880489862159958, -0.336243236684781
    ), logphi = c(0.499667098751158, -1.58664568342436)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_72 = structure(list(
    par = c(-0.381484257905504, 0.150334161312082, 0.512528697282859, 
    -1.60419825252561), value = 60.0242005847426, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.7078542010377, -2.40501535486715, 
    233.790791273947, -21.8405115894882, -2.40501535486715, 49.1833498088567, 
    -26.0063532380173, -14.747700149087, 233.790791273947, -26.0063532380173, 
    4201.7913443928, -384.925365729316, -21.8405115894882, -14.747700149087, 
    -384.925365729316, 272.565796556989), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381484257905504, 0.150334161312082
    ), logphi = c(0.512528697282859, -1.60419825252561)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_73 = structure(list(
    par = c(-0.277108495105171, 0.00733459650370639, 0.499202817907148, 
    -1.52892872341427), value = 86.5940139891385, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.7203400626413, -3.86378878403093, 
    213.126766297478, -15.6850240493611, -3.86378878403093, 43.4180062427458, 
    -23.6068003616197, -11.8676962017616, 213.126766297478, -23.6068003616197, 
    3540.04027900245, -278.696161766234, -15.6850240493611, -11.8676962017616, 
    -278.696161766234, 232.939575660396), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.277108495105171, 0.00733459650370639
    ), logphi = c(0.499202817907148, -1.52892872341427)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_74 = structure(list(
    par = c(-0.337051035244568, -0.140340797900282, 0.508371097100943, 
    -1.62570118596173), value = 70.7715802278447, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(70.2240300078927, -7.72382514568903, 
    199.221492728441, -18.6640845232233, -7.72382514568903, 25.8539345807662, 
    -27.614766050732, -9.15227479580949, 199.221492728441, -27.614766050732, 
    3938.06975699107, -318.122391185227, -18.6640845232233, -9.15227479580949, 
    -318.122391185227, 245.483073630481), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337051035244568, -0.140340797900282
    ), logphi = c(0.508371097100943, -1.62570118596173)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_75 = structure(list(
    par = c(-0.42959270001454, 0.0268221688295685, 0.497341189669686, 
    -1.59077480727305), value = 76.7006776445157, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.245966312533, -2.21391143639948, 
    269.145478792865, -26.2723271760024, -2.21391143639948, 46.7999542550501, 
    -27.1006850667277, -17.4766572769158, 269.145478792865, -27.1006850667277, 
    4731.32027554968, -399.301022076415, -26.2723271760024, -17.4766572769158, 
    -399.301022076415, 302.05502340408), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42959270001454, 0.0268221688295685
    ), logphi = c(0.497341189669686, -1.59077480727305)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_76 = structure(list(
    par = c(-0.285322170125261, -0.0132274466513105, 0.506155171482817, 
    -1.64195116566945), value = 72.7203582520328, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.7545702977657, -7.24856048250899, 
    205.134862198975, -16.2915259096508, -7.24856048250899, 33.0484993611435, 
    -24.747441766948, -10.5531084813038, 205.134862198975, -24.747441766948, 
    4130.02323067602, -319.032007459086, -16.2915259096508, -10.5531084813038, 
    -319.032007459086, 251.482966696415), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.285322170125261, -0.0132274466513105
    ), logphi = c(0.506155171482817, -1.64195116566945)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_77 = structure(list(
    par = c(-0.219857579006819, -0.0121378972172394, 0.550417950348904, 
    -1.58700309701151), value = 89.603360311862, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.6616394041841, -13.1475323179586, 
    236.148453218732, -26.4127159361749, -13.1475323179586, 38.7777125574473, 
    -43.6861666202049, -10.2914641306739, 236.148453218732, -43.6861666202049, 
    4418.89651000338, -460.65418379726, -26.4127159361749, -10.2914641306739, 
    -460.65418379726, 303.940950107773), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219857579006819, -0.0121378972172394
    ), logphi = c(0.550417950348904, -1.58700309701151)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_78 = structure(list(
    par = c(-0.303606414213079, 0.0922572559744761, 0.514480134973455, 
    -1.76401326175443), value = 35.7867497889524, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.2634625634508, -9.50761748264028, 
    241.068019127155, -19.0497814056556, -9.50761748264028, 37.9289297871566, 
    -29.5818510611667, -12.6405612501657, 241.068019127155, -29.5818510611667, 
    5820.82605861345, -428.329890073798, -19.0497814056556, -12.6405612501657, 
    -428.329890073798, 312.86181259027), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.303606414213079, 0.0922572559744761
    ), logphi = c(0.514480134973455, -1.76401326175443)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_79 = structure(list(
    par = c(-0.288513032569588, -0.0299313004609684, 0.502223584968031, 
    -1.57692605273196), value = 85.5550068111601, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.7025591539207, -7.83459153907984, 
    229.675851564082, -18.1030168349139, -7.83459153907984, 36.5958558568025, 
    -27.0017752903584, -12.1003622677307, 229.675851564082, -27.0017752903584, 
    4147.60317844554, -326.496055375713, -18.1030168349139, -12.1003622677307, 
    -326.496055375713, 265.383294561161), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288513032569588, -0.0299313004609684
    ), logphi = c(0.502223584968031, -1.57692605273196)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_80 = structure(list(
    par = c(-0.180749358960287, -0.0923347028721913, 0.501783718462534, 
    -1.58313974179446), value = 80.903930297049, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.584413469533, -9.56659357242984, 
    187.491360254199, -12.1448645078459, -9.56659357242984, 27.5170155994431, 
    -22.2987542528585, -8.91674004677157, 187.491360254199, -22.2987542528585, 
    3565.18554839269, -253.032641730044, -12.1448645078459, -8.91674004677157, 
    -253.032641730044, 223.86481342096), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180749358960287, -0.0923347028721913
    ), logphi = c(0.501783718462534, -1.58313974179446)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_81 = structure(list(
    par = c(-0.353198652675689, -0.188505486949923, 0.533558112365889, 
    -1.65422730600045), value = 70.0636844738696, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(62.5439178953968, -9.34353967352308, 
    208.642559105243, -24.227032863422, -9.34353967352308, 25.8846126612866, 
    -38.3802017083212, -7.9606815646116, 208.642559105243, -38.3802017083212, 
    4419.56054079995, -406.307746889212, -24.227032863422, -7.9606815646116, 
    -406.307746889212, 279.512422284967), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353198652675689, -0.188505486949923
    ), logphi = c(0.533558112365889, -1.65422730600045)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_82 = structure(list(
    par = c(-0.29309892942373, 0.00980671216569272, 0.518850722701943, 
    -1.57664593304751), value = 84.8147664077314, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.0868999451632, -8.38030545580182, 
    227.07657285892, -21.2472743559289, -8.38030545580182, 38.0530381427491, 
    -31.4499176354843, -11.9228591408671, 227.07657285892, -31.4499176354843, 
    4071.71514190097, -367.403748462891, -21.2472743559289, -11.9228591408671, 
    -367.403748462891, 269.6264007227), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29309892942373, 0.00980671216569272
    ), logphi = c(0.518850722701943, -1.57664593304751)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_83 = structure(list(
    par = c(-0.320505465744317, -0.270188528217022, 0.542734169528516, 
    -1.63141885676337), value = 101.809353592735, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.6099268162936, -13.4701541973925, 
    245.955524210473, -30.1624073877349, -13.4701541973925, 25.2280186430198, 
    -47.4831527874642, -8.00844061821238, 245.955524210473, -47.4831527874642, 
    5139.55077454398, -495.459254844732, -30.1624073877349, -8.00844061821238, 
    -495.459254844732, 335.746980859142), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320505465744317, -0.270188528217022
    ), logphi = c(0.542734169528516, -1.63141885676337)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_84 = structure(list(
    par = c(-0.448202653309952, 0.137851648521004, 0.508291669268924, 
    -1.54762068879065), value = 58.7199900484071, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.7905009706551, 2.24452135455522, 
    207.470196588844, -21.1000523968607, 2.24452135455522, 50.1538279955582, 
    -22.4235750323487, -13.7300005089713, 207.470196588844, -22.4235750323487, 
    3340.607638318, -323.194741604027, -21.1000523968607, -13.7300005089713, 
    -323.194741604027, 227.303378380839), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.448202653309952, 0.137851648521004
    ), logphi = c(0.508291669268924, -1.54762068879065)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_85 = structure(list(
    par = c(-0.142411043041394, 0.141574422228021, 0.505588989788477, 
    -1.54957502469718), value = 78.3437769388186, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.690368758042, -6.85511986020515, 
    207.667954807533, -11.2082034533501, -6.85511986020515, 48.4976924290947, 
    -21.1614845575525, -12.0713412066209, 207.667954807533, -21.1614845575525, 
    3671.2398158727, -280.854573176725, -11.2082034533501, -12.0713412066209, 
    -280.854573176725, 238.164102206895), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142411043041394, 0.141574422228021
    ), logphi = c(0.505588989788477, -1.54957502469718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_86 = structure(list(
    par = c(-0.368095742460805, -0.0446533388064154, 0.514069303417813, 
    -1.55814059551335), value = 91.2895970854625, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.6715452027524, -6.70942947067488, 
    218.051975721778, -22.4165134063981, -6.70942947067488, 34.0846855166888, 
    -30.4485170588009, -11.3462550483945, 218.051975721778, -30.4485170588009, 
    3751.94210732488, -345.74058005532, -22.4165134063981, -11.3462550483945, 
    -345.74058005532, 252.154166837215), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368095742460805, -0.0446533388064154
    ), logphi = c(0.514069303417813, -1.55814059551335)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_87 = structure(list(
    par = c(-0.363431542251485, -0.446845176375219, 0.516203186749733, 
    -1.64883327480927), value = 101.70403294056, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(72.402201993782, -12.1505843644343, 
    240.704269106828, -26.5718394061309, -12.1505843644343, 17.4963985308807, 
    -38.6180667035774, -7.37657065918995, 240.704269106828, -38.6180667035774, 
    5240.00990502316, -425.934660778893, -26.5718394061309, -7.37657065918995, 
    -425.934660778893, 323.439933445968), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363431542251485, -0.446845176375219
    ), logphi = c(0.516203186749733, -1.64883327480927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_88 = structure(list(
    par = c(-0.329277303708759, -0.0339561156711696, 0.488295735780354, 
    -1.48142145453502), value = 82.1895391984692, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.6537410918179, -3.30938811643477, 
    173.230794384693, -12.4485012733544, -3.30938811643477, 30.6179410003438, 
    -17.9574693213169, -9.84668090708851, 173.230794384693, -17.9574693213169, 
    2625.42583886471, -194.477181352681, -12.4485012733544, -9.84668090708851, 
    -194.477181352681, 174.405113085641), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329277303708759, -0.0339561156711696
    ), logphi = c(0.488295735780354, -1.48142145453502)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_89 = structure(list(
    par = c(-0.271523244527363, -0.149362042900495, 0.479711409763284, 
    -1.74768852153753), value = 59.4109555966941, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.9197054872141, -10.3516502232281, 
    248.024656540835, -14.728382494944, -10.3516502232281, 28.9952910055291, 
    -22.2305462127537, -10.9048980778681, 248.024656540835, -22.2305462127537, 
    6104.21621234813, -351.026953604894, -14.728382494944, -10.9048980778681, 
    -351.026953604894, 318.532712915598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.271523244527363, -0.149362042900495
    ), logphi = c(0.479711409763284, -1.74768852153753)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_90 = structure(list(
    par = c(-0.153107900681728, 0.132699999911999, 0.499886275913014, 
    -1.51325580663103), value = 84.040816745314, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.53958117651, -6.14313484348372, 
    194.607687067361, -9.84822561633791, -6.14313484348372, 45.195811150478, 
    -19.1020831437072, -11.5056034069028, 194.607687067361, -19.1020831437072, 
    3235.53151389078, -241.144874365773, -9.84822561633791, -11.5056034069028, 
    -241.144874365773, 212.925250725249), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153107900681728, 0.132699999911999
    ), logphi = c(0.499886275913014, -1.51325580663103)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_91 = structure(list(
    par = c(-0.360028109095044, -0.0937124637928204, 0.50042583566576, 
    -1.56052054724298), value = 88.6371360888454, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.7460327848876, -7.0068865909434, 
    223.483739471675, -20.1771576371357, -7.0068865909434, 32.2210956795743, 
    -27.6691857017397, -11.4764067937756, 223.483739471675, -27.6691857017397, 
    3887.35319617339, -317.230933415402, -20.1771576371357, -11.4764067937756, 
    -317.230933415402, 252.830439755769), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.360028109095044, -0.0937124637928204
    ), logphi = c(0.50042583566576, -1.56052054724298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_92 = structure(list(
    par = c(-0.38877646713085, -0.370608758995626, 0.4860201364497, 
    -1.67009918964785), value = 85.1723511445146, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.3412073056504, -9.31666188819236, 
    229.950091835462, -20.2532914990172, -9.31666188819236, 18.6890346185464, 
    -28.2059187526329, -8.73654897048937, 229.950091835462, -28.2059187526329, 
    5002.9409122665, -335.899003003348, -20.2532914990172, -8.73654897048937, 
    -335.899003003348, 289.021677229329), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38877646713085, -0.370608758995626
    ), logphi = c(0.4860201364497, -1.67009918964785)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_93 = structure(list(
    par = c(-0.279050442808676, 0.0814441480044553, 0.518491673444877, 
    -1.64278963155653), value = 63.6702433767018, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.2495260299265, -8.68275682819331, 
    238.631988615623, -20.3610036351165, -8.68275682819331, 42.1433879331801, 
    -30.8197271365884, -13.0626475431939, 238.631988615623, -30.8197271365884, 
    4746.60777475222, -402.061704230405, -20.3610036351165, -13.0626475431939, 
    -402.061704230405, 295.09937335348), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279050442808676, 0.0814441480044553
    ), logphi = c(0.518491673444877, -1.64278963155653)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_94 = structure(list(
    par = c(-0.317739930750109, -0.145178648461342, 0.508429110912291, 
    -1.61914843923885), value = 88.5681799204494, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.6331723798908, -9.42526075320416, 
    240.065130821421, -21.9383999571221, -9.42526075320416, 32.0870316343758, 
    -33.0358504001538, -10.9429467229916, 240.065130821421, -33.0358504001538, 
    4715.91915491487, -377.805341736703, -21.9383999571221, -10.9429467229916, 
    -377.805341736703, 295.05671765051), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317739930750109, -0.145178648461342
    ), logphi = c(0.508429110912291, -1.61914843923885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_95 = structure(list(
    par = c(-0.330568963315136, -0.0535544508623149, 0.508265202689803, 
    -1.59775291643054), value = 89.1616952638072, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.6170510955585, -8.43510852988061, 
    235.828483329925, -21.4047348983115, -8.43510852988061, 35.1270771830059, 
    -30.7612607990393, -12.0229780478098, 235.828483329925, -30.7612607990393, 
    4383.92189911241, -365.609719608528, -21.4047348983115, -12.0229780478098, 
    -365.609719608528, 280.327607132591), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330568963315136, -0.0535544508623149
    ), logphi = c(0.508265202689803, -1.59775291643054)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_96 = structure(list(
    par = c(-0.207528713704058, -0.150998518184625, 0.481761280009309, 
    -1.6311644942889), value = 88.7751188903275, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.946685617335, -9.81172630076799, 
    246.239769690959, -12.9311811392085, -9.81172630076799, 34.9127486991563, 
    -23.4577665700897, -11.3458431272306, 246.239769690959, -23.4577665700897, 
    5087.78991380865, -296.242914274103, -12.9311811392085, -11.3458431272306, 
    -296.242914274103, 297.512779084741), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207528713704058, -0.150998518184625
    ), logphi = c(0.481761280009309, -1.6311644942889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_97 = structure(list(
    par = c(-0.313493903175089, 0.128013653437803, 0.493772907916923, 
    -1.59334975572949), value = 59.5291734342752, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.2423586628726, -2.4060392913583, 
    219.418691772333, -14.7986752834228, -2.4060392913583, 45.8325711019114, 
    -18.0282224810924, -13.6088874054252, 219.418691772333, -18.0282224810924, 
    3963.26647023493, -302.560605805802, -14.7986752834228, -13.6088874054252, 
    -302.560605805802, 247.568383919372), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313493903175089, 0.128013653437803
    ), logphi = c(0.493772907916923, -1.59334975572949)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_98 = structure(list(
    par = c(-0.342549166503301, 0.168557429951407, 0.527014965844608, 
    -1.52753578109174), value = 70.1781069712105, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.553010009766, -2.47356186378056, 
    216.169452173176, -22.6333770498854, -2.47356186378056, 49.8741348202714, 
    -28.4549755171781, -13.5235606499862, 216.169452173176, -28.4549755171781, 
    3434.57993096052, -363.339432265519, -22.6333770498854, -13.5235606499862, 
    -363.339432265519, 244.203304287538), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342549166503301, 0.168557429951407
    ), logphi = c(0.527014965844608, -1.52753578109174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_99 = structure(list(
    par = c(-0.048921961222185, 0.253649502272629, 0.489817180067021, 
    -1.7175390514369), value = 44.4923883709383, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.376767532026, -7.75205069736273, 
    215.079171283605, -4.13275998667473, -7.75205069736273, 51.516468996482, 
    -8.3263963848168, -11.986694490318, 215.079171283605, -8.3263963848168, 
    5214.89219442906, -291.462533195563, -4.13275998667473, -11.986694490318, 
    -291.462533195563, 280.34360022744), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.048921961222185, 0.253649502272629
    ), logphi = c(0.489817180067021, -1.7175390514369)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_100 = structure(list(
    par = c(-0.132640213103897, 0.0536841132011441, 0.478674470585379, 
    -1.63072255735966), value = 65.8518502964139, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7152338300111, -6.68025780470316, 
    204.577967735986, -6.29358211234887, -6.68025780470316, 41.1347321431776, 
    -13.8653243872966, -10.861332638612, 204.577967735986, -13.8653243872966, 
    4255.25928893933, -233.829267344277, -6.29358211234887, -10.861332638612, 
    -233.829267344277, 246.402407586999), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132640213103897, 0.0536841132011441
    ), logphi = c(0.478674470585379, -1.63072255735966)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_101 = structure(list(
    par = c(-0.191915114257835, 0.20768001107587, 0.501649514438339, 
    -1.58486750089623), value = 69.3310790012752, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.521945355567, -3.84301802824893, 
    216.055058327669, -11.587039823624, -3.84301802824893, 52.4929830625354, 
    -17.6288236204414, -13.4520697621099, 216.055058327669, -17.6288236204414, 
    3959.52094622487, -300.656134688992, -11.587039823624, -13.4520697621099, 
    -300.656134688992, 249.769468457117), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191915114257835, 0.20768001107587
    ), logphi = c(0.501649514438339, -1.58486750089623)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_102 = structure(list(
    par = c(-0.264641578831532, -0.186773709694548, 0.492536003566876, 
    -1.66744164537028), value = 78.742340630381, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.4719702664304, -9.63841607415361, 
    243.864725639753, -17.2206218493898, -9.63841607415361, 32.2570600594929, 
    -27.8082344031816, -10.6512240414247, 243.864725639753, -27.8082344031816, 
    5290.75614020513, -346.793817282531, -17.2206218493898, -10.6512240414247, 
    -346.793817282531, 306.208458322743), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264641578831532, -0.186773709694548
    ), logphi = c(0.492536003566876, -1.66744164537028)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_103 = structure(list(
    par = c(-0.225930510487053, 0.151149341790589, 0.518244270809716, 
    -1.62719595823569), value = 55.8726779423818, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.6805600587005, -6.38500096350469, 
    216.975763773775, -16.3431656430291, -6.38500096350469, 45.9653975539709, 
    -25.2645269416263, -12.5418459058224, 216.975763773775, -25.2645269416263, 
    4219.82111977393, -354.252834045887, -16.3431656430291, -12.5418459058224, 
    -354.252834045887, 264.888855815215), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225930510487053, 0.151149341790589
    ), logphi = c(0.518244270809716, -1.62719595823569)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_104 = structure(list(
    par = c(-0.180317924689172, 0.046324002901747, 0.482090387666294, 
    -1.62947705620742), value = 65.9890019329426, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.558528095959, -6.07086719739414, 
    224.058554188389, -9.19606099891723, -6.07086719739414, 45.2437120301852, 
    -16.5211927445341, -12.0920464627972, 224.058554188389, -16.5211927445341, 
    4557.3601808151, -270.954233673848, -9.19606099891723, -12.0920464627972, 
    -270.954233673848, 266.68095199156), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180317924689172, 0.046324002901747
    ), logphi = c(0.482090387666294, -1.62947705620742)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_105 = structure(list(
    par = c(-0.488818271007242, 0.0742133949754641, 0.483364422525021, 
    -1.73697396664189), value = 43.0561973251786, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.4578786478014, -2.75374216229807, 
    262.762016852491, -21.6811136830586, -2.75374216229807, 42.4285762790078, 
    -19.4069630694571, -15.7165556711192, 262.762016852491, -19.4069630694571, 
    5802.20579877277, -426.243406792537, -21.6811136830586, -15.7165556711192, 
    -426.243406792537, 315.359655949976), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.488818271007242, 0.0742133949754641
    ), logphi = c(0.483364422525021, -1.73697396664189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_106 = structure(list(
    par = c(-0.275719167619094, -0.235499965616043, 0.502984090122299, 
    -1.73920946409509), value = 74.2816988994872, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.5439814931738, -12.5194206432866, 
    236.722685528434, -18.7543333201035, -12.5194206432866, 22.6805488026116, 
    -31.7971878729395, -9.12093443616868, 236.722685528434, -31.7971878729395, 
    5854.89112557625, -387.576780166654, -18.7543333201035, -9.12093443616868, 
    -387.576780166654, 318.564757677109), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275719167619094, -0.235499965616043
    ), logphi = c(0.502984090122299, -1.73920946409509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_107 = structure(list(
    par = c(-0.366704999219955, 0.0831616743365439, 0.500953543671433, 
    -1.59716038974175), value = 73.7976375735269, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.377783764088, -3.17689303486191, 
    236.749264807656, -19.8453478823524, -3.17689303486191, 45.5485409709411, 
    -24.2639887026996, -14.2740732069768, 236.749264807656, -24.2639887026996, 
    4262.32376301883, -354.165148142016, -19.8453478823524, -14.2740732069768, 
    -354.165148142016, 270.877487558607), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.366704999219955, 0.0831616743365439
    ), logphi = c(0.500953543671433, -1.59716038974175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_108 = structure(list(
    par = c(-0.406894318561139, -0.0835083071578908, 0.506538981648248, 
    -1.60842978549927), value = 82.4407675386833, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.1123598743488, -6.81154587667265, 
    235.723808781785, -23.7705016861156, -6.81154587667265, 34.1335652649377, 
    -31.8568717254664, -11.9474674420417, 235.723808781785, -31.8568717254664, 
    4409.85859223986, -378.2365027174, -23.7705016861156, -11.9474674420417, 
    -378.2365027174, 281.043659850155), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.406894318561139, -0.0835083071578908
    ), logphi = c(0.506538981648248, -1.60842978549927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_109 = structure(list(
    par = c(-0.142996969682951, 0.277351035099956, 0.476552203858997, 
    -1.57680951190171), value = 55.19932894733, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.67991250501, 1.02132636925489, 
    180.999020225059, -3.26271285810975, 1.02132636925489, 54.1208232949231, 
    -5.67287041164377, -11.5826137383479, 180.999020225059, -5.67287041164377, 
    3384.35699569395, -196.836391438637, -3.26271285810975, -11.5826137383479, 
    -196.836391438637, 203.831482549433), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.142996969682951, 0.277351035099956
    ), logphi = c(0.476552203858997, -1.57680951190171)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_110 = structure(list(
    par = c(-0.137201064132579, -0.00800812986173131, 0.482599235583655, 
    -1.63093291161068), value = 74.0723658165568, counts = structure(c(89L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7504472515232, -8.57067985648996, 
    212.678604828653, -7.99726540101631, -8.57067985648996, 37.5606080886826, 
    -17.2891584071522, -10.7579895871623, 212.678604828653, -17.2891584071522, 
    4433.5438080445, -251.002266374201, -7.99726540101631, -10.7579895871623, 
    -251.002266374201, 258.379203842196), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137201064132579, -0.00800812986173131
    ), logphi = c(0.482599235583655, -1.63093291161068)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_111 = structure(list(
    par = c(-0.269904435270185, -0.0776843882665682, 0.508432166299728, 
    -1.66570045629506), value = 81.3529622419128, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.4385951609941, -9.72408069799258, 
    232.046256666507, -18.6980492848932, -9.72408069799258, 33.6787804400274, 
    -30.1746658273316, -10.9148291258521, 232.046256666507, -30.1746658273316, 
    4936.22656424719, -370.523315513793, -18.6980492848932, -10.9148291258521, 
    -370.523315513793, 293.853069788241), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269904435270185, -0.0776843882665682
    ), logphi = c(0.508432166299728, -1.66570045629506)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_112 = structure(list(
    par = c(-0.344631064624826, -0.0814752278706215, 0.496941010094488, 
    -1.65673180816297), value = 75.0459548841012, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.9845545962185, -9.19422905809597, 
    256.754969658601, -21.0888624891936, -9.19422905809597, 33.9786383740659, 
    -29.8561784575213, -12.7747665530364, 256.754969658601, -29.8561784575213, 
    5273.82233938312, -390.206083611844, -21.0888624891936, -12.7747665530364, 
    -390.206083611844, 313.577408935117), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344631064624826, -0.0814752278706215
    ), logphi = c(0.496941010094488, -1.65673180816297)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_113 = structure(list(
    par = c(-0.152390706702928, 0.25235187087893, 0.489293743222599, 
    -1.68196225132194), value = 58.7765805054745, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.480232688559, -4.89118246704834, 
    239.659211889176, -7.99667189177455, -4.89118246704834, 56.1099975335821, 
    -9.79801891709542, -14.4368831591635, 239.659211889176, -9.79801891709542, 
    5246.63926813673, -328.967854041906, -7.99667189177455, -14.4368831591635, 
    -328.967854041906, 295.290696909589), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.152390706702928, 0.25235187087893
    ), logphi = c(0.489293743222599, -1.68196225132194)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_114 = structure(list(
    par = c(-0.296644201342684, 0.341553273645139, 0.487416243048442, 
    -1.60094235233784), value = 50.3096660623162, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.699524387276, 5.56603834667158, 
    230.041411549919, -10.8891056136429, 5.56603834667158, 66.2019157893212, 
    -4.73537309098049, -16.6276525748188, 230.041411549919, -4.73537309098049, 
    4158.97086298855, -309.49397990554, -10.8891056136429, -16.6276525748188, 
    -309.49397990554, 254.975352836695), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296644201342684, 0.341553273645139
    ), logphi = c(0.487416243048442, -1.60094235233784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_115 = structure(list(
    par = c(-0.222888240732196, -0.241669338239088, 0.523694931241219, 
    -1.59523173359034), value = 100.141917129624, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.476133747406, -13.1566418595241, 
    236.844395839597, -22.4399025992028, -13.1566418595241, 27.8059983003232, 
    -36.8169100468663, -9.00728911901183, 236.844395839597, -36.8169100468663, 
    4655.77492730063, -391.357922399749, -22.4399025992028, -9.00728911901183, 
    -391.357922399749, 301.372419730939), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222888240732196, -0.241669338239088
    ), logphi = c(0.523694931241219, -1.59523173359034)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_116 = structure(list(
    par = c(-0.166409348157165, 0.222486449087658, 0.506198562885105, 
    -1.73081950720294), value = 46.3499797613822, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.9830531937101, -8.15600745518452, 
    216.138203391836, -10.8019721922759, -8.15600745518452, 43.3627603833031, 
    -15.9519768718752, -12.4438812632022, 216.138203391836, -15.9519768718752, 
    5043.5031365037, -340.696456329503, -10.8019721922759, -12.4438812632022, 
    -340.696456329503, 275.779766109707), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.166409348157165, 0.222486449087658
    ), logphi = c(0.506198562885105, -1.73081950720294)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_117 = structure(list(
    par = c(-0.311458803930609, -0.0305957990461521, 0.538517214888125, 
    -1.53474220017539), value = 83.7701757375668, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.0808922910032, -8.57611441773543, 
    211.147098713838, -25.1056700211194, -8.57611441773543, 35.2496120079593, 
    -36.0169940982757, -9.97149478010328, 211.147098713838, -36.0169940982757, 
    3541.57752550321, -382.315877761386, -25.1056700211194, -9.97149478010328, 
    -382.315877761386, 253.664883107518), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311458803930609, -0.0305957990461521
    ), logphi = c(0.538517214888125, -1.53474220017539)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_118 = structure(list(
    par = c(-0.237518751227644, 0.0374627087284729, 0.50148359649352, 
    -1.59263353691546), value = 74.7633569614956, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.7773455425581, -6.51025521136717, 
    221.581338802679, -14.9984139952153, -6.51025521136717, 42.5027560595481, 
    -23.7277518735368, -12.1280897413811, 221.581338802679, -23.7277518735368, 
    4132.98013266683, -311.589421293945, -14.9984139952153, -12.1280897413811, 
    -311.589421293945, 259.530523205598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237518751227644, 0.0374627087284729
    ), logphi = c(0.50148359649352, -1.59263353691546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_119 = structure(list(
    par = c(-0.207748911317583, -0.0678707486160235, 0.488676618225184, 
    -1.61470497129041), value = 93.137107072159, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.3094499968095, -9.8312218419494, 
    228.379155938541, -12.695487065173, -9.8312218419494, 33.5524249024388, 
    -22.460588759543, -11.3353301003372, 228.379155938541, -22.460588759543, 
    4536.10378930591, -288.845816420746, -12.695487065173, -11.3353301003372, 
    -288.845816420746, 272.262424925174), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207748911317583, -0.0678707486160235
    ), logphi = c(0.488676618225184, -1.61470497129041)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_120 = structure(list(
    par = c(-0.407303773108281, 0.15958235902094, 0.486502146123085, 
    -1.57881283962828), value = 58.891324845965, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.931221628604, 3.56338260232292, 
    234.929376553339, -17.0373186900719, 3.56338260232292, 57.0904432457553, 
    -15.2644721786999, -15.86654932062, 234.929376553339, -15.2644721786999, 
    4018.68046040121, -314.449293432162, -17.0373186900719, -15.86654932062, 
    -314.449293432162, 252.979455002134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.407303773108281, 0.15958235902094
    ), logphi = c(0.486502146123085, -1.57881283962828)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_121 = structure(list(
    par = c(-0.0792356101969389, 0.139668430290495, 0.500476638750363, 
    -1.61970854703087), value = 66.8335866419102, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.0606456351861, -8.93919487054973, 
    182.508692862626, -7.09420567446273, -8.93919487054973, 38.4515026539134, 
    -16.2720630036972, -10.0654644228371, 182.508692862626, -16.2720630036972, 
    3726.41356174341, -245.890364631407, -7.09420567446273, -10.0654644228371, 
    -245.890364631407, 224.839896674212), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0792356101969389, 0.139668430290495
    ), logphi = c(0.500476638750363, -1.61970854703087)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_122 = structure(list(
    par = c(-0.196674053862529, 0.166458836402836, 0.525657471608703, 
    -1.5019854301718), value = 89.0269817599994, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.469127387181, -6.57818763727391, 
    214.247238034204, -17.7931719811397, -6.57818763727391, 51.7713706251755, 
    -27.6389926554543, -12.6833454174857, 214.247238034204, -27.6389926554543, 
    3395.39590380156, -332.885496018065, -17.7931719811397, -12.6833454174857, 
    -332.885496018065, 239.855627121699), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196674053862529, 0.166458836402836
    ), logphi = c(0.525657471608703, -1.5019854301718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_123 = structure(list(
    par = c(-0.290124559781392, 0.298264217034185, 0.519667874798225, 
    -1.55021851425719), value = 58.7834437129678, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.6384373760908, 0.699689634231504, 
    212.491057650865, -17.4605997349531, 0.699689634231504, 60.5670310669382, 
    -19.9111554337605, -14.8348159010325, 212.491057650865, -19.9111554337605, 
    3499.40984214392, -341.905265679898, -17.4605997349531, -14.8348159010325, 
    -341.905265679898, 239.317669759487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290124559781392, 0.298264217034185
    ), logphi = c(0.519667874798225, -1.55021851425719)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_124 = structure(list(
    par = c(-0.236927169974999, 0.196902392690218, 0.481308791344056, 
    -1.59639013679652), value = 64.630482313029, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.448507024496, -0.436781576240719, 
    235.311733082, -9.64754732102335, -0.436781576240719, 57.7487166353308, 
    -11.5611454134523, -14.9003311893381, 235.311733082, -11.5611454134523, 
    4376.63897202611, -284.471177504741, -9.64754732102335, -14.9003311893381, 
    -284.471177504741, 264.224013402981), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.236927169974999, 0.196902392690218
    ), logphi = c(0.481308791344056, -1.59639013679652)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_125 = structure(list(
    par = c(-0.266804376239825, -0.0356352986516032, 0.527900838174859, 
    -1.56794549208695), value = 87.8099339912494, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.0596027958325, -9.13158332593866, 
    199.087507667173, -19.9580629427487, -9.13158332593866, 31.4003689325659, 
    -30.7725224146793, -9.58107039039646, 199.087507667173, -30.7725224146793, 
    3569.42457221265, -337.391043366608, -19.9580629427487, -9.58107039039646, 
    -337.391043366608, 241.174856441262), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266804376239825, -0.0356352986516032
    ), logphi = c(0.527900838174859, -1.56794549208695)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_126 = structure(list(
    par = c(-0.223608795922141, 0.184666777152018, 0.514375002222057, 
    -1.46491344550771), value = 64.9166197918968, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.0089429184115, -2.28513459532564, 
    165.943476130082, -12.503799695196, -2.28513459532564, 44.1860811406514, 
    -18.6132357100632, -10.4594719161355, 165.943476130082, -18.6132357100632, 
    2451.98743421682, -229.782211166096, -12.503799695196, -10.4594719161355, 
    -229.782211166096, 173.604906176905), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223608795922141, 0.184666777152018
    ), logphi = c(0.514375002222057, -1.46491344550771)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_127 = structure(list(
    par = c(-0.350321398084178, 0.111629277519754, 0.512157019404795, 
    -1.54765811930755), value = 80.3496251630219, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.004540813994, -1.81312752545182, 
    240.48235038876, -22.2464223096352, -1.81312752545182, 54.136022839657, 
    -28.1063087754774, -14.7355621820111, 240.48235038876, -28.1063087754774, 
    3981.24140461675, -370.382773258626, -22.2464223096352, -14.7355621820111, 
    -370.382773258626, 269.082924290842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350321398084178, 0.111629277519754
    ), logphi = c(0.512157019404795, -1.54765811930755)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_128 = structure(list(
    par = c(-0.0608312108819079, 0.108204028126701, 0.471898542653385, 
    -1.59477600410076), value = 72.443401031221, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.216803238141, -7.35759762093835, 
    198.136117056436, -2.1184237457561, -7.35759762093835, 45.2690943966161, 
    -11.3001342114671, -10.7795087327389, 198.136117056436, -11.3001342114671, 
    4014.06172460028, -192.729997552377, -2.1184237457561, -10.7795087327389, 
    -192.729997552377, 235.452858589724), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0608312108819079, 0.108204028126701
    ), logphi = c(0.471898542653385, -1.59477600410076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_129 = structure(list(
    par = c(-0.306352451606875, 0.331875679369301, 0.501543976078046, 
    -1.56041128674061), value = 51.567103523736, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.3002512288399, 4.42226892616304, 
    205.037106113082, -13.1082702736762, 4.42226892616304, 60.4503566101755, 
    -10.8399252241043, -15.0506574367881, 205.037106113082, -10.8399252241043, 
    3431.27787969522, -295.402810592371, -13.1082702736762, -15.0506574367881, 
    -295.402810592371, 224.28191120305), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306352451606875, 0.331875679369301
    ), logphi = c(0.501543976078046, -1.56041128674061)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_130 = structure(list(
    par = c(-0.191656439169524, 0.096457922916912, 0.485144110578043, 
    -1.6375139477978), value = 65.4308456591793, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.147728036073, -6.64090968882647, 
    224.408859672565, -9.6880368598562, -6.64090968882647, 42.9057702717728, 
    -15.6773849901981, -12.6015081569619, 224.408859672565, -15.6773849901981, 
    4575.56233414635, -284.752510614439, -9.6880368598562, -12.6015081569619, 
    -284.752510614439, 267.600035474658), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191656439169524, 0.096457922916912
    ), logphi = c(0.485144110578043, -1.6375139477978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_131 = structure(list(
    par = c(-0.399433477144033, -0.00690343384396937, 0.477668299185053, 
    -1.63673515334454), value = 63.424116230458, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.0043871910111, -2.1302962913694, 
    245.363233876361, -17.337669591555, -2.1302962913694, 41.9988028497187, 
    -19.0511252249337, -14.001663689811, 245.363233876361, -19.0511252249337, 
    4737.27316911265, -324.042713197414, -17.337669591555, -14.001663689811, 
    -324.042713197414, 278.738288734814), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399433477144033, -0.00690343384396937
    ), logphi = c(0.477668299185053, -1.63673515334454)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_132 = structure(list(
    par = c(-0.233333624124054, -0.0612685404766659, 0.508078327207604, 
    -1.60407258527492), value = 72.8087609972052, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.2908629294925, -9.41232391227231, 
    208.686766768551, -15.9826896126702, -9.41232391227231, 31.4288693843423, 
    -26.3922034022812, -10.1757167136896, 208.686766768551, -26.3922034022812, 
    4026.86066643554, -310.590766648744, -15.9826896126702, -10.1757167136896, 
    -310.590766648744, 252.911187946125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233333624124054, -0.0612685404766659
    ), logphi = c(0.508078327207604, -1.60407258527492)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_133 = structure(list(
    par = c(-0.475560995681189, 0.0845226461241319, 0.527850878390558, 
    -1.67177867842289), value = 46.5665095059638, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(74.2747551321088, -5.95053177221416, 
    250.521996562725, -29.710421411977, -5.95053177221416, 43.0035210925439, 
    -40.7230097465572, -14.0360036340326, 250.521996562725, -40.7230097465572, 
    5051.53001447667, -495.708311351706, -29.710421411977, -14.0360036340326, 
    -495.708311351706, 318.477996639643), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475560995681189, 0.0845226461241319
    ), logphi = c(0.527850878390558, -1.67177867842289)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_134 = structure(list(
    par = c(-0.0758382175260953, 0.153887540843394, 0.47110472549361, 
    -1.705444179622), value = 52.4131212804408, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.852069455689, -7.85141703474324, 
    228.667923225956, -2.86917075875692, -7.85141703474324, 49.4211267501043, 
    -6.79414993065564, -12.0157611567251, 228.667923225956, -6.79414993065564, 
    5512.39239487522, -265.287309018092, -2.86917075875692, -12.0157611567251, 
    -265.287309018092, 292.923075404516), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0758382175260953, 0.153887540843394
    ), logphi = c(0.47110472549361, -1.705444179622)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_135 = structure(list(
    par = c(-0.168513496457977, 0.091397671175615, 0.469611190641727, 
    -1.68667679269895), value = 49.1210025258229, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.748724924164, -5.35844461779789, 
    226.578470108763, -6.12795141741174, -5.35844461779789, 45.714349067083, 
    -9.17290562618689, -12.1421271304101, 226.578470108763, -9.17290562618689, 
    5105.26358898566, -264.301367744579, -6.12795141741174, -12.1421271304101, 
    -264.301367744579, 277.494610255502), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168513496457977, 0.091397671175615
    ), logphi = c(0.469611190641727, -1.68667679269895)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_136 = structure(list(
    par = c(-0.202807041251985, -0.0688657465437638, 0.49551677865708, 
    -1.58845069554165), value = 64.4643439768858, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.4853809448502, -7.07814929512551, 
    182.050130117517, -11.160409083999, -7.07814929512551, 30.2895968786743, 
    -19.8638449759869, -9.02122926760285, 182.050130117517, -19.8638449759869, 
    3460.77099943187, -236.724692451062, -11.160409083999, -9.02122926760285, 
    -236.724692451062, 214.57391487445), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.202807041251985, -0.0688657465437638
    ), logphi = c(0.49551677865708, -1.58845069554165)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_137 = structure(list(
    par = c(-0.313957214530489, 0.106590193212372, 0.50731466526102, 
    -1.6598856953332), value = 63.1929604598608, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.4746155435469, -6.15487186905739, 
    263.866803699386, -20.8386597684296, -6.15487186905739, 49.7263803431736, 
    -28.1227991898447, -15.255901830713, 263.866803699386, -28.1227991898447, 
    5330.49556374721, -425.702660615812, -20.8386597684296, -15.255901830713, 
    -425.702660615812, 321.196933452228), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313957214530489, 0.106590193212372
    ), logphi = c(0.50731466526102, -1.6598856953332)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_138 = structure(list(
    par = c(-0.318862572155296, 0.0949615964773713, 0.509521488952051, 
    -1.64221533176471), value = 65.0471818246869, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.4016725315462, -6.62346271695924, 
    236.662244873287, -19.5767937327673, -6.62346271695924, 41.9150512129818, 
    -26.7368687723035, -13.6219919255609, 236.662244873287, -26.7368687723035, 
    4644.74809174931, -383.034688510975, -19.5767937327673, -13.6219919255609, 
    -383.034688510975, 286.106397748398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318862572155296, 0.0949615964773713
    ), logphi = c(0.509521488952051, -1.64221533176471)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_139 = structure(list(
    par = c(-0.052651922727483, -0.149030422112556, 0.465819775322799, 
    -1.73403670624887), value = 73.7170373127896, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.346978026053, -13.5516858854601, 
    224.703097860157, -4.27602929597981, -13.5516858854601, 29.1255999123052, 
    -13.9234440155178, -9.14286388287167, 224.703097860157, -13.9234440155178, 
    5906.1061516914, -243.641204217937, -4.27602929597981, -9.14286388287167, 
    -243.641204217937, 302.583545941815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.052651922727483, -0.149030422112556
    ), logphi = c(0.465819775322799, -1.73403670624887)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_140 = structure(list(
    par = c(-0.279470051497532, 0.0788697481514815, 0.508603011192767, 
    -1.70082371165825), value = 54.9274455011894, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6548946363536, -8.11221736007894, 
    238.081337162299, -17.8141695688083, -8.11221736007894, 40.9732196366974, 
    -26.5146187725662, -12.8820539853081, 238.081337162299, -26.5146187725662, 
    5217.90682770273, -391.946213680328, -17.8141695688083, -12.8820539853081, 
    -391.946213680328, 299.992636966451), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279470051497532, 0.0788697481514815
    ), logphi = c(0.508603011192767, -1.70082371165825)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_141 = structure(list(
    par = c(-0.270357866457296, 0.0860859092406384, 0.487811335393348, 
    -1.48379288176983), value = 71.8954846333659, counts = structure(c(301L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.8037982253186, -1.72794112529573, 
    168.611247438832, -9.67733621415334, -1.72794112529573, 37.6428235178139, 
    -14.9884407605327, -10.3678180742861, 168.611247438832, -14.9884407605327, 
    2580.72905903006, -185.84146135403, -9.67733621415334, -10.3678180742861, 
    -185.84146135403, 170.307712494377), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270357866457296, 0.0860859092406384
    ), logphi = c(0.487811335393348, -1.48379288176983)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_142 = structure(list(
    par = c(-0.118470294575599, -0.0583554405706275, 0.492815514527565, 
    -1.66566003749234), value = 81.6359430189107, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.6999673315836, -12.1129201815506, 
    229.042076380637, -10.4584533673346, -12.1129201815506, 35.0522136542963, 
    -22.4504302828166, -10.6961954386975, 229.042076380637, -22.4504302828166, 
    5101.56406844331, -302.68731106986, -10.4584533673346, -10.6961954386975, 
    -302.68731106986, 292.169608734127), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.118470294575599, -0.0583554405706275
    ), logphi = c(0.492815514527565, -1.66566003749234)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_143 = structure(list(
    par = c(-0.228723761618132, -0.0705819726087767, 0.509926788416879, 
    -1.59182590256499), value = 85.4445473561263, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.0239229503179, -9.10327209169282, 
    210.224325748243, -16.4581489663362, -9.10327209169282, 32.8274515730698, 
    -27.290418113779, -10.141533397956, 210.224325748243, -27.290418113779, 
    3983.52723014383, -312.890234415164, -16.4581489663362, -10.141533397956, 
    -312.890234415164, 253.405808106066), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228723761618132, -0.0705819726087767
    ), logphi = c(0.509926788416879, -1.59182590256499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_144 = structure(list(
    par = c(-0.208983308925027, 0.0124279297666839, 0.479088177057782, 
    -1.67484719644977), value = 73.7513924966673, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.4483558486838, -8.09507377752539, 
    229.356734823938, -10.1449362652772, -8.09507377752539, 37.3566007354498, 
    -16.0544515921401, -11.9051767555334, 229.356734823938, -16.0544515921401, 
    4999.538186226, -289.283761670589, -10.1449362652772, -11.9051767555334, 
    -289.283761670589, 280.051427715478), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208983308925027, 0.0124279297666839
    ), logphi = c(0.479088177057782, -1.67484719644977)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_145 = structure(list(
    par = c(-0.33934482451279, 0.000571828392878629, 0.497334317624984, 
    -1.61213059862278), value = 67.955164387361, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.3315509036511, -5.51502668955095, 
    220.929550099669, -17.6075132749531, -5.51502668955095, 36.636775167409, 
    -23.7403846305995, -12.168824856218, 220.929550099669, -23.7403846305995, 
    4158.71858602301, -321.422297830054, -17.6075132749531, -12.168824856218, 
    -321.422297830054, 257.800846220846), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33934482451279, 0.000571828392878629
    ), logphi = c(0.497334317624984, -1.61213059862278)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_146 = structure(list(
    par = c(-0.203564620714006, 0.200967077653831, 0.488954140954405, 
    -1.58207407719358), value = 58.8670188043855, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9127979633934, -2.15822229776563, 
    192.216635674924, -8.33144309186906, -2.15822229776563, 46.7039422016313, 
    -12.1099203802544, -12.071667446989, 192.216635674924, -12.1099203802544, 
    3518.56420283703, -240.971063648843, -8.33144309186906, -12.071667446989, 
    -240.971063648843, 217.281539045544), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.203564620714006, 0.200967077653831
    ), logphi = c(0.488954140954405, -1.58207407719358)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_147 = structure(list(
    par = c(-0.260717409565463, -0.167425039197783, 0.481557294170495, 
    -1.66212154703517), value = 92.1962331422356, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.46694765065, -10.5958019105401, 
    268.645015779612, -16.2631964855109, -10.5958019105401, 33.8592968134321, 
    -25.974127140671, -12.2284875612166, 268.645015779612, -25.974127140671, 
    5761.4028345121, -346.666142940322, -16.2631964855109, -12.2284875612166, 
    -346.666142940322, 329.134719162738), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260717409565463, -0.167425039197783
    ), logphi = c(0.481557294170495, -1.66212154703517)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_148 = structure(list(
    par = c(-0.227605706501671, -0.12328454774628, 0.451837849253263, 
    -1.70843047602751), value = 67.6345223654745, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.8289518559782, -7.03680591840339, 
    230.126425648791, -7.04256979666695, -7.03680591840339, 32.0189051876696, 
    -10.3292801192367, -10.5681915449907, 230.126425648791, -10.3292801192367, 
    5397.49642434373, -237.113909165032, -7.04256979666695, -10.5681915449907, 
    -237.113909165032, 280.222374840378), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227605706501671, -0.12328454774628
    ), logphi = c(0.451837849253263, -1.70843047602751)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_149 = structure(list(
    par = c(-0.207164663665761, -0.152788796810695, 0.486158328117504, 
    -1.74293882229189), value = 61.5474776995221, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.4779810136062, -12.4580376681394, 
    243.361603450509, -13.5064697213139, -12.4580376681394, 27.6146369326824, 
    -23.5158169825667, -10.3455245943351, 243.361603450509, -23.5158169825667, 
    6063.09312703779, -344.330946933091, -13.5064697213139, -10.3455245943351, 
    -344.330946933091, 319.232466722497), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207164663665761, -0.152788796810695
    ), logphi = c(0.486158328117504, -1.74293882229189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_150 = structure(list(
    par = c(-0.25617288710624, 0.128182399603147, 0.519910658076023, 
    -1.60839937862659), value = 70.8604800529366, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.5903402415854, -7.57712541599176, 
    223.313454270624, -18.5337974301092, -7.57712541599176, 42.646869118812, 
    -27.7012149076938, -12.8390255298427, 223.313454270624, -27.7012149076938, 
    4186.77433002301, -368.160581459165, -18.5337974301092, -12.8390255298427, 
    -368.160581459165, 269.373138337414), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25617288710624, 0.128182399603147
    ), logphi = c(0.519910658076023, -1.60839937862659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_151 = structure(list(
    par = c(-0.178278840281272, 0.101167611040156, 0.484997007506545, 
    -1.7082220874093), value = 70.9877670673538, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.023350932181, -9.37238487708214, 
    248.031559046069, -10.1320133616412, -9.37238487708214, 43.3978605620666, 
    -15.2786378109226, -13.3184685200405, 248.031559046069, -15.2786378109226, 
    5703.80185646258, -336.512841753844, -10.1320133616412, -13.3184685200405, 
    -336.512841753844, 310.900742832132), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178278840281272, 0.101167611040156
    ), logphi = c(0.484997007506545, -1.7082220874093)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_152 = structure(list(
    par = c(-0.230920923089788, -0.00872102563089222, 0.510021888715552, 
    -1.59795112998414), value = 74.8948719997857, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6549683818077, -8.01080276247035, 
    203.117175527012, -15.4886762970818, -8.01080276247035, 34.9695396444361, 
    -25.3045540112851, -10.3996407965212, 203.117175527012, -25.3045540112851, 
    3850.90760667595, -305.398643018151, -15.4886762970818, -10.3996407965212, 
    -305.398643018151, 244.126253871713), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230920923089788, -0.00872102563089222
    ), logphi = c(0.510021888715552, -1.59795112998414)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_153 = structure(list(
    par = c(-0.214135510781241, 0.0417883350466769, 0.476156385207579, 
    -1.68815653880706), value = 65.2012785473302, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.410238836536, -7.1340273919418, 
    252.912940752026, -10.4403180358759, -7.1340273919418, 45.4305448940318, 
    -15.0617471135206, -13.3747695354458, 252.912940752026, -15.0617471135206, 
    5613.19139621474, -318.495552029674, -10.4403180358759, -13.3747695354458, 
    -318.495552029674, 308.964973712023), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214135510781241, 0.0417883350466769
    ), logphi = c(0.476156385207579, -1.68815653880706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_154 = structure(list(
    par = c(-0.108110966618946, -0.0645774671310983, 0.503900255148646, 
    -1.63169836096085), value = 97.3963576901414, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.994903936122, -14.4415244704987, 
    250.08603493859, -13.5483051000307, -14.4415244704987, 38.2589044747306, 
    -28.9505666337675, -11.5766055621691, 250.08603493859, -28.9505666337675, 
    5268.12144607902, -347.993066071695, -13.5483051000307, -11.5766055621691, 
    -347.993066071695, 316.388535807732), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.108110966618946, -0.0645774671310983
    ), logphi = c(0.503900255148646, -1.63169836096085)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_155 = structure(list(
    par = c(-0.178688889104148, 0.258903163892622, 0.516978512988341, 
    -1.62661534706487), value = 58.9201431811608, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7047473845214, -5.44956796488805, 
    227.658262232922, -14.2090548695961, -5.44956796488805, 55.6510888252149, 
    -21.4129493247839, -14.217571425057, 227.658262232922, -21.4129493247839, 
    4427.18557398614, -364.342889983327, -14.2090548695961, -14.217571425057, 
    -364.342889983327, 276.366477478973), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178688889104148, 0.258903163892622
    ), logphi = c(0.516978512988341, -1.62661534706487)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_156 = structure(list(
    par = c(-0.382560464197297, -0.119379898341052, 0.498080959223948, 
    -1.68257586615458), value = 74.4849491988589, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.9662155200926, -8.82975422555887, 
    257.878567492043, -22.9508293134728, -8.82975422555887, 32.6047285952313, 
    -32.2303406257163, -12.3025479901173, 257.878567492043, -32.2303406257163, 
    5526.91797112814, -413.579528226293, -22.9508293134728, -12.3025479901173, 
    -413.579528226293, 322.236430811529), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382560464197297, -0.119379898341052
    ), logphi = c(0.498080959223948, -1.68257586615458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_157 = structure(list(
    par = c(-0.262146463247334, 0.300993833127126, 0.517206705861581, 
    -1.47994459020189), value = 79.8956125377458, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.364813530912, 2.89685989329769, 
    210.48601089646, -16.4157298776502, 2.89685989329769, 67.9095663507212, 
    -19.739416924125, -14.838148290508, 210.48601089646, -19.739416924125, 
    3111.05848179238, -310.16524981986, -16.4157298776502, -14.838148290508, 
    -310.16524981986, 221.961546220228), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262146463247334, 0.300993833127126
    ), logphi = c(0.517206705861581, -1.47994459020189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_158 = structure(list(
    par = c(-0.204402667634517, -0.105284883101465, 0.484796307629837, 
    -1.55086471972386), value = 89.3087044253057, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.3207207479732, -8.06870051306419, 
    202.657928195293, -10.6864422804165, -8.06870051306419, 31.366513233877, 
    -20.362643066818, -10.0655605912436, 202.657928195293, -20.362643066818, 
    3635.10311962045, -224.96502320557, -10.6864422804165, -10.0655605912436, 
    -224.96502320557, 227.000247900122), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204402667634517, -0.105284883101465
    ), logphi = c(0.484796307629837, -1.55086471972386)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_159 = structure(list(
    par = c(-0.317043337536737, 0.123800092833501, 0.51938446843278, 
    -1.4673966681199), value = 82.7834523155896, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.315667623363, -1.74092237514856, 
    206.371174630959, -20.1334192144742, -1.74092237514856, 50.5293223582726, 
    -26.119311034023, -12.6502026951414, 206.371174630959, -26.119311034023, 
    2997.07994165388, -306.549325486571, -20.1334192144742, -12.6502026951414, 
    -306.549325486571, 217.055336946714), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.317043337536737, 0.123800092833501
    ), logphi = c(0.51938446843278, -1.4673966681199)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_160 = structure(list(
    par = c(-0.456074360470317, 0.0328551970295791, 0.496365567875749, 
    -1.61055137425789), value = 57.8514492273383, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.5722453551568, -1.83543669862729, 
    227.647869451175, -21.4356004804017, -1.83543669862729, 41.247684038126, 
    -24.0950650152172, -13.609084046351, 227.647869451175, -24.0950650152172, 
    4134.03512076016, -348.023448708545, -21.4356004804017, -13.609084046351, 
    -348.023448708545, 260.039497351983), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.456074360470317, 0.0328551970295791
    ), logphi = c(0.496365567875749, -1.61055137425789)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_161 = structure(list(
    par = c(-0.499921103165936, 0.161611471184865, 0.537176874055535, 
    -1.57447589369547), value = 61.5438571661395, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.4065744657548, -2.0472032886687, 
    223.978873592046, -30.1609714910001, -2.0472032886687, 46.7918597628625, 
    -35.8375354352347, -14.0418382770235, 223.978873592046, -35.8375354352347, 
    3751.90210010246, -440.640733678777, -30.1609714910001, -14.0418382770235, 
    -440.640733678777, 269.207085711543), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.499921103165936, 0.161611471184865
    ), logphi = c(0.537176874055535, -1.57447589369547)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_162 = structure(list(
    par = c(-0.195530910869919, -0.0869877972793478, 0.504482580777778, 
    -1.53768614044674), value = 102.592955772484, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.328463163801, -9.56916816363673, 
    227.548644541997, -15.9662877674549, -9.56916816363673, 39.4206104523676, 
    -28.2021240458619, -11.0535494393105, 227.548644541997, -28.2021240458619, 
    3980.37630050041, -301.940765833564, -15.9662877674549, -11.0535494393105, 
    -301.940765833564, 260.197591277489), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195530910869919, -0.0869877972793478
    ), logphi = c(0.504482580777778, -1.53768614044674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_163 = structure(list(
    par = c(-0.261138455198114, -0.225435612260333, 0.500641643303294, 
    -1.65407034463476), value = 79.5862331342304, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.2237047722845, -10.6056851869596, 
    217.032029276254, -16.9578554825023, -10.6056851869596, 23.8385606543545, 
    -27.7179383161297, -8.98321451359152, 217.032029276254, -27.7179383161297, 
    4641.81955608112, -323.058673194154, -16.9578554825023, -8.98321451359152, 
    -323.058673194154, 275.363559730124), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261138455198114, -0.225435612260333
    ), logphi = c(0.500641643303294, -1.65407034463476)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_164 = structure(list(
    par = c(-0.475826030838755, -0.125960612665019, 0.495647779779278, 
    -1.64961350443657), value = 80.7879309340182, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.061602603304, -6.71494244386395, 
    282.221084532353, -28.5557373800316, -6.71494244386395, 36.9874323205011, 
    -36.0213230692352, -14.1155127071357, 282.221084532353, -36.0213230692352, 
    5613.77359456117, -453.276245568901, -28.5557373800316, -14.1155127071357, 
    -453.276245568901, 340.583272983253), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475826030838755, -0.125960612665019
    ), logphi = c(0.495647779779278, -1.64961350443657)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_165 = structure(list(
    par = c(-0.248940233498, 0.137164960146517, 0.514623281106183, 
    -1.63468233865345), value = 64.9476971836687, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.5861985610888, -7.30191037234817, 
    231.204289086406, -17.5049401001104, -7.30191037234817, 45.168983323407, 
    -26.0883607907658, -13.3695902650999, 231.204289086406, -26.0883607907658, 
    4535.05833805323, -373.760545418378, -17.5049401001104, -13.3695902650999, 
    -373.760545418378, 281.579694497935), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.248940233498, 0.137164960146517
    ), logphi = c(0.514623281106183, -1.63468233865345)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_166 = structure(list(
    par = c(-0.515523209237973, 0.287294968553531, 0.500060216679475, 
    -1.54261256002334), value = 51.2896270218108, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.2780440652011, 9.42796605940543, 
    221.318185115393, -21.1259845261935, 9.42796605940543, 61.9970646802415, 
    -12.9920219080759, -17.6384698420406, 221.318185115393, -12.9920219080759, 
    3405.44852041091, -333.881812190739, -21.1259845261935, -17.6384698420406, 
    -333.881812190739, 231.399040782065), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.515523209237973, 0.287294968553531
    ), logphi = c(0.500060216679475, -1.54261256002334)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_167 = structure(list(
    par = c(-0.48761471943992, -0.00552346819472218, 0.469435014413886, 
    -1.57935112340354), value = 63.6747816291754, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.1282332342344, 1.29693016859278, 
    223.62218318861, -16.8116285017561, 1.29693016859278, 40.026850900432, 
    -15.5370373349228, -13.8074359234963, 223.62218318861, -15.5370373349228, 
    3822.97371420393, -264.352013811475, -16.8116285017561, -13.8074359234963, 
    -264.352013811475, 233.305813985396), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.48761471943992, -0.00552346819472218
    ), logphi = c(0.469435014413886, -1.57935112340354)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_168 = structure(list(
    par = c(-0.264461270455854, 0.00734996781636421, 0.480941174438253, 
    -1.57099094416568), value = 86.0192358106822, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.618679466905, -4.63831553076943, 
    232.742189211876, -12.4447546916429, -4.63831553076943, 44.1689734920203, 
    -19.2976107520337, -13.0211411644154, 232.742189211876, -19.2976107520337, 
    4183.86063878273, -268.493498932543, -12.4447546916429, -13.0211411644154, 
    -268.493498932543, 258.220699336675), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264461270455854, 0.00734996781636421
    ), logphi = c(0.480941174438253, -1.57099094416568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_169 = structure(list(
    par = c(-0.258344109045103, 0.127531973783225, 0.491755539133397, 
    -1.6423062167206), value = 56.0207875851028, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.0979435610531, -4.78777455192869, 
    229.521875885652, -13.1068823892022, -4.78777455192869, 45.1157787040302, 
    -17.2063448093951, -13.5663817752985, 229.521875885652, -17.2063448093951, 
    4578.59539687888, -319.735876732175, -13.1068823892022, -13.5663817752985, 
    -319.735876732175, 271.506809928823), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.258344109045103, 0.127531973783225
    ), logphi = c(0.491755539133397, -1.6423062167206)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_170 = structure(list(
    par = c(-0.336807286961395, -0.453943812384967, 0.497695292163273, 
    -1.55570827032975), value = 99.9703609714575, counts = structure(c(303L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.5132145989232, -9.08178139624738, 
    203.943243707982, -19.351430314174, -9.08178139624738, 16.4865320932961, 
    -26.8814431372277, -7.16176625203957, 203.943243707982, -26.8814431372277, 
    3733.34000715531, -276.463457632659, -19.351430314174, -7.16176625203957, 
    -276.463457632659, 240.157681833608), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.336807286961395, -0.453943812384967
    ), logphi = c(0.497695292163273, -1.55570827032975)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_171 = structure(list(
    par = c(-0.496155786794421, -0.00437662670323476, 0.487896575494731, 
    -1.63653080881197), value = 56.933885933646, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(77.9415559186702, -2.0374791418476, 
    223.420172861921, -20.8130699501652, -2.0374791418476, 35.8190830347382, 
    -22.0842280747036, -13.1262763183315, 223.420172861921, -22.0842280747036, 
    4220.6772282718, -336.93712809324, -20.8130699501652, -13.1262763183315, 
    -336.93712809324, 256.336623777997), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.496155786794421, -0.00437662670323476
    ), logphi = c(0.487896575494731, -1.63653080881197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_172 = structure(list(
    par = c(-0.126075107587503, -0.0903883158380524, 0.490467985618188, 
    -1.57260786827121), value = 88.7973532299117, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.9821237194756, -9.75438080175195, 
    201.217814137067, -9.27902976854966, -9.75438080175195, 33.353670151115, 
    -20.9303777367609, -9.63978471091309, 201.217814137067, -20.9303777367609, 
    3841.14093939658, -234.509903144442, -9.27902976854966, -9.63978471091309, 
    -234.509903144442, 237.145668815941), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.126075107587503, -0.0903883158380524
    ), logphi = c(0.490467985618188, -1.57260786827121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_173 = structure(list(
    par = c(-0.188397801413064, -0.240345872602481, 0.489503008827277, 
    -1.60729537719837), value = 96.7093415867243, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.0426004924479, -10.5469087650079, 
    216.200291898616, -12.8538772106168, -10.5469087650079, 26.6848221741611, 
    -23.997033871126, -9.09062168652497, 216.200291898616, -23.997033871126, 
    4363.94605416979, -266.918043791975, -12.8538772106168, -9.09062168652497, 
    -266.918043791975, 263.008853139013), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188397801413064, -0.240345872602481
    ), logphi = c(0.489503008827277, -1.60729537719837)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_174 = structure(list(
    par = c(-0.366220259246518, 0.197463829211289, 0.517621709123267, 
    -1.57865885917256), value = 58.1969938345411, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.3855400317657, -1.59009718458947, 
    218.692255295139, -20.7674691043991, -1.59009718458947, 49.0401951189767, 
    -24.2785594011252, -14.3369651848246, 218.692255295139, -24.2785594011252, 
    3751.55375935421, -362.902586800828, -20.7674691043991, -14.3369651848246, 
    -362.902586800828, 251.372381683268), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.366220259246518, 0.197463829211289
    ), logphi = c(0.517621709123267, -1.57865885917256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_175 = structure(list(
    par = c(-0.467329674838552, -0.101634323846454, 0.501773427169878, 
    -1.66313292300744), value = 81.8297274016447, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.370725739002, -8.1593790959289, 
    285.864902416222, -29.6375618802358, -8.1593790959289, 36.9687912282757, 
    -38.7654248683589, -14.2485037883944, 285.864902416222, -38.7654248683589, 
    5823.6125430291, -482.722861789853, -29.6375618802358, -14.2485037883944, 
    -482.722861789853, 352.394590226623), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.467329674838552, -0.101634323846454
    ), logphi = c(0.501773427169878, -1.66313292300744)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_176 = structure(list(
    par = c(-0.308291227473131, -0.055668746679434, 0.509317186265141, 
    -1.62072929613708), value = 67.5002054746379, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.6713236417854, -8.01352105028741, 
    220.277760387688, -19.3239479973073, -8.01352105028741, 33.3002243486646, 
    -28.9230516266059, -10.967569021858, 220.277760387688, -28.9230516266059, 
    4284.3956202212, -347.483977543916, -19.3239479973073, -10.967569021858, 
    -347.483977543916, 268.176677174381), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308291227473131, -0.055668746679434
    ), logphi = c(0.509317186265141, -1.62072929613708)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_177 = structure(list(
    par = c(-0.276990443544131, 0.0381690500113489, 0.491784058451789, 
    -1.68633368089889), value = 55.5364808535989, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.1930362605295, -5.78918870886014, 
    214.140144223052, -13.5133662961806, -5.78918870886014, 36.4436595372553, 
    -18.8219346100027, -11.5297464668984, 214.140144223052, -18.8219346100027, 
    4619.88285487891, -312.528012852198, -13.5133662961806, -11.5297464668984, 
    -312.528012852198, 262.780049798295), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276990443544131, 0.0381690500113489
    ), logphi = c(0.491784058451789, -1.68633368089889)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_178 = structure(list(
    par = c(-0.226698967016361, 0.0839249245058393, 0.481235674460013, 
    -1.63892633525185), value = 64.5093999992837, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.2683409347374, -4.9439680225305, 
    219.919956272463, -9.95678299098302, -4.9439680225305, 42.3930995445687, 
    -14.4334235834265, -12.4445763987069, 219.919956272463, -14.4334235834265, 
    4450.32441122351, -274.882992716385, -9.95678299098302, -12.4445763987069, 
    -274.882992716385, 258.968908664059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226698967016361, 0.0839249245058393
    ), logphi = c(0.481235674460013, -1.63892633525185)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_179 = structure(list(
    par = c(-0.3387053749493, 0.211490993012871, 0.483313134432991, 
    -1.62947313788299), value = 56.3047270205892, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.9464620532959, 0.0296644877550989, 
    216.20020018176, -12.2602185719245, 0.0296644877550989, 46.7905751868614, 
    -9.37701246783718, -14.3721875041081, 216.20020018176, -9.37701246783718, 
    4087.95237356685, -291.917353743898, -12.2602185719245, -14.3721875041081, 
    -291.917353743898, 243.592566373962), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3387053749493, 0.211490993012871
    ), logphi = c(0.483313134432991, -1.62947313788299)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_180 = structure(list(
    par = c(-0.207421967069621, 0.10960983628403, 0.505989482342207, 
    -1.67972149043642), value = 61.8688816749699, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.4370647685226, -9.4747928187644, 
    230.747086840566, -14.3344829339753, -9.4747928187644, 40.6475213790003, 
    -22.9123196682224, -12.6720637805278, 230.747086840566, -22.9123196682224, 
    4965.65378452196, -356.927305293908, -14.3344829339753, -12.6720637805278, 
    -356.927305293908, 288.781345970435), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207421967069621, 0.10960983628403
    ), logphi = c(0.505989482342207, -1.67972149043642)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_181 = structure(list(
    par = c(-0.199914655589282, -0.0881019760003579, 0.494831548543919, 
    -1.54049447898293), value = 89.7982893576372, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.7095497312064, -8.45681097416673, 
    205.81809072695, -12.6165916718435, -8.45681097416673, 33.5569022240634, 
    -23.0623318664414, -10.2205504273201, 205.81809072695, -23.0623318664414, 
    3618.15377096519, -250.335484771824, -12.6165916718435, -10.2205504273201, 
    -250.335484771824, 231.807080691482), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199914655589282, -0.0881019760003579
    ), logphi = c(0.494831548543919, -1.54049447898293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_182 = structure(list(
    par = c(-0.405830841848987, 0.179496605394085, 0.496973936898994, 
    -1.627661191548), value = 57.4797845241804, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.7911112571184, -0.637757779031745, 
    225.170528652896, -18.11026757359, -0.637757779031745, 45.9726051467158, 
    -17.2121010724169, -14.9785270275871, 225.170528652896, -17.2121010724169, 
    4165.41861818764, -344.945778225636, -18.11026757359, -14.9785270275871, 
    -344.945778225636, 257.448593400156), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.405830841848987, 0.179496605394085
    ), logphi = c(0.496973936898994, -1.627661191548)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_183 = structure(list(
    par = c(-0.0249120118731724, -0.223029928428833, 0.488020093345715, 
    -1.69730455010576), value = 89.747023443737, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.6338113934075, -14.6630740722742, 
    213.619878397964, -7.27379246256987, -14.6630740722742, 25.5621257352345, 
    -21.0190917577791, -8.19369709148532, 213.619878397964, -21.0190917577791, 
    5325.0961796607, -262.529818769508, -7.27379246256987, -8.19369709148532, 
    -262.529818769508, 291.476650602362), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0249120118731724, -0.223029928428833
    ), logphi = c(0.488020093345715, -1.69730455010576)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_184 = structure(list(
    par = c(-0.405868461129183, 0.32273059909178, 0.490177899163214, 
    -1.58803163505076), value = 51.7848345679278, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.332098417676, 8.11610435036414, 
    232.425818968096, -15.5371448045116, 8.11610435036414, 65.3250273039419, 
    -6.6623335950311, -17.7496018949341, 232.425818968096, -6.6623335950311, 
    3967.60051260259, -329.082385247759, -15.5371448045116, -17.7496018949341, 
    -329.082385247759, 250.59996932697), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.405868461129183, 0.32273059909178
    ), logphi = c(0.490177899163214, -1.58803163505076)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_185 = structure(list(
    par = c(-0.494029712202898, 0.0698785040737124, 0.535531799356175, 
    -1.59130989484764), value = 62.0662937087247, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(73.9166329459806, -5.24395014522838, 
    226.380836803486, -30.4812092686291, -5.24395014522838, 39.1050249959335, 
    -39.2048873685269, -12.6483862228355, 226.380836803486, -39.2048873685269, 
    3982.97042497475, -447.942732481721, -30.4812092686291, -12.6483862228355, 
    -447.942732481721, 278.752197370835), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.494029712202898, 0.0698785040737124
    ), logphi = c(0.535531799356175, -1.59130989484764)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_186 = structure(list(
    par = c(-0.101371347835741, 0.0125615542606752, 0.495178505977346, 
    -1.4841169795362), value = 99.3555662558033, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.107643008372, -8.76881462730239, 
    201.688361624264, -8.68518580787736, -8.76881462730239, 43.4874433281607, 
    -21.8942524448096, -10.7219680813841, 201.688361624264, -21.8942524448096, 
    3299.71507807869, -220.255681895765, -8.68518580787736, -10.7219680813841, 
    -220.255681895765, 217.205750104199), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.101371347835741, 0.0125615542606752
    ), logphi = c(0.495178505977346, -1.4841169795362)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_187 = structure(list(
    par = c(-0.45617100751157, 0.107425253011645, 0.524159720048357, 
    -1.53538442148367), value = 72.9483873356298, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.0953352085071, -0.528825900403262, 
    218.65393581777, -26.3795427866143, -0.528825900403262, 48.176276656875, 
    -30.6736325192958, -13.509028622849, 218.65393581777, -30.6736325192958, 
    3468.60841026952, -377.86117170846, -26.3795427866143, -13.509028622849, 
    -377.86117170846, 247.456794618017), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.45617100751157, 0.107425253011645
    ), logphi = c(0.524159720048357, -1.53538442148367)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_188 = structure(list(
    par = c(-0.25613971954239, -0.00642294353783348, 0.529390141065014, 
    -1.6576738148433), value = 77.6909872756985, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.0547985490048, -12.6161294176086, 
    244.773361679052, -22.9000808875668, -12.6161294176086, 35.6179588614225, 
    -38.4847904690844, -11.613130215693, 244.773361679052, -38.4847904690844, 
    5106.09528053863, -440.614244476834, -22.9000808875668, -11.613130215693, 
    -440.614244476834, 316.256857693986), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25613971954239, -0.00642294353783348
    ), logphi = c(0.529390141065014, -1.6576738148433)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_189 = structure(list(
    par = c(-0.390804445160527, -0.157023742637791, 0.501661829380767, 
    -1.67651610713358), value = 77.785870412343, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.0184185112159, -9.65426209376119, 
    260.65829586841, -24.5685996986822, -9.65426209376119, 30.6523644368895, 
    -35.1473051622975, -11.8511226201434, 260.65829586841, -35.1473051622975, 
    5567.51180603499, -428.182801663013, -24.5685996986822, -11.8511226201434, 
    -428.182801663013, 328.633434531156), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.390804445160527, -0.157023742637791
    ), logphi = c(0.501661829380767, -1.67651610713358)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_190 = structure(list(
    par = c(-0.135817647538379, 0.194890883829305, 0.495634735635569, 
    -1.53810100357315), value = 77.5454930449836, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.760210552982, -4.09133150114371, 
    209.317543660603, -8.47644271573245, -4.09133150114371, 55.5869298004552, 
    -16.9847452262673, -12.8431884256486, 209.317543660603, -16.9847452262673, 
    3642.19502033336, -256.871392465996, -8.47644271573245, -12.8431884256486, 
    -256.871392465996, 233.636596551179), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135817647538379, 0.194890883829305
    ), logphi = c(0.495634735635569, -1.53810100357315)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_191 = structure(list(
    par = c(-0.474527552194745, -0.23991606182324, 0.49383966856691, 
    -1.64962044916883), value = 71.8341119928794, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.2914772554902, -7.01442653294748, 
    239.628929492142, -24.7164742397388, -7.01442653294748, 26.2867635036912, 
    -32.1659662709806, -10.6198608893493, 239.628929492142, -32.1659662709806, 
    4864.12163446914, -381.040005436262, -24.7164742397388, -10.6198608893493, 
    -381.040005436262, 293.672100070808), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.474527552194745, -0.23991606182324
    ), logphi = c(0.49383966856691, -1.64962044916883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_192 = structure(list(
    par = c(-0.290645526331063, 0.168590703134238, 0.505174274142117, 
    -1.66721535641831), value = 47.7123024519526, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.9894574042054, -5.37600278605055, 
    221.525306589143, -15.6932913091268, -5.37600278605055, 42.6049174908627, 
    -19.9303774977011, -13.4179968442893, 221.525306589143, -19.9303774977011, 
    4517.0681633877, -351.620930086227, -15.6932913091268, -13.4179968442893, 
    -351.620930086227, 268.61359121888), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290645526331063, 0.168590703134238
    ), logphi = c(0.505174274142117, -1.66721535641831)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_193 = structure(list(
    par = c(-0.0742274257225572, 0.203342287008461, 0.502535802569533, 
    -1.55554594533499), value = 73.6130719336425, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.747067417473, -6.79518564794535, 
    185.648662323956, -7.023590434585, -6.79518564794535, 47.6192384404328, 
    -16.6269067918279, -11.0091442788729, 185.648662323956, -16.6269067918279, 
    3391.4584544732, -241.47885049608, -7.023590434585, -11.0091442788729, 
    -241.47885049608, 216.405724529523), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0742274257225572, 0.203342287008461
    ), logphi = c(0.502535802569533, -1.55554594533499)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_194 = structure(list(
    par = c(-0.342630248131909, 0.0274148853641647, 0.539507051426928, 
    -1.54763172785174), value = 79.3815923794173, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.6811593706507, -7.15555931662948, 
    202.910996183192, -24.6510438373093, -7.15555931662948, 36.3720713920657, 
    -34.5454267645096, -10.2763665985606, 202.910996183192, -34.5454267645096, 
    3423.98616396267, -376.532428033372, -24.6510438373093, -10.2763665985606, 
    -376.532428033372, 244.721647565171), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342630248131909, 0.0274148853641647
    ), logphi = c(0.539507051426928, -1.54763172785174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_195 = structure(list(
    par = c(-0.37997575657604, -0.0457093755906583, 0.49067964372749, 
    -1.7510189441507), value = 60.1607389364153, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.2714892302138, -10.2883524526476, 
    287.831722328491, -22.4554064125471, -10.2883524526476, 35.5732713757106, 
    -29.7341993977795, -14.3169122530651, 287.831722328491, -29.7341993977795, 
    6823.71559335593, -466.274487274987, -22.4554064125471, -14.3169122530651, 
    -466.274487274987, 364.310566883574), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37997575657604, -0.0457093755906583
    ), logphi = c(0.49067964372749, -1.7510189441507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_196 = structure(list(
    par = c(-0.257969717329474, -0.2937488129624, 0.495181526928114, 
    -1.62088889655459), value = 97.8841477372727, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.9140310187881, -10.2319854065058, 
    217.49822045436, -16.5059209820129, -10.2319854065058, 22.8389592251688, 
    -26.7356209278091, -8.6742418758945, 217.49822045436, -26.7356209278091, 
    4438.26067780506, -298.581068413739, -16.5059209820129, -8.6742418758945, 
    -298.581068413739, 268.650484670729), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257969717329474, -0.2937488129624
    ), logphi = c(0.495181526928114, -1.62088889655459)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_197 = structure(list(
    par = c(-0.33054180156602, 0.0301995496309858, 0.520830527123163, 
    -1.49365809900692), value = 93.6277400852565, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.7695212205037, -4.0719906522213, 
    208.647803294326, -21.6881210697295, -4.0719906522213, 43.2175792646206, 
    -29.1430830650086, -11.5657107553346, 208.647803294326, -29.1430830650086, 
    3202.40934636828, -322.650087678511, -21.6881210697295, -11.5657107553346, 
    -322.650087678511, 228.471110677475), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33054180156602, 0.0301995496309858
    ), logphi = c(0.520830527123163, -1.49365809900692)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_198 = structure(list(
    par = c(-0.255491700756015, -0.204091933051082, 0.502573628300593, 
    -1.50351235513665), value = 105.956193187537, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.3434022023505, -8.83313437327615, 
    204.382688739457, -16.7006237372647, -8.83313437327615, 27.9346789007207, 
    -26.5179804372906, -9.17682986667501, 204.382688739457, -26.5179804372906, 
    3362.20596257419, -261.916085310787, -16.7006237372647, -9.17682986667501, 
    -261.916085310787, 224.888507617038), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255491700756015, -0.204091933051082
    ), logphi = c(0.502573628300593, -1.50351235513665)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_199 = structure(list(
    par = c(-0.0309909622460811, 0.140785373002046, 0.486022607675394, 
    -1.57639253249864), value = 82.1019656742116, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.322179672641, -8.86832820512495, 
    206.291902344446, -3.72642251811328, -8.86832820512495, 50.4326041621539, 
    -15.4668936396263, -11.4487690208165, 206.291902344446, -15.4668936396263, 
    4050.24510201102, -227.263854938542, -3.72642251811328, -11.4487690208165, 
    -227.263854938542, 246.057225719909), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0309909622460811, 0.140785373002046
    ), logphi = c(0.486022607675394, -1.57639253249864)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_210_200 = structure(list(
    par = c(-0.478894137793601, -0.0194403689548711, 0.504193475529058, 
    -1.58236563117555), value = 74.8308330419496, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.3773500919035, -2.83029270420343, 
    252.529835186976, -27.1757077321411, -2.83029270420343, 43.3914005917302, 
    -32.2254794902221, -14.3369978431451, 252.529835186976, -32.2254794902221, 
    4397.85220686417, -401.085889873087, -27.1757077321411, -14.3369978431451, 
    -401.085889873087, 288.520611722021), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.478894137793601, -0.0194403689548711
    ), logphi = c(0.504193475529058, -1.58236563117555)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_1 = structure(list(
    par = c(-0.0844765603484113, 0.174954681073926, 0.500777601792252, 
    -1.55369152652119), value = 81.9511849248239, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.449042426671, -8.44974526970077, 
    229.359406791474, -8.9366266475821, -8.44974526970077, 56.2520302658243, 
    -20.9290353545555, -13.3992529001148, 229.359406791474, -20.9290353545555, 
    4174.60958114901, -293.126192890014, -8.9366266475821, -13.3992529001148, 
    -293.126192890014, 266.039924547101), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0844765603484113, 0.174954681073926
    ), logphi = c(0.500777601792252, -1.55369152652119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_2 = structure(list(
    par = c(-0.171870873644117, 0.280654585412989, 0.502742702585674, 
    -1.48210408351408), value = 84.8413562428832, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.538790344862, -0.201658810539129, 
    231.869726341927, -11.4892054003946, -0.201658810539129, 
    71.1442209713198, -18.7104618376566, -15.6293371027516, 231.869726341927, 
    -18.7104618376566, 3581.78363780937, -293.292073012097, -11.4892054003946, 
    -15.6293371027516, -293.292073012097, 243.205032873561), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.171870873644117, 0.280654585412989
    ), logphi = c(0.502742702585674, -1.48210408351408)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_3 = structure(list(
    par = c(-0.348239864822579, -0.253083011857561, 0.503078661409241, 
    -1.64785704400116), value = 108.879077288341, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.1739704611043, -12.690931118442, 
    285.080791591952, -26.6292940676038, -12.690931118442, 28.6505386100089, 
    -39.4915371231264, -11.6760927717507, 285.080791591952, -39.4915371231264, 
    5947.16872712908, -450.963123995507, -26.6292940676038, -11.6760927717507, 
    -450.963123995507, 359.761141744741), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348239864822579, -0.253083011857561
    ), logphi = c(0.503078661409241, -1.64785704400116)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_4 = structure(list(
    par = c(-0.531820489559572, 0.211582580669883, 0.540952926960735, 
    -1.60541806396859), value = 51.6907866188104, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.6502724368415, -0.0440570389059758, 
    258.965692644608, -35.7088639528769, -0.0440570389059758, 
    61.4165984913484, -42.3344665421155, -16.932156347238, 258.965692644608, 
    -42.3344665421155, 4516.65017763148, -536.697567534716, -35.7088639528769, 
    -16.932156347238, -536.697567534716, 319.074081076565), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.531820489559572, 0.211582580669883
    ), logphi = c(0.540952926960735, -1.60541806396859)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_5 = structure(list(
    par = c(-0.420939206234591, 0.230512079878031, 0.496406152081378, 
    -1.61678657329069), value = 58.3306962628492, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.183116942849, 3.58525004884314, 
    251.611277157338, -20.0477864176207, 3.58525004884314, 61.3938072469011, 
    -16.0305746774725, -17.728786037452, 251.611277157338, -16.0305746774725, 
    4522.20573244944, -383.373938952047, -20.0477864176207, -17.728786037452, 
    -383.373938952047, 282.742163385308), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.420939206234591, 0.230512079878031
    ), logphi = c(0.496406152081378, -1.61678657329069)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_6 = structure(list(
    par = c(-0.418449853885043, -0.20579112288574, 0.501141056347848, 
    -1.61547131587057), value = 82.9504307101902, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.8047792963623, -7.32679031756334, 
    222.869309215667, -22.624032695262, -7.32679031756334, 26.0873446755738, 
    -30.6246137782296, -10.0559472091533, 222.869309215667, -30.6246137782296, 
    4293.46073292436, -348.764239602062, -22.624032695262, -10.0559472091533, 
    -348.764239602062, 269.074133061764), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.418449853885043, -0.20579112288574
    ), logphi = c(0.501141056347848, -1.61547131587057)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_7 = structure(list(
    par = c(-0.172999640134198, 0.237268691130832, 0.501284384343199, 
    -1.57161799925389), value = 76.6396606395898, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.256673160985, -3.14429089698365, 
    241.793768861243, -11.90348458735, -3.14429089698365, 64.4820555244507, 
    -18.6523909064817, -15.3501614050811, 241.793768861243, -18.6523909064817, 
    4354.24177311816, -329.755016117872, -11.90348458735, -15.3501614050811, 
    -329.755016117872, 276.935575186599), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.172999640134198, 0.237268691130832
    ), logphi = c(0.501284384343199, -1.57161799925389)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_8 = structure(list(
    par = c(-0.155174308971254, -0.100069406801762, 0.484796551022043, 
    -1.64718413729333), value = 85.7403080871472, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.998334363899, -11.6431248926574, 
    254.260900387493, -11.6435498540568, -11.6431248926574, 37.895168937041, 
    -23.5775544155103, -11.852031366999, 254.260900387493, -23.5775544155103, 
    5460.01114279093, -312.571477966372, -11.6435498540568, -11.852031366999, 
    -312.571477966372, 315.160900701272), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.155174308971254, -0.100069406801762
    ), logphi = c(0.484796551022043, -1.64718413729333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_9 = structure(list(
    par = c(-0.221346898169458, 0.0860474812398463, 0.496379176033449, 
    -1.66983644852982), value = 69.3302964434206, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.01475684571, -8.75423440760414, 
    254.34722650175, -14.5851269817143, -8.75423440760414, 45.5469916964546, 
    -22.2416617354781, -13.9994049455083, 254.34722650175, -22.2416617354781, 
    5393.83283024009, -368.373102030972, -14.5851269817143, -13.9994049455083, 
    -368.373102030972, 312.601059089701), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221346898169458, 0.0860474812398463
    ), logphi = c(0.496379176033449, -1.66983644852982)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_10 = structure(list(
    par = c(-0.17464998219393, 0.0913779558490364, 0.486897853749742, 
    -1.60382174806991), value = 72.3769982065277, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.65812001065, -6.45152968203888, 
    222.534288589316, -9.45736044855039, -6.45152968203888, 45.6606879559729, 
    -17.1022315704761, -12.5499591785427, 222.534288589316, -17.1022315704761, 
    4317.18714911611, -272.964505215967, -9.45736044855039, -12.5499591785427, 
    -272.964505215967, 260.077263728675), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.17464998219393, 0.0913779558490364
    ), logphi = c(0.486897853749742, -1.60382174806991)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_11 = structure(list(
    par = c(-0.198243494185262, 0.0279312849933298, 0.495021022768864, 
    -1.66877714077927), value = 81.975560679761, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.829522631676, -11.424435527374, 
    293.985448607259, -16.2943579500308, -11.424435527374, 50.7052649894035, 
    -27.4371345092561, -15.2529451860062, 293.985448607259, -27.4371345092561, 
    6322.29903893844, -414.924887653711, -16.2943579500308, -15.2529451860062, 
    -414.924887653711, 364.964205036955), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198243494185262, 0.0279312849933298
    ), logphi = c(0.495021022768864, -1.66877714077927)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_12 = structure(list(
    par = c(-0.164301461349271, 0.17888084512218, 0.491698536948148, 
    -1.65803516315803), value = 66.5456690809958, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.428378754639, -6.3795560976132, 
    252.155148952937, -10.3545672445193, -6.3795560976132, 55.4340012506316, 
    -16.0533330877399, -14.6999336561038, 252.155148952937, -16.0533330877399, 
    5309.50679102915, -343.114907286335, -10.3545672445193, -14.6999336561038, 
    -343.114907286335, 307.427240407776), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.164301461349271, 0.17888084512218
    ), logphi = c(0.491698536948148, -1.65803516315803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_13 = structure(list(
    par = c(-0.181474059414729, 0.213659388793762, 0.499662902344381, 
    -1.59563709105229), value = 80.8403134431869, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.400140155804, -5.01140116071497, 
    267.518043735038, -13.306059969409, -5.01140116071497, 64.6505745400816, 
    -20.4500258043083, -16.6006447042122, 267.518043735038, -20.4500258043083, 
    5012.07209562082, -369.065780054356, -13.306059969409, -16.6006447042122, 
    -369.065780054356, 311.808741720654), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.181474059414729, 0.213659388793762
    ), logphi = c(0.499662902344381, -1.59563709105229)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_14 = structure(list(
    par = c(-0.260116843677829, 0.05251627680563, 0.497519247828991, 
    -1.58958829681796), value = 83.2942626305831, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.875064845331, -6.4682841482977, 
    247.715099725099, -16.5215419265508, -6.4682841482977, 46.4606365113696, 
    -24.6931951473073, -13.9872879749703, 247.715099725099, -24.6931951473073, 
    4559.11139131615, -340.176211793164, -16.5215419265508, -13.9872879749703, 
    -340.176211793164, 285.694441103601), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260116843677829, 0.05251627680563
    ), logphi = c(0.497519247828991, -1.58958829681796)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_15 = structure(list(
    par = c(-0.357104729801799, -0.00231483307522111, 0.513454365925636, 
    -1.5996818623414), value = 82.9733697036569, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.4359883635902, -8.05519526281273, 
    257.271749251942, -25.0337010800905, -8.05519526281273, 40.7906649257939, 
    -34.6447485561896, -13.7448063526335, 257.271749251942, -34.6447485561896, 
    4733.31718039205, -419.926601621157, -25.0337010800905, -13.7448063526335, 
    -419.926601621157, 306.601562243713), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357104729801799, -0.00231483307522111
    ), logphi = c(0.513454365925636, -1.5996818623414)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_16 = structure(list(
    par = c(-0.24576194036309, 0.260570595954678, 0.501719539078573, 
    -1.60691129326189), value = 69.8199283659808, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.572733736031, -1.09345921828208, 
    266.92160522046, -15.5777936701185, -1.09345921828208, 67.9065108251109, 
    -18.108246070625, -17.6392442021722, 266.92160522046, -18.108246070625, 
    4951.49857555432, -389.54788331047, -15.5777936701185, -17.6392442021722, 
    -389.54788331047, 308.883403217663), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24576194036309, 0.260570595954678
    ), logphi = c(0.501719539078573, -1.60691129326189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_17 = structure(list(
    par = c(-0.264196188852301, -0.00961987511447164, 0.489658897605311, 
    -1.65265939978606), value = 78.602660592032, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.509871530681, -8.58850776097597, 
    254.360684039057, -15.7679590664372, -8.58850776097597, 39.7751140539526, 
    -23.5379636102095, -13.3349780000458, 254.360684039057, -23.5379636102095, 
    5245.65383138409, -350.178203291307, -15.7679590664372, -13.3349780000458, 
    -350.178203291307, 306.810776155686), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264196188852301, -0.00961987511447164
    ), logphi = c(0.489658897605311, -1.65265939978606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_18 = structure(list(
    par = c(-0.273988616310266, -0.0905669508612104, 0.483879618443463, 
    -1.57587642477024), value = 95.321003891832, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.824410812412, -7.2687394343518, 
    230.204500425657, -14.2007301739966, -7.2687394343518, 35.6022788317034, 
    -22.4686317409351, -11.8028546829407, 230.204500425657, -22.4686317409351, 
    4204.49137984136, -273.528655505118, -14.2007301739966, -11.8028546829407, 
    -273.528655505118, 259.239505410847), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273988616310266, -0.0905669508612104
    ), logphi = c(0.483879618443463, -1.57587642477024)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_19 = structure(list(
    par = c(-0.350778117620633, -0.147299202178573, 0.529875742170575, 
    -1.61079484998701), value = 87.9050276132806, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.4258256604508, -11.1952869836784, 
    240.215483898965, -27.6138615404875, -11.1952869836784, 29.7283962957806, 
    -41.3951516193833, -10.0922962822381, 240.215483898965, -41.3951516193833, 
    4661.56087117042, -442.72815897628, -27.6138615404875, -10.0922962822381, 
    -442.72815897628, 306.793162049956), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350778117620633, -0.147299202178573
    ), logphi = c(0.529875742170575, -1.61079484998701)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_20 = structure(list(
    par = c(-0.422232112239555, -0.0904445264357183, 0.510554715263848, 
    -1.60309818698954), value = 88.2935541268373, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.4011103075914, -7.83687259797716, 
    275.391431092231, -29.4799747653229, -7.83687259797716, 39.2412354841554, 
    -39.4028239654176, -13.7649402347506, 275.391431092231, -39.4028239654176, 
    5103.88805346906, -455.939797891602, -29.4799747653229, -13.7649402347506, 
    -455.939797891602, 330.132910679737), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.422232112239555, -0.0904445264357183
    ), logphi = c(0.510554715263848, -1.60309818698954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_21 = structure(list(
    par = c(-0.206923488442923, 0.124450579848712, 0.48500642976896, 
    -1.65762060612151), value = 66.3796014799618, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.329127239097, -6.58491531169147, 
    242.822779458862, -10.6614180399589, -6.58491531169147, 46.7463236901722, 
    -15.2172065277512, -13.8890126617497, 242.822779458862, -15.2172065277512, 
    5074.18706748552, -318.191931953038, -10.6614180399589, -13.8890126617497, 
    -318.191931953038, 291.747524645558), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206923488442923, 0.124450579848712
    ), logphi = c(0.48500642976896, -1.65762060612151)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_22 = structure(list(
    par = c(-0.0925155997970527, 0.0586885205257669, 0.479254780500433, 
    -1.60500293074383), value = 88.2945774539244, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.424283624412, -10.4237037419352, 
    235.013401166384, -5.83968019185477, -10.4237037419352, 45.5917908617209, 
    -16.818036613131, -12.4659866980181, 235.013401166384, -16.818036613131, 
    4761.05466847088, -254.826127443764, -5.83968019185477, -12.4659866980181, 
    -254.826127443764, 281.047546778268), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0925155997970527, 0.0586885205257669
    ), logphi = c(0.479254780500433, -1.60500293074383)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_23 = structure(list(
    par = c(-0.383837652119991, -0.215564238007622, 0.482663358249131, 
    -1.69062981561875), value = 77.5878451689341, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.3820867092736, -8.69232098565931, 
    257.478927700561, -20.5771797183729, -8.69232098565931, 28.1217389890287, 
    -28.007324527124, -11.4546357963263, 257.478927700561, -28.007324527124, 
    5653.07935457682, -374.612617981995, -20.5771797183729, -11.4546357963263, 
    -374.612617981995, 318.362302071051), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383837652119991, -0.215564238007622
    ), logphi = c(0.482663358249131, -1.69062981561875)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_24 = structure(list(
    par = c(-0.423006198475887, 0.0992092316936565, 0.509724756877116, 
    -1.63224675187663), value = 66.8796567861626, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.3579509100375, -4.00311146719901, 
    271.500454047668, -26.5528507377155, -4.00311146719901, 51.3352315962834, 
    -31.9013524503475, -16.4353179190613, 271.500454047668, -31.9013524503475, 
    5112.57956325295, -457.447527130839, -26.5528507377155, -16.4353179190613, 
    -457.447527130839, 324.160736770551), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.423006198475887, 0.0992092316936565
    ), logphi = c(0.509724756877116, -1.63224675187663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_25 = structure(list(
    par = c(-0.243457322911553, -0.103667876548931, 0.488514078778075, 
    -1.74038569379084), value = 74.1275914607651, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.8352751630496, -12.2976467622493, 
    279.176062697672, -16.8859010578615, -12.2976467622493, 34.9824260510445, 
    -27.2538229850738, -12.592027815117, 279.176062697672, -27.2538229850738, 
    6798.10123153857, -409.564854741973, -16.8859010578615, -12.592027815117, 
    -409.564854741973, 361.242831374398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243457322911553, -0.103667876548931
    ), logphi = c(0.488514078778075, -1.74038569379084)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_26 = structure(list(
    par = c(-0.168911942912851, 0.170887940222962, 0.467314084595561, 
    -1.70109606028078), value = 64.9851121911111, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.088409231405, -4.81559884590865, 
    288.345482616137, -6.16129769426266, -4.81559884590865, 61.6536191699879, 
    -5.27376567660554, -16.1169391041938, 288.345482616137, -5.27376567660554, 
    6626.22393408085, -340.57669993004, -6.16129769426266, -16.1169391041938, 
    -340.57669993004, 353.582880205039), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168911942912851, 0.170887940222962
    ), logphi = c(0.467314084595561, -1.70109606028078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_27 = structure(list(
    par = c(-0.313977860164883, -0.0307205235321273, 0.506667599271149, 
    -1.68273282183638), value = 69.1898394162676, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.9421290304665, -10.0417850106282, 
    275.15454517868, -22.8428997086638, -10.0417850106282, 41.4518885492043, 
    -34.4491907782185, -13.7188895177331, 275.15454517868, -34.4491907782185, 
    5910.49073130279, -449.704681455998, -22.8428997086638, -13.7188895177331, 
    -449.704681455998, 346.734859693498), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313977860164883, -0.0307205235321273
    ), logphi = c(0.506667599271149, -1.68273282183638)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_28 = structure(list(
    par = c(-0.192392248807971, 0.354597956079562, 0.508709618445045, 
    -1.50454568730774), value = 72.021644026113, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.532539381988, 3.24961050424122, 
    212.293886381332, -11.6162681678134, 3.24961050424122, 73.0417966359198, 
    -14.9165857088462, -15.1188869885743, 212.293886381332, -14.9165857088462, 
    3349.42985702469, -295.192880706452, -11.6162681678134, -15.1188869885743, 
    -295.192880706452, 228.370461286431), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.192392248807971, 0.354597956079562
    ), logphi = c(0.508709618445045, -1.50454568730774)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_29 = structure(list(
    par = c(-0.201383875219922, 0.334137100340931, 0.493440644127288, 
    -1.61641592277394), value = 62.3168739205674, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.404642528641, 1.77926460942501, 
    262.095568997367, -10.4589825724588, 1.77926460942501, 74.0162635999297, 
    -9.28982488268559, -17.7814980588664, 262.095568997367, -9.28982488268559, 
    5015.61860744992, -360.617140870545, -10.4589825724588, -17.7814980588664, 
    -360.617140870545, 304.070494335562), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201383875219922, 0.334137100340931
    ), logphi = c(0.493440644127288, -1.61641592277394)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_30 = structure(list(
    par = c(-0.282795786704069, 0.022367284925188, 0.491801014949195, 
    -1.65746385903765), value = 61.8560552205068, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.3265582229458, -6.14205369586784, 
    240.997630484685, -15.6819820382736, -6.14205369586784, 42.1937573698017, 
    -22.149845660735, -13.0397382331893, 240.997630484685, -22.149845660735, 
    4958.57357523555, -342.609770504154, -15.6819820382736, -13.0397382331893, 
    -342.609770504154, 290.323147570604), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.282795786704069, 0.022367284925188
    ), logphi = c(0.491801014949195, -1.65746385903765)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_31 = structure(list(
    par = c(-0.260481587558587, 0.29865214189585, 0.497952792759026, 
    -1.59824393257286), value = 50.7870824975129, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.203799822159, 3.05705944825263, 
    240.488280677909, -13.216138737171, 3.05705944825263, 70.5026766620875, 
    -12.6684025065771, -16.5742516946565, 240.488280677909, -12.6684025065771, 
    4369.61153728177, -342.55892686641, -13.216138737171, -16.5742516946565, 
    -342.55892686641, 273.161980503644), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260481587558587, 0.29865214189585
    ), logphi = c(0.497952792759026, -1.59824393257286)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_32 = structure(list(
    par = c(-0.372743970116291, 0.117449888312297, 0.506464884477317, 
    -1.6383348672445), value = 75.7444735383, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.83162622991, -5.27361899571588, 
    308.502394787524, -26.7901762480705, -5.27361899571588, 57.5007166077057, 
    -32.615666412994, -18.7126366366641, 308.502394787524, -32.615666412994, 
    5913.26551478133, -500.033336990668, -26.7901762480705, -18.7126366366641, 
    -500.033336990668, 366.406077006332), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372743970116291, 0.117449888312297
    ), logphi = c(0.506464884477317, -1.6383348672445)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_33 = structure(list(
    par = c(-0.226130413966635, 0.112244228032828, 0.543162201229142, 
    -1.56977434248615), value = 105.605768850802, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.100046867487, -13.0635332240558, 
    282.794975824174, -29.1679596760019, -13.0635332240558, 55.3574598924911, 
    -46.0376291364639, -14.8708039624523, 282.794975824174, -46.0376291364639, 
    5011.45771859512, -522.585839721756, -29.1679596760019, -14.8708039624523, 
    -522.585839721756, 347.899518651218), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.226130413966635, 0.112244228032828
    ), logphi = c(0.543162201229142, -1.56977434248615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_34 = structure(list(
    par = c(-0.18494378088946, 0.256650281192387, 0.506936281681722, 
    -1.67679444108287), value = 59.2499665339149, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.538583302069, -5.74565489941392, 
    267.042860125244, -14.1356905203338, -5.74565489941392, 63.8783138207089, 
    -19.3124004610468, -16.4486181999379, 267.042860125244, -19.3124004610468, 
    5651.9925986418, -414.747927494297, -14.1356905203338, -16.4486181999379, 
    -414.747927494297, 329.849774379554), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18494378088946, 0.256650281192387
    ), logphi = c(0.506936281681722, -1.67679444108287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_35 = structure(list(
    par = c(-0.249136994405075, 0.150358843803186, 0.493555185354923, 
    -1.55259603769847), value = 82.5713507790315, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.196317200945, -1.49943160110411, 
    238.562026900979, -13.645658690109, -1.49943160110411, 57.6585851312927, 
    -19.4117430289964, -14.8663068486599, 238.562026900979, -19.4117430289964, 
    4099.64267682028, -304.852765390606, -13.645658690109, -14.8663068486599, 
    -304.852765390606, 262.182119183052), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249136994405075, 0.150358843803186
    ), logphi = c(0.493555185354923, -1.55259603769847)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_36 = structure(list(
    par = c(-0.318253068045177, 0.192767044154699, 0.527819662703368, 
    -1.536268135858), value = 73.4113007428482, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.4773349904863, -1.9630429513029, 
    212.271548992504, -21.3100221060358, -1.9630429513029, 52.8631851359762, 
    -27.2978278239577, -13.407788637565, 212.271548992504, -27.2978278239577, 
    3431.11244410821, -358.509067289958, -21.3100221060358, -13.407788637565, 
    -358.509067289958, 241.95146081496), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318253068045177, 0.192767044154699
    ), logphi = c(0.527819662703368, -1.536268135858)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_37 = structure(list(
    par = c(-0.270716155894415, 0.0757726825845396, 0.496583069927998, 
    -1.62692570318077), value = 78.3601688434995, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.455459800818, -6.82516069616668, 
    267.322129026581, -17.5755062432614, -6.82516069616668, 50.183981752383, 
    -24.8565730309735, -15.2420212806703, 267.322129026581, -24.8565730309735, 
    5205.07171258444, -381.220444424457, -17.5755062432614, -15.2420212806703, 
    -381.220444424457, 315.943767148497), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270716155894415, 0.0757726825845396
    ), logphi = c(0.496583069927998, -1.62692570318077)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_38 = structure(list(
    par = c(-0.316254464763438, 0.147633412939666, 0.470211163096203, 
    -1.66370229010029), value = 67.471486846917, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.932921323293, 0.0669953053034078, 
    296.403912702914, -13.3771612578215, 0.0669953053034078, 
    61.834611862821, -9.37407914847199, -18.1781244457113, 296.403912702914, 
    -9.37407914847199, 6042.02389708419, -368.897400550239, -13.3771612578215, 
    -18.1781244457113, -368.897400550239, 339.725592233719), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316254464763438, 0.147633412939666
    ), logphi = c(0.470211163096203, -1.66370229010029)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_39 = structure(list(
    par = c(-0.266371085657114, 0.20546110487718, 0.464505704485448, 
    -1.56987915560364), value = 64.0914629536266, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.920223057183, 3.64154566057096, 
    232.140564552452, -6.42313245080572, 3.64154566057096, 60.1743769408358, 
    -5.56133842621875, -15.1020867829033, 232.140564552452, -5.56133842621875, 
    4124.68421130541, -230.480600162508, -6.42313245080572, -15.1020867829033, 
    -230.480600162508, 246.169405421881), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266371085657114, 0.20546110487718
    ), logphi = c(0.464505704485448, -1.56987915560364)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_40 = structure(list(
    par = c(-0.281441083015856, 0.247046220662973, 0.49119776547239, 
    -1.54034649485273), value = 76.4791051424865, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.428795698681, 2.22893179468997, 
    240.888694147401, -13.1656262976065, 2.22893179468997, 64.3547306005132, 
    -14.3011593323195, -16.5575519144312, 240.888694147401, -14.3011593323195, 
    3979.77837714336, -305.280278420028, -13.1656262976065, -16.5575519144312, 
    -305.280278420028, 256.789468668472), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.281441083015856, 0.247046220662973
    ), logphi = c(0.49119776547239, -1.54034649485273)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_41 = structure(list(
    par = c(-0.143374993714281, -0.196206151353099, 0.480506533033041, 
    -1.54316265902094), value = 136.302723723402, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.568307698946, -13.6178338010495, 
    256.315945883046, -10.9023304126765, -13.6178338010495, 34.6906166157623, 
    -25.8934550174672, -11.585757398791, 256.315945883046, -25.8934550174672, 
    4690.90407219852, -254.680897988635, -10.9023304126765, -11.585757398791, 
    -254.680897988635, 290.505931801022), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.143374993714281, -0.196206151353099
    ), logphi = c(0.480506533033041, -1.54316265902094)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_42 = structure(list(
    par = c(-0.426950306946991, -0.103550332115177, 0.515111898969237, 
    -1.65878568059993), value = 80.5459364408731, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.3535882023284, -9.844775593848, 
    270.434961322508, -29.5052024714693, -9.844775593848, 34.5138688828683, 
    -42.0685764837003, -12.699517725423, 270.434961322508, -42.0685764837003, 
    5548.42957544821, -485.935928828951, -29.5052024714693, -12.699517725423, 
    -485.935928828951, 343.218689543789), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.426950306946991, -0.103550332115177
    ), logphi = c(0.515111898969237, -1.65878568059993)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_43 = structure(list(
    par = c(-0.435137851662795, 0.321029129386494, 0.505394595037528, 
    -1.56619945412783), value = 49.4998757397913, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.124366205142, 9.28141233913493, 
    259.529351712473, -22.53192052315, 9.28141233913493, 76.8457473725448, 
    -15.3034706045219, -20.1419765311073, 259.529351712473, -15.3034706045219, 
    4219.69741509187, -405.012479802735, -22.53192052315, -20.1419765311073, 
    -405.012479802735, 281.994718378087), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.435137851662795, 0.321029129386494
    ), logphi = c(0.505394595037528, -1.56619945412783)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_44 = structure(list(
    par = c(-0.153691523988764, -0.128361160662329, 0.494629199536421, 
    -1.59508555044254), value = 92.4864888655054, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.525052407681, -12.0274689159316, 
    225.74884508586, -12.4961693135361, -12.0274689159316, 31.56608952537, 
    -25.0338228013902, -10.3767051733428, 225.74884508586, -25.0338228013902, 
    4447.20039001467, -284.919351358326, -12.4961693135361, -10.3767051733428, 
    -284.919351358326, 272.411413575924), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.153691523988764, -0.128361160662329
    ), logphi = c(0.494629199536421, -1.59508555044254)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_45 = structure(list(
    par = c(-0.295070185892432, -0.0351677306468981, 0.494246029855515, 
    -1.62848471879436), value = 76.5941557027349, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.577893366236, -7.3966090710087, 
    263.089429086705, -18.8652782728838, -7.3966090710087, 42.9758720876805, 
    -27.6099455192025, -13.7242209969912, 263.089429086705, -27.6099455192025, 
    5179.64401911186, -371.448499432603, -18.8652782728838, -13.7242209969912, 
    -371.448499432603, 313.026832902352), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.295070185892432, -0.0351677306468981
    ), logphi = c(0.494246029855515, -1.62848471879436)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_46 = structure(list(
    par = c(-0.256822300215698, -0.179148200527654, 0.489625257048324, 
    -1.70501405588268), value = 89.0090484821962, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.302346713235, -11.8629552439131, 
    274.355975292906, -18.1976920856641, -11.8629552439131, 33.2003733483077, 
    -29.6614216317437, -11.8248180900338, 274.355975292906, -29.6614216317437, 
    6347.18355394881, -394.754221179738, -18.1976920856641, -11.8248180900338, 
    -394.754221179738, 351.762563514768), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256822300215698, -0.179148200527654
    ), logphi = c(0.489625257048324, -1.70501405588268)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_47 = structure(list(
    par = c(-0.410266793813302, -0.352088837229162, 0.501782826920359, 
    -1.68661981664172), value = 102.345646929941, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.770940467545, -11.8624296447933, 
    275.556801959453, -28.0952846658522, -11.8624296447933, 23.1864268407378, 
    -40.5195574373352, -9.98677274921533, 275.556801959453, -40.5195574373352, 
    6196.44317477963, -466.161101973839, -28.0952846658522, -9.98677274921533, 
    -466.161101973839, 362.349283829388), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.410266793813302, -0.352088837229162
    ), logphi = c(0.501782826920359, -1.68661981664172)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_48 = structure(list(
    par = c(-0.321991673197311, 0.229919677685198, 0.511965254792841, 
    -1.57351959152075), value = 65.6168988583309, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.062006801797, 0.606979956074838, 
    240.102836404077, -19.6214898906533, 0.606979956074838, 62.4624073637392, 
    -22.5845814050274, -16.0925098775522, 240.102836404077, -22.5845814050274, 
    4116.01395862604, -376.191664692271, -19.6214898906533, -16.0925098775522, 
    -376.191664692271, 272.233880110662), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.321991673197311, 0.229919677685198
    ), logphi = c(0.511965254792841, -1.57351959152075)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_49 = structure(list(
    par = c(-0.289822111411312, -0.0793641562432607, 0.479686988522158, 
    -1.61764791034171), value = 92.7203864702937, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.871301332973, -8.37866246783392, 
    269.636737172618, -16.1294542557755, -8.37866246783392, 39.4858139571852, 
    -23.8821221572039, -13.8492050503203, 269.636737172618, -23.8821221572039, 
    5254.71758693996, -329.806812262134, -16.1294542557755, -13.8492050503203, 
    -329.806812262134, 311.882911734784), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289822111411312, -0.0793641562432607
    ), logphi = c(0.479686988522158, -1.61764791034171)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_50 = structure(list(
    par = c(-0.311233026428875, 0.0844175253272181, 0.50846991837534, 
    -1.63540188634003), value = 74.6094476949759, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.9500955209953, -6.56449874369969, 
    263.258039090886, -21.4365055306587, -6.56449874369969, 49.1193145855107, 
    -29.638496744866, -15.0335626205589, 263.258039090886, -29.638496744866, 
    5126.8148485164, -419.346232181539, -21.4365055306587, -15.0335626205589, 
    -419.346232181539, 316.92456227006), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311233026428875, 0.0844175253272181
    ), logphi = c(0.50846991837534, -1.63540188634003)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_51 = structure(list(
    par = c(-0.321695184589884, -0.0790096095935363, 0.511270904586688, 
    -1.5529150705138), value = 116.696466470246, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.660690655351, -9.35290195869243, 
    273.912613121041, -25.9550093151262, -9.35290195869243, 42.4015861533178, 
    -37.3207808834763, -13.6784168525139, 273.912613121041, -37.3207808834763, 
    4744.33796350482, -414.502477816825, -25.9550093151262, -13.6784168525139, 
    -414.502477816825, 316.010366208985), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.321695184589884, -0.0790096095935363
    ), logphi = c(0.511270904586688, -1.5529150705138)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_52 = structure(list(
    par = c(-0.221522627684929, 0.0563602305695527, 0.499471878032134, 
    -1.67243549046926), value = 77.1817697593333, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.674386505607, -11.7564061632436, 
    272.858670310683, -16.6903098843818, -11.7564061632436, 43.5480087297435, 
    -26.4936176570529, -14.5562949711575, 272.858670310683, -26.4936176570529, 
    5829.43396726066, -403.744022026586, -16.6903098843818, -14.5562949711575, 
    -403.744022026586, 338.538266841937), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221522627684929, 0.0563602305695527
    ), logphi = c(0.499471878032134, -1.67243549046926)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_53 = structure(list(
    par = c(-0.379375024840497, 0.0900606832541736, 0.517472607773272, 
    -1.67811707164683), value = 62.94695416618, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.521813459304, -6.81312004147117, 
    258.378382842039, -24.8912185174532, -6.81312004147117, 46.0641957005237, 
    -34.2536086037626, -14.5781867644246, 258.378382842039, -34.2536086037626, 
    5322.8335017188, -462.73387602902, -24.8912185174532, -14.5781867644246, 
    -462.73387602902, 322.611046570387), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379375024840497, 0.0900606832541736
    ), logphi = c(0.517472607773272, -1.67811707164683)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_54 = structure(list(
    par = c(-0.323919646006208, 0.282781969731152, 0.509307829166902, 
    -1.52461109887915), value = 70.7840180642931, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.845809492195, 2.72206567331068, 
    231.502663545768, -18.0874213739912, 2.72206567331068, 64.5821046347805, 
    -18.6550717877765, -16.5782118095592, 231.502663545768, -18.6550717877765, 
    3635.84546953533, -341.620984968927, -18.0874213739912, -16.5782118095592, 
    -341.620984968927, 248.834373287821), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323919646006208, 0.282781969731152
    ), logphi = c(0.509307829166902, -1.52461109887915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_55 = structure(list(
    par = c(-0.375622857996606, -0.0718559636174422, 0.51795092804814, 
    -1.51574940886458), value = 100.04748536497, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.8476452603254, -6.59843767536472, 
    230.795551935614, -25.4985838914479, -6.59843767536472, 38.0128116930223, 
    -33.860403956254, -11.6916088721553, 230.795551935614, -33.860403956254, 
    3701.38241436635, -362.742192686838, -25.4985838914479, -11.6916088721553, 
    -362.742192686838, 259.079612657587), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375622857996606, -0.0718559636174422
    ), logphi = c(0.51795092804814, -1.51574940886458)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_56 = structure(list(
    par = c(-0.287132499943784, 0.158320214779882, 0.505247131420278, 
    -1.57322772369909), value = 79.1858689569761, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.97018760347, -2.893103324908, 
    237.381220557609, -17.4720751946467, -2.893103324908, 54.0086699594156, 
    -22.9108742892947, -14.8359147758015, 237.381220557609, -22.9108742892947, 
    4152.80039737809, -347.602948131964, -17.4720751946467, -14.8359147758015, 
    -347.602948131964, 269.115767146388), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287132499943784, 0.158320214779882
    ), logphi = c(0.505247131420278, -1.57322772369909)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_57 = structure(list(
    par = c(-0.189564557631484, -0.0324950479937046, 0.496591183940466, 
    -1.70205824517579), value = 81.1289199573786, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.631346560386, -12.8949220048469, 
    276.15493977251, -15.818193215722, -12.8949220048469, 40.4548452159759, 
    -28.0047177412257, -13.2230753528972, 276.15493977251, -28.0047177412257, 
    6343.34357434696, -402.316274534797, -15.818193215722, -13.2230753528972, 
    -402.316274534797, 354.189492259849), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.189564557631484, -0.0324950479937046
    ), logphi = c(0.496591183940466, -1.70205824517579)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_58 = structure(list(
    par = c(-0.404772153404565, -0.277646116619834, 0.49439706923131, 
    -1.665726650373), value = 89.0324904396549, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.2278458718133, -9.92703044744303, 
    276.866942083842, -26.1548135949141, -9.92703044744303, 28.4592545121143, 
    -36.5567268723055, -11.4100242072368, 276.866942083842, -36.5567268723055, 
    5893.85196369463, -432.274510405506, -26.1548135949141, -11.4100242072368, 
    -432.274510405506, 347.660932487059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404772153404565, -0.277646116619834
    ), logphi = c(0.49439706923131, -1.665726650373)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_59 = structure(list(
    par = c(-0.530053685577955, 0.0164434222876081, 0.484065528633331, 
    -1.64601791204825), value = 64.3433725385377, counts = structure(c(271L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.6426197694689, -0.910454570401953, 
    290.090091077388, -27.1033865253401, -0.910454570401953, 
    47.4235817833346, -26.0964825606891, -17.6711814852126, 290.090091077388, 
    -26.0964825606891, 5504.00150113717, -438.235136339671, -27.1033865253401, 
    -17.6711814852126, -438.235136339671, 330.342732759448), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.530053685577955, 0.0164434222876081
    ), logphi = c(0.484065528633331, -1.64601791204825)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_60 = structure(list(
    par = c(-0.510874710405775, 0.0285013393129348, 0.493742545675863, 
    -1.68850580255382), value = 56.3372779762648, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.5821296785989, -3.89928522537275, 
    262.913157445865, -25.5632680445927, -3.89928522537275, 40.1379766152843, 
    -27.8181937005684, -15.3906454301023, 262.913157445865, -27.8181937005684, 
    5392.91062644054, -439.835605096306, -25.5632680445927, -15.3906454301023, 
    -439.835605096306, 315.716128451271), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.510874710405775, 0.0285013393129348
    ), logphi = c(0.493742545675863, -1.68850580255382)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_61 = structure(list(
    par = c(-0.234296751081823, -0.156694605876854, 0.50992570252895, 
    -1.59515203747615), value = 99.3226323513443, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.7338153888543, -11.9015697990221, 
    241.629723166881, -19.7774864041378, -11.9015697990221, 31.9115461095976, 
    -32.7188718820537, -10.6757247611, 241.629723166881, -32.7188718820537, 
    4658.83742598905, -361.418061888941, -19.7774864041378, -10.6757247611, 
    -361.418061888941, 295.3180226406), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234296751081823, -0.156694605876854
    ), logphi = c(0.50992570252895, -1.59515203747615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_62 = structure(list(
    par = c(-0.337656632085903, -0.331701003552032, 0.500739638879484, 
    -1.52755570325629), value = 118.969398328096, counts = structure(c(241L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.2170127084837, -9.79980511317535, 
    240.478828953172, -22.9432236658056, -9.79980511317535, 25.6439262393826, 
    -32.2911851675656, -9.65550138509741, 240.478828953172, -32.2911851675656, 
    4115.11695117994, -325.054207289455, -22.9432236658056, -9.65550138509741, 
    -325.054207289455, 272.196963113203), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337656632085903, -0.331701003552032
    ), logphi = c(0.500739638879484, -1.52755570325629)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_63 = structure(list(
    par = c(-0.453411163562167, -0.0807715503001146, 0.488610909481198, 
    -1.62525651119526), value = 91.9875990555625, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.23055145381, -6.17796471047427, 
    293.455981228874, -26.7166781995343, -6.17796471047427, 40.4623528176273, 
    -31.9128119627976, -15.7763189108096, 293.455981228874, -31.9128119627976, 
    5558.47139642651, -428.945428630811, -26.7166781995343, -15.7763189108096, 
    -428.945428630811, 339.220356938341), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.453411163562167, -0.0807715503001146
    ), logphi = c(0.488610909481198, -1.62525651119526)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_64 = structure(list(
    par = c(-0.35427529696052, 0.38747874078327, 0.514874901155535, 
    -1.5320870347506), value = 49.4346422563909, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.10448888888, 10.9547771067753, 
    241.057504773323, -19.8279417507052, 10.9547771067753, 85.9984284531379, 
    -14.8539269453352, -18.9713959706239, 241.057504773323, -14.8539269453352, 
    3751.59864215746, -380.322613171558, -19.8279417507052, -18.9713959706239, 
    -380.322613171558, 260.766908393606), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.35427529696052, 0.38747874078327
    ), logphi = c(0.514874901155535, -1.5320870347506)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_65 = structure(list(
    par = c(-0.38918986921052, 0.109951132143336, 0.476101223463004, 
    -1.64888149717954), value = 57.82703521449, counts = structure(c(247L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.634128726464, -0.293227834902154, 
    255.060824965625, -15.9228648595189, -0.293227834902154, 
    49.4486918753978, -13.2815034667999, -15.9255344769349, 255.060824965625, 
    -13.2815034667999, 4965.49332240903, -338.350450480362, -15.9228648595189, 
    -15.9255344769349, -338.350450480362, 288.061966667641), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38918986921052, 0.109951132143336
    ), logphi = c(0.476101223463004, -1.64888149717954)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_66 = structure(list(
    par = c(-0.233574644386683, -0.141576068339608, 0.505247292562572, 
    -1.5493046279003), value = 104.11070944263, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.760113951992, -10.1794341311745, 
    231.938348981942, -18.1371725016533, -10.1794341311745, 33.6884870044685, 
    -29.8852574864839, -10.7529739690193, 231.938348981942, -29.8852574864839, 
    4122.40509030326, -318.8098816711, -18.1371725016533, -10.7529739690193, 
    -318.8098816711, 268.583418471025), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233574644386683, -0.141576068339608
    ), logphi = c(0.505247292562572, -1.5493046279003)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_67 = structure(list(
    par = c(-0.419795235470744, 0.0665758091470988, 0.466744129329759, 
    -1.64264854867258), value = 54.0231405449367, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.539417732511, 1.36229154179546, 
    279.917063778612, -16.8996925431486, 1.36229154179546, 52.6178644157937, 
    -12.8109395873821, -17.2335348054276, 279.917063778612, -12.8109395873821, 
    5377.62312963252, -345.066618351098, -16.8996925431486, -17.2335348054276, 
    -345.066618351098, 308.788578774255), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419795235470744, 0.0665758091470988
    ), logphi = c(0.466744129329759, -1.64264854867258)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_68 = structure(list(
    par = c(-0.362625096937124, -0.169750686688642, 0.508301756937824, 
    -1.61945153664532), value = 95.0537125640274, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.5123353694107, -9.64003499248633, 
    252.54754981674, -24.8633353940875, -9.64003499248633, 31.3838650960463, 
    -35.8664520625496, -11.3556781151658, 252.54754981674, -35.8664520625496, 
    4937.27456184345, -406.303194445456, -24.8633353940875, -11.3556781151658, 
    -406.303194445456, 310.370530623771), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362625096937124, -0.169750686688642
    ), logphi = c(0.508301756937824, -1.61945153664532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_69 = structure(list(
    par = c(-0.100146267839095, 0.066448780617776, 0.4897612805565, 
    -1.55958929655157), value = 99.4660353827438, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.493278763462, -9.02081391274123, 
    238.495840392261, -8.40574780802683, -9.02081391274123, 52.3370247300647, 
    -21.3837520277593, -12.9804063178085, 238.495840392261, -21.3837520277593, 
    4429.27442107432, -273.276389089361, -8.40574780802683, -12.9804063178085, 
    -273.276389089361, 275.542355264946), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.100146267839095, 0.066448780617776
    ), logphi = c(0.4897612805565, -1.55958929655157)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_70 = structure(list(
    par = c(-0.19088609469692, 0.0213920768505638, 0.517257272713457, 
    -1.68686975055873), value = 85.8748900100154, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.97841248025, -14.6683116604152, 
    287.070686898261, -20.7069841433594, -14.6683116604152, 44.7620844674645, 
    -37.3179223522868, -14.0429541808373, 287.070686898261, -37.3179223522868, 
    6356.73396423186, -473.555213762467, -20.7069841433594, -14.0429541808373, 
    -473.555213762467, 371.621386740628), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19088609469692, 0.0213920768505638
    ), logphi = c(0.517257272713457, -1.68686975055873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_71 = structure(list(
    par = c(-0.296330584208726, -0.183686653569902, 0.509801877954518, 
    -1.60661412435432), value = 101.152766653005, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.0324853934178, -11.6208210627633, 
    266.046576339107, -24.2545954591833, -11.6208210627633, 33.211649217435, 
    -37.2914351522979, -11.5770953286187, 266.046576339107, -37.2914351522979, 
    5174.38529236713, -413.878369762699, -24.2545954591833, -11.5770953286187, 
    -413.878369762699, 327.047167886008), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296330584208726, -0.183686653569902
    ), logphi = c(0.509801877954518, -1.60661412435432)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_72 = structure(list(
    par = c(-0.419853229853684, -0.113223944547005, 0.518284440142541, 
    -1.70859354089786), value = 86.8910189191989, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(85.3786957257796, -12.8889323995907, 
    303.432579798368, -32.6756629487335, -12.8889323995907, 35.6805720223008, 
    -50.2428252282527, -13.4084528617961, 303.432579798368, -50.2428252282527, 
    6831.03503936167, -574.312327715987, -32.6756629487335, -13.4084528617961, 
    -574.312327715987, 401.255957104496), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419853229853684, -0.113223944547005
    ), logphi = c(0.518284440142541, -1.70859354089786)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_73 = structure(list(
    par = c(-0.257220280497923, -0.307380271995549, 0.466024115215982, 
    -1.74407649329802), value = 79.584837879958, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.2171232217202, -11.3345251193664, 
    268.744435039991, -14.1694052615549, -11.3345251193664, 25.8573883442637, 
    -22.0828345192103, -10.3166647491548, 268.744435039991, -22.0828345192103, 
    6748.94900390299, -337.334532774847, -14.1694052615549, -10.3166647491548, 
    -337.334532774847, 346.315268778596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.257220280497923, -0.307380271995549
    ), logphi = c(0.466024115215982, -1.74407649329802)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_74 = structure(list(
    par = c(-0.0655035803793461, 0.212192030023018, 0.499141697896785, 
    -1.59206741401673), value = 72.9420363168906, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.077825964098, -7.57512344051747, 
    225.683215969497, -7.32056744467968, -7.57512344051747, 58.5292101220602, 
    -17.8784724020886, -13.2505434748964, 225.683215969497, -17.8784724020886, 
    4404.58531466348, -295.034245812786, -7.32056744467968, -13.2505434748964, 
    -295.034245812786, 271.313789340866), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0655035803793461, 0.212192030023018
    ), logphi = c(0.499141697896785, -1.59206741401673)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_75 = structure(list(
    par = c(-0.383208894692697, -0.19041001065115, 0.496912765892997, 
    -1.55013996341087), value = 93.1942724331617, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.4269512982312, -6.45081629357946, 
    208.293017568195, -19.539940591784, -6.45081629357946, 27.0839769882514, 
    -26.47448649995, -9.89858451205805, 208.293017568195, -26.47448649995, 
    3588.60089869495, -285.863248645768, -19.539940591784, -9.89858451205805, 
    -285.863248645768, 233.587032052895), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383208894692697, -0.19041001065115
    ), logphi = c(0.496912765892997, -1.55013996341087)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_76 = structure(list(
    par = c(-0.559921011983239, -0.216411133593221, 0.526923800207014, 
    -1.67210508985514), value = 72.31273127552, counts = structure(c(343L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(67.8176454158574, -10.0646242735536, 
    267.431640583737, -37.089023555481, -10.0646242735536, 27.8904304700234, 
    -53.9943764614748, -10.2284951015719, 267.431640583737, -53.9943764614748, 
    5744.91558425194, -566.021334631017, -37.089023555481, -10.2284951015719, 
    -566.021334631017, 364.352638069221), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.559921011983239, -0.216411133593221
    ), logphi = c(0.526923800207014, -1.67210508985514)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_77 = structure(list(
    par = c(-0.278473684611289, -0.102517456160203, 0.495425822205357, 
    -1.68917591958546), value = 76.8311650806224, counts = structure(c(295L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.9526197615569, -10.5949012407791, 
    266.99468024205, -19.1079925393467, -10.5949012407791, 35.8451620776634, 
    -29.877727282468, -12.494699838328, 266.99468024205, -29.877727282468, 
    5910.45480621233, -399.432606977612, -19.1079925393467, -12.494699838328, 
    -399.432606977612, 336.855329358343), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278473684611289, -0.102517456160203
    ), logphi = c(0.495425822205357, -1.68917591958546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_78 = structure(list(
    par = c(-0.293127328363518, -0.0765394075436499, 0.476761431579331, 
    -1.63088231215493), value = 77.2494932686255, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.546741554159, -6.3379058623525, 
    244.997643406464, -14.1198888510274, -6.3379058623525, 37.4925037363028, 
    -20.4004437165395, -12.5838956712698, 244.997643406464, -20.4004437165395, 
    4876.70919108396, -297.680449332205, -14.1198888510274, -12.5838956712698, 
    -297.680449332205, 284.897863707556), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293127328363518, -0.0765394075436499
    ), logphi = c(0.476761431579331, -1.63088231215493)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_79 = structure(list(
    par = c(-0.319493708755735, 0.0102421408678399, 0.494242223202729, 
    -1.70322290498086), value = 72.7311587352881, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.646546881857, -8.92794560414245, 
    292.62404738617, -20.9935418542528, -8.92794560414245, 44.5683242240591, 
    -28.633320191318, -15.4217916783495, 292.62404738617, -28.633320191318, 
    6441.38616033629, -450.206964007549, -20.9935418542528, -15.4217916783495, 
    -450.206964007549, 362.860227511419), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319493708755735, 0.0102421408678399
    ), logphi = c(0.494242223202729, -1.70322290498086)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_80 = structure(list(
    par = c(-0.266429117095484, -0.223754869667433, 0.524997543638927, 
    -1.55810304552194), value = 114.123739379962, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.1895630925701, -12.9087211320211, 
    253.609045561376, -26.3281477312916, -12.9087211320211, 31.5221140425592, 
    -40.1313003770554, -10.0207037068145, 253.609045561376, -40.1313003770554, 
    4611.96264343755, -419.163907329434, -26.3281477312916, -10.0207037068145, 
    -419.163907329434, 310.926528040767), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266429117095484, -0.223754869667433
    ), logphi = c(0.524997543638927, -1.55810304552194)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_81 = structure(list(
    par = c(-0.396235792586716, 0.0356771682209299, 0.50464043679248, 
    -1.55318014376422), value = 81.9060663068033, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.8587711963332, -3.76393407108822, 
    235.11472060278, -22.2994363507922, -3.76393407108822, 42.3698664029359, 
    -27.5393224029585, -13.8411675294492, 235.11472060278, -27.5393224029585, 
    3927.53615576069, -349.602251130676, -22.2994363507922, -13.8411675294492, 
    -349.602251130676, 261.190894011776), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396235792586716, 0.0356771682209299
    ), logphi = c(0.50464043679248, -1.55318014376422)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_82 = structure(list(
    par = c(-0.438191280043533, 0.0454877493583936, 0.51421427677624, 
    -1.51358194310005), value = 102.519340517897, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.272183528717, -3.49844565761259, 
    271.798806959822, -30.3163060451084, -3.49844565761259, 50.488304278673, 
    -35.8045757842262, -16.2223442750076, 271.798806959822, -35.8045757842262, 
    4200.00387171981, -424.884118302771, -30.3163060451084, -16.2223442750076, 
    -424.884118302771, 295.819044001888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.438191280043533, 0.0454877493583936
    ), logphi = c(0.51421427677624, -1.51358194310005)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_83 = structure(list(
    par = c(-0.279583554670161, 0.279563122194198, 0.510233775424001, 
    -1.63686331704397), value = 82.7053418587448, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.878092398172, -2.66166975748661, 
    312.923236592155, -21.663320925569, -2.66166975748661, 74.7569203056742, 
    -23.8478637797357, -20.9477447903339, 312.923236592155, -23.8478637797357, 
    5993.51010563254, -502.502792562254, -21.663320925569, -20.9477447903339, 
    -502.502792562254, 370.909353101467), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.279583554670161, 0.279563122194198
    ), logphi = c(0.510233775424001, -1.63686331704397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_84 = structure(list(
    par = c(-0.403894286160467, -0.0851943411755211, 0.505016738484674, 
    -1.63653294928248), value = 81.1422362525931, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.4754246587581, -7.73006356169503, 
    263.663205497977, -25.8514224746875, -7.73006356169503, 36.7058656394192, 
    -35.1934609028604, -13.1940815819576, 263.663205497977, -35.1934609028604, 
    5180.47974130553, -429.319743549428, -25.8514224746875, -13.1940815819576, 
    -429.319743549428, 320.888570925604), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.403894286160467, -0.0851943411755211
    ), logphi = c(0.505016738484674, -1.63653294928248)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_85 = structure(list(
    par = c(-0.374569074541488, -0.111553647722386, 0.507668829926191, 
    -1.64871094694881), value = 75.8845356909971, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.1829500579649, -8.63705228937306, 
    252.086795946127, -24.3300223150555, -8.63705228937306, 34.6991611408498, 
    -34.9466111551067, -11.9608866633314, 252.086795946127, -34.9466111551067, 
    5117.9528632268, -416.668402211329, -24.3300223150555, -11.9608866633314, 
    -416.668402211329, 313.401227948873), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374569074541488, -0.111553647722386
    ), logphi = c(0.507668829926191, -1.64871094694881)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_86 = structure(list(
    par = c(-0.250508091414292, -0.0684913401301631, 0.522426777953602, 
    -1.61969432845725), value = 86.8704033578113, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.4693110795924, -11.4236585808669, 
    256.241448642669, -23.3789793409045, -11.4236585808669, 39.8041899565271, 
    -38.2563503116273, -11.8434216105356, 256.241448642669, -38.2563503116273, 
    5066.41485413439, -431.071795706117, -23.3789793409045, -11.8434216105356, 
    -431.071795706117, 322.201378249787), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.250508091414292, -0.0684913401301631
    ), logphi = c(0.522426777953602, -1.61969432845725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_87 = structure(list(
    par = c(-0.0835975411058892, 0.220022047142549, 0.502690947363987, 
    -1.60293270153997), value = 69.2738841908908, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.99922572115, -6.61377561428367, 
    244.627906599959, -9.28563237678759, -6.61377561428367, 66.397577402455, 
    -19.917480464926, -14.4763107474688, 244.627906599959, -19.917480464926, 
    4806.46679530849, -334.529643291503, -9.28563237678759, -14.4763107474688, 
    -334.529643291503, 295.778799873858), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0835975411058892, 0.220022047142549
    ), logphi = c(0.502690947363987, -1.60293270153997)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_88 = structure(list(
    par = c(-0.314799713377936, 0.134040764735757, 0.48492250412032, 
    -1.75914761407763), value = 49.2942548949257, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.522267721881, -6.80670928332461, 
    332.133100666709, -19.0226361080903, -6.80670928332461, 58.7356268226813, 
    -17.7993858407888, -18.9579325695632, 332.133100666709, -17.7993858407888, 
    7881.62201995846, -505.833963018176, -19.0226361080903, -18.9579325695632, 
    -505.833963018176, 410.343700920635), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314799713377936, 0.134040764735757
    ), logphi = c(0.48492250412032, -1.75914761407763)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_89 = structure(list(
    par = c(-0.435082574482107, 0.281321732691642, 0.51091446895923, 
    -1.63350962900564), value = 37.8163512388782, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.3823059245119, 3.40286008437829, 
    251.33930823884, -23.0631459761099, 3.40286008437829, 63.3956923508094, 
    -19.7825199279578, -18.2151406207254, 251.33930823884, -19.7825199279578, 
    4588.29048684706, -429.486914191202, -23.0631459761099, -18.2151406207254, 
    -429.486914191202, 291.66072607012), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.435082574482107, 0.281321732691642
    ), logphi = c(0.51091446895923, -1.63350962900564)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_90 = structure(list(
    par = c(-0.310273725889452, -0.122754775914001, 0.522392057658394, 
    -1.59435864828836), value = 93.2469607820094, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.0368810035654, -11.0080913806598, 
    254.518938056947, -26.1976477702319, -11.0080913806598, 35.1158640654603, 
    -39.6062800902541, -11.3881769294721, 254.518938056947, -39.6062800902541, 
    4798.08690555927, -431.683285908591, -26.1976477702319, -11.3881769294721, 
    -431.683285908591, 314.60547977602), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310273725889452, -0.122754775914001
    ), logphi = c(0.522392057658394, -1.59435864828836)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_91 = structure(list(
    par = c(-0.340809882392182, -0.346408092063907, 0.510103179715977, 
    -1.57299113826931), value = 107.140560020236, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(83.1660078723928, -9.86298869776192, 
    230.093308744017, -23.8504793657057, -9.86298869776192, 23.3919075220967, 
    -33.7759920867597, -8.56185056719028, 230.093308744017, -33.7759920867597, 
    4293.1756568656, -355.844181644471, -23.8504793657057, -8.56185056719028, 
    -355.844181644471, 279.925805848791), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340809882392182, -0.346408092063907
    ), logphi = c(0.510103179715977, -1.57299113826931)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_92 = structure(list(
    par = c(-0.394836597870198, 0.321975271838479, 0.518483739485464, 
    -1.6552950813054), value = 54.1937782769802, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.873609995896, 1.23011334451917, 
    295.654079202734, -26.5163969750404, 1.23011334451917, 72.9614066123929, 
    -24.2667457079904, -21.3530913910631, 295.654079202734, -24.2667457079904, 
    5609.11713237644, -527.652423087943, -26.5163969750404, -21.3530913910631, 
    -527.652423087943, 351.817759813855), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394836597870198, 0.321975271838479
    ), logphi = c(0.518483739485464, -1.6552950813054)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_93 = structure(list(
    par = c(-0.3424629433878, -0.0996878155837527, 0.509091542166516, 
    -1.62572781000697), value = 93.9856811459923, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9979865342575, -10.5592077161987, 
    270.982975486334, -25.4012440752405, -10.5592077161987, 36.0356764446124, 
    -37.1188997441152, -12.9992791109146, 270.982975486334, -37.1188997441152, 
    5314.01419718236, -436.125063862036, -25.4012440752405, -12.9992791109146, 
    -436.125063862036, 332.159402578469), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3424629433878, -0.0996878155837527
    ), logphi = c(0.509091542166516, -1.62572781000697)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_94 = structure(list(
    par = c(-0.400527781272117, 0.0705931612950492, 0.501592363387129, 
    -1.72853254605587), value = 47.7120175384255, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.360905749596, -6.02567543595001, 
    280.866336506591, -23.9036735170117, -6.02567543595001, 47.1044283116839, 
    -29.9728313493119, -15.7522990953396, 280.866336506591, -29.9728313493119, 
    6267.26588120263, -480.343473970635, -23.9036735170117, -15.7522990953396, 
    -480.343473970635, 350.476101861119), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400527781272117, 0.0705931612950492
    ), logphi = c(0.501592363387129, -1.72853254605587)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_95 = structure(list(
    par = c(-0.216934496537251, -0.108569247595572, 0.503214205578858, 
    -1.66653200205536), value = 88.6146671582453, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.5549135137376, -13.4292849907069, 
    263.005440430675, -18.3883693427589, -13.4292849907069, 33.8776478514546, 
    -31.9419751342309, -11.9290198270505, 263.005440430675, -31.9419751342309, 
    5708.73661577309, -394.554524250523, -18.3883693427589, -11.9290198270505, 
    -394.554524250523, 334.7307068573), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216934496537251, -0.108569247595572
    ), logphi = c(0.503214205578858, -1.66653200205536)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_96 = structure(list(
    par = c(-0.265062204310232, -0.318187326672045, 0.484698734504304, 
    -1.66031789506163), value = 102.349271372381, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.6722449575741, -12.7044489168782, 
    262.579862084777, -17.5633359074112, -12.7044489168782, 24.1586304419172, 
    -29.0071966375649, -10.2800230941114, 262.579862084777, -29.0071966375649, 
    5731.38655165195, -346.323162487394, -17.5633359074112, -10.2800230941114, 
    -346.323162487394, 329.168595051499), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265062204310232, -0.318187326672045
    ), logphi = c(0.484698734504304, -1.66031789506163)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_97 = structure(list(
    par = c(-0.318378191703219, -0.107848984614456, 0.526598803720801, 
    -1.5330887626716), value = 116.446147781027, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.0331082277862, -10.6944224924632, 
    251.020385370282, -27.8483956908104, -10.6944224924632, 36.8341514018766, 
    -39.804416481104, -11.498751280925, 251.020385370282, -39.804416481104, 
    4236.62581156847, -418.927529782565, -27.8483956908104, -11.498751280925, 
    -418.927529782565, 295.545713292711), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318378191703219, -0.107848984614456
    ), logphi = c(0.526598803720801, -1.5330887626716)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_98 = structure(list(
    par = c(-0.260332201719188, -0.0550124445505957, 0.508781437942966, 
    -1.65886453697836), value = 80.321341623113, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(84.2915052388093, -10.4043363009509, 
    231.798067162003, -18.3090793015594, -10.4043363009509, 32.8096909711917, 
    -29.6464230977733, -11.1565795695157, 231.798067162003, -29.6464230977733, 
    4867.60824701804, -367.439009110626, -18.3090793015594, -11.1565795695157, 
    -367.439009110626, 291.705231436623), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260332201719188, -0.0550124445505957
    ), logphi = c(0.508781437942966, -1.65886453697836)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_99 = structure(list(
    par = c(-0.375309979316481, 0.214097675688197, 0.521277629500529, 
    -1.49652866210733), value = 77.3750032273108, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.492119706151, 3.05711359516181, 
    240.596915379143, -24.7597744689187, 3.05711359516181, 67.0474279829136, 
    -27.595287850346, -16.3629706868562, 240.596915379143, -27.595287850346, 
    3573.77283942029, -382.415222279775, -24.7597744689187, -16.3629706868562, 
    -382.415222279775, 258.416715247733), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.375309979316481, 0.214097675688197
    ), logphi = c(0.521277629500529, -1.49652866210733)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_100 = structure(list(
    par = c(-0.326172026554275, -0.0285043428661437, 0.503884779425075, 
    -1.57771161107241), value = 90.4879970604205, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.551198019389, -6.54578141734419, 
    264.414886970599, -22.6849018361008, -6.54578141734419, 45.9693764440772, 
    -32.0273438916274, -14.0923907459012, 264.414886970599, -32.0273438916274, 
    4732.90080344313, -387.80208860878, -22.6849018361008, -14.0923907459012, 
    -387.80208860878, 305.04015437316), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326172026554275, -0.0285043428661437
    ), logphi = c(0.503884779425075, -1.57771161107241)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_101 = structure(list(
    par = c(-0.264532523108078, 0.128349772275527, 0.497692845692825, 
    -1.60373860452865), value = 74.6648870123534, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.506294884426, -5.14797659079136, 
    237.444381259166, -15.1724791024321, -5.14797659079136, 47.4609267691051, 
    -20.7830324541192, -14.2700020759889, 237.444381259166, -20.7830324541192, 
    4426.26818584913, -334.056549547768, -15.1724791024321, -14.2700020759889, 
    -334.056549547768, 274.701476595141), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.264532523108078, 0.128349772275527
    ), logphi = c(0.497692845692825, -1.60373860452865)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_102 = structure(list(
    par = c(-0.473384944831112, 0.317780321644699, 0.520602745782088, 
    -1.58544933202217), value = 48.5978245920822, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.048201819192, 6.16249950624592, 
    256.315976926658, -27.3416633493895, 6.16249950624592, 71.8343647498898, 
    -22.9021047175593, -19.6751868521972, 256.315976926658, -22.9021047175593, 
    4258.01658857949, -454.64128714201, -27.3416633493895, -19.6751868521972, 
    -454.64128714201, 291.608066138593), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.473384944831112, 0.317780321644699
    ), logphi = c(0.520602745782088, -1.58544933202217)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_103 = structure(list(
    par = c(-0.148333992145236, 0.0539633489545887, 0.485722301617033, 
    -1.65534131780518), value = 85.6614882730318, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.075562424101, -10.209153185059, 
    256.373683580335, -10.104699782687, -10.209153185059, 46.8162873481504, 
    -19.3495416880296, -13.4964388820435, 256.373683580335, -19.3495416880296, 
    5495.91631967417, -324.418395688753, -10.104699782687, -13.4964388820435, 
    -324.418395688753, 315.41526602652), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148333992145236, 0.0539633489545887
    ), logphi = c(0.485722301617033, -1.65534131780518)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_104 = structure(list(
    par = c(-0.353895367995731, -0.054537723277496, 0.474682128491398, 
    -1.67470784016435), value = 68.5915381144844, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.397212208809, -6.00349407520184, 
    269.128996059464, -17.1278398841679, -6.00349407520184, 39.2224629131022, 
    -20.5864193816296, -14.1422885455711, 269.128996059464, -20.5864193816296, 
    5645.21885301872, -354.49759756645, -17.1278398841679, -14.1422885455711, 
    -354.49759756645, 317.728717423194), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353895367995731, -0.054537723277496
    ), logphi = c(0.474682128491398, -1.67470784016435)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_105 = structure(list(
    par = c(-0.334325725576026, 0.135530877456907, 0.513438833610261, 
    -1.53383683548947), value = 92.2269349674613, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.731868843739, -2.35553459404514, 
    290.132719413805, -26.3680258907328, -2.35553459404514, 66.9665052903667, 
    -33.405457163127, -18.0965156246771, 290.132719413805, -33.405457163127, 
    4694.85324756036, -442.90697563909, -26.3680258907328, -18.0965156246771, 
    -442.90697563909, 321.118560968614), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334325725576026, 0.135530877456907
    ), logphi = c(0.513438833610261, -1.53383683548947)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_106 = structure(list(
    par = c(-0.42483775202925, -0.139138392904064, 0.548886557867626, 
    -1.43785834057339), value = 113.566897632202, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.1038253496815, -7.89712450099955, 
    212.082370659061, -33.3683773643401, -7.89712450099955, 32.0807202136564, 
    -39.8952902607164, -8.57777356344513, 212.082370659061, -39.8952902607164, 
    2997.14759036718, -397.309830569625, -33.3683773643401, -8.57777356344513, 
    -397.309830569625, 241.923978130387), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42483775202925, -0.139138392904064
    ), logphi = c(0.548886557867626, -1.43785834057339)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_107 = structure(list(
    par = c(-0.213628876195254, -0.154171128495804, 0.466415068900928, 
    -1.76241747245935), value = 78.3375247628839, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.548156809249, -12.388411544606, 
    294.809478916136, -12.4162709695952, -12.388411544606, 35.5229444402028, 
    -19.2949751571803, -12.5849737049322, 294.809478916136, -19.2949751571803, 
    7590.88059668045, -371.867140037452, -12.4162709695952, -12.5849737049322, 
    -371.867140037452, 380.410250027552), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.213628876195254, -0.154171128495804
    ), logphi = c(0.466415068900928, -1.76241747245935)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_108 = structure(list(
    par = c(-0.369121376453699, -0.130191135529841, 0.519399648387409, 
    -1.68464913344069), value = 75.7369863977373, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.0807107579924, -11.135682761676, 
    272.293771043763, -28.2293229414421, -11.135682761676, 34.616954565081, 
    -43.9722581759838, -11.8101782078384, 272.293771043763, -43.9722581759838, 
    5946.78831815187, -498.036037541283, -28.2293229414421, -11.8101782078384, 
    -498.036037541283, 357.013394165051), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369121376453699, -0.130191135529841
    ), logphi = c(0.519399648387409, -1.68464913344069)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_109 = structure(list(
    par = c(-0.485731654697723, -0.378626626932937, 0.486273417843002, 
    -1.74442568905496), value = 71.9023463483504, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(76.6415637905027, -10.4759101589025, 
    288.754394695445, -28.6466064327584, -10.4759101589025, 22.911418110283, 
    -39.2972638252331, -10.439136302054, 288.754394695445, -39.2972638252331, 
    7068.1142445963, -490.194227698026, -28.6466064327584, -10.439136302054, 
    -490.194227698026, 382.245495270439), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.485731654697723, -0.378626626932937
    ), logphi = c(0.486273417843002, -1.74442568905496)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_110 = structure(list(
    par = c(-0.294077815822586, -0.30558257330884, 0.497258775595797, 
    -1.58181856469013), value = 100.174015546231, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.3187547527959, -10.5439308981659, 
    237.058705309323, -19.9078198583891, -10.5439308981659, 25.1184571595786, 
    -30.300890387025, -9.56425733988908, 237.058705309323, -30.300890387025, 
    4488.06420876124, -322.83697780322, -19.9078198583891, -9.56425733988908, 
    -322.83697780322, 282.29311089234), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294077815822586, -0.30558257330884
    ), logphi = c(0.497258775595797, -1.58181856469013)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_111 = structure(list(
    par = c(-0.397995251989657, -0.0549275917444002, 0.503907830921453, 
    -1.50542432837002), value = 104.098675033242, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.928838425257, -4.12835769481035, 
    260.640461508643, -25.8474860572733, -4.12835769481035, 45.932270683835, 
    -33.0158895671673, -14.2671539329342, 260.640461508643, -33.0158895671673, 
    4060.65411135614, -363.723213471445, -25.8474860572733, -14.2671539329342, 
    -363.723213471445, 278.020463863271), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397995251989657, -0.0549275917444002
    ), logphi = c(0.503907830921453, -1.50542432837002)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_112 = structure(list(
    par = c(-0.21632154612662, -0.0582073013944775, 0.502291036757625, 
    -1.54384893687999), value = 104.11160243559, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.664770716463, -8.76198233612513, 
    219.623956130732, -15.3646964022869, -8.76198233612513, 37.2659669416464, 
    -26.2140461266824, -11.0890512630135, 219.623956130732, -26.2140461266824, 
    3843.72578612613, -290.902005749771, -15.3646964022869, -11.0890512630135, 
    -290.902005749771, 249.876790768155), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21632154612662, -0.0582073013944775
    ), logphi = c(0.502291036757625, -1.54384893687999)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_113 = structure(list(
    par = c(-0.293663625729661, 0.103918164494241, 0.477878931723661, 
    -1.68387454055839), value = 60.1020591281472, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.383018728262, -3.74073018427623, 
    273.832451147982, -13.9430909058547, -3.74073018427623, 52.1480991437784, 
    -14.330801361595, -15.8750825676179, 273.832451147982, -14.330801361595, 
    5822.8263354394, -365.301583569178, -13.9430909058547, -15.8750825676179, 
    -365.301583569178, 324.97202433035), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293663625729661, 0.103918164494241
    ), logphi = c(0.477878931723661, -1.68387454055839)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_114 = structure(list(
    par = c(-0.159336155809832, 0.115453073889544, 0.485785829463584, 
    -1.60774914681382), value = 75.9953800578926, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.351384687467, -5.82966498541282, 
    246.394884026557, -9.39428508317519, -5.82966498541282, 55.5618398081492, 
    -17.5500366772496, -14.0369510415184, 246.394884026557, -17.5500366772496, 
    4832.17062742725, -299.517618341127, -9.39428508317519, -14.0369510415184, 
    -299.517618341127, 289.368477524476), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.159336155809832, 0.115453073889544
    ), logphi = c(0.485785829463584, -1.60774914681382)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_115 = structure(list(
    par = c(-0.288451488826168, -0.00425979081263262, 0.506490949338282, 
    -1.58182900429945), value = 91.746900948996, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.7970100873572, -8.08653270212289, 
    235.828789087122, -19.2665312095386, -8.08653270212289, 38.7124325094135, 
    -28.5503074337612, -12.5872938365745, 235.828789087122, -28.5503074337612, 
    4278.52936976336, -348.608152840768, -19.2665312095386, -12.5872938365745, 
    -348.608152840768, 275.11304322303), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.288451488826168, -0.00425979081263262
    ), logphi = c(0.506490949338282, -1.58182900429945)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_116 = structure(list(
    par = c(-0.28473789196636, -0.0327031514722056, 0.492556259920621, 
    -1.65017675813691), value = 84.2679989679537, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.307264724213, -9.51525718306812, 
    269.557346452842, -18.4163475154264, -9.51525718306812, 39.5481300330403, 
    -27.1904510000809, -13.914561007411, 269.557346452842, -27.1904510000809, 
    5518.71101539447, -382.319395320962, -18.4163475154264, -13.914561007411, 
    -382.319395320962, 325.699856325912), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28473789196636, -0.0327031514722056
    ), logphi = c(0.492556259920621, -1.65017675813691)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_117 = structure(list(
    par = c(-0.313311307457881, -0.317808415831217, 0.519791738912029, 
    -1.6225448941732), value = 99.7415018819509, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.195595005885, -12.5080775070785, 
    248.002136849834, -26.0145338089046, -12.5080775070785, 23.901225219447, 
    -39.5192592250737, -8.82380939870586, 248.002136849834, -39.5192592250737, 
    5081.19507241034, -425.862776276986, -26.0145338089046, -8.82380939870586, 
    -425.862776276986, 322.033418640899), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313311307457881, -0.317808415831217
    ), logphi = c(0.519791738912029, -1.6225448941732)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_118 = structure(list(
    par = c(-0.305153718053029, -0.311395126261942, 0.487901400978986, 
    -1.65810202823112), value = 94.2805683188528, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.0110711878076, -10.6428868882347, 
    256.475500918896, -19.6200740365526, -10.6428868882347, 25.7191748680441, 
    -29.9730369555107, -10.1677957076163, 256.475500918896, -29.9730369555107, 
    5518.40234098933, -355.770351740503, -19.6200740365526, -10.1677957076163, 
    -355.770351740503, 320.836987942386), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305153718053029, -0.311395126261942
    ), logphi = c(0.487901400978986, -1.65810202823112)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_119 = structure(list(
    par = c(-0.272871926154869, 0.350428347137847, 0.50003098916864, 
    -1.65546269465678), value = 47.423266201451, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.183182267623, 1.82901062828478, 
    234.617445943996, -12.8045591729631, 1.82901062828478, 63.1184996109369, 
    -8.34873812216586, -16.4598051162201, 234.617445943996, -8.34873812216586, 
    4629.71292077263, -359.708348227628, -12.8045591729631, -16.4598051162201, 
    -359.708348227628, 276.097632276873), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.272871926154869, 0.350428347137847
    ), logphi = c(0.50003098916864, -1.65546269465678)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_120 = structure(list(
    par = c(-0.209860067510815, 0.276222795067853, 0.520314359957781, 
    -1.62752059811233), value = 48.8215981072038, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.9223888270769, -3.82054293446288, 
    218.651319936924, -15.0878592091175, -3.82054293446288, 55.7350760548303, 
    -21.0640067255241, -14.0001230937159, 218.651319936924, -21.0640067255241, 
    4199.42278636043, -361.643625550911, -15.0878592091175, -14.0001230937159, 
    -361.643625550911, 264.624251052226), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.209860067510815, 0.276222795067853
    ), logphi = c(0.520314359957781, -1.62752059811233)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_121 = structure(list(
    par = c(-0.0951458173414088, -0.00679658644256049, 0.500417577814649, 
    -1.63355977631805), value = 95.5710979909132, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.583820767118, -15.0009848347565, 
    244.461318064992, -11.5166014680312, -15.0009848347565, 38.0309683229996, 
    -25.8088848639204, -11.923722773588, 244.461318064992, -25.8088848639204, 
    5158.7937110753, -330.686014013537, -11.5166014680312, -11.923722773588, 
    -330.686014013537, 307.474505785166), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0951458173414088, -0.00679658644256049
    ), logphi = c(0.500417577814649, -1.63355977631805)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_122 = structure(list(
    par = c(-0.243640136100881, -0.17200449242094, 0.491711454155685, 
    -1.72648150549938), value = 82.8473584906935, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.5284682768156, -13.3135603732626, 
    270.370558073552, -17.6852845150677, -13.3135603732626, 30.1951728260974, 
    -29.6357192048902, -11.4603705121397, 270.370558073552, -29.6357192048902, 
    6503.58816240626, -399.65651734164, -17.6852845150677, -11.4603705121397, 
    -399.65651734164, 352.712304511726), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243640136100881, -0.17200449242094
    ), logphi = c(0.491711454155685, -1.72648150549938)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_123 = structure(list(
    par = c(-0.334885740329186, -0.107653422749243, 0.517102040174274, 
    -1.6219218512018), value = 69.9195376301138, counts = structure(c(205L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(82.0782337669357, -8.43981447573583, 
    236.2616498921, -23.6098361003911, -8.43981447573583, 35.3502870744649, 
    -35.3262919823294, -10.9179524123704, 236.2616498921, -35.3262919823294, 
    4628.64304707367, -399.473239783177, -23.6098361003911, -10.9179524123704, 
    -399.473239783177, 294.168256502303), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.334885740329186, -0.107653422749243
    ), logphi = c(0.517102040174274, -1.6219218512018)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_124 = structure(list(
    par = c(-0.0940824004162391, -0.0106555260635564, 0.49458934468234, 
    -1.47650882819266), value = 97.7234191710205, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.637807240797, -8.6631287778971, 
    187.951594199376, -7.93643532759347, -8.6631287778971, 40.5105511660508, 
    -20.7504336451336, -9.80066575451133, 187.951594199376, -20.7504336451336, 
    3051.38053021992, -200.507854273724, -7.93643532759347, -9.80066575451133, 
    -200.507854273724, 201.274968652854), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0940824004162391, -0.0106555260635564
    ), logphi = c(0.49458934468234, -1.47650882819266)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_125 = structure(list(
    par = c(-0.31578688622196, -0.0721728560159009, 0.496531698559022, 
    -1.60940128826455), value = 76.9346948125163, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.1166259029983, -7.35617167535452, 
    232.90310131685, -18.2716901147018, -7.35617167535452, 34.8290342557789, 
    -26.4892104411274, -11.877060224208, 232.90310131685, -26.4892104411274, 
    4438.85672975242, -330.970958401622, -18.2716901147018, -11.877060224208, 
    -330.970958401622, 274.370808604374), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31578688622196, -0.0721728560159009
    ), logphi = c(0.496531698559022, -1.60940128826455)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_126 = structure(list(
    par = c(-0.367979891764206, 0.130105343837818, 0.507594296252614, 
    -1.63567325715406), value = 64.491744235936, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.5914816062916, -4.73162951664108, 
    265.141029782257, -22.9864765604049, -4.73162951664108, 50.0460347971909, 
    -27.9204843991465, -16.2335598332675, 265.141029782257, -27.9204843991465, 
    5055.38978131526, -430.546102341722, -22.9864765604049, -16.2335598332675, 
    -430.546102341722, 314.628384465721), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.367979891764206, 0.130105343837818
    ), logphi = c(0.507594296252614, -1.63567325715406)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_127 = structure(list(
    par = c(-0.400923504414649, -0.0727255821338333, 0.523101377020736, 
    -1.63630084567809), value = 74.6602456218515, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.2620467556258, -8.35618645211866, 
    254.148009229738, -28.5611073831404, -8.35618645211866, 38.2162286030052, 
    -41.3740876403779, -12.046576424396, 254.148009229738, -41.3740876403779, 
    5023.88789786323, -465.477115113799, -28.5611073831404, -12.046576424396, 
    -465.477115113799, 321.457691384808), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400923504414649, -0.0727255821338333
    ), logphi = c(0.523101377020736, -1.63630084567809)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_128 = structure(list(
    par = c(-0.196625839575074, 0.0347003522928378, 0.476855778296085, 
    -1.69831470154948), value = 74.0656655305662, counts = structure(c(301L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.762263405372, -9.06864566729837, 
    273.635975368336, -10.886482103345, -9.06864566729837, 46.8315108186346, 
    -16.59183222813, -14.1712386820814, 273.635975368336, -16.59183222813, 
    6218.83529738909, -346.948879077047, -10.886482103345, -14.1712386820814, 
    -346.948879077047, 338.806960893834), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196625839575074, 0.0347003522928378
    ), logphi = c(0.476855778296085, -1.69831470154948)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_129 = structure(list(
    par = c(-0.136117237618788, -0.00642714500867917, 0.502406360104887, 
    -1.67367167321103), value = 91.9593693056111, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.573677906624, -14.538064466052, 
    274.380916778227, -14.8099200369955, -14.538064466052, 43.0283740548987, 
    -29.3711195951118, -13.2823295952988, 274.380916778227, -29.3711195951118, 
    6091.09440755162, -397.014483329627, -14.8099200369955, -13.2823295952988, 
    -397.014483329627, 351.631490410398), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.136117237618788, -0.00642714500867917
    ), logphi = c(0.502406360104887, -1.67367167321103)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_130 = structure(list(
    par = c(-0.198606312045708, 0.0375334593210947, 0.481717738117581, 
    -1.6464600147752), value = 69.0208873796864, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.402025925386, -6.71169289745421, 
    257.468813792627, -11.280097181654, -6.71169289745421, 49.9725129969875, 
    -18.7602762551364, -13.788247253288, 257.468813792627, -18.7602762551364, 
    5355.19696985887, -319.752219148484, -11.280097181654, -13.788247253288, 
    -319.752219148484, 308.997534705924), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198606312045708, 0.0375334593210947
    ), logphi = c(0.481717738117581, -1.6464600147752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_131 = structure(list(
    par = c(-0.247642327343193, 0.0664446364116303, 0.482345512879295, 
    -1.53923599623597), value = 79.3694403585634, counts = structure(c(273L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.271334196786, -3.07629468565551, 
    239.130660091291, -11.8439982266239, -3.07629468565551, 51.8033038048316, 
    -19.0502685697425, -14.1174046195403, 239.130660091291, -19.0502685697425, 
    4069.75162277234, -265.716538347505, -11.8439982266239, -14.1174046195403, 
    -265.716538347505, 256.408939460329), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.247642327343193, 0.0664446364116303
    ), logphi = c(0.482345512879295, -1.53923599623597)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_132 = structure(list(
    par = c(-0.144112155365116, 0.0129633015570375, 0.490605802455175, 
    -1.53879071181843), value = 101.045534193425, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.494270297248, -9.17984900539182, 
    217.05726478416, -9.7308193094392, -9.17984900539182, 40.7126517565359, 
    -21.2702141304533, -11.6105197598415, 217.05726478416, -21.2702141304533, 
    3842.39567217293, -247.773679108221, -9.7308193094392, -11.6105197598415, 
    -247.773679108221, 243.57631002303), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.144112155365116, 0.0129633015570375
    ), logphi = c(0.490605802455175, -1.53879071181843)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_133 = structure(list(
    par = c(-0.3466374184001, -0.155237505889792, 0.474907761069007, 
    -1.58509920243431), value = 81.4822345133285, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.138824260668, -5.11396051194879, 
    260.26132153234, -17.2463808336687, -5.11396051194879, 39.2027655600202, 
    -24.1832302343425, -13.0731682599361, 260.26132153234, -24.1832302343425, 
    4763.39172738704, -297.503712971547, -17.2463808336687, -13.0731682599361, 
    -297.503712971547, 288.509393051584), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3466374184001, -0.155237505889792
    ), logphi = c(0.474907761069007, -1.58509920243431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_134 = structure(list(
    par = c(-0.362712907501145, 0.0861890133254123, 0.516467476937552, 
    -1.71876786833515), value = 51.3693929270302, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.5496209523117, -9.6626782202236, 
    287.554129950962, -26.2004159168328, -9.6626782202236, 46.4366408969852, 
    -37.8087775345648, -15.7091249430863, 287.554129950962, -37.8087775345648, 
    6368.66871796471, -520.289011907593, -26.2004159168328, -15.7091249430863, 
    -520.289011907593, 366.546153298231), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.362712907501145, 0.0861890133254123
    ), logphi = c(0.516467476937552, -1.71876786833515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_135 = structure(list(
    par = c(-0.436306081021475, 0.10582597619324, 0.496975436794883, 
    -1.56341908456917), value = 82.694794652048, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.418520608997, 0.608123265521954, 
    258.367187775832, -23.200995974193, 0.608123265521954, 53.7442068093696, 
    -24.3872790548494, -16.7585281900529, 258.367187775832, -24.3872790548494, 
    4301.75100775187, -373.330678641537, -23.200995974193, -16.7585281900529, 
    -373.330678641537, 281.102154858104), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.436306081021475, 0.10582597619324
    ), logphi = c(0.496975436794883, -1.56341908456917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_136 = structure(list(
    par = c(-0.154949882818694, 0.0109719245677375, 0.492642725818093, 
    -1.63267793139671), value = 74.1655791058464, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.5603100233636, -9.51879057353722, 
    216.499782833779, -10.4510603229357, -9.51879057353722, 37.2872221419129, 
    -20.2291876973959, -11.1073395068217, 216.499782833779, -20.2291876973959, 
    4466.15893608637, -283.215899582245, -10.4510603229357, -11.1073395068217, 
    -283.215899582245, 264.623426712518), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.154949882818694, 0.0109719245677375
    ), logphi = c(0.492642725818093, -1.63267793139671)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_137 = structure(list(
    par = c(-0.166631926364008, 0.205655022948274, 0.484365071223498, 
    -1.77734723171256), value = 51.1510313168826, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.395800768667, -8.46718193514562, 
    292.58814064903, -9.75137030323481, -8.46718193514562, 57.8360492120567, 
    -8.84561696423702, -16.0777508551035, 292.58814064903, -8.84561696423702, 
    7474.35823736353, -420.144600544958, -9.75137030323481, -16.0777508551035, 
    -420.144600544958, 374.990105274975), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.166631926364008, 0.205655022948274
    ), logphi = c(0.484365071223498, -1.77734723171256)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_138 = structure(list(
    par = c(-0.408610351628975, 0.0483724899480283, 0.531193313903972, 
    -1.53889846128361), value = 70.9319096894905, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.8927517102754, -4.58847437911913, 
    209.843415024835, -25.7833027799137, -4.58847437911913, 39.4094507321086, 
    -33.1391292434091, -11.5862401521838, 209.843415024835, -33.1391292434091, 
    3422.39833404179, -375.274843431583, -25.7833027799137, -11.5862401521838, 
    -375.274843431583, 244.999426630699), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.408610351628975, 0.0483724899480283
    ), logphi = c(0.531193313903972, -1.53889846128361)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_139 = structure(list(
    par = c(-0.460826520918372, -0.0594386358954636, 0.527918854250004, 
    -1.66657533956725), value = 68.1525242273141, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(75.1508812122381, -9.48235513220652, 
    261.703803882796, -31.930158439053, -9.48235513220652, 35.7949193414697, 
    -46.933171105934, -12.255200452671, 261.703803882796, -46.933171105934, 
    5413.32991148735, -518.638396361126, -31.930158439053, -12.255200452671, 
    -518.638396361126, 341.380630146659), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.460826520918372, -0.0594386358954636
    ), logphi = c(0.527918854250004, -1.66657533956725)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_140 = structure(list(
    par = c(-0.200194032010087, 0.0228465153884075, 0.486157609272294, 
    -1.68321811058333), value = 67.8714081064795, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.393928330652, -9.01174048095754, 
    274.815695874508, -13.3086513365299, -9.01174048095754, 48.9236529972459, 
    -21.6685332077304, -14.2028131531191, 274.815695874508, -21.6685332077304, 
    6069.50097233749, -368.602870519652, -13.3086513365299, -14.2028131531191, 
    -368.602870519652, 340.744438599216), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.200194032010087, 0.0228465153884075
    ), logphi = c(0.486157609272294, -1.68321811058333)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_141 = structure(list(
    par = c(-0.318324271436913, 0.0170062160024012, 0.499203925187877, 
    -1.57810987785718), value = 85.7275569288458, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.196846692631, -5.2322837866825, 
    242.225561011722, -18.9985239078538, -5.2322837866825, 44.1442047325324, 
    -26.2923208254051, -13.5922670558841, 242.225561011722, -26.2923208254051, 
    4318.19195038585, -341.641878478072, -18.9985239078538, -13.5922670558841, 
    -341.641878478072, 275.65525978801), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318324271436913, 0.0170062160024012
    ), logphi = c(0.499203925187877, -1.57810987785718)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_142 = structure(list(
    par = c(-0.294039616040997, -0.171856267741106, 0.497841712152194, 
    -1.7345825319409), value = 69.9947655602245, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.794312915752, -12.3441310435624, 
    278.107509682712, -21.2583105589914, -12.3441310435624, 32.2685703970649, 
    -34.2677300153582, -11.7469452121099, 278.107509682712, -34.2677300153582, 
    6704.9639927319, -443.310987591872, -21.2583105589914, -11.7469452121099, 
    -443.310987591872, 365.133547092), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294039616040997, -0.171856267741106
    ), logphi = c(0.497841712152194, -1.7345825319409)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_143 = structure(list(
    par = c(-0.377948764788845, -0.0814146957301826, 0.486791144335072, 
    -1.67513774178209), value = 73.2165335822518, counts = structure(c(243L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.6216009276004, -7.85264695934984, 
    265.177576011411, -20.6911884887973, -7.85264695934984, 34.9138169291052, 
    -26.8564683310046, -13.4949422125885, 265.177576011411, -26.8564683310046, 
    5561.85004957044, -388.633600225674, -20.6911884887973, -13.4949422125885, 
    -388.633600225674, 320.404070617286), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377948764788845, -0.0814146957301826
    ), logphi = c(0.486791144335072, -1.67513774178209)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_144 = structure(list(
    par = c(-0.340071587557072, -0.0265303245280236, 0.47812853754714, 
    -1.63850947381307), value = 69.068087016164, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.479565206679, -3.77013367014456, 
    263.810094683237, -16.7554220720234, -3.77013367014456, 46.0911873894077, 
    -20.9913714357413, -14.381163541799, 263.810094683237, -20.9913714357413, 
    5209.21335116498, -338.420070313816, -16.7554220720234, -14.381163541799, 
    -338.420070313816, 304.477206530152), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340071587557072, -0.0265303245280236
    ), logphi = c(0.47812853754714, -1.63850947381307)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_145 = structure(list(
    par = c(-0.316006849892297, 0.0261479860619387, 0.475825194748955, 
    -1.58721231254194), value = 73.8183217099147, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.230912862211, -2.71858665001901, 
    226.731253523127, -12.5562434405424, -2.71858665001901, 42.043578886819, 
    -16.2392750944207, -13.1555232840697, 226.731253523127, -16.2392750944207, 
    4113.04985745886, -261.949950820295, -12.5562434405424, -13.1555232840697, 
    -261.949950820295, 248.836058666768), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316006849892297, 0.0261479860619387
    ), logphi = c(0.475825194748955, -1.58721231254194)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_146 = structure(list(
    par = c(-0.413114666849338, -0.149323609547624, 0.502423964212214, 
    -1.61297592888968), value = 88.6140999524122, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.1688116757055, -8.8750628108869, 
    274.387739594317, -27.4854339945563, -8.8750628108869, 34.1213651537942, 
    -37.0315445685776, -13.1153877340751, 274.387739594317, -37.0315445685776, 
    5219.1797893002, -430.750382644618, -27.4854339945563, -13.1153877340751, 
    -430.750382644618, 328.688254747078), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.413114666849338, -0.149323609547624
    ), logphi = c(0.502423964212214, -1.61297592888968)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_147 = structure(list(
    par = c(-0.256526735288209, 0.171817529483559, 0.518404452175432, 
    -1.62813826726621), value = 65.5344170146392, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.389396238806, -6.46283947247639, 
    272.837618410904, -21.5220004662342, -6.46283947247639, 59.9204050786284, 
    -31.1009946010188, -16.2812500921206, 272.837618410904, -31.1009946010188, 
    5251.68325216185, -451.712794006909, -21.5220004662342, -16.2812500921206, 
    -451.712794006909, 330.917169357292), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256526735288209, 0.171817529483559
    ), logphi = c(0.518404452175432, -1.62813826726621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_148 = structure(list(
    par = c(-0.190527499324871, 0.0113181128947532, 0.507583574099167, 
    -1.62309733464275), value = 101.558152400063, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.199475207106, -12.7591720087139, 
    277.369885029799, -18.5016330931376, -12.7591720087139, 46.2341989120318, 
    -32.4271239371399, -14.1776994411202, 277.369885029799, -32.4271239371399, 
    5538.81980383863, -411.125735249485, -18.5016330931376, -14.1776994411202, 
    -411.125735249485, 340.460657870523), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190527499324871, 0.0113181128947532
    ), logphi = c(0.507583574099167, -1.62309733464275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_149 = structure(list(
    par = c(-0.293618479932655, 0.136969529458297, 0.519587828505401, 
    -1.51135441428167), value = 88.6449047239571, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.771774633392, -4.43986685993991, 
    234.463193145018, -21.5697086112243, -4.43986685993991, 53.2076263333181, 
    -29.1413000255147, -14.2633227167011, 234.463193145018, -29.1413000255147, 
    3688.83231339723, -361.628900639843, -21.5697086112243, -14.2633227167011, 
    -361.628900639843, 258.649009516887), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293618479932655, 0.136969529458297
    ), logphi = c(0.519587828505401, -1.51135441428167)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_150 = structure(list(
    par = c(-0.329924670070734, 0.0797760687230645, 0.503313427265178, 
    -1.45846197936462), value = 96.2058765109029, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.369390995961, -1.68780957210402, 
    225.405845313276, -18.8981990927317, -1.68780957210402, 51.4912237221665, 
    -24.9978031092724, -13.888617552027, 225.405845313276, -24.9978031092724, 
    3234.54618754937, -288.736898344411, -18.8981990927317, -13.888617552027, 
    -288.736898344411, 226.177371601466), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329924670070734, 0.0797760687230645
    ), logphi = c(0.503313427265178, -1.45846197936462)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_151 = structure(list(
    par = c(-0.220372869024248, 0.294227233203881, 0.517028379436544, 
    -1.5598515724507), value = 67.6551481176072, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.485296081071, -1.47153544816092, 
    233.716835804643, -16.1684320829636, -1.47153544816092, 65.2128728830803, 
    -21.2261816834314, -15.7200808104108, 233.716835804643, -21.2261816834314, 
    4002.71007402608, -363.687674761692, -16.1684320829636, -15.7200808104108, 
    -363.687674761692, 267.235849634062), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220372869024248, 0.294227233203881
    ), logphi = c(0.517028379436544, -1.5598515724507)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_152 = structure(list(
    par = c(-0.173067487602895, 0.322059164602171, 0.507882332998639, 
    -1.63471242970269), value = 63.5538840262016, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.668416498887, -2.86483471256815, 
    274.366345097476, -13.6493485554112, -2.86483471256815, 74.7722290466157, 
    -17.2669334901343, -18.0264894478199, 274.366345097476, -17.2669334901343, 
    5410.95975952821, -418.215266814848, -13.6493485554112, -18.0264894478199, 
    -418.215266814848, 330.022192919444), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173067487602895, 0.322059164602171
    ), logphi = c(0.507882332998639, -1.63471242970269)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_153 = structure(list(
    par = c(-0.145150490162187, -0.00401388327662142, 0.48235116207269, 
    -1.67850721904003), value = 69.6278442963672, counts = structure(c(235L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.244790312511, -10.5975591608853, 
    233.24410957315, -9.01286764865006, -10.5975591608853, 37.4316593827473, 
    -17.7407985582079, -11.5528832722589, 233.24410957315, -17.7407985582079, 
    5242.67502555631, -292.244731193492, -9.01286764865006, -11.5528832722589, 
    -292.244731193492, 292.606411591123), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.145150490162187, -0.00401388327662142
    ), logphi = c(0.48235116207269, -1.67850721904003)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_154 = structure(list(
    par = c(-0.339378432502405, -0.145175753057823, 0.515018925721991, 
    -1.64226216828125), value = 94.1858046673501, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(89.9472875559582, -11.1062581602539, 
    269.248490486262, -26.6440672618273, -11.1062581602539, 34.4096432662866, 
    -40.3884219117856, -11.9089947432371, 269.248490486262, -40.3884219117856, 
    5493.53197447644, -457.62654296766, -26.6440672618273, -11.9089947432371, 
    -457.62654296766, 341.058571123654), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.339378432502405, -0.145175753057823
    ), logphi = c(0.515018925721991, -1.64226216828125)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_155 = structure(list(
    par = c(-0.249181414800026, -0.224783239538762, 0.492695517771996, 
    -1.66375170614632), value = 90.3341582750248, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.3031113155589, -12.1945307895999, 
    257.615489999807, -17.9855229198722, -12.1945307895999, 28.3353090679839, 
    -29.8338411148791, -10.7954339583216, 257.615489999807, -29.8338411148791, 
    5610.53847356519, -361.776066988284, -17.9855229198722, -10.7954339583216, 
    -361.776066988284, 325.239016451206), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249181414800026, -0.224783239538762
    ), logphi = c(0.492695517771996, -1.66375170614632)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_156 = structure(list(
    par = c(-0.198063470276664, 0.246439113760626, 0.522366677058121, 
    -1.57643853743228), value = 78.5363267297875, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.009572761058, -6.96329711402655, 
    248.567865881455, -18.1280979525411, -6.96329711402655, 59.0772441810827, 
    -26.98303709181, -15.6606213099764, 248.567865881455, -26.98303709181, 
    4420.19323833165, -401.358508415939, -18.1280979525411, -15.6606213099764, 
    -401.358508415939, 292.789684969819), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198063470276664, 0.246439113760626
    ), logphi = c(0.522366677058121, -1.57643853743228)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_157 = structure(list(
    par = c(-0.0751408305398645, 0.11002428451441, 0.480412811852338, 
    -1.73621763951156), value = 68.7624757999482, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.843338530274, -12.0712440434545, 
    277.009359194835, -6.25025758616005, -12.0712440434545, 54.0348841227001, 
    -13.4687327673078, -13.9227717621537, 277.009359194835, -13.4687327673078, 
    6977.6781881572, -354.661111883203, -6.25025758616005, -13.9227717621537, 
    -354.661111883203, 363.607762416507), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0751408305398645, 0.11002428451441
    ), logphi = c(0.480412811852338, -1.73621763951156)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_158 = structure(list(
    par = c(-0.28792750747523, 0.0446906226795633, 0.507742174859524, 
    -1.59582976666779), value = 81.3151803760562, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.18641272175, -6.72553401415144, 
    251.521584623049, -20.2271667859577, -6.72553401415144, 47.1779265645011, 
    -29.4093794082073, -13.9581316460635, 251.521584623049, -29.4093794082073, 
    4639.68688051253, -380.969704814049, -20.2271667859577, -13.9581316460635, 
    -380.969704814049, 295.831205235686), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28792750747523, 0.0446906226795633
    ), logphi = c(0.507742174859524, -1.59582976666779)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_159 = structure(list(
    par = c(-0.218802899407046, 0.0707082581121575, 0.526611980959505, 
    -1.56380593426302), value = 88.8364007870885, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.063389351362, -9.34378072514619, 
    221.97501838761, -19.60453701777, -9.34378072514619, 42.1723657169082, 
    -31.3438174615044, -11.840770110183, 221.97501838761, -31.3438174615044, 
    3932.30736564476, -365.524431192199, -19.60453701777, -11.840770110183, 
    -365.524431192199, 264.983415984688), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218802899407046, 0.0707082581121575
    ), logphi = c(0.526611980959505, -1.56380593426302)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_160 = structure(list(
    par = c(-0.338606834701389, 0.0135898470648649, 0.510910349639129, 
    -1.60285617399757), value = 91.0670641421228, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.900720719949, -7.44296337984451, 
    281.858860024187, -25.8205615359941, -7.44296337984451, 49.3437878041902, 
    -36.0149680957988, -15.2984904975284, 281.858860024187, -36.0149680957988, 
    5219.93367861029, -449.353957156617, -25.8205615359941, -15.2984904975284, 
    -449.353957156617, 334.83777992771), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.338606834701389, 0.0135898470648649
    ), logphi = c(0.510910349639129, -1.60285617399757)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_161 = structure(list(
    par = c(-0.275229038400051, 0.301291929066565, 0.478936329444362, 
    -1.69157133400649), value = 53.1797760745255, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.10466211377, 2.24481556365674, 
    290.415938833277, -11.2271727834568, 2.24481556365674, 71.0250561581915, 
    -1.16959453499987, -19.1258309385489, 290.415938833277, -1.16959453499987, 
    6179.58133051566, -398.773571266275, -11.2271727834568, -19.1258309385489, 
    -398.773571266275, 342.257400706814), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275229038400051, 0.301291929066565
    ), logphi = c(0.478936329444362, -1.69157133400649)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_162 = structure(list(
    par = c(-0.484965008232606, -0.240504124056931, 0.522913558925934, 
    -1.5321181460099), value = 94.3911479549746, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(80.2907629591232, -7.35671596530096, 
    232.360597962611, -31.5509049695351, -7.35671596530096, 28.112772007205, 
    -39.5707688163327, -9.60206051203727, 232.360597962611, -39.5707688163327, 
    3888.39447663614, -406.96547202046, -31.5509049695351, -9.60206051203727, 
    -406.96547202046, 275.34964883813), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.484965008232606, -0.240504124056931
    ), logphi = c(0.522913558925934, -1.5321181460099)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_163 = structure(list(
    par = c(-0.101412393858595, 0.0345892347315371, 0.493743380901613, 
    -1.57511355182174), value = 98.6382599975252, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.22315205734, -10.5831733634432, 
    233.543265039771, -9.50320132631077, -10.5831733634432, 47.0291754766095, 
    -22.6325111647441, -12.2618864608626, 233.543265039771, -22.6325111647441, 
    4453.31698771056, -282.834658953846, -9.50320132631077, -12.2618864608626, 
    -282.834658953846, 275.785721299826), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.101412393858595, 0.0345892347315371
    ), logphi = c(0.493743380901613, -1.57511355182174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_164 = structure(list(
    par = c(-0.273621026993021, 0.0237573624335601, 0.472993669138917, 
    -1.57191196232964), value = 84.343476054498, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.674567497668, -3.73445008960971, 
    236.924721004783, -10.9840767112956, -3.73445008960971, 45.3550219710053, 
    -16.4344852322529, -13.5675452312967, 236.924721004783, -16.4344852322529, 
    4253.08493176857, -252.733655035087, -10.9840767112956, -13.5675452312967, 
    -252.733655035087, 257.734558687162), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273621026993021, 0.0237573624335601
    ), logphi = c(0.472993669138917, -1.57191196232964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_165 = structure(list(
    par = c(-0.182058186576039, -0.00333636054393054, 0.479566625201383, 
    -1.56731360336678), value = 82.8788340470601, counts = structure(c(275L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.042980558944, -7.15939220796713, 
    219.89462022276, -8.8944478875419, -7.15939220796713, 40.8362768808956, 
    -18.1924070794537, -11.7888003856592, 219.89462022276, -18.1924070794537, 
    4051.85076540704, -236.036975781673, -8.8944478875419, -11.7888003856592, 
    -236.036975781673, 247.581941451358), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.182058186576039, -0.00333636054393054
    ), logphi = c(0.479566625201383, -1.56731360336678)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_166 = structure(list(
    par = c(-0.31707192708555, -0.164103225067894, 0.511205265571058, 
    -1.56245059881928), value = 91.5612304719956, counts = structure(c(279L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.2510007071462, -9.17158603996882, 
    241.829295006823, -23.334978337175, -9.17158603996882, 33.4450375696349, 
    -34.2048680153084, -10.9706043591729, 241.829295006823, -34.2048680153084, 
    4321.78098931502, -367.919966011598, -23.334978337175, -10.9706043591729, 
    -367.919966011598, 284.904591620005), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.31707192708555, -0.164103225067894
    ), logphi = c(0.511205265571058, -1.56245059881928)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_167 = structure(list(
    par = c(-0.259754552671381, -0.0737269200614167, 0.517365117436413, 
    -1.60973622721175), value = 90.3173979589755, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(91.6538786270849, -11.274324226207, 
    242.398073872607, -21.5358526300946, -11.274324226207, 35.1023795737149, 
    -34.5062833631005, -11.4228461161048, 242.398073872607, -34.5062833631005, 
    4701.71954883725, -392.564552281982, -21.5358526300946, -11.4228461161048, 
    -392.564552281982, 299.514439980442), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259754552671381, -0.0737269200614167
    ), logphi = c(0.517365117436413, -1.60973622721175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_168 = structure(list(
    par = c(-0.221273008697577, 0.0160042598926737, 0.506255580209081, 
    -1.53402299257663), value = 87.0468425298232, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.6931754002617, -7.32235734801634, 
    213.216461052212, -15.3474064461534, -7.32235734801634, 40.9598260517896, 
    -25.2680390602222, -11.5033893983707, 213.216461052212, -25.2680390602222, 
    3626.453973677, -291.534892216561, -15.3474064461534, -11.5033893983707, 
    -291.534892216561, 239.788699818888), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221273008697577, 0.0160042598926737
    ), logphi = c(0.506255580209081, -1.53402299257663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_169 = structure(list(
    par = c(-0.262343338883117, 0.126711007899126, 0.509256718214202, 
    -1.61968438627403), value = 71.5461877577116, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.843407910299, -6.43908286335204, 
    230.049996385873, -16.9920339185836, -6.43908286335204, 45.1444903148968, 
    -24.4140119001202, -13.4708573060749, 230.049996385873, -24.4140119001202, 
    4395.42978702789, -356.641532999191, -16.9920339185836, -13.4708573060749, 
    -356.641532999191, 274.703473145621), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262343338883117, 0.126711007899126
    ), logphi = c(0.509256718214202, -1.61968438627403)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_170 = structure(list(
    par = c(-0.249360608682458, -0.299313258297405, 0.494982721313142, 
    -1.64277299029374), value = 95.1556633478995, counts = structure(c(315L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(88.000073883876, -11.3900647065179, 
    236.88385570253, -17.5871301859587, -11.3900647065179, 24.1525937347831, 
    -28.9663712074173, -9.25954375929905, 236.88385570253, -28.9663712074173, 
    5035.63708537769, -330.867123468082, -17.5871301859587, -9.25954375929905, 
    -330.867123468082, 298.660275991125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.249360608682458, -0.299313258297405
    ), logphi = c(0.494982721313142, -1.64277299029374)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_171 = structure(list(
    par = c(-0.369209874131957, -0.174192464910757, 0.507750115006388, 
    -1.59159379194899), value = 98.6337740175706, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.5343414459026, -9.90426376290543, 
    250.761443574277, -25.1136431348442, -9.90426376290543, 29.7805587869959, 
    -35.3597530384775, -11.4228777707837, 250.761443574277, -35.3597530384775, 
    4665.43581722689, -392.421562718681, -25.1136431348442, -11.4228777707837, 
    -392.421562718681, 300.416666320302), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369209874131957, -0.174192464910757
    ), logphi = c(0.507750115006388, -1.59159379194899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_172 = structure(list(
    par = c(-0.256653461710298, 0.0233799687316281, 0.509229794284094, 
    -1.60056063334407), value = 92.0404063175753, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.568008101415, -9.82622045242465, 
    273.747531299051, -21.3395034478481, -9.82622045242465, 47.1413411844424, 
    -33.0585806516126, -14.618049313242, 273.747531299051, -33.0585806516126, 
    5150.49573491666, -415.070884903557, -21.3395034478481, -14.618049313242, 
    -415.070884903557, 326.559572602747), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256653461710298, 0.0233799687316281
    ), logphi = c(0.509229794284094, -1.60056063334407)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_173 = structure(list(
    par = c(-0.291624958330659, -0.107047477733594, 0.508425079820174, 
    -1.68592250463347), value = 84.1916596855095, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(90.7432940984165, -11.5580251573988, 
    270.286518766483, -22.6424728353436, -11.5580251573988, 35.9625344081849, 
    -36.3121407005451, -12.264358920433, 270.286518766483, -36.3121407005451, 
    5950.6643898608, -443.005772517324, -22.6424728353436, -12.264358920433, 
    -443.005772517324, 347.505916622026), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.291624958330659, -0.107047477733594
    ), logphi = c(0.508425079820174, -1.68592250463347)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_174 = structure(list(
    par = c(-0.161436864183068, 0.0822745299164584, 0.491864787530388, 
    -1.56091832380102), value = 89.0435409471624, counts = structure(c(249L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.312423216883, -7.44880212621979, 
    224.953141522377, -10.2833834922933, -7.44880212621979, 46.6102873062368, 
    -20.1392267769052, -12.7104052580762, 224.953141522377, -20.1392267769052, 
    4076.0905311501, -272.360979158393, -10.2833834922933, -12.7104052580762, 
    -272.360979158393, 255.755210961439), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161436864183068, 0.0822745299164584
    ), logphi = c(0.491864787530388, -1.56091832380102)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_175 = structure(list(
    par = c(-0.379594264963095, -0.401529252609975, 0.522595980294517, 
    -1.58205983321838), value = 105.702269113709, counts = structure(c(305L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.6771434810873, -10.6586926129637, 
    240.090712985364, -29.0710937314032, -10.6586926129637, 21.7992678273049, 
    -39.7659300475084, -7.80247400200551, 240.090712985364, -39.7659300475084, 
    4600.85860547821, -422.341585521124, -29.0710937314032, -7.80247400200551, 
    -422.341585521124, 306.372447692382), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379594264963095, -0.401529252609975
    ), logphi = c(0.522595980294517, -1.58205983321838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_176 = structure(list(
    par = c(-0.173192809723382, 0.191078667305177, 0.488909811440688, 
    -1.61787023149525), value = 58.3418444695255, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.874139078921, -4.16216437137962, 
    218.960735905327, -8.62014945113287, -4.16216437137962, 51.7283410754743, 
    -13.4185604281356, -13.2199664379939, 218.960735905327, -13.4185604281356, 
    4305.74875666245, -281.380135808362, -8.62014945113287, -13.2199664379939, 
    -281.380135808362, 257.530545134443), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173192809723382, 0.191078667305177
    ), logphi = c(0.488909811440688, -1.61787023149525)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_177 = structure(list(
    par = c(-0.270269736077164, -0.0186862765019388, 0.484729610960602, 
    -1.72481610522506), value = 56.5069316084509, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.0708301759277, -8.22092588848022, 
    252.488981688614, -14.7328892303733, -8.22092588848022, 38.1627650849481, 
    -20.7631937705344, -12.6574132588431, 252.488981688614, -20.7631937705344, 
    5869.035633987, -362.145355572885, -14.7328892303733, -12.6574132588431, 
    -362.145355572885, 316.58143702451), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.270269736077164, -0.0186862765019388
    ), logphi = c(0.484729610960602, -1.72481610522506)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_178 = structure(list(
    par = c(-0.535335453013067, 0.0604338538144108, 0.494909459647844, 
    -1.63965127427676), value = 66.5687682827113, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.8779341765894, -0.335551479935248, 
    278.012698672114, -28.3356655845779, -0.335551479935248, 
    50.5146813161161, -28.4904939462649, -17.4376195296588, 278.012698672114, 
    -28.4904939462649, 5194.23929250351, -451.220743133973, -28.3356655845779, 
    -17.4376195296588, -451.220743133973, 321.112029823212), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.535335453013067, 0.0604338538144108
    ), logphi = c(0.494909459647844, -1.63965127427676)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_179 = structure(list(
    par = c(-0.369774092692791, 0.0358026304437157, 0.496263279202994, 
    -1.59986982287606), value = 72.7559677879982, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.6234855113157, -3.9575373982359, 
    243.842357566137, -19.9686174831015, -3.9575373982359, 43.5391437214605, 
    -24.9049528449063, -14.177083851763, 243.842357566137, -24.9049528449063, 
    4436.65816166572, -352.74722810108, -19.9686174831015, -14.177083851763, 
    -352.74722810108, 278.498210143141), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369774092692791, 0.0358026304437157
    ), logphi = c(0.496263279202994, -1.59986982287606)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_180 = structure(list(
    par = c(-0.301650149343445, -0.0317993960629243, 0.489713934919789, 
    -1.56292094270026), value = 86.2083760109199, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.947519399218, -5.50539605370659, 
    251.707839122872, -17.3828599656645, -5.50539605370659, 44.1772373847016, 
    -25.3625945489944, -13.7224959786408, 251.707839122872, -25.3625945489944, 
    4424.13819683551, -317.256336780147, -17.3828599656645, -13.7224959786408, 
    -317.256336780147, 279.447608640737), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301650149343445, -0.0317993960629243
    ), logphi = c(0.489713934919789, -1.56292094270026)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_181 = structure(list(
    par = c(-0.25209000992554, -0.0892412344900176, 0.493518342431603, 
    -1.64861281127968), value = 88.7653083719, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.010070207825, -11.3587856667152, 
    261.672301210325, -17.4385689728496, -11.3587856667152, 35.4343257598089, 
    -28.0648609525258, -12.6289013628877, 261.672301210325, -28.0648609525258, 
    5438.74708502301, -365.989889633767, -17.4385689728496, -12.6289013628877, 
    -365.989889633767, 320.762003191533), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25209000992554, -0.0892412344900176
    ), logphi = c(0.493518342431603, -1.64861281127968)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_182 = structure(list(
    par = c(-0.186193757280959, -0.0264225785552565, 0.47069135888731, 
    -1.6335346870637), value = 81.0411423248916, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.15562667996, -8.40406353930234, 
    237.728338770893, -8.28887831616498, -8.40406353930234, 38.9607846926765, 
    -15.864819644662, -12.1586252266326, 237.728338770893, -15.864819644662, 
    4918.15305648657, -256.983685284595, -8.28887831616498, -12.1586252266326, 
    -256.983685284595, 281.352453850303), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186193757280959, -0.0264225785552565
    ), logphi = c(0.47069135888731, -1.6335346870637)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_183 = structure(list(
    par = c(-0.400944497190529, -0.128248499325967, 0.502213652179112, 
    -1.66355723001833), value = 82.6670872219745, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9326017735407, -9.44309433137391, 
    295.474945712471, -28.2757595968519, -9.44309433137391, 38.1681935088807, 
    -39.4801111838206, -13.9967344718883, 295.474945712471, -39.4801111838206, 
    6127.87540852366, -483.628341141795, -28.2757595968519, -13.9967344718883, 
    -483.628341141795, 367.511844199697), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.400944497190529, -0.128248499325967
    ), logphi = c(0.502213652179112, -1.66355723001833)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_184 = structure(list(
    par = c(-0.371129520432044, 0.0885639265813966, 0.50375479857545, 
    -1.53477557462974), value = 80.3958048512767, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.525362514986, -2.03873834081492, 
    244.005738739617, -21.5991959553463, -2.03873834081492, 50.7370285305342, 
    -26.3205067945194, -15.0940819683143, 244.005738739617, -26.3205067945194, 
    3943.68975166159, -350.177830849674, -21.5991959553463, -15.0940819683143, 
    -350.177830849674, 264.75231667078), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371129520432044, 0.0885639265813966
    ), logphi = c(0.50375479857545, -1.53477557462974)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_185 = structure(list(
    par = c(-0.204834810534092, 0.146550797475691, 0.523467994090265, 
    -1.40842250264257), value = 114.581731298546, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.647814807498, -4.7865253449686, 
    205.544105860156, -17.7730598842629, -4.7865253449686, 54.5872969013317, 
    -26.9812848330275, -12.2227359966587, 205.544105860156, -26.9812848330275, 
    2775.98099812337, -287.215285835529, -17.7730598842629, -12.2227359966587, 
    -287.215285835529, 206.994886315925), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.204834810534092, 0.146550797475691
    ), logphi = c(0.523467994090265, -1.40842250264257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_186 = structure(list(
    par = c(-0.320348868023777, 0.141615367318666, 0.502148912278073, 
    -1.61706847755397), value = 72.4507806010042, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.698420195452, -2.02450918251884, 
    267.867528119581, -20.1220713815786, -2.02450918251884, 60.7692851204433, 
    -24.7970903828332, -16.5201761710421, 267.867528119581, -24.7970903828332, 
    5006.92117651269, -404.586726773459, -20.1220713815786, -16.5201761710421, 
    -404.586726773459, 311.877440626773), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320348868023777, 0.141615367318666
    ), logphi = c(0.502148912278073, -1.61706847755397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_187 = structure(list(
    par = c(-0.221678791763755, 0.312559418781238, 0.540478330871535, 
    -1.62979122871262), value = 58.5403167767847, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.4117097237674, -7.50753557454686, 
    236.389742269694, -20.5680299298905, -7.50753557454686, 56.0412427557111, 
    -29.9310870364167, -15.1384415749689, 236.389742269694, -29.9310870364167, 
    4483.99813161693, -441.160636103888, -20.5680299298905, -15.1384415749689, 
    -441.160636103888, 292.639341166634), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221678791763755, 0.312559418781238
    ), logphi = c(0.540478330871535, -1.62979122871262)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_188 = structure(list(
    par = c(-0.305893293463008, -0.0323747586203046, 0.513560097069491, 
    -1.5804828993394), value = 93.6451710981013, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.8930984218398, -8.25959152805922, 
    244.08433226597, -22.4335121039587, -8.25959152805922, 40.2677112667504, 
    -32.9933593476994, -12.5049975920888, 244.08433226597, -32.9933593476994, 
    4419.42211456592, -383.132725431778, -22.4335121039587, -12.5049975920888, 
    -383.132725431778, 288.868461375102), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305893293463008, -0.0323747586203046
    ), logphi = c(0.513560097069491, -1.5804828993394)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_189 = structure(list(
    par = c(-0.298790144699226, 0.372978179957828, 0.52273111678499, 
    -1.60276132956711), value = 59.2774492781044, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.644828261845, 3.36563573810622, 
    267.099228420165, -21.3531204167339, 3.36563573810622, 80.7289566360225, 
    -20.7480994873777, -19.5470074082493, 267.099228420165, -20.7480994873777, 
    4734.71729317509, -458.333792730414, -21.3531204167339, -19.5470074082493, 
    -458.333792730414, 311.950244363146), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298790144699226, 0.372978179957828
    ), logphi = c(0.52273111678499, -1.60276132956711)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_190 = structure(list(
    par = c(-0.26028911221861, 0.207001150582115, 0.494637557618811, 
    -1.65094413746443), value = 59.1179345002597, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.346185911884, -2.25015471677636, 
    268.919790753941, -15.03869752284, -2.25015471677636, 64.0872991279906, 
    -16.9824262368223, -16.8688841633013, 268.919790753941, -16.9824262368223, 
    5382.35681332111, -388.717029265351, -15.03869752284, -16.8688841633013, 
    -388.717029265351, 318.448821165163), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26028911221861, 0.207001150582115
    ), logphi = c(0.494637557618811, -1.65094413746443)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_191 = structure(list(
    par = c(-0.233352328094814, 0.0529439529282429, 0.49868852567485, 
    -1.54278062232529), value = 89.596428704285, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.494215121548, -6.06325885144088, 
    232.675928064197, -15.0136700387549, -6.06325885144088, 46.8559718065364, 
    -24.1431559011573, -13.2066644678019, 232.675928064197, -24.1431559011573, 
    3989.61415524113, -302.672728505371, -15.0136700387549, -13.2066644678019, 
    -302.672728505371, 258.715056837389), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233352328094814, 0.0529439529282429
    ), logphi = c(0.49868852567485, -1.54278062232529)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_192 = structure(list(
    par = c(-0.180216000513533, -0.0254798335677541, 0.493666788078588, 
    -1.5983807277175), value = 86.7538853732245, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.725655588899, -10.1544861372815, 
    253.764064133577, -13.8435010477167, -10.1544861372815, 43.7545157012664, 
    -25.7773368126379, -12.9437770972629, 253.764064133577, -25.7773368126379, 
    4918.44130803543, -325.604659634493, -13.8435010477167, -12.9437770972629, 
    -325.604659634493, 301.0879332912), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180216000513533, -0.0254798335677541
    ), logphi = c(0.493666788078588, -1.5983807277175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_193 = structure(list(
    par = c(-0.326654051809013, 0.12548451081372, 0.475704161372364, 
    -1.63225250696411), value = 60.5185665474973, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.9337957091577, -1.26174440318039, 
    220.831538905841, -11.5824810231757, -1.26174440318039, 43.2602024726947, 
    -10.900401518299, -13.6411715505602, 220.831538905841, -10.900401518299, 
    4259.20054857798, -276.717497810886, -11.5824810231757, -13.6411715505602, 
    -276.717497810886, 249.00759727764), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326654051809013, 0.12548451081372
    ), logphi = c(0.475704161372364, -1.63225250696411)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_194 = structure(list(
    par = c(-0.28160440451714, 0.194287658752729, 0.482652026370864, 
    -1.64948366204053), value = 61.7536779795594, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.240458109322, -0.232305005454236, 
    274.699559486891, -13.4304716121747, -0.232305005454236, 
    64.51213946157, -12.2767551893332, -17.30398843236, 274.699559486891, 
    -12.2767551893332, 5482.45431009597, -366.411693452307, -13.4304716121747, 
    -17.30398843236, -366.411693452307, 318.566592495628), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28160440451714, 0.194287658752729
    ), logphi = c(0.482652026370864, -1.64948366204053)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_195 = structure(list(
    par = c(-0.205876374045136, 0.129935141583445, 0.484105598412508, 
    -1.61289267293903), value = 78.2102322524026, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.253349021799, -5.56948518237732, 
    256.217232013967, -10.9225363544851, -5.56948518237732, 54.1432620266846, 
    -16.6706909006109, -15.0672289596088, 256.217232013967, -16.6706909006109, 
    4975.5922246959, -316.328410711719, -10.9225363544851, -15.0672289596088, 
    -316.328410711719, 297.034385742023), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205876374045136, 0.129935141583445
    ), logphi = c(0.484105598412508, -1.61289267293903)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_196 = structure(list(
    par = c(-0.130230408372865, 0.0283931160416442, 0.481818477014622, 
    -1.64581004091786), value = 98.273503853035, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.046061775995, -12.589656197548, 
    275.123221779694, -9.48820390078708, -12.589656197548, 46.6180608462707, 
    -20.3960314522078, -14.1717166037836, 275.123221779694, -20.3960314522078, 
    5876.0546867731, -328.527036650428, -9.48820390078708, -14.1717166037836, 
    -328.527036650428, 337.487617191101), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.130230408372865, 0.0283931160416442
    ), logphi = c(0.481818477014622, -1.64581004091786)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_197 = structure(list(
    par = c(-0.239815229000992, 0.0233977029860242, 0.487403935781804, 
    -1.64915229020625), value = 78.1132824226571, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.494498094165, -8.61878153912699, 
    262.60030473324, -14.5090330079256, -8.61878153912699, 43.9278442314617, 
    -22.072067359602, -14.0860731629999, 262.60030473324, -22.072067359602, 
    5405.54108219382, -349.86418814853, -14.5090330079256, -14.0860731629999, 
    -349.86418814853, 315.21697601633), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239815229000992, 0.0233977029860242
    ), logphi = c(0.487403935781804, -1.64915229020625)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_198 = structure(list(
    par = c(-0.32026441485729, -0.0602166044042959, 0.530198872472039, 
    -1.47878471470835), value = 98.1551527612413, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(94.7966019673174, -7.1614329293368, 
    218.542596986282, -25.4164876629659, -7.1614329293368, 38.8993064177612, 
    -34.6566879052546, -10.5551537910031, 218.542596986282, -34.6566879052546, 
    3326.13462237674, -356.344046238632, -25.4164876629659, -10.5551537910031, 
    -356.344046238632, 244.033242530861), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32026441485729, -0.0602166044042959
    ), logphi = c(0.530198872472039, -1.47878471470835)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_199 = structure(list(
    par = c(-0.361024809438713, 0.139335048776247, 0.508688650104483, 
    -1.54027506776757), value = 70.6928671591837, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.389503502716, -1.00027061122887, 
    225.682418900419, -20.2201480039577, -1.00027061122887, 51.5893814565516, 
    -24.1832743093084, -14.4128614572026, 225.682418900419, -24.1832743093084, 
    3665.38562988694, -337.907188200148, -20.2201480039577, -14.4128614572026, 
    -337.907188200148, 247.834745618292), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.361024809438713, 0.139335048776247
    ), logphi = c(0.508688650104483, -1.54027506776757)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_240_200 = structure(list(
    par = c(-0.337505919655418, -0.0948287166876021, 0.502814183085945, 
    -1.64716719893118), value = 84.2615578285474, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.0310213972425, -10.4325271230721, 
    275.457713875937, -23.9019278520658, -10.4325271230721, 36.4840372597541, 
    -34.8854766620832, -13.3578235619325, 275.457713875937, -34.8854766620832, 
    5596.1682523531, -431.166122654147, -23.9019278520658, -13.3578235619325, 
    -431.166122654147, 338.853314094223), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337505919655418, -0.0948287166876021
    ), logphi = c(0.502814183085945, -1.64716719893118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_1 = structure(list(
    par = c(-0.34818098301839, -0.14404970779693, 0.512564691132274, 
    -1.59215412220856), value = 110.00457049352, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.366305418414, -11.2487832879538, 
    306.635021420476, -30.8005891263008, -11.2487832879538, 41.7998156372335, 
    -44.4163116277707, -14.0956155973981, 306.635021420476, -44.4163116277707, 
    5715.85579777789, -492.387445982345, -30.8005891263008, -14.0956155973981, 
    -492.387445982345, 370.461302836134), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.34818098301839, -0.14404970779693
    ), logphi = c(0.512564691132274, -1.59215412220856)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_2 = structure(list(
    par = c(-0.2211256267228, -0.170316558010375, 0.491559342448634, 
    -1.60573814506323), value = 114.038706817182, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.035129791229, -11.5988582187754, 
    298.136228426671, -19.0231526779883, -11.5988582187754, 44.3294331340383, 
    -33.1388320269355, -13.5145957873561, 298.136228426671, -33.1388320269355, 
    5883.56110095845, -383.076520511949, -19.0231526779883, -13.5145957873561, 
    -383.076520511949, 357.564588430392), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2211256267228, -0.170316558010375
    ), logphi = c(0.491559342448634, -1.60573814506323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_3 = structure(list(
    par = c(-0.133362385897611, 0.161696560174739, 0.487214443912333, 
    -1.58899807490918), value = 98.757960859227, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(149.121245502926, -8.17309426892621, 
    288.559849298764, -9.63517109831002, -8.17309426892621, 65.96190885233, 
    -19.7765588296761, -16.9551393778278, 288.559849298764, -19.7765588296761, 
    5517.00992322068, -345.272297956001, -9.63517109831002, -16.9551393778278, 
    -345.272297956001, 335.528777434035), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.133362385897611, 0.161696560174739
    ), logphi = c(0.487214443912333, -1.58899807490918)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_4 = structure(list(
    par = c(-0.251386529502803, 0.137219252266211, 0.53284652105802, 
    -1.55871877083978), value = 97.4474137790968, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.184376741937, -8.33305757907965, 
    282.794572502354, -27.3484933508428, -8.33305757907965, 61.99096122117, 
    -40.6870413947047, -16.063778073061, 282.794572502354, -40.6870413947047, 
    4869.71908904721, -490.230172871975, -27.3484933508428, -16.063778073061, 
    -490.230172871975, 336.2062064447), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251386529502803, 0.137219252266211
    ), logphi = c(0.53284652105802, -1.55871877083978)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_5 = structure(list(
    par = c(-0.340321342193114, -0.195649126702655, 0.51416019317413, 
    -1.57083348516907), value = 111.408395282639, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.223931614352, -11.0583697008337, 
    270.081724210058, -27.8864042151383, -11.0583697008337, 33.8264608394923, 
    -40.1018421385402, -11.7300554958177, 270.081724210058, -40.1018421385402, 
    4903.44588102687, -429.184852874798, -27.8864042151383, -11.7300554958177, 
    -429.184852874798, 323.763481574701), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340321342193114, -0.195649126702655
    ), logphi = c(0.51416019317413, -1.57083348516907)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_6 = structure(list(
    par = c(-0.443907970926732, 0.167314547357196, 0.508939602469683, 
    -1.57248458421122), value = 74.4611138819923, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.80154038162, 1.4023066157165, 
    274.401613182818, -27.2855445597742, 1.4023066157165, 62.6799541372236, 
    -28.3294905436549, -18.4601020070119, 274.401613182818, -28.3294905436549, 
    4593.45207967132, -439.954367895012, -27.2855445597742, -18.4601020070119, 
    -439.954367895012, 307.036462860566), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443907970926732, 0.167314547357196
    ), logphi = c(0.508939602469683, -1.57248458421122)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_7 = structure(list(
    par = c(-0.218260723720121, 0.0667102763784271, 0.477568808954263, 
    -1.65472390368467), value = 82.6368867091009, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.819704849533, -7.68324773403606, 
    269.850839238472, -11.2554624021044, -7.68324773403606, 47.7844974540176, 
    -16.4884252313868, -14.8813593554564, 269.850839238472, -16.4884252313868, 
    5641.68955901678, -331.174997098671, -11.2554624021044, -14.8813593554564, 
    -331.174997098671, 321.424031209716), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.218260723720121, 0.0667102763784271
    ), logphi = c(0.477568808954263, -1.65472390368467)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_8 = structure(list(
    par = c(-0.356335581430386, 0.0199574201538197, 0.534895666836399, 
    -1.60515927811151), value = 86.7100385679221, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.4379993497744, -10.1897634046111, 
    280.785184273213, -32.3439056479913, -10.1897634046111, 46.8776820703454, 
    -47.3098311744025, -14.151652784733, 280.785184273213, -47.3098311744025, 
    5225.48015666047, -529.24794884035, -32.3439056479913, -14.151652784733, 
    -529.24794884035, 350.999199770996), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.356335581430386, 0.0199574201538197
    ), logphi = c(0.534895666836399, -1.60515927811151)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_9 = structure(list(
    par = c(-0.448120584504937, -0.0754921087830465, 0.518886000795524, 
    -1.57564096283769), value = 118.060074034157, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.939582890509, -8.22288387780645, 
    292.743798830486, -34.8800085134826, -8.22288387780645, 42.8414977449165, 
    -45.5187013344016, -14.7036318338678, 292.743798830486, -45.5187013344016, 
    5151.44626409381, -507.078096289248, -34.8800085134826, -14.7036318338678, 
    -507.078096289248, 348.656156155869), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.448120584504937, -0.0754921087830465
    ), logphi = c(0.518886000795524, -1.57564096283769)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_10 = structure(list(
    par = c(-0.195585318295146, -0.0289092514253443, 0.485203259505178, 
    -1.56006262353753), value = 113.785458115606, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.634537169693, -9.50772481189688, 
    278.738860522765, -13.6395553855806, -9.50772481189688, 50.0780742491713, 
    -26.0500962525612, -14.6792672452989, 278.738860522765, -26.0500962525612, 
    5051.01013066778, -316.125439171699, -13.6395553855806, -14.6792672452989, 
    -316.125439171699, 313.700112972271), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195585318295146, -0.0289092514253443
    ), logphi = c(0.485203259505178, -1.56006262353753)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_11 = structure(list(
    par = c(-0.263672860810337, 0.13462348827926, 0.478802401265211, 
    -1.47753395393275), value = 92.0761298383113, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.03041456372, 0.241861268790444, 
    229.748432246879, -10.13188939325, 0.241861268790444, 56.4923136607831, 
    -16.2605001996496, -14.7819352278589, 229.748432246879, -16.2605001996496, 
    3483.16709921903, -226.694781238379, -10.13188939325, -14.7819352278589, 
    -226.694781238379, 226.249624596164), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263672860810337, 0.13462348827926
    ), logphi = c(0.478802401265211, -1.47753395393275)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_12 = structure(list(
    par = c(-0.484654082824791, -0.233179899114863, 0.514040694701597, 
    -1.70073393448067), value = 84.5990689672849, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(81.3071396876808, -11.7782560771218, 
    305.402542132072, -35.7975625941975, -11.7782560771218, 31.3058663827803, 
    -52.8058778357376, -12.0448426894626, 305.402542132072, -52.8058778357376, 
    6886.2091204096, -587.058660579842, -35.7975625941975, -12.0448426894626, 
    -587.058660579842, 408.854063206121), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.484654082824791, -0.233179899114863
    ), logphi = c(0.514040694701597, -1.70073393448067)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_13 = structure(list(
    par = c(-0.19439967242384, 0.327043887098499, 0.501141613976334, 
    -1.61286940102405), value = 71.1612760312425, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.598283667501, -0.135115953980858, 
    297.630883416389, -13.8977000236906, -0.135115953980858, 
    84.6220539472142, -15.3493900505453, -20.0733212203374, 297.630883416389, 
    -15.3493900505453, 5647.04549004702, -430.110319349808, -13.8977000236906, 
    -20.0733212203374, -430.110319349808, 348.140152777177), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.19439967242384, 0.327043887098499
    ), logphi = c(0.501141613976334, -1.61286940102405)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_14 = structure(list(
    par = c(-0.263319216518543, -0.149167888156566, 0.487597448180337, 
    -1.66189428299914), value = 100.023741432485, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.134961989976, -12.0614254051077, 
    299.442024953578, -19.5389485178055, -12.0614254051077, 38.4906653216888, 
    -31.1380879480794, -13.7460852656091, 299.442024953578, -31.1380879480794, 
    6398.90765545559, -407.147831671395, -19.5389485178055, -13.7460852656091, 
    -407.147831671395, 369.425624882069), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263319216518543, -0.149167888156566
    ), logphi = c(0.487597448180337, -1.66189428299914)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_15 = structure(list(
    par = c(-0.392948529860563, 0.0193758076667125, 0.507963498376133, 
    -1.61958101435448), value = 85.0964583956563, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.44617684531, -6.36363852990485, 
    329.102092440081, -31.5454341883736, -6.36363852990485, 58.6420250066055, 
    -41.1318170421282, -18.3399439208642, 329.102092440081, -41.1318170421282, 
    6184.93167687717, -534.614427316171, -31.5454341883736, -18.3399439208642, 
    -534.614427316171, 391.501224783042), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392948529860563, 0.0193758076667125
    ), logphi = c(0.507963498376133, -1.61958101435448)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_16 = structure(list(
    par = c(-0.24963007568862, 0.217788155574226, 0.515184201721305, 
    -1.51486658323179), value = 97.1401830139615, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.644535711383, -3.4420042176464, 
    278.309086620965, -21.4309229420451, -3.4420042176464, 70.5915770389254, 
    -29.1979058140157, -18.0551338324619, 278.309086620965, -29.1979058140157, 
    4421.47875814314, -411.998016982551, -21.4309229420451, -18.0551338324619, 
    -411.998016982551, 304.926855864807), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24963007568862, 0.217788155574226
    ), logphi = c(0.515184201721305, -1.51486658323179)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_17 = structure(list(
    par = c(-0.165229473847114, -0.0531251397400553, 0.475522026584611, 
    -1.59034115990607), value = 99.6393469184632, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.065825567906, -10.473373009745, 
    268.834235384929, -9.81924767273767, -10.473373009745, 44.7708830755289, 
    -21.6940051842585, -13.621859759283, 268.834235384929, -21.6940051842585, 
    5217.98244588822, -281.081379593928, -9.81924767273767, -13.621859759283, 
    -281.081379593928, 310.901874232883), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.165229473847114, -0.0531251397400553
    ), logphi = c(0.475522026584611, -1.59034115990607)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_18 = structure(list(
    par = c(-0.330863280529316, 0.0985008362324344, 0.502617491192249, 
    -1.56765093790572), value = 86.596711306779, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.339028242711, -4.42733635708237, 
    281.264421253979, -22.5809284799539, -4.42733635708237, 56.6147967830943, 
    -28.9456515716324, -17.0903093579255, 281.264421253979, -28.9456515716324, 
    4853.19125755268, -407.157635201827, -22.5809284799539, -17.0903093579255, 
    -407.157635201827, 315.494877717981), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330863280529316, 0.0985008362324344
    ), logphi = c(0.502617491192249, -1.56765093790572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_19 = structure(list(
    par = c(-0.21398456890256, -0.138239430090926, 0.501344643969388, 
    -1.60848776404191), value = 107.089357880277, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.534455528949, -13.5601212427616, 
    285.109100566672, -20.0520776800772, -13.5601212427616, 38.7944192645762, 
    -34.7174292620878, -12.9879359569429, 285.109100566672, -34.7174292620878, 
    5638.55771969912, -398.991547081451, -20.0520776800772, -12.9879359569429, 
    -398.991547081451, 347.512653871007), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21398456890256, -0.138239430090926
    ), logphi = c(0.501344643969388, -1.60848776404191)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_20 = structure(list(
    par = c(-0.255224130139168, 0.0115931048082165, 0.486264334288804, 
    -1.59191167805752), value = 90.8151686424139, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.919239747281, -7.13757488668421, 
    283.369625215357, -16.1883700222631, -7.13757488668421, 51.3778595490066, 
    -24.9939281786737, -15.6142871503562, 283.369625215357, -24.9939281786737, 
    5282.73530287038, -351.69367496124, -16.1883700222631, -15.6142871503562, 
    -351.69367496124, 323.131215822059), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.255224130139168, 0.0115931048082165
    ), logphi = c(0.486264334288804, -1.59191167805752)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_21 = structure(list(
    par = c(-0.273706841096067, 0.0113446733720694, 0.486308812130857, 
    -1.71820128241764), value = 77.5389268427203, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.99602131029, -9.64613049703189, 
    304.175342392909, -17.9178120323087, -9.64613049703189, 47.1350348725252, 
    -24.5971352690333, -15.7352099527941, 304.175342392909, -24.5971352690333, 
    6955.04686923698, -439.153813166726, -17.9178120323087, -15.7352099527941, 
    -439.153813166726, 378.862969053984), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273706841096067, 0.0113446733720694
    ), logphi = c(0.486308812130857, -1.71820128241764)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_22 = structure(list(
    par = c(-0.363044663866109, -0.101435272383188, 0.496270847840802, 
    -1.68310030367784), value = 93.552521963896, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.702619351282, -12.2139230498419, 
    328.167837622573, -27.5984069979529, -12.2139230498419, 40.3501356522895, 
    -38.9208127842267, -15.8714044626862, 328.167837622573, -38.9208127842267, 
    7043.04572200343, -514.319045466394, -27.5984069979529, -15.8714044626862, 
    -514.319045466394, 408.299403400036), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363044663866109, -0.101435272383188
    ), logphi = c(0.496270847840802, -1.68310030367784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_23 = structure(list(
    par = c(-0.219279011915595, -0.117951693384516, 0.508385545877609, 
    -1.65023082008145), value = 116.772889087444, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.640820459845, -17.1772627943767, 
    324.610062644837, -24.4337381243298, -17.1772627943767, 41.4644194002278, 
    -42.2433618574303, -14.5334581240775, 324.610062644837, -42.2433618574303, 
    6861.59359338134, -499.035399181835, -24.4337381243298, -14.5334581240775, 
    -499.035399181835, 412.166036742434), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219279011915595, -0.117951693384516
    ), logphi = c(0.508385545877609, -1.65023082008145)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_24 = structure(list(
    par = c(-0.397991042173799, -0.23448197774132, 0.515693601843974, 
    -1.63161506596309), value = 106.327438658238, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.8718574019504, -11.9267103393383, 
    296.382504267001, -32.8769064985579, -11.9267103393383, 33.069946105968, 
    -47.4067855726901, -12.0015818030339, 296.382504267001, -47.4067855726901, 
    5976.65455038054, -518.62035714656, -32.8769064985579, -12.0015818030339, 
    -518.62035714656, 377.806939663827), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397991042173799, -0.23448197774132
    ), logphi = c(0.515693601843974, -1.63161506596309)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_25 = structure(list(
    par = c(-0.340184761218939, -0.137909005255469, 0.512873690680241, 
    -1.57048407129958), value = 99.8107041476046, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.746585670057, -9.98516151895501, 
    276.484441780411, -27.7258732097607, -9.98516151895501, 39.107840272834, 
    -39.7530840743343, -12.8729127837346, 276.484441780411, -39.7530840743343, 
    4965.97333906124, -434.39787299171, -27.7258732097607, -12.8729127837346, 
    -434.39787299171, 327.537759595486), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340184761218939, -0.137909005255469
    ), logphi = c(0.512873690680241, -1.57048407129958)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_26 = structure(list(
    par = c(-0.047617938434148, 0.177676451530549, 0.489895053625358, 
    -1.67674007874526), value = 84.7613503789647, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.460700669971, -12.6677001688336, 
    277.446718850882, -6.36149846577894, -12.6677001688336, 60.5007597265228, 
    -16.7251795772927, -15.0778495111581, 277.446718850882, -16.7251795772927, 
    6337.17598122985, -359.063356608402, -6.36149846577894, -15.0778495111581, 
    -359.063356608402, 355.722064359298), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.047617938434148, 0.177676451530549
    ), logphi = c(0.489895053625358, -1.67674007874526)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_27 = structure(list(
    par = c(-0.197969144738724, -0.193585882373215, 0.490710162398167, 
    -1.62484488929648), value = 111.452440025508, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.977410317773, -13.8847104551587, 
    289.377291490922, -17.4567755948374, -13.8847104551587, 36.3385523662885, 
    -31.8043265004064, -12.6193409375475, 289.377291490922, -31.8043265004064, 
    5961.94267519579, -372.139772469637, -17.4567755948374, -12.6193409375475, 
    -372.139772469637, 355.317027693758), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197969144738724, -0.193585882373215
    ), logphi = c(0.490710162398167, -1.62484488929648)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_28 = structure(list(
    par = c(-0.304557426639627, 0.0155255870582292, 0.50783656621652, 
    -1.52056346648564), value = 108.30412808789, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.296385861948, -6.2495877592994, 
    274.77169186696, -23.7077842815125, -6.2495877592994, 54.0266255164568, 
    -33.6432100169759, -15.3282883896821, 274.77169186696, -33.6432100169759, 
    4456.31650856626, -388.561724378178, -23.7077842815125, -15.3282883896821, 
    -388.561724378178, 301.47458353369), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304557426639627, 0.0155255870582292
    ), logphi = c(0.50783656621652, -1.52056346648564)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_29 = structure(list(
    par = c(-0.341550773071482, 0.0468684728301747, 0.524970070824042, 
    -1.57174354345351), value = 95.6333948595018, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.555520064613, -7.62400356180137, 
    283.163912833118, -29.786922933539, -7.62400356180137, 52.8143910507595, 
    -41.3953057432082, -15.4468760857895, 283.163912833118, -41.3953057432082, 
    4951.08159988078, -485.707055776885, -29.786922933539, -15.4468760857895, 
    -485.707055776885, 336.075675136271), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.341550773071482, 0.0468684728301747
    ), logphi = c(0.524970070824042, -1.57174354345351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_30 = structure(list(
    par = c(-0.314698321762676, 0.119777347776703, 0.491258548482856, 
    -1.56434773138188), value = 78.0855380391054, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.134387376031, -1.79221427742959, 
    239.157738381124, -15.7539337166668, -1.79221427742959, 50.9640863484151, 
    -19.5262802016316, -14.9556727109257, 239.157738381124, -19.5262802016316, 
    4119.5794269484, -312.125594883028, -15.7539337166668, -14.9556727109257, 
    -312.125594883028, 261.791854512694), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314698321762676, 0.119777347776703
    ), logphi = c(0.491258548482856, -1.56434773138188)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_31 = structure(list(
    par = c(-0.404137102756331, 0.0546626221548766, 0.486321287209616, 
    -1.66439148887397), value = 65.346815185301, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.244707914513, -3.17807358740652, 
    298.72711369805, -22.6751517757862, -3.17807358740652, 52.5178826613626, 
    -24.1919720345152, -17.6182215749776, 298.72711369805, -24.1919720345152, 
    5984.39830480046, -438.445496767415, -22.6751517757862, -17.6182215749776, 
    -438.445496767415, 349.451345194041), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.404137102756331, 0.0546626221548766
    ), logphi = c(0.486321287209616, -1.66439148887397)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_32 = structure(list(
    par = c(-0.350470425701651, -0.235272283520004, 0.510915605676253, 
    -1.69350802228846), value = 91.0742253661811, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(86.8495765828925, -12.6346326716487, 
    286.889980138483, -27.8852293913445, -12.6346326716487, 31.6017054373674, 
    -43.6191377701789, -11.2898280786311, 286.889980138483, -43.6191377701789, 
    6486.77689416388, -498.100283012448, -27.8852293913445, -11.2898280786311, 
    -498.100283012448, 379.310921879039), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.350470425701651, -0.235272283520004
    ), logphi = c(0.510915605676253, -1.69350802228846)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_33 = structure(list(
    par = c(-0.25642641030402, 0.0760613369356374, 0.489027587834862, 
    -1.61935675137306), value = 73.8628167902225, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.00200890013, -5.75324937202026, 
    255.36820803751, -14.5444792316596, -5.75324937202026, 49.4611424457503, 
    -20.7082975336448, -14.6430656418062, 255.36820803751, -20.7082975336448, 
    4941.44710933142, -337.821034777974, -14.5444792316596, -14.6430656418062, 
    -337.821034777974, 297.350782123118), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.25642641030402, 0.0760613369356374
    ), logphi = c(0.489027587834862, -1.61935675137306)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_34 = structure(list(
    par = c(-0.137397480568582, 0.0347665921690561, 0.476232745755277, 
    -1.6352621611136), value = 82.8195592373724, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.631581783215, -9.49337207245549, 
    249.049517975664, -7.5128352285958, -9.49337207245549, 45.4356482997298, 
    -16.5265962763783, -13.0317745430375, 249.049517975664, -16.5265962763783, 
    5225.74946058896, -279.735197969089, -7.5128352285958, -13.0317745430375, 
    -279.735197969089, 300.332192903596), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.137397480568582, 0.0347665921690561
    ), logphi = c(0.476232745755277, -1.6352621611136)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_35 = structure(list(
    par = c(-0.170547655838865, 0.0599258585928794, 0.482913187097069, 
    -1.74289394403324), value = 73.9612415849438, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(144.541538070087, -12.7505698550578, 
    359.901386776329, -14.3547706787928, -12.7505698550578, 63.0328549817705, 
    -22.2647644783081, -18.2005030850974, 359.901386776329, -22.2647644783081, 
    8831.46932937606, -493.338857186387, -14.3547706787928, -18.2005030850974, 
    -493.338857186387, 461.499669000887), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170547655838865, 0.0599258585928794
    ), logphi = c(0.482913187097069, -1.74289394403324)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_36 = structure(list(
    par = c(-0.320108256531049, -0.0159976663569735, 0.50499199388587, 
    -1.56051836295197), value = 108.457167782147, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.654247104719, -7.60548742917422, 
    280.386511828823, -24.0964972100244, -7.60548742917422, 48.2475093370738, 
    -34.0515080843318, -15.1570444746341, 280.386511828823, -34.0515080843318, 
    4871.98013070866, -406.960460022532, -24.0964972100244, -15.1570444746341, 
    -406.960460022532, 318.763402514577), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320108256531049, -0.0159976663569735
    ), logphi = c(0.50499199388587, -1.56051836295197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_37 = structure(list(
    par = c(-0.309929536862898, 0.129294665814929, 0.504182276877762, 
    -1.62769427979349), value = 68.3327073027912, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.791052822634, -4.44092600204726, 
    278.894473829894, -21.123447849547, -4.44092600204726, 58.2939739999233, 
    -27.2558467813155, -16.7954184568941, 278.894473829894, -27.2558467813155, 
    5329.30819114696, -429.204461680044, -21.123447849547, -16.7954184568941, 
    -429.204461680044, 329.540634787406), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.309929536862898, 0.129294665814929
    ), logphi = c(0.504182276877762, -1.62769427979349)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_38 = structure(list(
    par = c(-0.313344573180043, 0.0964487423711191, 0.482427372717526, 
    -1.5053362724558), value = 96.1774832623028, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.088611497115, 1.25589582467001, 
    277.527598296246, -15.9969516513314, 1.25589582467001, 66.381796493431, 
    -21.5128157599054, -17.5347677942028, 277.527598296246, -21.5128157599054, 
    4347.04008819509, -304.995316970036, -15.9969516513314, -17.5347677942028, 
    -304.995316970036, 281.466646946171), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313344573180043, 0.0964487423711191
    ), logphi = c(0.482427372717526, -1.5053362724558)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_39 = structure(list(
    par = c(-0.392476849617649, -0.168790878362652, 0.503279263741618, 
    -1.67054561566006), value = 93.6124442924067, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.9289622975443, -11.9408090490936, 
    307.874220908388, -29.6703035633783, -11.9408090490936, 34.7982000796776, 
    -42.592228556515, -13.8019127522426, 307.874220908388, -42.592228556515, 
    6525.77520895647, -509.039472399664, -29.6703035633783, -13.8019127522426, 
    -509.039472399664, 388.771770658991), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392476849617649, -0.168790878362652
    ), logphi = c(0.503279263741618, -1.67054561566006)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_40 = structure(list(
    par = c(-0.28823621405978, 0.126966565445721, 0.503242809637147, 
    -1.62451245363298), value = 84.041100161509, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.630693328711, -7.18389684450926, 
    299.187995864258, -21.5409866548555, -7.18389684450926, 57.5466868077967, 
    -28.7723546747998, -17.8570151092572, 299.187995864258, -28.7723546747998, 
    5725.04537408491, -451.929153175712, -21.5409866548555, -17.8570151092572, 
    -451.929153175712, 353.468799993095), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28823621405978, 0.126966565445721
    ), logphi = c(0.503242809637147, -1.62451245363298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_41 = structure(list(
    par = c(-0.265453153947476, 0.132669144661402, 0.508541461538079, 
    -1.61111633729667), value = 77.6915987075339, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.147402942573, -6.22112503378958, 
    265.831599236321, -19.5841078074466, -6.22112503378958, 54.9315060993649, 
    -27.7343495937998, -15.7507591111994, 265.831599236321, -27.7343495937998, 
    4999.20077671234, -407.952580317783, -19.5841078074466, -15.7507591111994, 
    -407.952580317783, 314.66472233177), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265453153947476, 0.132669144661402
    ), logphi = c(0.508541461538079, -1.61111633729667)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_42 = structure(list(
    par = c(-0.224161128648812, 0.0216465670785382, 0.487465462564004, 
    -1.58077337391518), value = 104.955178266763, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.257014348927, -7.31272600518196, 
    267.007572031019, -14.2331508392601, -7.31272600518196, 50.4522289368481, 
    -23.8319781367125, -14.6923098345297, 267.007572031019, -23.8319781367125, 
    4929.6832448853, -325.419677993821, -14.2331508392601, -14.6923098345297, 
    -325.419677993821, 303.8765691592), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224161128648812, 0.0216465670785382
    ), logphi = c(0.487465462564004, -1.58077337391518)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_43 = structure(list(
    par = c(-0.381653013321483, -0.0131019235685253, 0.507005501857458, 
    -1.58754717808379), value = 94.4086729586069, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.429208231011, -7.01151475013262, 
    291.092029097939, -27.8972125169474, -7.01151475013262, 48.100490886327, 
    -36.8353569761837, -15.8922606221523, 291.092029097939, -36.8353569761837, 
    5218.48310928163, -453.360036720696, -27.8972125169474, -15.8922606221523, 
    -453.360036720696, 338.32582666804), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.381653013321483, -0.0131019235685253
    ), logphi = c(0.507005501857458, -1.58754717808379)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_44 = structure(list(
    par = c(-0.200560669163626, 0.04635409731441, 0.484881479182518, 
    -1.70509347675949), value = 81.0745460441882, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.414515455068, -11.799590097894, 
    333.782649182268, -15.4617540104596, -11.799590097894, 56.2987533498926, 
    -23.8404931032221, -17.3688376534642, 333.782649182268, -23.8404931032221, 
    7622.02849215399, -454.107736466369, -15.4617540104596, -17.3688376534642, 
    -454.107736466369, 417.51517602151), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.200560669163626, 0.04635409731441
    ), logphi = c(0.484881479182518, -1.70509347675949)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_45 = structure(list(
    par = c(-0.349134740907471, -0.0118282113130751, 0.53261957217149, 
    -1.55499918720721), value = 106.038166281049, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.534574959876, -10.1665152882902, 
    281.219150469525, -32.8212081299739, -10.1665152882902, 46.4977805876288, 
    -46.0691835151295, -14.0353048223574, 281.219150469525, -46.0691835151295, 
    4826.91781065725, -503.598834383112, -32.8212081299739, -14.0353048223574, 
    -503.598834383112, 337.679208584518), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.349134740907471, -0.0118282113130751
    ), logphi = c(0.53261957217149, -1.55499918720721)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_46 = structure(list(
    par = c(-0.18671073945411, -0.0165978038540339, 0.475053187689167, 
    -1.64913201658285), value = 88.9791284508294, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.261979793682, -9.68414477142687, 
    286.446748727798, -11.0669098987159, -9.68414477142687, 48.8161873377635, 
    -20.0810971868748, -14.6165601577763, 286.446748727798, -20.0810971868748, 
    6063.08293838609, -331.855331634046, -11.0669098987159, -14.6165601577763, 
    -331.855331634046, 344.805707214846), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18671073945411, -0.0165978038540339
    ), logphi = c(0.475053187689167, -1.64913201658285)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_47 = structure(list(
    par = c(-0.286260992466597, 0.056504332342479, 0.491897540413804, 
    -1.57548910807227), value = 96.2429302513955, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.842336840037, -4.97360704443395, 
    268.526566198801, -17.4935684000843, -4.97360704443395, 52.3033734012301, 
    -24.6449560954431, -15.6087938272265, 268.526566198801, -24.6449560954431, 
    4789.77987620865, -350.412417407853, -17.4935684000843, -15.6087938272265, 
    -350.412417407853, 300.996126288311), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286260992466597, 0.056504332342479
    ), logphi = c(0.491897540413804, -1.57548910807227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_48 = structure(list(
    par = c(-0.119820301747475, 0.236111246925536, 0.523485968169894, 
    -1.57189835250885), value = 88.2583915466747, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.897743757264, -10.1371292799968, 
    262.086530085526, -16.5826741529429, -10.1371292799968, 63.3888491137213, 
    -29.6183063355215, -15.7783539922463, 262.086530085526, -29.6183063355215, 
    4752.36791676892, -414.204750979863, -16.5826741529429, -15.7783539922463, 
    -414.204750979863, 313.278976243225), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.119820301747475, 0.236111246925536
    ), logphi = c(0.523485968169894, -1.57189835250885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_49 = structure(list(
    par = c(-0.198415879976249, 0.189329071430994, 0.502483008248995, 
    -1.59482918051261), value = 94.7460861975859, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.603372042515, -7.10573614881582, 
    280.720376075294, -15.7478524105414, -7.10573614881582, 62.3349619885971, 
    -23.9504501706733, -17.1919546296806, 280.720376075294, -23.9504501706733, 
    5225.52306883739, -397.05101997356, -15.7478524105414, -17.1919546296806, 
    -397.05101997356, 327.586819395265), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.198415879976249, 0.189329071430994
    ), logphi = c(0.502483008248995, -1.59482918051261)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_50 = structure(list(
    par = c(-0.395102971700368, -0.131790124535261, 0.525034457873695, 
    -1.66438625740143), value = 88.044841367132, counts = structure(c(261L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.0549396185725, -11.9733784593734, 
    264.46820359638, -29.886717538119, -11.9733784593734, 30.9149603374692, 
    -45.5963001968485, -11.3558483025855, 264.46820359638, -45.5963001968485, 
    5572.52564017574, -500.279138677229, -29.886717538119, -11.3558483025855, 
    -500.279138677229, 346.453182100248), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.395102971700368, -0.131790124535261
    ), logphi = c(0.525034457873695, -1.66438625740143)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_51 = structure(list(
    par = c(-0.320365274407282, -0.0907154326090536, 0.499864301553121, 
    -1.66660289502095), value = 86.9489794069998, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.2048851163597, -10.3277196501494, 
    279.945051687491, -22.7219394890454, -10.3277196501494, 37.8351599010784, 
    -33.7467578148676, -13.5067411797252, 279.945051687491, -33.7467578148676, 
    5894.59331631659, -433.044211316513, -22.7219394890454, -13.5067411797252, 
    -433.044211316513, 347.79247180694), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.320365274407282, -0.0907154326090536
    ), logphi = c(0.499864301553121, -1.66660289502095)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_52 = structure(list(
    par = c(-0.379581132509431, 0.0472705403887834, 0.48507462992146, 
    -1.52768587900154), value = 102.117262978195, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.519050216549, 0.0396994970230935, 
    282.801779000863, -20.5200215912527, 0.0396994970230935, 
    57.9007924415009, -24.5076288365453, -17.4874532277158, 282.801779000863, 
    -24.5076288365453, 4531.54768633013, -340.048664330794, -20.5200215912527, 
    -17.4874532277158, -340.048664330794, 293.024226774463), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.379581132509431, 0.0472705403887834
    ), logphi = c(0.48507462992146, -1.52768587900154)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_53 = structure(list(
    par = c(-0.394346474750857, 0.171471800487128, 0.51036390939222, 
    -1.58371521417298), value = 72.5401379666109, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.229555204636, -0.674816707402215, 
    310.598505887327, -28.90792647392, -0.674816707402215, 69.1076221528419, 
    -32.2230639859811, -20.3715402591342, 310.598505887327, -32.2230639859811, 
    5358.41463726072, -497.887988931467, -28.90792647392, -20.3715402591342, 
    -497.887988931467, 353.267876938901), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.394346474750857, 0.171471800487128
    ), logphi = c(0.51036390939222, -1.58371521417298)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_54 = structure(list(
    par = c(-0.129098994387654, -0.360865394263175, 0.494573709460886, 
    -1.63894410105591), value = 114.673421020846, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.9123154876713, -14.6144853694352, 
    243.296473620092, -14.1908355040243, -14.6144853694352, 23.554495243161, 
    -28.3856329694743, -8.66141421695943, 243.296473620092, -28.3856329694743, 
    5372.4007747995, -313.846364040415, -14.1908355040243, -8.66141421695943, 
    -313.846364040415, 315.956950856844), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129098994387654, -0.360865394263175
    ), logphi = c(0.494573709460886, -1.63894410105591)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_55 = structure(list(
    par = c(-0.220094908091651, 0.189312444606487, 0.494588968819078, 
    -1.60421752989679), value = 87.7091891056086, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.611586815648, -5.71531705872985, 
    325.723614057694, -16.8169381495886, -5.71531705872985, 72.8305350463643, 
    -23.2801062587384, -20.1971202056228, 325.723614057694, -23.2801062587384, 
    6134.72081467137, -441.230066392961, -16.8169381495886, -20.1971202056228, 
    -441.230066392961, 376.837997134061), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220094908091651, 0.189312444606487
    ), logphi = c(0.494588968819078, -1.60421752989679)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_56 = structure(list(
    par = c(-0.244589718568664, 0.0814767949576842, 0.489482893001081, 
    -1.63898284678659), value = 86.9913815590174, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.487190071525, -8.15614970761658, 
    301.389071353242, -16.6624535484772, -8.15614970761658, 55.3714301361197, 
    -23.907815840829, -17.0880249665828, 301.389071353242, -23.907815840829, 
    6044.1303727039, -406.831208865199, -16.6624535484772, -17.0880249665828, 
    -406.831208865199, 357.442028246169), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.244589718568664, 0.0814767949576842
    ), logphi = c(0.489482893001081, -1.63898284678659)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_57 = structure(list(
    par = c(-0.223719633449431, 0.101722764738588, 0.495923581540913, 
    -1.63324643486585), value = 91.5301810274585, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.330367564265, -8.33144473588732, 
    294.425065074932, -16.8341317881016, -8.33144473588732, 57.0248288376263, 
    -25.5240213391517, -16.7707614355805, 294.425065074932, -25.5240213391517, 
    5863.09668157625, -411.819362668098, -16.8341317881016, -16.7707614355805, 
    -411.819362668098, 351.766865495762), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223719633449431, 0.101722764738588
    ), logphi = c(0.495923581540913, -1.63324643486585)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_58 = structure(list(
    par = c(-0.283215800185996, 0.0439523848276405, 0.484742730911595, 
    -1.59075738149758), value = 70.5016816240242, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.360543623727, -3.22347867864892, 
    233.554094812405, -13.6300112529852, -3.22347867864892, 46.6649632215876, 
    -19.1032212839559, -13.4282864223678, 233.554094812405, -19.1032212839559, 
    4291.22747762278, -290.594745884221, -13.6300112529852, -13.4282864223678, 
    -290.594745884221, 262.737103611244), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.283215800185996, 0.0439523848276405
    ), logphi = c(0.484742730911595, -1.59075738149758)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_59 = structure(list(
    par = c(-0.213808064670986, 0.0186916919206119, 0.488081304333052, 
    -1.71381964283794), value = 80.634594904276, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.231843424307, -12.4792628497516, 
    325.545631898905, -16.8626867385058, -12.4792628497516, 51.8077073330403, 
    -26.3140220759794, -16.5215601164448, 325.545631898905, -26.3140220759794, 
    7524.18182047165, -459.149323233987, -16.8626867385058, -16.5215601164448, 
    -459.149323233987, 410.746715694188), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.213808064670986, 0.0186916919206119
    ), logphi = c(0.488081304333052, -1.71381964283794)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_60 = structure(list(
    par = c(-0.304079092545614, 0.232174085307736, 0.510108500114447, 
    -1.57445823124771), value = 86.2375843498341, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.622183313747, -1.42652753254424, 
    289.273967574388, -22.3230199907221, -1.42652753254424, 70.4700053972829, 
    -26.1377420045505, -19.3063361706436, 289.273967574388, -26.1377420045505, 
    4993.30547411958, -444.66725251624, -22.3230199907221, -19.3063361706436, 
    -444.66725251624, 327.840746138008), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304079092545614, 0.232174085307736
    ), logphi = c(0.510108500114447, -1.57445823124771)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_61 = structure(list(
    par = c(-0.233164081382107, 0.121359921307176, 0.508854265124616, 
    -1.70238457295195), value = 76.1471321269298, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.304639490191, -11.7651075086656, 
    304.387464254319, -20.3275907537659, -11.7651075086656, 52.9463373375449, 
    -31.1920137789912, -16.7967760695831, 304.387464254319, -31.1920137789912, 
    6728.43771797815, -491.699261459644, -20.3275907537659, -16.7967760695831, 
    -491.699261459644, 384.288551227741), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233164081382107, 0.121359921307176
    ), logphi = c(0.508854265124616, -1.70238457295195)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_62 = structure(list(
    par = c(-0.259766117453949, 0.184450946261398, 0.499301895804384, 
    -1.62749118892141), value = 74.5167983601905, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.320224075968, -3.11899018612394, 
    301.777673078263, -18.5849019125328, -3.11899018612394, 69.7259566138086, 
    -23.5687715708366, -18.7414604031488, 301.777673078263, -23.5687715708366, 
    5817.57212318124, -440.61129865014, -18.5849019125328, -18.7414604031488, 
    -440.61129865014, 354.820991976368), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.259766117453949, 0.184450946261398
    ), logphi = c(0.499301895804384, -1.62749118892141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_63 = structure(list(
    par = c(-0.273062656771996, 0.0900436199389029, 0.50340625972216, 
    -1.61784416656409), value = 86.6715342810149, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.273588769085, -7.62115406516273, 
    274.155195835846, -19.6809227297479, -7.62115406516273, 50.9225878673192, 
    -28.0904329876819, -15.7605364279334, 274.155195835846, -28.0904329876819, 
    5237.81086921105, -408.521693090691, -19.6809227297479, -15.7605364279334, 
    -408.521693090691, 324.601153000259), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273062656771996, 0.0900436199389029
    ), logphi = c(0.50340625972216, -1.61784416656409)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_64 = structure(list(
    par = c(-0.1499854275366, 0.104358185715883, 0.478688605259333, 
    -1.58852756673551), value = 90.1368128358867, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.633457714576, -6.51858424660645, 
    244.893199379703, -7.43614864973097, -6.51858424660645, 53.3566311489153, 
    -15.9591218391597, -13.9282816356001, 244.893199379703, -15.9591218391597, 
    4694.03609589136, -268.478113941484, -7.43614864973097, -13.9282816356001, 
    -268.478113941484, 281.480081188334), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.1499854275366, 0.104358185715883
    ), logphi = c(0.478688605259333, -1.58852756673551)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_65 = structure(list(
    par = c(-0.190710519512012, -0.0440226800368579, 0.506311080284421, 
    -1.59708393293664), value = 91.6137944915213, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.527878871698, -11.4112017435275, 
    261.364526650709, -17.8658942111554, -11.4112017435275, 43.5361102049114, 
    -31.6748212156881, -12.8557005893981, 261.364526650709, -31.6748212156881, 
    5035.770537269, -374.070225975132, -17.8658942111554, -12.8557005893981, 
    -374.070225975132, 315.714132121059), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190710519512012, -0.0440226800368579
    ), logphi = c(0.506311080284421, -1.59708393293664)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_66 = structure(list(
    par = c(-0.205607827428828, 0.159133448151034, 0.503782001510265, 
    -1.66009325707067), value = 80.4064621670297, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.271174621602, -8.41968362763623, 
    295.089331814324, -17.2104135103268, -8.41968362763623, 60.7901792015753, 
    -25.9652374019481, -17.1327618634365, 295.089331814324, -25.9652374019481, 
    6116.90779346219, -444.843410162932, -17.2104135103268, -17.1327618634365, 
    -444.843410162932, 361.883712145072), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205607827428828, 0.159133448151034
    ), logphi = c(0.503782001510265, -1.66009325707067)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_67 = structure(list(
    par = c(-0.205693462114707, -0.0792491952829404, 0.481736453302132, 
    -1.58655472482303), value = 96.77631319964, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.459210983853, -8.74917243010032, 
    246.766477292937, -12.1626198836822, -8.74917243010032, 40.1325590857482, 
    -22.6798263973649, -12.3967556078242, 246.766477292937, -22.6798263973649, 
    4690.82996905001, -280.299059470579, -12.1626198836822, -12.3967556078242, 
    -280.299059470579, 284.219869136848), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.205693462114707, -0.0792491952829404
    ), logphi = c(0.481736453302132, -1.58655472482303)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_68 = structure(list(
    par = c(-0.377833669424851, 0.263132397670878, 0.505840414064941, 
    -1.50627401189442), value = 83.6670858529757, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.417551176644, 6.11160546881706, 
    248.753327934281, -20.8630259361797, 6.11160546881706, 71.8614802259765, 
    -19.7263857977248, -18.1760902417949, 248.753327934281, -19.7263857977248, 
    3740.54932285972, -356.691773149009, -20.8630259361797, -18.1760902417949, 
    -356.691773149009, 258.911350368152), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.377833669424851, 0.263132397670878
    ), logphi = c(0.505840414064941, -1.50627401189442)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_69 = structure(list(
    par = c(-0.316041715383984, -0.185714372905566, 0.492100204613875, 
    -1.66550806108141), value = 100.686707525192, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.06012030326, -11.7560383152693, 
    302.900492890501, -23.4739120141825, -11.7560383152693, 35.9435470151936, 
    -35.2503133704829, -13.504783090923, 302.900492890501, -35.2503133704829, 
    6461.32651732501, -441.020935777914, -23.4739120141825, -13.504783090923, 
    -441.020935777914, 376.330708405703), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316041715383984, -0.185714372905566
    ), logphi = c(0.492100204613875, -1.66550806108141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_70 = structure(list(
    par = c(-0.185272112528364, 0.116204014547546, 0.490426636424404, 
    -1.60302230450179), value = 85.9842213452561, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.483755435278, -7.15328124556436, 
    262.901467138477, -12.1465051030611, -7.15328124556436, 54.555792107891, 
    -20.5811345779239, -15.1720553613899, 262.901467138477, -20.5811345779239, 
    5051.7665350398, -335.194786380555, -12.1465051030611, -15.1720553613899, 
    -335.194786380555, 306.894319532347), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.185272112528364, 0.116204014547546
    ), logphi = c(0.490426636424404, -1.60302230450179)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_71 = structure(list(
    par = c(-0.335652892806132, -0.17446596046818, 0.509434347958762, 
    -1.54361070790391), value = 113.379018449658, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.885285162088, -9.68080352947709, 
    266.034003416848, -26.2108831776686, -9.68080352947709, 36.3121969328972, 
    -37.3053999389583, -12.1688825114319, 266.034003416848, -37.3053999389583, 
    4585.80105496509, -394.799422094749, -26.2108831776686, -12.1688825114319, 
    -394.799422094749, 306.192434536001), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335652892806132, -0.17446596046818
    ), logphi = c(0.509434347958762, -1.54361070790391)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_72 = structure(list(
    par = c(-0.421377258597107, -0.180725633872585, 0.521012517783135, 
    -1.52956346370811), value = 127.767922008089, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.304572857458, -8.82218741082852, 
    290.178891173554, -35.7213290449465, -8.82218741082852, 40.6036543481036, 
    -46.5910210643017, -12.8926241558247, 290.178891173554, -46.5910210643017, 
    4822.23210304866, -484.250258644181, -35.7213290449465, -12.8926241558247, 
    -484.250258644181, 337.774376308886), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421377258597107, -0.180725633872585
    ), logphi = c(0.521012517783135, -1.52956346370811)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_73 = structure(list(
    par = c(-0.419901837441756, -0.0772209590463562, 0.493722214686239, 
    -1.72966287744136), value = 81.2347129443746, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.8195832053739, -11.1612640694148, 
    329.232845558636, -28.7927793163334, -11.1612640694148, 39.8844492615069, 
    -38.3406464266045, -16.2288237905983, 329.232845558636, -38.3406464266045, 
    7519.25075054061, -546.433316209516, -28.7927793163334, -16.2288237905983, 
    -546.433316209516, 415.487093992084), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419901837441756, -0.0772209590463562
    ), logphi = c(0.493722214686239, -1.72966287744136)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_74 = structure(list(
    par = c(-0.329901735503002, -0.125251229647862, 0.492398105179862, 
    -1.65094322824782), value = 104.979621424152, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.959994384288, -12.1578944103362, 
    297.327424867433, -23.1829012378171, -12.1578944103362, 35.0922478524751, 
    -33.4994148900591, -14.2740681141618, 297.327424867433, -33.4994148900591, 
    6106.42253851523, -430.686850803497, -23.1829012378171, -14.2740681141618, 
    -430.686850803497, 361.480212564658), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329901735503002, -0.125251229647862
    ), logphi = c(0.492398105179862, -1.65094322824782)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_75 = structure(list(
    par = c(-0.389139716932707, 0.206866107171889, 0.515600051988735, 
    -1.55434094767888), value = 95.4810292800001, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.135623639797, -1.66154439895649, 
    279.228145952715, -27.0606735899293, -1.66154439895649, 61.1899616451694, 
    -29.6349872250801, -18.9053551427065, 279.228145952715, -29.6349872250801, 
    4565.86781369239, -451.820907997558, -27.0606735899293, -18.9053551427065, 
    -451.820907997558, 312.087455728971), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.389139716932707, 0.206866107171889
    ), logphi = c(0.515600051988735, -1.55434094767888)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_76 = structure(list(
    par = c(-0.201709538785005, 0.107947410174044, 0.485840982959053, 
    -1.56667833193923), value = 88.5858107403112, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.691506586482, -4.90899859073579, 
    259.457408930075, -11.5577060100236, -4.90899859073579, 57.6548844151148, 
    -19.799855685676, -15.2824471371105, 259.457408930075, -19.799855685676, 
    4677.70026694581, -305.262952039698, -11.5577060100236, -15.2824471371105, 
    -305.262952039698, 290.086729730632), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.201709538785005, 0.107947410174044
    ), logphi = c(0.485840982959053, -1.56667833193923)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_77 = structure(list(
    par = c(-0.348256086563923, 0.148286945032627, 0.524221992403533, 
    -1.60963165168803), value = 83.5982802613452, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.659116934732, -6.74822545931875, 
    315.996140862751, -31.3421204101161, -6.74822545931875, 63.810811859355, 
    -41.6336107882387, -19.0182802697336, 315.996140862751, -41.6336107882387, 
    5781.99219518893, -555.123796708301, -31.3421204101161, -19.0182802697336, 
    -555.123796708301, 379.831489034643), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.348256086563923, 0.148286945032627
    ), logphi = c(0.524221992403533, -1.60963165168803)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_78 = structure(list(
    par = c(-0.443778889809544, -0.171865071081209, 0.525211392630632, 
    -1.68723281835257), value = 88.882549150323, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(87.3100503504531, -13.0489353473706, 
    318.608404420218, -37.9847156573021, -13.0489353473706, 36.5220011673273, 
    -58.3469254102909, -12.8706373700993, 318.608404420218, -58.3469254102909, 
    7014.04831264085, -630.192220850034, -37.9847156573021, -12.8706373700993, 
    -630.192220850034, 427.930599329329), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.443778889809544, -0.171865071081209
    ), logphi = c(0.525211392630632, -1.68723281835257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_79 = structure(list(
    par = c(-0.0674325473983466, 0.0386559186511222, 0.508624093280931, 
    -1.66634737160003), value = 98.6544146404237, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.616935742949, -18.181951219276, 
    286.532942929796, -13.6723101231695, -18.181951219276, 48.1433786845287, 
    -31.606360579417, -13.9808554884269, 286.532942929796, -31.606360579417, 
    6388.71915117178, -418.544498259621, -13.6723101231695, -13.9808554884269, 
    -418.544498259621, 372.414941665511), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0674325473983466, 0.0386559186511222
    ), logphi = c(0.508624093280931, -1.66634737160003)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_80 = structure(list(
    par = c(-0.286364804439174, 0.215689951863787, 0.480558628886583, 
    -1.697837720175), value = 58.6314483046479, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.374216775218, -1.52580699186444, 
    297.345116949899, -13.8078102951411, -1.52580699186444, 64.0664319124795, 
    -8.93361201192988, -18.54299065851, 297.345116949899, -8.93361201192988, 
    6401.991199386, -413.395815668238, -13.8078102951411, -18.54299065851, 
    -413.395815668238, 353.695255080666), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286364804439174, 0.215689951863787
    ), logphi = c(0.480558628886583, -1.697837720175)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_81 = structure(list(
    par = c(-0.316535068958473, 0.26034285480964, 0.494527191749105, 
    -1.63130091917218), value = 59.3967596412324, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.569026093558, 2.29388367856131, 
    278.098333332366, -17.0414466520441, 2.29388367856131, 71.8762343652202, 
    -14.3743852412115, -18.9140778985575, 278.098333332366, -14.3743852412115, 
    5262.22637740403, -406.305942906471, -17.0414466520441, -18.9140778985575, 
    -406.305942906471, 319.30634960986), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.316535068958473, 0.26034285480964
    ), logphi = c(0.494527191749105, -1.63130091917218)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_82 = structure(list(
    par = c(-0.347567120480039, 0.113700819760875, 0.477738842995658, 
    -1.61760498035626), value = 68.7784508776315, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.304156729873, -0.0397164328092003, 
    292.456274905817, -16.9100187221716, -0.0397164328092003, 
    61.3595168417191, -16.548581978526, -18.2199855416343, 292.456274905817, 
    -16.548581978526, 5471.39907142835, -369.133199537686, -16.9100187221716, 
    -18.2199855416343, -369.133199537686, 325.680555228303), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347567120480039, 0.113700819760875
    ), logphi = c(0.477738842995658, -1.61760498035626)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_83 = structure(list(
    par = c(-0.3543020007877, -0.190970304907016, 0.493145757206559, 
    -1.69447279437546), value = 87.1642824983318, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.0656299331645, -11.8934767101564, 
    285.213952672336, -23.6940791253915, -11.8934767101564, 30.135220281835, 
    -34.5776476251558, -12.5311050958032, 285.213952672336, -34.5776476251558, 
    6345.01252423192, -440.78297098693, -23.6940791253915, -12.5311050958032, 
    -440.78297098693, 361.061164301901), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3543020007877, -0.190970304907016
    ), logphi = c(0.493145757206559, -1.69447279437546)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_84 = structure(list(
    par = c(-0.314029302431475, -0.301011154559715, 0.520651017558891, 
    -1.58050316395196), value = 123.885598925227, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.020969828307, -13.7217390090427, 
    281.645751687876, -30.3221929698338, -13.7217390090427, 29.6431886930293, 
    -44.5077189112908, -10.3962353090736, 281.645751687876, -44.5077189112908, 
    5339.21637878265, -470.205180409522, -30.3221929698338, -10.3962353090736, 
    -470.205180409522, 352.076586111139), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314029302431475, -0.301011154559715
    ), logphi = c(0.520651017558891, -1.58050316395196)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_85 = structure(list(
    par = c(-0.227378697579881, -0.107487851947478, 0.511107890711793, 
    -1.62982883474017), value = 94.7358749770563, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7217456593091, -12.7290573352923, 
    261.705012238878, -20.6962721094328, -12.7290573352923, 37.2727983837251, 
    -35.0391736283484, -11.9057913945397, 261.705012238878, -35.0391736283484, 
    5323.58419650691, -405.364132213037, -20.6962721094328, -11.9057913945397, 
    -405.364132213037, 327.857742647097), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227378697579881, -0.107487851947478
    ), logphi = c(0.511107890711793, -1.62982883474017)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_86 = structure(list(
    par = c(-0.473110552569401, -0.532605704480068, 0.506975632418643, 
    -1.67839766431566), value = 110.902356108492, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(78.2062081476909, -12.3988800382335, 
    293.472691303975, -34.7682520693837, -12.3988800382335, 18.2079610056007, 
    -47.2989162290105, -8.3472981060595, 293.472691303975, -47.2989162290105, 
    6714.74687607088, -536.771661298729, -34.7682520693837, -8.3472981060595, 
    -536.771661298729, 401.910825690521), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.473110552569401, -0.532605704480068
    ), logphi = c(0.506975632418643, -1.67839766431566)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_87 = structure(list(
    par = c(-0.345588854027525, -0.041247983578997, 0.524634274962023, 
    -1.59568898494188), value = 101.045990353608, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(97.0758420280049, -10.6282848371109, 
    271.569279679085, -29.1370432332627, -10.6282848371109, 41.4719387542561, 
    -42.3076653959242, -13.3336212133628, 271.569279679085, -42.3076653959242, 
    5023.25935000414, -475.267636163679, -29.1370432332627, -13.3336212133628, 
    -475.267636163679, 332.861585320643), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.345588854027525, -0.041247983578997
    ), logphi = c(0.524634274962023, -1.59568898494188)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_88 = structure(list(
    par = c(-0.195314881178544, 0.222260749006568, 0.493555767717248, 
    -1.74916516250084), value = 51.7033739410191, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.009123991328, -8.29435266425094, 
    321.252296586749, -14.0269664461457, -8.29435266425094, 66.4225676239028, 
    -15.3231891175665, -18.5894775110995, 321.252296586749, -15.3231891175665, 
    7696.54908558159, -483.730753108702, -14.0269664461457, -18.5894775110995, 
    -483.730753108702, 405.868720241287), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.195314881178544, 0.222260749006568
    ), logphi = c(0.493555767717248, -1.74916516250084)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_89 = structure(list(
    par = c(-0.393150050183103, -0.0771671712780362, 0.520791308637428, 
    -1.64144591476489), value = 110.119347573793, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.462492893338, -12.8437979043383, 
    328.537069655965, -35.8733788754506, -12.8437979043383, 43.842634287472, 
    -52.1972177729424, -15.5712111240547, 328.537069655965, -52.1972177729424, 
    6559.79311765975, -593.333514157024, -35.8733788754506, -15.5712111240547, 
    -593.333514157024, 415.337408536942), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.393150050183103, -0.0771671712780362
    ), logphi = c(0.520791308637428, -1.64144591476489)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_90 = structure(list(
    par = c(-0.234066204493647, 0.165976373421801, 0.503417326805786, 
    -1.64009618883647), value = 88.830804457345, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.220292537558, -8.42698499070593, 
    296.44249138272, -18.4448378295343, -8.42698499070593, 58.8126178726611, 
    -26.0167477321716, -17.7264936667143, 296.44249138272, -26.0167477321716, 
    5887.47673000611, -444.760299862068, -18.4448378295343, -17.7264936667143, 
    -444.760299862068, 356.323776980361), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234066204493647, 0.165976373421801
    ), logphi = c(0.503417326805786, -1.64009618883647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_91 = structure(list(
    par = c(-0.310087672812619, -0.107135225688159, 0.480278638758222, 
    -1.54104057307338), value = 102.542145985536, counts = structure(c(335L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.508879852352, -6.59893020582558, 
    269.645975674138, -17.229446019229, -6.59893020582558, 42.2514862279399, 
    -26.1745569503091, -14.1147850172274, 269.645975674138, -26.1745569503091, 
    4598.07121073652, -298.943312360578, -17.229446019229, -14.1147850172274, 
    -298.943312360578, 289.164000097486), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310087672812619, -0.107135225688159
    ), logphi = c(0.480278638758222, -1.54104057307338)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_92 = structure(list(
    par = c(-0.222230979879971, -0.236501055373143, 0.497324932010502, 
    -1.68719760247368), value = 96.548854666304, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.6927309029586, -14.7581226990212, 
    269.622075133924, -18.7407315106469, -14.7581226990212, 27.3798249068591, 
    -32.6498529332753, -10.7835605245299, 269.622075133924, -32.6498529332753, 
    6172.63949289892, -395.030593628221, -18.7407315106469, -10.7835605245299, 
    -395.030593628221, 351.189040998179), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222230979879971, -0.236501055373143
    ), logphi = c(0.497324932010502, -1.68719760247368)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_93 = structure(list(
    par = c(-0.286033978950673, 0.031738858267775, 0.497355613629586, 
    -1.56859049894344), value = 106.042766606931, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.822675456684, -7.39036197927589, 
    277.678671075421, -19.8577162500158, -7.39036197927589, 49.6574183550536, 
    -28.7724790091204, -15.6983699746149, 277.678671075421, -28.7724790091204, 
    4907.11890727269, -376.042012579347, -19.8577162500158, -15.6983699746149, 
    -376.042012579347, 313.241560029098), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286033978950673, 0.031738858267775
    ), logphi = c(0.497355613629586, -1.56859049894344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_94 = structure(list(
    par = c(-0.284145943868689, 0.208249195950422, 0.493474562802046, 
    -1.58045985449785), value = 75.7182130440013, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.508267765592, 0.278966098221645, 
    286.383784025901, -16.9257552951052, 0.278966098221645, 71.3790108015644, 
    -19.2387262067939, -18.8156350766633, 286.383784025901, -19.2387262067939, 
    5066.08537073561, -386.467564029047, -16.9257552951052, -18.8156350766633, 
    -386.467564029047, 318.871953105315), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284145943868689, 0.208249195950422
    ), logphi = c(0.493474562802046, -1.58045985449785)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_95 = structure(list(
    par = c(-0.468027328557229, 0.0647874494202487, 0.517048849878319, 
    -1.57049429258051), value = 91.0749934201454, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.234901452254, -4.8446644491662, 
    281.79029392561, -32.4971447280831, -4.8446644491662, 48.9135204908564, 
    -38.5357812042741, -16.8638058433146, 281.79029392561, -38.5357812042741, 
    4767.14407304257, -481.528926917107, -32.4971447280831, -16.8638058433146, 
    -481.528926917107, 325.104528041464), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.468027328557229, 0.0647874494202487
    ), logphi = c(0.517048849878319, -1.57049429258051)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_96 = structure(list(
    par = c(-0.161103030919142, 0.194385485069, 0.489627268806719, 
    -1.50487175725198), value = 94.3595203869476, counts = structure(c(215L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.566055273983, -2.31010906048823, 
    236.857989222017, -8.98911800817359, -2.31010906048823, 65.767150207563, 
    -17.9929072388063, -14.9340048736235, 236.857989222017, -17.9929072388063, 
    3872.8915515307, -265.225806490577, -8.98911800817359, -14.9340048736235, 
    -265.225806490577, 251.290570698615), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161103030919142, 0.194385485069
    ), logphi = c(0.489627268806719, -1.50487175725198)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_97 = structure(list(
    par = c(-0.370019609348263, 0.0911965608741802, 0.506594812463707, 
    -1.47203296028816), value = 107.563967268329, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.40733620672, 0.963841060297455, 
    254.394693541826, -23.5817108578118, 0.963841060297455, 63.2218144467345, 
    -28.829197244562, -15.9576989080534, 254.394693541826, -28.829197244562, 
    3690.33207214287, -347.437919890226, -23.5817108578118, -15.9576989080534, 
    -347.437919890226, 259.762067074121), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.370019609348263, 0.0911965608741802
    ), logphi = c(0.506594812463707, -1.47203296028816)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_98 = structure(list(
    par = c(-0.315507651868344, -0.281991623675374, 0.512368873280531, 
    -1.54387073513689), value = 121.727518324944, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.016882473383, -11.2289551310596, 
    264.717938676995, -26.8640805956011, -11.2289551310596, 31.3911245442, 
    -38.689837602135, -10.5632947207113, 264.717938676995, -38.689837602135, 
    4669.47547418428, -399.285582684428, -26.8640805956011, -10.5632947207113, 
    -399.285582684428, 311.997675055409), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.315507651868344, -0.281991623675374
    ), logphi = c(0.512368873280531, -1.54387073513689)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_99 = structure(list(
    par = c(-0.376877037215175, -0.0150697004612794, 0.520132429000406, 
    -1.64588622703398), value = 91.4581665525837, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.182026617077, -10.0896226591374, 
    313.035542664153, -32.5532295679665, -10.0896226591374, 49.3933715119965, 
    -47.1140312079399, -15.8687541382818, 313.035542664153, -47.1140312079399, 
    6237.93448966836, -558.917152011063, -32.5532295679665, -15.8687541382818, 
    -558.917152011063, 392.255198864433), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.376877037215175, -0.0150697004612794
    ), logphi = c(0.520132429000406, -1.64588622703398)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_100 = structure(list(
    par = c(-0.275193139522168, -0.110236936854, 0.514750041666903, 
    -1.61728694706045), value = 105.412278277214, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.6716116757027, -12.0696670542486, 
    262.021902820209, -23.4944549895033, -12.0696670542486, 35.3609377334863, 
    -37.2141927336145, -11.9957896558276, 262.021902820209, -37.2141927336145, 
    5158.89041801287, -422.027527212876, -23.4944549895033, -11.9957896558276, 
    -422.027527212876, 325.308964725934), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275193139522168, -0.110236936854
    ), logphi = c(0.514750041666903, -1.61728694706045)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_101 = structure(list(
    par = c(-0.383857284683654, -0.210068206339534, 0.527067550955149, 
    -1.60540236817906), value = 125.458857972353, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(102.001334305157, -13.5652221828764, 
    315.444144881383, -37.6655942755377, -13.5652221828764, 37.0886896732259, 
    -54.5522058033043, -12.5542889630736, 315.444144881383, -54.5522058033043, 
    6096.56888460464, -579.187360880695, -37.6655942755377, -12.5542889630736, 
    -579.187360880695, 402.567569118162), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.383857284683654, -0.210068206339534
    ), logphi = c(0.527067550955149, -1.60540236817906)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_102 = structure(list(
    par = c(-0.344585241221271, 0.220495174068041, 0.48685118805442, 
    -1.67449929047724), value = 57.1771057257782, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.718977450708, 0.507732735854916, 
    331.059388052779, -19.8081260940342, 0.507732735854916, 72.6074772039453, 
    -14.3292793453043, -21.7007758607224, 331.059388052779, -14.3292793453043, 
    6709.53251165685, -482.627214969611, -19.8081260940342, -21.7007758607224, 
    -482.627214969611, 386.195710905923), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344585241221271, 0.220495174068041
    ), logphi = c(0.48685118805442, -1.67449929047724)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_103 = structure(list(
    par = c(-0.276441872182659, -0.151912778271064, 0.512896357073326, 
    -1.49750158403421), value = 130.082121618719, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.660181853642, -11.1958253725675, 
    279.637088368645, -26.4434650851797, -11.1958253725675, 41.8341029444491, 
    -39.262639617732, -13.0768103474566, 279.637088368645, -39.262639617732, 
    4494.421586692, -395.614355735319, -26.4434650851797, -13.0768103474566, 
    -395.614355735319, 309.886205613452), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276441872182659, -0.151912778271064
    ), logphi = c(0.512896357073326, -1.49750158403421)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_104 = structure(list(
    par = c(-0.40468311489402, 0.0343165308750207, 0.50607359580106, 
    -1.67778400576663), value = 75.5328416293245, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.076233138301, -8.83053666456135, 
    334.496004523288, -31.0602292614703, -8.83053666456135, 52.3368499258936, 
    -40.5477195464243, -18.5141760695728, 334.496004523288, -40.5477195464243, 
    6901.98133825604, -567.153538233001, -31.0602292614703, -18.5141760695728, 
    -567.153538233001, 411.75678887484), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40468311489402, 0.0343165308750207
    ), logphi = c(0.50607359580106, -1.67778400576663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_105 = structure(list(
    par = c(-0.292413630535173, -0.184598418730968, 0.513992770783255, 
    -1.59135373751768), value = 126.726853324826, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.357995472375, -13.2774425303239, 
    290.424039409487, -27.5679903527504, -13.2774425303239, 36.3688683115981, 
    -42.2303624887377, -12.5038586240578, 290.424039409487, -42.2303624887377, 
    5512.59706336893, -459.168215014572, -27.5679903527504, -12.5038586240578, 
    -459.168215014572, 355.553439124634), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.292413630535173, -0.184598418730968
    ), logphi = c(0.513992770783255, -1.59135373751768)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_106 = structure(list(
    par = c(-0.13036282017321, -0.23858330494089, 0.518610683642653, 
    -1.53751237060119), value = 124.409098954006, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.620567994042, -15.0679711516943, 
    237.751719748047, -18.7620371026043, -15.0679711516943, 30.2976933319599, 
    -34.1059142954236, -9.25817608532498, 237.751719748047, -34.1059142954236, 
    4328.55500098839, -346.235714745902, -18.7620371026043, -9.25817608532498, 
    -346.235714745902, 287.670463929857), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.13036282017321, -0.23858330494089
    ), logphi = c(0.518610683642653, -1.53751237060119)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_107 = structure(list(
    par = c(-0.168727719321131, -0.0281292240170405, 0.517571348320282, 
    -1.50222670371675), value = 121.676541732463, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.239361406429, -11.4523955758727, 
    251.732000808857, -19.6806857601928, -11.4523955758727, 47.3195630306122, 
    -34.4214981318203, -12.4791669460222, 251.732000808857, -34.4214981318203, 
    4137.56555574096, -359.403992753471, -19.6806857601928, -12.4791669460222, 
    -359.403992753471, 284.089342681426), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.168727719321131, -0.0281292240170405
    ), logphi = c(0.517571348320282, -1.50222670371675)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_108 = structure(list(
    par = c(-0.173939693997825, -0.312219926571024, 0.493826228696149, 
    -1.61627812346211), value = 116.835504501004, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.165891812144, -14.1491362555257, 
    259.864489645878, -16.4082640115026, -14.1491362555257, 27.1680259089635, 
    -30.5560703779406, -9.98351156944466, 259.864489645878, -30.5560703779406, 
    5403.69151304887, -334.005457743203, -16.4082640115026, -9.98351156944466, 
    -334.005457743203, 324.985061237015), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.173939693997825, -0.312219926571024
    ), logphi = c(0.493826228696149, -1.61627812346211)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_109 = structure(list(
    par = c(-0.100550335481421, 0.313946535810091, 0.513728391323051, 
    -1.63913849100713), value = 62.3705858714368, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.376118283782, -7.47755282226592, 
    265.51716917389, -11.962069570437, -7.47755282226592, 70.502181813481, 
    -20.3248614738527, -16.6325098494013, 265.51716917389, -20.3248614738527, 
    5400.99602861588, -410.333418660258, -11.962069570437, -16.6325098494013, 
    -410.333418660258, 328.358842953236), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.100550335481421, 0.313946535810091
    ), logphi = c(0.513728391323051, -1.63913849100713)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_110 = structure(list(
    par = c(-0.0397551091526052, -0.115706360373005, 0.499870021140956, 
    -1.60233497105706), value = 127.980631874029, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.809656986637, -18.8189814913642, 
    262.561016498353, -11.2357066832658, -18.8189814913642, 37.5575902040737, 
    -29.9163760892895, -11.5612942312993, 262.561016498353, -29.9163760892895, 
    5447.63819335259, -331.631139756539, -11.2357066832658, -11.5612942312993, 
    -331.631139756539, 331.370819719012), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0397551091526052, -0.115706360373005
    ), logphi = c(0.499870021140956, -1.60233497105706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_111 = structure(list(
    par = c(-0.421702197575394, -0.0364685226479691, 0.506907538991358, 
    -1.59204736037547), value = 97.4633734045298, counts = structure(c(293L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.184431692138, -6.99933924153129, 
    297.346224300554, -30.3950555800014, -6.99933924153129, 46.4814789538082, 
    -39.0209986633749, -16.040748949564, 297.346224300554, -39.0209986633749, 
    5347.06060946988, -473.690378040459, -30.3950555800014, -16.040748949564, 
    -473.690378040459, 347.029509345731), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421702197575394, -0.0364685226479691
    ), logphi = c(0.506907538991358, -1.59204736037547)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_112 = structure(list(
    par = c(-0.0909617282658005, 0.0641048604636937, 0.488920411872736, 
    -1.61913509394762), value = 101.304223175611, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.821639657024, -13.9639787626322, 
    262.871554600252, -8.78847935403826, -13.9639787626322, 46.8913979077001, 
    -21.7215936508808, -13.8382960344074, 262.871554600252, -21.7215936508808, 
    5417.38908876255, -319.055909763222, -8.78847935403826, -13.8382960344074, 
    -319.055909763222, 321.169693016543), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0909617282658005, 0.0641048604636937
    ), logphi = c(0.488920411872736, -1.61913509394762)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_113 = structure(list(
    par = c(-0.42867503017632, -0.104369696277674, 0.487857016741874, 
    -1.58318862587584), value = 93.6472459833216, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.350751571365, -4.9939875026439, 
    273.738053294892, -24.1865422125898, -4.9939875026439, 39.7473628943601, 
    -29.9203972211615, -14.5705484495551, 273.738053294892, -29.9203972211615, 
    4865.6706438166, -371.749773108832, -24.1865422125898, -14.5705484495551, 
    -371.749773108832, 305.655214162925), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.42867503017632, -0.104369696277674
    ), logphi = c(0.487857016741874, -1.58318862587584)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_114 = structure(list(
    par = c(-0.475350368451422, 0.13785305800782, 0.505160500777646, 
    -1.6693861877647), value = 49.6242716280965, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(96.8514715999902, -1.46654830146531, 
    292.124239724245, -28.574572436213, -1.46654830146531, 57.2092592570073, 
    -30.4313195940153, -18.618874078058, 292.124239724245, -30.4313195940153, 
    5745.85935072491, -505.037791347362, -28.574572436213, -18.618874078058, 
    -505.037791347362, 349.311946376218), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475350368451422, 0.13785305800782
    ), logphi = c(0.505160500777646, -1.6693861877647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_115 = structure(list(
    par = c(-0.308047988161888, 0.135992646638061, 0.500491192343615, 
    -1.60294861959969), value = 89.1959875891688, counts = structure(c(95L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.856163456144, -4.51688270075579, 
    297.249664225063, -21.5314541982536, -4.51688270075579, 61.4211072686999, 
    -27.1247590326595, -18.2930562715455, 297.249664225063, -27.1247590326595, 
    5451.87632861754, -435.312881016614, -21.5314541982536, -18.2930562715455, 
    -435.312881016614, 342.226055973782), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308047988161888, 0.135992646638061
    ), logphi = c(0.500491192343615, -1.60294861959969)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_116 = structure(list(
    par = c(-0.190688326093401, -0.0529883576391664, 0.492568220463103, 
    -1.62512527338088), value = 113.066105478693, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.520111626784, -12.4570151349701, 
    299.042717585962, -16.7306396168243, -12.4570151349701, 48.0788994217107, 
    -30.3160139267789, -14.7761370747901, 299.042717585962, -30.3160139267789, 
    6063.02507220846, -392.773523040901, -16.7306396168243, -14.7761370747901, 
    -392.773523040901, 362.528777596793), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190688326093401, -0.0529883576391664
    ), logphi = c(0.492568220463103, -1.62512527338088)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_117 = structure(list(
    par = c(-0.475304241988464, 0.0377755546866309, 0.522052952760516, 
    -1.52366958103786), value = 101.775335612039, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.440965900466, -2.47522077501117, 
    301.738708806454, -37.6569026165896, -2.47522077501117, 59.6357048721075, 
    -44.3454488596728, -17.5627317666738, 301.738708806454, -44.3454488596728, 
    4727.66289043491, -512.738587463701, -37.6569026165896, -17.5627317666738, 
    -512.738587463701, 338.942198787606), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.475304241988464, 0.0377755546866309
    ), logphi = c(0.522052952760516, -1.52366958103786)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_118 = structure(list(
    par = c(-0.372337044850026, -0.0108815689397206, 0.493466968545695, 
    -1.50180009691691), value = 108.747039603106, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.446625668322, -2.91485006442826, 
    267.83758790927, -22.1785173444289, -2.91485006442826, 50.6647169196128, 
    -28.7515875285749, -15.576139279716, 267.83758790927, -28.7515875285749, 
    4142.6484100171, -334.546681747483, -22.1785173444289, -15.576139279716, 
    -334.546681747483, 276.822018452805), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372337044850026, -0.0108815689397206
    ), logphi = c(0.493466968545695, -1.50180009691691)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_119 = structure(list(
    par = c(-0.289321220000174, 0.116442913205848, 0.519838551997011, 
    -1.64580408705567), value = 92.477641396079, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.715289140894, -10.3757006861827, 
    314.477827028981, -27.1553115105405, -10.3757006861827, 57.2193514116748, 
    -39.8861558501551, -17.8185261532349, 314.477827028981, -39.8861558501551, 
    6233.76503591189, -537.785144455682, -27.1553115105405, -17.8185261532349, 
    -537.785144455682, 388.01383009357), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.289321220000174, 0.116442913205848
    ), logphi = c(0.519838551997011, -1.64580408705567)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_120 = structure(list(
    par = c(-0.219016090824412, 0.0874014899702395, 0.525818683733897, 
    -1.63318294579964), value = 88.7210377659775, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.377677886295, -12.6942305485045, 
    283.000978260617, -23.5797793166626, -12.6942305485045, 51.0763303225303, 
    -39.1065899272292, -15.0067990460911, 283.000978260617, -39.1065899272292, 
    5619.6753728166, -483.794174744645, -23.5797793166626, -15.0067990460911, 
    -483.794174744645, 354.147774636715), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.219016090824412, 0.0874014899702395
    ), logphi = c(0.525818683733897, -1.63318294579964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_121 = structure(list(
    par = c(-0.188254636252185, -0.056275863411769, 0.498152539180571, 
    -1.58222385350863), value = 110.539533302203, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.624510707046, -11.8431401716634, 
    268.954897347129, -16.4646206002317, -11.8431401716634, 42.846783109951, 
    -30.0076919508285, -13.376854708369, 268.954897347129, -30.0076919508285, 
    5072.80816097833, -353.144553152163, -16.4646206002317, -13.376854708369, 
    -353.144553152163, 317.155638459354), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188254636252185, -0.056275863411769
    ), logphi = c(0.498152539180571, -1.58222385350863)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_122 = structure(list(
    par = c(-0.178436087046482, 0.264070214247057, 0.481813925302258, 
    -1.60216181363344), value = 76.1011142623675, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.559635093193, -0.114883988544534, 
    285.412943881624, -8.40228680232258, -0.114883988544534, 
    77.4223473278823, -10.4018272679696, -18.2942542572562, 285.412943881624, 
    -10.4018272679696, 5459.03463595465, -343.636062279273, -8.40228680232258, 
    -18.2942542572562, -343.636062279273, 326.76765418671), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.178436087046482, 0.264070214247057
    ), logphi = c(0.481813925302258, -1.60216181363344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_123 = structure(list(
    par = c(-0.222581096905742, -0.00142841084309005, 0.484209002963077, 
    -1.62921253990407), value = 91.2891981965156, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.78122025343, -8.91466235586336, 
    315.482388220545, -16.1140886998368, -8.91466235586336, 56.1074973148834, 
    -26.4080781988696, -16.6644669921112, 315.482388220545, -26.4080781988696, 
    6343.61891224344, -395.462292260618, -16.1140886998368, -16.6644669921112, 
    -395.462292260618, 373.901541710353), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222581096905742, -0.00142841084309005
    ), logphi = c(0.484209002963077, -1.62921253990407)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_124 = structure(list(
    par = c(-0.225488382542644, -0.067013164745861, 0.49961603727859, 
    -1.62313424285231), value = 97.1960067201481, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.501275462913, -12.3845296755576, 
    266.79682975761, -18.0633636670535, -12.3845296755576, 38.2225240791456, 
    -30.4040722785004, -13.0396177198122, 266.79682975761, -30.4040722785004, 
    5335.78264182921, -377.606888337212, -18.0633636670535, -13.0396177198122, 
    -377.606888337212, 324.529306471533), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225488382542644, -0.067013164745861
    ), logphi = c(0.49961603727859, -1.62313424285231)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_125 = structure(list(
    par = c(-0.436414711060722, 0.15219354190886, 0.478623918609144, 
    -1.63821532503309), value = 66.9118318476081, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.328565733909, 2.18207409474758, 
    306.774156616285, -21.2326588044931, 2.18207409474758, 62.101344138199, 
    -14.8342089936193, -20.4121712972238, 306.774156616285, -14.8342089936193, 
    5756.73841383306, -421.244326723524, -21.2326588044931, -20.4121712972238, 
    -421.244326723524, 340.6725424), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.436414711060722, 0.15219354190886
    ), logphi = c(0.478623918609144, -1.63821532503309)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_126 = structure(list(
    par = c(-0.212477017130222, -0.17999090774729, 0.498380820577899, 
    -1.66140406828994), value = 101.371988581641, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.136134232164, -14.592359349308, 
    290.655036835119, -19.7182981018784, -14.592359349308, 35.1219979641826, 
    -34.6422949242253, -12.4355758757133, 290.655036835119, -34.6422949242253, 
    6331.00163551603, -417.295261462058, -19.7182981018784, -12.4355758757133, 
    -417.295261462058, 369.957673193255), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212477017130222, -0.17999090774729
    ), logphi = c(0.498380820577899, -1.66140406828994)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_127 = structure(list(
    par = c(-0.220990264212356, -0.0370956130180497, 0.505731542170887, 
    -1.57410731580342), value = 109.599423209314, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.428973666733, -10.9525512073105, 
    270.931881384939, -19.6595074317685, -10.9525512073105, 45.0588694498322, 
    -32.873836190106, -13.7151745924768, 270.931881384939, -32.873836190106, 
    4969.60876915864, -382.972570408313, -19.6595074317685, -13.7151745924768, 
    -382.972570408313, 318.239484119687), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220990264212356, -0.0370956130180497
    ), logphi = c(0.505731542170887, -1.57410731580342)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_128 = structure(list(
    par = c(-0.212084358988331, 0.165601657587661, 0.509758796466884, 
    -1.60990310442375), value = 101.428491150411, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.555549463679, -9.30644818453175, 
    314.114295772328, -20.6175360126792, -9.30644818453175, 66.3269078593487, 
    -31.4838597645917, -18.6920945246527, 314.114295772328, -31.4838597645917, 
    5965.16940891689, -476.342282347275, -20.6175360126792, -18.6920945246527, 
    -476.342282347275, 374.403081316643), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212084358988331, 0.165601657587661
    ), logphi = c(0.509758796466884, -1.60990310442375)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_129 = structure(list(
    par = c(-0.132689169805028, 0.097838972119851, 0.460528999114161, 
    -1.63066289513938), value = 94.4642092765473, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.043734728986, -6.73661585182117, 
    278.255611579681, -3.35953394881017, -6.73661585182117, 59.3084459055149, 
    -9.6720909326109, -15.1332453182107, 278.255611579681, -9.6720909326109, 
    5847.58396544416, -263.457543159262, -3.35953394881017, -15.1332453182107, 
    -263.457543159262, 328.396497103256), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.132689169805028, 0.097838972119851
    ), logphi = c(0.460528999114161, -1.63066289513938)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_130 = structure(list(
    par = c(-0.507582717775778, -0.024358253268407, 0.498920036533967, 
    -1.57314486225521), value = 92.5296040623146, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(103.608734075777, -2.71731759937666, 
    282.125539317946, -30.2557015210425, -2.71731759937666, 46.3815515487909, 
    -34.0818462127856, -16.4134247704339, 282.125539317946, -34.0818462127856, 
    4802.61016773298, -431.947665827437, -30.2557015210425, -16.4134247704339, 
    -431.947665827437, 315.029987184801), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.507582717775778, -0.024358253268407
    ), logphi = c(0.498920036533967, -1.57314486225521)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_131 = structure(list(
    par = c(-0.373832866666071, -0.247916097809177, 0.498776976548898, 
    -1.63957873088174), value = 112.33142674596, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.006566274492, -11.9197823309491, 
    317.292287398629, -29.71516880379, -11.9197823309491, 34.3099822082138, 
    -42.4307938651225, -13.4256533659283, 317.292287398629, -42.4307938651225, 
    6471.54369645264, -488.502051624096, -29.71516880379, -13.4256533659283, 
    -488.502051624096, 392.877410494208), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.373832866666071, -0.247916097809177
    ), logphi = c(0.498776976548898, -1.63957873088174)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_132 = structure(list(
    par = c(-0.308467206343134, 0.109742437012613, 0.475058007890456, 
    -1.69479338935097), value = 74.0002861601762, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.951216228908, -3.89670436717893, 
    311.236535488035, -15.6575071521559, -3.89670436717893, 58.0939651051438, 
    -14.0807741928484, -18.1460592383331, 311.236535488035, -14.0807741928484, 
    6705.96759379549, -414.710664653484, -15.6575071521559, -18.1460592383331, 
    -414.710664653484, 368.834687172637), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308467206343134, 0.109742437012613
    ), logphi = c(0.475058007890456, -1.69479338935097)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_133 = structure(list(
    par = c(-0.47250563584002, 0.186812494348781, 0.497555859071808, 
    -1.64216327810129), value = 43.0831279500176, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.35909023343, 2.17005834812767, 
    285.916936068276, -25.5941330369325, 2.17005834812767, 62.3656018241547, 
    -22.0046412913177, -19.6104351015691, 285.916936068276, -22.0046412913177, 
    5324.39737584767, -459.548834944812, -25.5941330369325, -19.6104351015691, 
    -459.548834944812, 327.984810674309), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.47250563584002, 0.186812494348781
    ), logphi = c(0.497555859071808, -1.64216327810129)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_134 = structure(list(
    par = c(-0.138141737475883, -0.024158421916001, 0.492177750550805, 
    -1.68154902204822), value = 82.2063996656534, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.376017697585, -12.4341231533265, 
    253.470585828808, -11.7896526550254, -12.4341231533265, 39.4267107068913, 
    -23.5626944089518, -12.1910233428224, 253.470585828808, -23.5626944089518, 
    5730.30977387745, -342.465506474099, -11.7896526550254, -12.1910233428224, 
    -342.465506474099, 323.388969665217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.138141737475883, -0.024158421916001
    ), logphi = c(0.492177750550805, -1.68154902204822)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_135 = structure(list(
    par = c(-0.466435646821664, -0.0956196779749992, 0.524435248471942, 
    -1.55366725508437), value = 121.209790030797, counts = structure(c(263L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.028958644648, -8.8477856792224, 
    315.295999680387, -40.6464703299747, -8.8477856792224, 45.8532698814906, 
    -52.2291125548691, -15.2890700491071, 315.295999680387, -52.2291125548691, 
    5355.42474391804, -561.527365654513, -40.6464703299747, -15.2890700491071, 
    -561.527365654513, 374.692575096702), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.466435646821664, -0.0956196779749992
    ), logphi = c(0.524435248471942, -1.55366725508437)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_136 = structure(list(
    par = c(-0.36297422015423, -0.309933658184935, 0.513738492131979, 
    -1.55267668517106), value = 127.017822701459, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.000255962688, -11.6200745452488, 
    283.816966348382, -31.2543264229248, -11.6200745452488, 30.9672113516513, 
    -43.0340423243081, -10.9740626026422, 283.816966348382, -43.0340423243081, 
    5062.91216879973, -447.253186974805, -31.2543264229248, -10.9740626026422, 
    -447.253186974805, 338.969577295956), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.36297422015423, -0.309933658184935
    ), logphi = c(0.513738492131979, -1.55267668517106)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_137 = structure(list(
    par = c(-0.139816699824083, 0.225682021109654, 0.501133483614783, 
    -1.701727068869), value = 69.1005270355395, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.750092326626, -10.9036385360639, 
    294.185382770706, -12.5766002927463, -10.9036385360639, 60.6868378980607, 
    -19.4208425128295, -17.0894540971744, 294.185382770706, -19.4208425128295, 
    6636.17908374903, -438.593501772999, -12.5766002927463, -17.0894540971744, 
    -438.593501772999, 371.772187619968), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.139816699824083, 0.225682021109654
    ), logphi = c(0.501133483614783, -1.701727068869)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_138 = structure(list(
    par = c(-0.351411348441435, 0.0343163614018637, 0.500026485040016, 
    -1.67292488405472), value = 75.0037409433211, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.763381136687, -8.10545642693228, 
    302.436874253686, -24.4117161543045, -8.10545642693228, 48.7832565383428, 
    -32.2824340948102, -16.6656417821542, 302.436874253686, -32.2824340948102, 
    6256.08825393442, -478.416722977215, -24.4117161543045, -16.6656417821542, 
    -478.416722977215, 368.744381908925), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351411348441435, 0.0343163614018637
    ), logphi = c(0.500026485040016, -1.67292488405472)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_139 = structure(list(
    par = c(-0.328766543186996, -0.103039866738, 0.509389903202113, 
    -1.5943543217623), value = 103.510786199249, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(106.542458500059, -10.957966399161, 
    283.703335028918, -26.4888216410242, -10.957966399161, 39.3272477765549, 
    -38.6549589848073, -13.6944686026652, 283.703335028918, -38.6549589848073, 
    5289.46448942591, -441.590556901517, -26.4888216410242, -13.6944686026652, 
    -441.590556901517, 339.537648692101), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.328766543186996, -0.103039866738
    ), logphi = c(0.509389903202113, -1.5943543217623)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_140 = structure(list(
    par = c(-0.343428751505117, 0.00630244017931718, 0.509621572269038, 
    -1.59333666560911), value = 94.8226663519834, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.383796583515, -8.44766362817495, 
    292.12645843657, -26.8100859894815, -8.44766362817495, 48.4960059274897, 
    -37.0229811501588, -15.8869716209153, 292.12645843657, -37.0229811501588, 
    5322.08909539733, -458.391851932305, -26.8100859894815, -15.8869716209153, 
    -458.391851932305, 343.483196370897), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.343428751505117, 0.00630244017931718
    ), logphi = c(0.509621572269038, -1.59333666560911)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_141 = structure(list(
    par = c(-0.169107214339447, -0.173458044596533, 0.509060091340463, 
    -1.59808257142271), value = 117.373927160653, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.258848288529, -15.5787412410291, 
    275.175864004495, -19.8080705491321, -15.5787412410291, 36.0507390624321, 
    -36.3182423477326, -11.7283551759328, 275.175864004495, -36.3182423477326, 
    5445.93316666564, -397.123591937998, -19.8080705491321, -11.7283551759328, 
    -397.123591937998, 341.220333641701), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.169107214339447, -0.173458044596533
    ), logphi = c(0.509060091340463, -1.59808257142271)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_142 = structure(list(
    par = c(-0.106102582636699, -0.135876955414179, 0.490253547638306, 
    -1.61345295788505), value = 122.194957697367, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.704650299966, -15.1451361887212, 
    291.029220967687, -12.9920377016646, -15.1451361887212, 45.2820139926757, 
    -30.2068291411217, -13.0343055104731, 291.029220967687, -30.2068291411217, 
    6030.78623430875, -350.601296558395, -12.9920377016646, -13.0343055104731, 
    -350.601296558395, 359.934056362476), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106102582636699, -0.135876955414179
    ), logphi = c(0.490253547638306, -1.61345295788505)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_143 = structure(list(
    par = c(-0.244229358941767, -0.345368334190239, 0.503246759763321, 
    -1.50629283971663), value = 128.35283463227, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.954378500111, -11.4932876229545, 
    236.802006504888, -20.0580508789017, -11.4932876229545, 26.1616616370475, 
    -31.367432974605, -9.1207279346861, 236.802006504888, -31.367432974605, 
    4004.44880345674, -303.09109931892, -20.0580508789017, -9.1207279346861, 
    -303.09109931892, 266.609365681347), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.244229358941767, -0.345368334190239
    ), logphi = c(0.503246759763321, -1.50629283971663)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_144 = structure(list(
    par = c(-0.267949410731632, -0.00149506668641258, 0.530984619895448, 
    -1.5726090025103), value = 97.201782196529, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.156180838695, -11.3997587973813, 
    257.708377908727, -26.2417706551332, -11.3997587973813, 43.1076093256877, 
    -40.3968072113514, -12.7071383815291, 257.708377908727, -40.3968072113514, 
    4631.13885536259, -447.864265002096, -26.2417706551332, -12.7071383815291, 
    -447.864265002096, 313.868764063585), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267949410731632, -0.00149506668641258
    ), logphi = c(0.530984619895448, -1.5726090025103)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_145 = structure(list(
    par = c(-0.374265025604274, 0.122216196515295, 0.512908109511915, 
    -1.60857821061082), value = 77.0692670260974, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.626680028427, -4.16251037549387, 
    297.812221244698, -27.9369488822567, -4.16251037549387, 60.6241105742811, 
    -34.7757147132199, -18.1646241728117, 297.812221244698, -34.7757147132199, 
    5426.01335122583, -491.662989320574, -27.9369488822567, -18.1646241728117, 
    -491.662989320574, 350.168520871108), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374265025604274, 0.122216196515295
    ), logphi = c(0.512908109511915, -1.60857821061082)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_146 = structure(list(
    par = c(-0.371187045796728, -0.0292219411344639, 0.523111548151473, 
    -1.47532347414227), value = 126.529410668258, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.00320013783, -6.6640152702746, 
    275.133867724264, -31.7693513238737, -6.6640152702746, 50.0504691878234, 
    -40.9991314427316, -14.453297335848, 275.133867724264, -40.9991314427316, 
    4089.26988383485, -431.27698520351, -31.7693513238737, -14.453297335848, 
    -431.27698520351, 298.296175952117), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371187045796728, -0.0292219411344639
    ), logphi = c(0.523111548151473, -1.47532347414227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_147 = structure(list(
    par = c(-0.174235196289309, 0.131296586459906, 0.487514032052559, 
    -1.56401098783729), value = 104.305081766009, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.817000605305, -7.33799601349006, 
    266.737160252717, -10.948625352114, -7.33799601349006, 58.1777018524576, 
    -20.237803759926, -15.7951625556763, 266.737160252717, -20.237803759926, 
    4823.50699809331, -314.82802852878, -10.948625352114, -15.7951625556763, 
    -314.82802852878, 300.034601114163), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.174235196289309, 0.131296586459906
    ), logphi = c(0.487514032052559, -1.56401098783729)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_148 = structure(list(
    par = c(-0.24915723748668, -0.118793863782116, 0.537611699494035, 
    -1.57195299833157), value = 120.651332685681, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.351934982816, -14.1251492991046, 
    279.437092363111, -30.4562556472376, -14.1251492991046, 41.6741089637185, 
    -48.0517953285187, -11.6076183633851, 279.437092363111, -48.0517953285187, 
    5149.27888539418, -505.619523876177, -30.4562556472376, -11.6076183633851, 
    -505.619523876177, 351.447554386652), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.24915723748668, -0.118793863782116
    ), logphi = c(0.537611699494035, -1.57195299833157)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_149 = structure(list(
    par = c(-0.224549588994869, -0.124235205198269, 0.495967553885128, 
    -1.61457914997028), value = 115.486488231211, counts = structure(c(281L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.585366454392, -12.9437041564984, 
    271.388961074592, -18.0595147298845, -12.9437041564984, 36.2405089369133, 
    -30.8674957238964, -12.6999827347873, 271.388961074592, -30.8674957238964, 
    5395.83383658027, -367.536716673555, -18.0595147298845, -12.6999827347873, 
    -367.536716673555, 328.24323524494), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.224549588994869, -0.124235205198269
    ), logphi = c(0.495967553885128, -1.61457914997028)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_150 = structure(list(
    par = c(-0.181278103399744, -0.038735680400553, 0.49399496677968, 
    -1.59727193824916), value = 116.119828612366, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.377240952053, -13.0312555519652, 
    294.04045680792, -16.3287780878818, -13.0312555519652, 47.4686774083466, 
    -30.4086996969488, -14.8281180383236, 294.04045680792, -30.4086996969488, 
    5695.07905460398, -377.752234049566, -16.3287780878818, -14.8281180383236, 
    -377.752234049566, 349.104801621536), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.181278103399744, -0.038735680400553
    ), logphi = c(0.49399496677968, -1.59727193824916)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_151 = structure(list(
    par = c(-0.221641032980191, -0.146579828790282, 0.506665374587094, 
    -1.61961161120432), value = 119.546265209924, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.929332718423, -15.4045950431225, 
    296.426993990906, -22.548585480564, -15.4045950431225, 37.5837270141233, 
    -38.4581979275822, -13.1643999434772, 296.426993990906, -38.4581979275822, 
    5969.87141412697, -439.047548873361, -22.548585480564, -13.1643999434772, 
    -439.047548873361, 367.987682668769), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.221641032980191, -0.146579828790282
    ), logphi = c(0.506665374587094, -1.61961161120432)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_152 = structure(list(
    par = c(-0.106294780665772, -0.120089793206543, 0.502125951806663, 
    -1.61196885792824), value = 128.003639439788, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.029743992097, -18.1776989052196, 
    298.596419568753, -16.3117663340984, -18.1776989052196, 42.3147941646107, 
    -35.2110587584775, -13.286413924618, 298.596419568753, -35.2110587584775, 
    6137.26196340991, -400.787638646705, -16.3117663340984, -13.286413924618, 
    -400.787638646705, 373.722872033966), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106294780665772, -0.120089793206543
    ), logphi = c(0.502125951806663, -1.61196885792824)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_153 = structure(list(
    par = c(-0.197018666109948, -0.152010671083741, 0.488414619466355, 
    -1.60874583121949), value = 110.789702531414, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.126485127907, -12.5104587915814, 
    275.224683008446, -15.6488230089735, -12.5104587915814, 37.9882573291468, 
    -28.8911911958678, -12.6384391467838, 275.224683008446, -28.8911911958678, 
    5489.957578515, -340.266678193757, -15.6488230089735, -12.6384391467838, 
    -340.266678193757, 330.35247379587), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197018666109948, -0.152010671083741
    ), logphi = c(0.488414619466355, -1.60874583121949)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_154 = structure(list(
    par = c(-0.347961495257413, -0.144713516156352, 0.470680926821281, 
    -1.63576424565682), value = 91.5348301087672, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.386602642152, -6.67031545376062, 
    286.585496699132, -17.9780923890149, -6.67031545376062, 39.1029651041208, 
    -23.9178773853155, -14.2284589799146, 286.585496699132, -23.9178773853155, 
    5706.71821467883, -341.219871227594, -17.9780923890149, -14.2284589799146, 
    -341.219871227594, 329.785781147507), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347961495257413, -0.144713516156352
    ), logphi = c(0.470680926821281, -1.63576424565682)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_155 = structure(list(
    par = c(-0.286593831602391, -0.0252292362089374, 0.504246555383072, 
    -1.6576893290242), value = 73.5236102280894, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.687957581476, -8.83869137169313, 
    277.635681712241, -21.6352698299005, -8.83869137169313, 45.3310316821387, 
    -32.9880565139717, -14.0641743318071, 277.635681712241, -32.9880565139717, 
    5748.54680202463, -431.83155385762, -21.6352698299005, -14.0641743318071, 
    -431.83155385762, 343.561563209249), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286593831602391, -0.0252292362089374
    ), logphi = c(0.504246555383072, -1.6576893290242)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_156 = structure(list(
    par = c(-0.155206413398004, 0.139218325472183, 0.501244318178477, 
    -1.52477131813866), value = 102.808257566062, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.188500423538, -6.21802431766127, 
    245.66825834782, -12.7553855371332, -6.21802431766127, 61.0441959949526, 
    -24.0881268993576, -14.5375537954351, 245.66825834782, -24.0881268993576, 
    4156.07773891935, -313.00440644344, -12.7553855371332, -14.5375537954351, 
    -313.00440644344, 272.336922712668), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.155206413398004, 0.139218325472183
    ), logphi = c(0.501244318178477, -1.52477131813866)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_157 = structure(list(
    par = c(-0.301233932209214, -0.0133827042829348, 0.5069686524421, 
    -1.64240963137818), value = 96.7419562902532, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.375070203617, -10.8764673178996, 
    299.720382482604, -24.6850187206604, -10.8764673178996, 46.526395419022, 
    -36.7989319904893, -15.474040036878, 299.720382482604, -36.7989319904893, 
    6014.92181274921, -472.356390702089, -24.6850187206604, -15.474040036878, 
    -472.356390702089, 367.266801124089), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301233932209214, -0.0133827042829348
    ), logphi = c(0.5069686524421, -1.64240963137818)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_158 = structure(list(
    par = c(-0.40656688784291, 0.156024785451498, 0.515924069541444, 
    -1.51349811932263), value = 89.9776750291374, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.669323688257, -0.264887184187046, 
    267.735733011421, -27.809914987742, -0.264887184187046, 60.8080463351257, 
    -31.271805333688, -17.5900299446141, 267.735733011421, -31.271805333688, 
    4096.853868095, -419.561880978137, -27.809914987742, -17.5900299446141, 
    -419.561880978137, 289.454169294601), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40656688784291, 0.156024785451498
    ), logphi = c(0.515924069541444, -1.51349811932263)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_159 = structure(list(
    par = c(-0.332465755289672, 0.0372157705476012, 0.506765410366885, 
    -1.61310471640158), value = 86.3670889454069, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.145899574756, -6.45357114237299, 
    289.58742402807, -24.8132998681427, -6.45357114237299, 51.2682734701286, 
    -34.0717648761313, -16.1526089179631, 289.58742402807, -34.0717648761313, 
    5442.39025742854, -451.313591435465, -24.8132998681427, -16.1526089179631, 
    -451.313591435465, 343.0929700734), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332465755289672, 0.0372157705476012
    ), logphi = c(0.506765410366885, -1.61310471640158)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_160 = structure(list(
    par = c(-0.120411632165331, 0.251502923202634, 0.507668174415012, 
    -1.56491414716648), value = 94.4166561782432, counts = structure(c(219L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.508708927456, -7.23828342330535, 
    272.065186248227, -12.8544413389164, -7.23828342330535, 71.9905868464821, 
    -23.5425438006587, -16.9791081123805, 272.065186248227, -23.5425438006587, 
    4916.60496679458, -381.541156681209, -12.8544413389164, -16.9791081123805, 
    -381.541156681209, 316.374909637318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.120411632165331, 0.251502923202634
    ), logphi = c(0.507668174415012, -1.56491414716648)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_161 = structure(list(
    par = c(-0.260225517323583, -0.156944945548673, 0.506590627175525, 
    -1.55045599121847), value = 114.597105858228, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.83085319999, -11.4606515708715, 
    265.350129261321, -22.2649743744086, -11.4606515708715, 37.4098674384982, 
    -35.1078367408775, -12.163030371326, 265.350129261321, -35.1078367408775, 
    4701.49860890956, -373.797326965075, -22.2649743744086, -12.163030371326, 
    -373.797326965075, 307.739632624759), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260225517323583, -0.156944945548673
    ), logphi = c(0.506590627175525, -1.55045599121847)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_162 = structure(list(
    par = c(-0.340478379428381, 0.0778106403804396, 0.52388671124177, 
    -1.54090304134553), value = 111.546062349825, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.808602872648, -6.76123615406254, 
    311.776837286004, -32.5559073264259, -6.76123615406254, 64.2347802717325, 
    -43.5961745282043, -17.8259678520476, 311.776837286004, -43.5961745282043, 
    5143.3965097516, -517.310858713316, -32.5559073264259, -17.8259678520476, 
    -517.310858713316, 357.916802958158), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.340478379428381, 0.0778106403804396
    ), logphi = c(0.52388671124177, -1.54090304134553)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_163 = structure(list(
    par = c(-0.131179921085537, 0.244629342905205, 0.489618240623393, 
    -1.59851202122857), value = 74.4229426467487, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.630889463087, -3.63926315927188, 
    265.73353130388, -8.285918713824, -3.63926315927188, 71.7790928739248, 
    -14.7632631808392, -16.4702386982185, 265.73353130388, -14.7632631808392, 
    5125.75888443933, -332.877368547813, -8.285918713824, -16.4702386982185, 
    -332.877368547813, 310.809380184907), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.131179921085537, 0.244629342905205
    ), logphi = c(0.489618240623393, -1.59851202122857)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_164 = structure(list(
    par = c(-0.106113146737985, 0.138302601346621, 0.498577817725881, 
    -1.65221376716596), value = 94.4086355556021, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(139.967897670346, -14.2435540944064, 
    304.314753268642, -12.4020447582751, -14.2435540944064, 59.3353872950786, 
    -25.2600255485902, -16.7204918923858, 304.314753268642, -25.2600255485902, 
    6491.53426032001, -420.204706552241, -12.4020447582751, -16.7204918923858, 
    -420.204706552241, 379.900279039447), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.106113146737985, 0.138302601346621
    ), logphi = c(0.498577817725881, -1.65221376716596)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_165 = structure(list(
    par = c(-0.311279514572689, -0.173088416531652, 0.50012201520597, 
    -1.79799459480227), value = 66.206562708839, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(93.3026490415045, -16.1215458689412, 
    327.806636278183, -25.4799387668925, -16.1215458689412, 33.4540615334333, 
    -42.8313787175227, -13.1123141127176, 327.806636278183, -42.8313787175227, 
    8784.45075562695, -559.486030866196, -25.4799387668925, -13.1123141127176, 
    -559.486030866196, 443.598863849815), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.311279514572689, -0.173088416531652
    ), logphi = c(0.50012201520597, -1.79799459480227)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_166 = structure(list(
    par = c(-0.261589467928527, 0.207525393461586, 0.503067565548629, 
    -1.56109736298717), value = 90.6271310241945, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.344689673327, -1.71344764154924, 
    285.452948727283, -18.7342361570586, -1.71344764154924, 71.8932264049954, 
    -24.2202101681244, -18.5228382374447, 285.452948727283, -24.2202101681244, 
    4907.96005514227, -403.68072243524, -18.7342361570586, -18.5228382374447, 
    -403.68072243524, 318.95807630633), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.261589467928527, 0.207525393461586
    ), logphi = c(0.503067565548629, -1.56109736298717)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_167 = structure(list(
    par = c(-0.228277036373671, -0.227883346564469, 0.48161850304129, 
    -1.68080362198307), value = 114.216849777105, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.508618074107, -13.7840563070313, 
    303.969874313026, -17.6203596140567, -13.7840563070313, 34.2962435411209, 
    -30.1405511606845, -12.7529256754855, 303.969874313026, -30.1405511606845, 
    6853.21787671, -392.77689698558, -17.6203596140567, -12.7529256754855, 
    -392.77689698558, 383.562775148505), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.228277036373671, -0.227883346564469
    ), logphi = c(0.48161850304129, -1.68080362198307)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_168 = structure(list(
    par = c(-0.314651531425881, 0.270898852440545, 0.505396450239531, 
    -1.71139219561999), value = 54.8062023108276, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.520440591245, -2.77461252906619, 
    333.09917944635, -22.5715966166717, -2.77461252906619, 75.7172673679918, 
    -21.4886526386238, -21.7572308400804, 333.09917944635, -21.4886526386238, 
    7141.61227808319, -552.797263310367, -22.5715966166717, -21.7572308400804, 
    -552.797263310367, 406.230044283973), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314651531425881, 0.270898852440545
    ), logphi = c(0.505396450239531, -1.71139219561999)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_169 = structure(list(
    par = c(-0.461687852524051, -0.100984833981511, 0.527184018645811, 
    -1.60453735221217), value = 113.073604372743, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.284843062492, -10.677149532512, 
    332.884585748872, -42.4440476791688, -10.677149532512, 46.1684405905771, 
    -58.1865193431952, -15.41036289332, 332.884585748872, -58.1865193431952, 
    6214.96751190875, -629.958595597557, -42.4440476791688, -15.41036289332, 
    -629.958595597557, 417.356585636242), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.461687852524051, -0.100984833981511
    ), logphi = c(0.527184018645811, -1.60453735221217)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_170 = structure(list(
    par = c(-0.253397334941792, -0.06393678745237, 0.470303728393693, 
    -1.69808891588886), value = 79.4014255443531, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.193636091249, -9.33372498934659, 
    287.03225146387, -13.3593619526806, -9.33372498934659, 41.0497341150062, 
    -18.9691337091347, -14.1129852373467, 287.03225146387, -18.9691337091347, 
    6473.82150246401, -353.96027787904, -13.3593619526806, -14.1129852373467, 
    -353.96027787904, 350.60424851352), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.253397334941792, -0.06393678745237
    ), logphi = c(0.470303728393693, -1.69808891588886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_171 = structure(list(
    par = c(-0.298446345585729, -0.12602374646506, 0.521347178946085, 
    -1.60025852772964), value = 109.529021207604, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.9516318057326, -13.4303051524398, 
    273.052423096942, -27.3272975057637, -13.4303051524398, 34.2987846266851, 
    -41.9696728286567, -12.1559570320784, 273.052423096942, -41.9696728286567, 
    5215.15284206231, -459.980911788449, -27.3272975057637, -12.1559570320784, 
    -459.980911788449, 338.901235529931), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.298446345585729, -0.12602374646506
    ), logphi = c(0.521347178946085, -1.60025852772964)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_172 = structure(list(
    par = c(-0.305436996595077, 0.0972679183390176, 0.511869372059307, 
    -1.61650011745513), value = 89.9078585804746, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.628102170551, -9.20843748275502, 
    284.013343929246, -23.7947305663511, -9.20843748275502, 49.3495264812793, 
    -33.0943270618889, -16.4092204002486, 284.013343929246, -33.0943270618889, 
    5355.50962567299, -454.917472913152, -23.7947305663511, -16.4092204002486, 
    -454.917472913152, 338.900306907419), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305436996595077, 0.0972679183390176
    ), logphi = c(0.511869372059307, -1.61650011745513)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_173 = structure(list(
    par = c(-0.280848217083051, 0.0736710261819805, 0.49598838588441, 
    -1.62117965641021), value = 75.2432707193043, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.826917442912, -5.84982681672841, 
    277.202571798085, -18.5324925503494, -5.84982681672841, 53.1469083000502, 
    -25.7376895618222, -15.9036095865872, 277.202571798085, -25.7376895618222, 
    5331.57460867173, -393.066820716825, -18.5324925503494, -15.9036095865872, 
    -393.066820716825, 325.308588934092), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280848217083051, 0.0736710261819805
    ), logphi = c(0.49598838588441, -1.62117965641021)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_174 = structure(list(
    par = c(-0.211195993590989, 0.040443144972553, 0.515331771996817, 
    -1.51366000312559), value = 111.055554973298, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.948065939619, -9.11457181729247, 
    244.010370771264, -19.3439047517785, -9.11457181729247, 48.8762211894311, 
    -31.4335090116913, -13.1989997047555, 244.010370771264, -31.4335090116913, 
    4001.51966290707, -352.198830171346, -19.3439047517785, -13.1989997047555, 
    -352.198830171346, 273.312472852894), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.211195993590989, 0.040443144972553
    ), logphi = c(0.515331771996817, -1.51366000312559)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_175 = structure(list(
    par = c(-0.451454445526135, -0.21212228800662, 0.488893290822222, 
    -1.51864327506755), value = 103.552174662247, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(99.7695092586071, -3.93363735184948, 
    244.976740319203, -23.7622204597443, -3.93363735184948, 34.1548043145679, 
    -29.6844035787558, -12.0864193622339, 244.976740319203, -29.6844035787558, 
    3934.86169993551, -309.465888937765, -23.7622204597443, -12.0864193622339, 
    -309.465888937765, 258.967816492373), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.451454445526135, -0.21212228800662
    ), logphi = c(0.488893290822222, -1.51864327506755)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_176 = structure(list(
    par = c(-0.234517296327752, -0.0082515543351705, 0.505068280084517, 
    -1.59220136147687), value = 109.240009273066, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.865342783015, -11.3300097943636, 
    269.877886864833, -19.5378084022479, -11.3300097943636, 43.5060489003547, 
    -31.7093033501692, -14.0373621881906, 269.877886864833, -31.7093033501692, 
    5063.67399082563, -388.872788796846, -19.5378084022479, -14.0373621881906, 
    -388.872788796846, 319.854028639099), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234517296327752, -0.0082515543351705
    ), logphi = c(0.505068280084517, -1.59220136147687)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_177 = structure(list(
    par = c(-0.21183177473971, 0.0729873256403256, 0.513485109548407, 
    -1.66717494268774), value = 81.0662153476298, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.032391738079, -12.2260317390044, 
    314.629318939552, -22.2994444509794, -12.2260317390044, 57.8835604194694, 
    -37.254596598757, -16.631056482197, 314.629318939552, -37.254596598757, 
    6649.20854205064, -506.614423237295, -22.2994444509794, -16.631056482197, 
    -506.614423237295, 396.322098950463), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21183177473971, 0.0729873256403256
    ), logphi = c(0.513485109548407, -1.66717494268774)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_178 = structure(list(
    par = c(-0.500958887725703, 0.00716755491969109, 0.512906547101037, 
    -1.64704771516118), value = 85.297573596354, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.825429800722, -6.24107752500436, 
    322.751612827687, -36.9302901663815, -6.24107752500436, 50.8477458431855, 
    -46.6024178535918, -17.8729365885033, 322.751612827687, -46.6024178535918, 
    6261.54225896869, -584.455251136262, -36.9302901663815, -17.8729365885033, 
    -584.455251136262, 395.758899724541), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.500958887725703, 0.00716755491969109
    ), logphi = c(0.512906547101037, -1.64704771516118)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_179 = structure(list(
    par = c(-0.26196119058242, 0.0511841486020806, 0.492419958476604, 
    -1.67893857591466), value = 73.0789758316444, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(108.601371962891, -8.53522115917826, 
    279.497393584904, -17.077951333988, -8.53522115917826, 47.4914634160939, 
    -24.2644797694425, -15.1790781455219, 279.497393584904, -24.2644797694425, 
    5972.64844848766, -404.04800876459, -17.077951333988, -15.1790781455219, 
    -404.04800876459, 342.127564206152), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26196119058242, 0.0511841486020806
    ), logphi = c(0.492419958476604, -1.67893857591466)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_180 = structure(list(
    par = c(-0.267258026764214, 0.0616898257255233, 0.502381263968898, 
    -1.55030990966171), value = 102.979519935409, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.892276710005, -7.10084926680565, 
    277.483913457388, -20.1779654851464, -7.10084926680565, 54.93248768218, 
    -29.8944037915305, -15.9610481347272, 277.483913457388, -29.8944037915305, 
    4759.1525985915, -381.276463656377, -20.1779654851464, -15.9610481347272, 
    -381.276463656377, 310.623638849705), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.267258026764214, 0.0616898257255233
    ), logphi = c(0.502381263968898, -1.55030990966171)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_181 = structure(list(
    par = c(-0.351044637613875, -0.0108777771260114, 0.512730376772943, 
    -1.59057655833621), value = 96.9138009948798, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.92073014854, -9.40243038272115, 
    296.0583109477, -28.5650286748762, -9.40243038272115, 46.7375983959073, 
    -39.6649966809548, -15.7374817835176, 296.0583109477, -39.6649966809548, 
    5376.67003004572, -475.721215170921, -28.5650286748762, -15.7374817835176, 
    -475.721215170921, 350.25477548345), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351044637613875, -0.0108777771260114
    ), logphi = c(0.512730376772943, -1.59057655833621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_182 = structure(list(
    par = c(-0.170127562608617, 0.128178433359998, 0.493018650554975, 
    -1.50750730846508), value = 99.1929707714839, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.011959053661, -5.33732110241658, 
    248.484504353996, -11.4622498816885, -5.33732110241658, 60.4077818948667, 
    -22.3323323673696, -14.8989140544842, 248.484504353996, -22.3323323673696, 
    4080.62083257477, -287.287211104825, -11.4622498816885, -14.8989140544842, 
    -287.287211104825, 266.197855697925), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.170127562608617, 0.128178433359998
    ), logphi = c(0.493018650554975, -1.50750730846508)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_183 = structure(list(
    par = c(-0.332822324446222, 0.0768233599253387, 0.498521155963106, 
    -1.66615883540287), value = 76.9273179066365, counts = structure(c(277L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.811011683017, -7.74781441492678, 
    335.264919598899, -25.2408067744625, -7.74781441492678, 59.1453343936621, 
    -32.2936884025182, -19.2154773355213, 335.264919598899, -32.2936884025182, 
    6842.71520459134, -517.971513030346, -25.2408067744625, -19.2154773355213, 
    -517.971513030346, 404.416956076403), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332822324446222, 0.0768233599253387
    ), logphi = c(0.498521155963106, -1.66615883540287)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_184 = structure(list(
    par = c(-0.160278377268137, 0.131305141261256, 0.493245927691257, 
    -1.56866068657722), value = 101.151451644896, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.35558465649, -7.37199421863011, 
    260.578699066372, -11.6351701038298, -7.37199421863011, 58.2538463120841, 
    -21.8452810756276, -15.2410609608467, 260.578699066372, -21.8452810756276, 
    4759.53321111433, -324.383978954401, -11.6351701038298, -15.2410609608467, 
    -324.383978954401, 297.868083851682), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.160278377268137, 0.131305141261256
    ), logphi = c(0.493245927691257, -1.56866068657722)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_185 = structure(list(
    par = c(-0.392417807427637, 0.0993350487114328, 0.534501472515575, 
    -1.57405967738326), value = 93.8673313543416, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.613661747521, -8.01495607305469, 
    287.381639079598, -34.2894271199157, -8.01495607305469, 52.8144389484453, 
    -45.5307953188822, -16.3113377755764, 287.381639079598, -45.5307953188822, 
    4955.70909044929, -535.282852258234, -34.2894271199157, -16.3113377755764, 
    -535.282852258234, 345.961231936087), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392417807427637, 0.0993350487114328
    ), logphi = c(0.534501472515575, -1.57405967738326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_186 = structure(list(
    par = c(-0.430813515571605, 0.255399543353544, 0.511303579263897, 
    -1.64250712911851), value = 57.9409231182697, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.641496017332, 1.76217318781369, 
    299.294578628206, -27.676413626665, 1.76217318781369, 71.2895848771211, 
    -25.8466790867828, -21.0321972016203, 299.294578628206, -25.8466790867828, 
    5573.51059738309, -515.217725057582, -27.676413626665, -21.0321972016203, 
    -515.217725057582, 350.962752374784), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.430813515571605, 0.255399543353544
    ), logphi = c(0.511303579263897, -1.64250712911851)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_187 = structure(list(
    par = c(-0.319123710989718, -0.0123780822555213, 0.493813756994674, 
    -1.71330677694542), value = 87.8043374670941, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.87383729758, -11.922144867782, 
    334.134423823684, -24.0537248554773, -11.922144867782, 47.1869079277099, 
    -33.4894835098964, -17.128811347078, 334.134423823684, -33.4894835098964, 
    7507.79017299053, -516.905473936902, -24.0537248554773, -17.128811347078, 
    -516.905473936902, 417.93299357451), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319123710989718, -0.0123780822555213
    ), logphi = c(0.493813756994674, -1.71330677694542)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_188 = structure(list(
    par = c(-0.40433445467988, 0.0123003645495067, 0.493419989860108, 
    -1.56868999271169), value = 82.5111083396014, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(98.8320414201382, -4.27815285419797, 
    244.447459508024, -19.5940136791251, -4.27815285419797, 42.5879281635844, 
    -26.7854098936482, -12.9562881951983, 244.447459508024, -26.7854098936482, 
    4217.99172270099, -339.243306845205, -19.5940136791251, -12.9562881951983, 
    -339.243306845205, 269.361764967613), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.40433445467988, 0.0123003645495067
    ), logphi = c(0.493419989860108, -1.56868999271169)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_189 = structure(list(
    par = c(-0.290633821786397, 0.0193347866221541, 0.500983733753596, 
    -1.63312222568051), value = 102.901827808744, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.788596005942, -10.76780206688, 
    289.79538446805, -21.6517475521982, -10.76780206688, 44.2791726200653, 
    -31.4673516932373, -15.6605371621765, 289.79538446805, -31.4673516932373, 
    5710.8132376662, -432.50383789939, -21.6517475521982, -15.6605371621765, 
    -432.50383789939, 347.964737510864), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290633821786397, 0.0193347866221541
    ), logphi = c(0.500983733753596, -1.63312222568051)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_190 = structure(list(
    par = c(-0.290303165321934, 0.0758447906708913, 0.508464504139098, 
    -1.61759638805233), value = 103.132648960772, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.555202389269, -9.99667038570351, 
    312.697440328691, -24.8351067035912, -9.99667038570351, 54.4411707359416, 
    -35.4761785601454, -17.7043803581967, 312.697440328691, -35.4761785601454, 
    5951.57361703968, -486.147605773368, -24.8351067035912, -17.7043803581967, 
    -486.147605773368, 373.076970408448), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.290303165321934, 0.0758447906708913
    ), logphi = c(0.508464504139098, -1.61759638805233)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_191 = structure(list(
    par = c(-0.251630166897282, 0.0388048097310587, 0.4934410656541, 
    -1.65061088579373), value = 81.1071895117883, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.186257709927, -9.04996307937722, 
    287.078680678121, -17.6478243680833, -9.04996307937722, 49.2021370419593, 
    -26.3190557596715, -15.5773064349773, 287.078680678121, -26.3190557596715, 
    5881.28354745621, -404.520689542665, -17.6478243680833, -15.5773064349773, 
    -404.520689542665, 346.562741658119), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251630166897282, 0.0388048097310587
    ), logphi = c(0.4934410656541, -1.65061088579373)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_192 = structure(list(
    par = c(-0.371792455048847, 0.057342186342644, 0.496661549960451, 
    -1.53964550325739), value = 80.245359820146, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.976996805183, -0.625326588732378, 
    262.128082894719, -21.682399738765, -0.625326588732378, 57.1831181161997, 
    -26.6290631181221, -15.9405234612109, 262.128082894719, -26.6290631181221, 
    4289.50490125857, -355.606154810673, -21.682399738765, -15.9405234612109, 
    -355.606154810673, 282.246423079613), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371792455048847, 0.057342186342644
    ), logphi = c(0.496661549960451, -1.53964550325739)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_193 = structure(list(
    par = c(-0.427716883810892, 0.117793979835279, 0.506088116567311, 
    -1.60506362065886), value = 72.2406981085516, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.118436652811, -1.69903355029533, 
    277.007837617305, -26.4564009846424, -1.69903355029533, 55.5605742462717, 
    -29.7002510016853, -17.4911988608528, 277.007837617305, -29.7002510016853, 
    4955.5537477346, -445.582003132827, -26.4564009846424, -17.4911988608528, 
    -445.582003132827, 318.909548031598), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.427716883810892, 0.117793979835279
    ), logphi = c(0.506088116567311, -1.60506362065886)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_194 = structure(list(
    par = c(-0.262622376355859, 0.284269401254099, 0.488652319715449, 
    -1.66834742763388), value = 61.3570360369897, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.566139442441, 1.21508099937273, 
    327.684377019466, -15.2584967736402, 1.21508099937273, 83.710603217213, 
    -10.18732724134, -21.6094798730637, 327.684377019466, -10.18732724134, 
    6711.6737031192, -466.315411200569, -15.2584967736402, -21.6094798730637, 
    -466.315411200569, 386.68121572627), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262622376355859, 0.284269401254099
    ), logphi = c(0.488652319715449, -1.66834742763388)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_195 = structure(list(
    par = c(-0.308093410538406, 0.0237809847373623, 0.48382347499377, 
    -1.68992877398012), value = 74.0756182754463, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.017023893913, -8.58307309670181, 
    312.128964356617, -19.1909805149493, -8.58307309670181, 48.8504447524463, 
    -24.1353789007803, -16.9240217289257, 312.128964356617, -24.1353789007803, 
    6730.92769335426, -439.015269803278, -19.1909805149493, -16.9240217289257, 
    -439.015269803278, 377.699325454728), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308093410538406, 0.0237809847373623
    ), logphi = c(0.48382347499377, -1.68992877398012)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_196 = structure(list(
    par = c(-0.286236576358086, 0.224987940874406, 0.49523368943835, 
    -1.60185239476368), value = 59.6573486622948, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.390090606686, 0.686362287893871, 
    264.800173248148, -15.880571028859, 0.686362287893871, 66.5090238527455, 
    -17.0787547979501, -17.4719511107924, 264.800173248148, -17.0787547979501, 
    4837.87816757442, -371.636400215536, -15.880571028859, -17.4719511107924, 
    -371.636400215536, 300.45961561953), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.286236576358086, 0.224987940874406
    ), logphi = c(0.49523368943835, -1.60185239476368)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_197 = structure(list(
    par = c(-0.222956060637267, -0.126300186901823, 0.493614456137755, 
    -1.68257487083303), value = 88.0136548234813, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(107.733153573264, -13.9658643760754, 
    286.300249108251, -18.1339199354369, -13.9658643760754, 35.5217978835753, 
    -31.0391611897387, -12.9263839081517, 286.300249108251, -31.0391611897387, 
    6390.25195281562, -407.417873308447, -18.1339199354369, -12.9263839081517, 
    -407.417873308447, 363.579529071956), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.222956060637267, -0.126300186901823
    ), logphi = c(0.493614456137755, -1.68257487083303)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_198 = structure(list(
    par = c(-0.244168672670136, 0.0777688205499078, 0.484117335337821, 
    -1.59689561122841), value = 88.7698187287622, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.200394086761, -4.55198007998092, 
    283.829529156066, -14.3592323418318, -4.55198007998092, 58.8687245439701, 
    -21.3182558894687, -16.4426568964871, 283.829529156066, -21.3182558894687, 
    5320.07587750627, -348.070419187607, -14.3592323418318, -16.4426568964871, 
    -348.070419187607, 322.572912914154), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.244168672670136, 0.0777688205499078
    ), logphi = c(0.484117335337821, -1.59689561122841)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_199 = structure(list(
    par = c(-0.117205612745062, 0.0720730334720567, 0.483957939980144, 
    -1.6462995504874), value = 94.9081432491523, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.813420440367, -11.9743722564181, 
    295.548607230245, -9.62636014278928, -11.9743722564181, 56.8588986027407, 
    -21.038296345921, -15.643782871777, 295.548607230245, -21.038296345921, 
    6316.6179639218, -359.565983735877, -9.62636014278928, -15.643782871777, 
    -359.565983735877, 363.603862169271), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.117205612745062, 0.0720730334720567
    ), logphi = c(0.483957939980144, -1.6462995504874)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_270_200 = structure(list(
    par = c(-0.397797698291753, -0.115807179248935, 0.493176508350966, 
    -1.64097880563136), value = 81.4771737331309, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(101.010890972475, -7.13946418073874, 
    288.387856173244, -25.4034234963285, -7.13946418073874, 41.4418795919858, 
    -33.7195295010417, -14.3758956845375, 288.387856173244, -33.7195295010417, 
    5722.64823120605, -431.716545215011, -25.4034234963285, -14.3758956845375, 
    -431.716545215011, 345.09241458025), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397797698291753, -0.115807179248935
    ), logphi = c(0.493176508350966, -1.64097880563136)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_1 = structure(list(
    par = c(-0.18246319230983, -0.0627580665229683, 0.503218949560094, 
    -1.60907112163512), value = 109.964173935131, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.668594644575, -13.3643617559187, 
    286.601676055653, -18.5655721445244, -13.3643617559187, 44.9128833999168, 
    -33.7525853986165, -13.8266243432383, 286.601676055653, -33.7525853986165, 
    5667.13887917203, -402.856779000871, -18.5655721445244, -13.8266243432383, 
    -402.856779000871, 349.400748934414), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18246319230983, -0.0627580665229683
    ), logphi = c(0.503218949560094, -1.60907112163512)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_2 = structure(list(
    par = c(-0.388899035111309, -0.215953013919229, 0.521427823236026, 
    -1.61660180162738), value = 121.342467765435, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(100.83958982321, -13.8895924166604, 
    313.260896337653, -35.9569393246773, -13.8895924166604, 34.3956877877361, 
    -52.0086570290346, -12.6945871077311, 313.260896337653, -52.0086570290346, 
    6158.37854446966, -559.831803528255, -35.9569393246773, -12.6945871077311, 
    -559.831803528255, 398.591699212858), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.388899035111309, -0.215953013919229
    ), logphi = c(0.521427823236026, -1.61660180162738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_3 = structure(list(
    par = c(-0.310203479654932, -0.00762736928778699, 0.513676210010285, 
    -1.58173661863706), value = 114.237244620169, counts = structure(c(231L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.907298067076, -9.79598280537175, 
    312.103590090373, -28.6134715672404, -9.79598280537175, 53.8436371364526, 
    -41.5484530016386, -16.4179733079806, 312.103590090373, -41.5484530016386, 
    5634.76538806995, -491.947910228774, -28.6134715672404, -16.4179733079806, 
    -491.947910228774, 368.421857345425), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.310203479654932, -0.00762736928778699
    ), logphi = c(0.513676210010285, -1.58173661863706)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_4 = structure(list(
    par = c(-0.329633643438584, -0.0752077525232541, 0.496441674547552, 
    -1.59966137914064), value = 115.454576561982, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.017954267624, -9.66788865142121, 
    343.519860781072, -27.7112454085682, -9.66788865142121, 53.5324077084454, 
    -39.3834193204157, -17.6431146918787, 343.519860781072, -39.3834193204157, 
    6418.60069397282, -486.108954287801, -27.7112454085682, -17.6431146918787, 
    -486.108954287801, 400.439365012772), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.329633643438584, -0.0752077525232541
    ), logphi = c(0.496441674547552, -1.59966137914064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_5 = structure(list(
    par = c(-0.022028052579247, 0.146494511256896, 0.482715470287853, 
    -1.56702691135484), value = 113.018905604583, counts = structure(c(321L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(159.896530625758, -12.7614880724991, 
    271.778949340273, -3.55172921295832, -12.7614880724991, 65.3824458964891, 
    -19.4368645942689, -15.1571225650571, 271.778949340273, -19.4368645942689, 
    5289.18162703462, -283.889278806626, -3.55172921295832, -15.1571225650571, 
    -283.889278806626, 321.492975142945), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.022028052579247, 0.146494511256896
    ), logphi = c(0.482715470287853, -1.56702691135484)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_6 = structure(list(
    par = c(-0.326089657738646, 0.0250246087725743, 0.480116993305426, 
    -1.62696289705418), value = 91.9663656612026, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.125806181132, -6.35955462513493, 
    315.959108700525, -19.301707357755, -6.35955462513493, 52.4059911874986, 
    -23.8193118597962, -17.9826051542875, 315.959108700525, -23.8193118597962, 
    6104.21759981961, -404.225641727152, -19.301707357755, -17.9826051542875, 
    -404.225641727152, 361.294131739243), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.326089657738646, 0.0250246087725743
    ), logphi = c(0.480116993305426, -1.62696289705418)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_7 = structure(list(
    par = c(-0.230566304531691, 0.0153074977406838, 0.516983627671094, 
    -1.60166557062375), value = 115.032255443895, counts = structure(c(135L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.606319376217, -13.0308462971129, 
    304.672175509779, -24.8192880327736, -13.0308462971129, 52.056339981732, 
    -40.4046836592897, -15.6624458398369, 304.672175509779, -40.4046836592897, 
    5789.61618485252, -483.478169424956, -24.8192880327736, -15.6624458398369, 
    -483.478169424956, 370.610511630787), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230566304531691, 0.0153074977406838
    ), logphi = c(0.516983627671094, -1.60166557062375)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_8 = structure(list(
    par = c(-0.156064814978731, -0.0657029824232163, 0.474376301784768, 
    -1.59837136376101), value = 114.835223318616, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.597744368648, -12.1634635164014, 
    299.310902320826, -10.4065516222107, -12.1634635164014, 49.2892731358552, 
    -23.8594095982592, -14.8988624566471, 299.310902320826, -23.8594095982592, 
    5920.43367003114, -310.488068931747, -10.4065516222107, -14.8988624566471, 
    -310.488068931747, 349.755283952646), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.156064814978731, -0.0657029824232163
    ), logphi = c(0.474376301784768, -1.59837136376101)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_9 = structure(list(
    par = c(-0.240961583463162, 0.0638527536833998, 0.454795852170385, 
    -1.62394351960091), value = 96.4671656454628, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(160.969638994146, -2.61977123017232, 
    323.489295478652, -7.67528709921805, -2.61977123017232, 64.2007287190438, 
    -9.90705952474968, -18.2014448046885, 323.489295478652, -9.90705952474968, 
    6448.31879215957, -302.875422221405, -7.67528709921805, -18.2014448046885, 
    -302.875422221405, 362.644814121182), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.240961583463162, 0.0638527536833998
    ), logphi = c(0.454795852170385, -1.62394351960091)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_10 = structure(list(
    par = c(-0.392439026865344, -0.00265546629019546, 0.497729204111328, 
    -1.58917636887132), value = 118.142245537492, counts = structure(c(153L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.120768717911, -6.97504319191466, 
    346.730397762229, -30.6256320641296, -6.97504319191466, 56.3673066551473, 
    -38.4478451778136, -19.6417938873594, 346.730397762229, -38.4478451778136, 
    6196.58942605383, -506.265816781593, -30.6256320641296, -19.6417938873594, 
    -506.265816781593, 394.342587323848), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.392439026865344, -0.00265546629019546
    ), logphi = c(0.497729204111328, -1.58917636887132)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_11 = structure(list(
    par = c(-0.273933743572531, 0.0920485132376978, 0.492489338752919, 
    -1.6040467596326), value = 93.8730367767309, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.949754543205, -5.368502332459, 
    318.97415862403, -19.798904887125, -5.368502332459, 64.955787767218, 
    -27.1990355074081, -18.765836248491, 318.97415862403, -27.1990355074081, 
    5965.66868108894, -431.181835972794, -19.798904887125, -18.765836248491, 
    -431.181835972794, 366.725005484625), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.273933743572531, 0.0920485132376978
    ), logphi = c(0.492489338752919, -1.6040467596326)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_12 = structure(list(
    par = c(-0.191375938361592, -0.0837483497979705, 0.481252824327229, 
    -1.69104051380902), value = 98.9839163531037, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.96486864807, -14.7420228060469, 
    361.782610664108, -17.1683191361183, -14.7420228060469, 53.1874302716062, 
    -30.3919988695611, -16.9679643136078, 361.782610664108, -30.3919988695611, 
    8240.4207107416, -464.812585569518, -17.1683191361183, -16.9679643136078, 
    -464.812585569518, 455.107556476264), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191375938361592, -0.0837483497979705
    ), logphi = c(0.481252824327229, -1.69104051380902)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_13 = structure(list(
    par = c(-0.269946190572228, 0.100255212806574, 0.502842747938085, 
    -1.56840622739621), value = 96.4475086983977, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.97169979612, -6.2964583698033, 
    300.807019872451, -21.5154106513182, -6.2964583698033, 62.5554587898591, 
    -30.7562001644612, -17.808756075155, 300.807019872451, -30.7562001644612, 
    5288.52113620815, -425.275575366868, -21.5154106513182, -17.808756075155, 
    -425.275575366868, 341.145209002747), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.269946190572228, 0.100255212806574
    ), logphi = c(0.502842747938085, -1.56840622739621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_14 = structure(list(
    par = c(-0.18820838638751, -0.0671581742944772, 0.484537625640642, 
    -1.5656628701351), value = 121.865446015411, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(149.848807506459, -10.6186955477483, 
    311.357893487241, -15.1768673966046, -10.6186955477483, 55.3988033189512, 
    -29.8251568189301, -15.7904958140165, 311.357893487241, -29.8251568189301, 
    5736.27588097736, -350.402357764068, -15.1768673966046, -15.7904958140165, 
    -350.402357764068, 354.092183933119), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.18820838638751, -0.0671581742944772
    ), logphi = c(0.484537625640642, -1.5656628701351)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_15 = structure(list(
    par = c(-0.295887671851478, 0.0281216906993012, 0.504669057614338, 
    -1.62819584299799), value = 106.787712852305, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.909286360672, -11.4337036833945, 
    344.030122562344, -26.9970530624164, -11.4337036833945, 56.3520271867901, 
    -39.138654177151, -18.697254526856, 344.030122562344, -39.138654177151, 
    6704.76546050125, -526.140006073206, -26.9970530624164, -18.697254526856, 
    -526.140006073206, 413.306185524931), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.295887671851478, 0.0281216906993012
    ), logphi = c(0.504669057614338, -1.62819584299799)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_16 = structure(list(
    par = c(-0.251769902184994, 0.151893978874037, 0.5228503502856, 
    -1.58058768799935), value = 107.751250976162, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.991404695166, -9.97630093380053, 
    319.291968530422, -27.2583435805274, -9.97630093380053, 67.1295817902262, 
    -40.1055128556038, -18.8135224021835, 319.291968530422, -40.1055128556038, 
    5698.17320491595, -526.10604551262, -27.2583435805274, -18.8135224021835, 
    -526.10604551262, 378.275309255827), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251769902184994, 0.151893978874037
    ), logphi = c(0.5228503502856, -1.58058768799935)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_17 = structure(list(
    par = c(-0.0674037238886336, 0.10133133818985, 0.469055692457665, 
    -1.65768980546221), value = 92.7828254071662, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.969771707641, -12.085243955795, 
    283.235613370181, -3.13884826752542, -12.085243955795, 56.5425961163157, 
    -12.4788252762187, -14.7742415812502, 283.235613370181, -12.4788252762187, 
    6371.97235867859, -296.383964236924, -3.13884826752542, -14.7742415812502, 
    -296.383964236924, 353.381689663479), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0674037238886336, 0.10133133818985
    ), logphi = c(0.469055692457665, -1.65768980546221)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_18 = structure(list(
    par = c(-0.212319825089598, 0.198655906363544, 0.490788672260772, 
    -1.65119772975217), value = 81.4884644714502, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.276445786242, -5.76074633329426, 
    327.919630041862, -15.1287064191763, -5.76074633329426, 72.802816553974, 
    -19.1538378864209, -19.9616379443768, 327.919630041862, -19.1538378864209, 
    6696.60866994448, -451.248240946001, -15.1287064191763, -19.9616379443768, 
    -451.248240946001, 391.566250268482), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.212319825089598, 0.198655906363544
    ), logphi = c(0.490788672260772, -1.65119772975217)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_19 = structure(list(
    par = c(-0.180483010928138, -0.281559421788545, 0.478930712248939, 
    -1.60708001324568), value = 132.15510679189, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.580450178618, -14.9443359944712, 
    318.354076647154, -15.9890567879017, -14.9443359944712, 37.7567343718965, 
    -31.830017597656, -13.1063367376782, 318.354076647154, -31.830017597656, 
    6479.17539845366, -349.85182233882, -15.9890567879017, -13.1063367376782, 
    -349.85182233882, 383.561503184637), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.180483010928138, -0.281559421788545
    ), logphi = c(0.478930712248939, -1.60708001324568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_20 = structure(list(
    par = c(-0.230469071851868, -0.129144403033253, 0.463741370939357, 
    -1.6037690343412), value = 109.21344046773, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.615460544599, -8.90675623921311, 
    270.398193741528, -10.3797139541228, -8.90675623921311, 39.2881082156293, 
    -19.5385175913998, -13.2405603086028, 270.398193741528, -19.5385175913998, 
    5297.27954302217, -260.283527815375, -10.3797139541228, -13.2405603086028, 
    -260.283527815375, 307.444100837273), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.230469071851868, -0.129144403033253
    ), logphi = c(0.463741370939357, -1.6037690343412)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_21 = structure(list(
    par = c(-0.333808596987331, -0.032237969397406, 0.514715884880896, 
    -1.62687298370319), value = 117.073456969741, counts = structure(c(225L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.929343148812, -13.3381682587697, 
    353.899113989087, -33.5995723279581, -13.3381682587697, 52.8814123477162, 
    -49.2864865186959, -17.8678793609777, 353.899113989087, -49.2864865186959, 
    6895.24889732951, -589.767462628288, -33.5995723279581, -17.8678793609777, 
    -589.767462628288, 434.931088488355), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333808596987331, -0.032237969397406
    ), logphi = c(0.514715884880896, -1.62687298370319)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_22 = structure(list(
    par = c(-0.196471514255823, -0.104183812170391, 0.482491215509598, 
    -1.70542684938406), value = 93.92600471559, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.473160339202, -14.5310740613525, 
    322.282490436976, -16.0772477268978, -14.5310740613525, 43.2598540811568, 
    -28.1546626688112, -14.7175096163465, 322.282490436976, -28.1546626688112, 
    7522.34979463395, -425.772459964335, -16.0772477268978, -14.7175096163465, 
    -425.772459964335, 410.291991791212), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196471514255823, -0.104183812170391
    ), logphi = c(0.482491215509598, -1.70542684938406)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_23 = structure(list(
    par = c(-0.227605715428573, 0.00519320661124412, 0.49578635992931, 
    -1.60277787643306), value = 113.663066664998, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.356696335838, -11.1971596830074, 
    342.18406025488, -21.2638227488071, -11.1971596830074, 61.6636210324373, 
    -34.8381268082676, -18.2016386212069, 342.18406025488, -34.8381268082676, 
    6547.41782924262, -461.043036601438, -21.2638227488071, -18.2016386212069, 
    -461.043036601438, 402.929902048044), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227605715428573, 0.00519320661124412
    ), logphi = c(0.49578635992931, -1.60277787643306)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_24 = structure(list(
    par = c(-0.125971935005634, 0.026243028458601, 0.4865404508738, 
    -1.57503749527156), value = 116.412962838372, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.602659059155, -11.1464804355421, 
    270.594699760096, -10.2157192802821, -11.1464804355421, 52.8926238807514, 
    -23.8572330744091, -14.3637598046809, 270.594699760096, -23.8572330744091, 
    5132.27531059357, -308.142389252808, -10.2157192802821, -14.3637598046809, 
    -308.142389252808, 314.514879846683), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.125971935005634, 0.026243028458601
    ), logphi = c(0.4865404508738, -1.57503749527156)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_25 = structure(list(
    par = c(-0.208106783444108, 0.179990069064801, 0.47452609894747, 
    -1.69422796646576), value = 70.8418342536682, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.04518591698, -4.5861284654336, 
    307.849836509888, -9.96721900214936, -4.5861284654336, 65.1176412311827, 
    -8.90298315070481, -17.9024049913323, 307.849836509888, -8.90298315070481, 
    6835.66675310843, -390.585555997802, -9.96721900214936, -17.9024049913323, 
    -390.585555997802, 372.709924860715), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208106783444108, 0.179990069064801
    ), logphi = c(0.47452609894747, -1.69422796646576)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_26 = structure(list(
    par = c(-0.260578901435621, -0.0507785366991577, 0.499197395401249, 
    -1.65761326147083), value = 98.1862574877638, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.887164481331, -13.5759103159216, 
    319.68596496057, -22.7008873956436, -13.5759103159216, 45.0737548369773, 
    -35.8749365698685, -15.8091351316614, 319.68596496057, -35.8749365698685, 
    6690.72436787133, -473.384194645377, -22.7008873956436, -15.8091351316614, 
    -473.384194645377, 395.449729907682), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260578901435621, -0.0507785366991577
    ), logphi = c(0.499197395401249, -1.65761326147083)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_27 = structure(list(
    par = c(-0.318664708732173, -0.229729702293918, 0.501907242027199, 
    -1.60716200099775), value = 136.983333248795, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.638456086728, -13.2982137728277, 
    322.578638368043, -28.6718072217695, -13.2982137728277, 37.4844166586286, 
    -42.8441922082357, -13.8115314847198, 322.578638368043, -42.8441922082357, 
    6280.24118599768, -477.180147932188, -28.6718072217695, -13.8115314847198, 
    -477.180147932188, 392.028317101278), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318664708732173, -0.229729702293918
    ), logphi = c(0.501907242027199, -1.60716200099775)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_28 = structure(list(
    par = c(-0.278102351542371, -0.0287789010187055, 0.523030932836496, 
    -1.5624631521788), value = 127.358733122597, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.094673201431, -13.244481483099, 
    312.860890314681, -30.4681401495088, -13.244481483099, 50.0516995174394, 
    -46.0975599914093, -15.541386231277, 312.860890314681, -46.0975599914093, 
    5531.81771449829, -512.589663117069, -30.4681401495088, -15.541386231277, 
    -512.589663117069, 372.581403098593), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278102351542371, -0.0287789010187055
    ), logphi = c(0.523030932836496, -1.5624631521788)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_29 = structure(list(
    par = c(-0.0474778464402898, 0.0719501911423261, 0.478332692900966, 
    -1.58840648554127), value = 122.281138363389, counts = structure(c(149L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(165.88579971355, -12.6097789063806, 
    297.869822752261, -4.89669549352811, -12.6097789063806, 66.3741586777178, 
    -21.3942333182615, -15.7720460478572, 297.869822752261, -21.3942333182615, 
    5988.83620244806, -304.753222986065, -4.89669549352811, -15.7720460478572, 
    -304.753222986065, 356.417737499726), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0474778464402898, 0.0719501911423261
    ), logphi = c(0.478332692900966, -1.58840648554127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_30 = structure(list(
    par = c(-0.421055431575818, 0.208279619991513, 0.521313965053725, 
    -1.629607015621), value = 64.9499762648919, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.398672685923, -1.70489533957152, 
    321.915767091951, -33.1670984508037, -1.70489533957152, 71.5712693093451, 
    -37.9956112510627, -21.211649944064, 321.915767091951, -37.9956112510627, 
    5931.27376103197, -580.174332348804, -33.1670984508037, -21.211649944064, 
    -580.174332348804, 384.858778765818), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.421055431575818, 0.208279619991513
    ), logphi = c(0.521313965053725, -1.629607015621)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_31 = structure(list(
    par = c(-0.323391123992534, -0.00501526879039473, 0.504709133090105, 
    -1.59185517857382), value = 100.878219675602, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.643951708554, -8.565859491938, 
    317.024904571639, -26.9013064269075, -8.565859491938, 54.7000526651686, 
    -37.8911725640307, -17.1401848518826, 317.024904571639, -37.8911725640307, 
    5797.18375376714, -473.685544681857, -26.9013064269075, -17.1401848518826, 
    -473.685544681857, 369.752155805259), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323391123992534, -0.00501526879039473
    ), logphi = c(0.504709133090105, -1.59185517857382)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_32 = structure(list(
    par = c(-0.419206371847522, -0.307713275845349, 0.522177114104261, 
    -1.62727984099396), value = 129.771727451857, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.599154596485, -15.1039796350005, 
    347.170430629262, -42.11442300317, -15.1039796350005, 33.8010131883948, 
    -60.113628990166, -12.4559598688734, 347.170430629262, -60.113628990166, 
    7058.35960305023, -642.550035507838, -42.11442300317, -12.4559598688734, 
    -642.550035507838, 454.017985873634), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.419206371847522, -0.307713275845349
    ), logphi = c(0.522177114104261, -1.62727984099396)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_33 = structure(list(
    par = c(-0.232468042199046, -0.0361617607296489, 0.495165866157466, 
    -1.55943702325144), value = 123.133993337367, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.377715297291, -10.1801219258846, 
    307.649884454975, -19.8027319342486, -10.1801219258846, 54.2066767614813, 
    -33.1294055015974, -16.104023405461, 307.649884454975, -33.1294055015974, 
    5491.34552217367, -392.085062046021, -19.8027319342486, -16.104023405461, 
    -392.085062046021, 348.921829754545), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.232468042199046, -0.0361617607296489
    ), logphi = c(0.495165866157466, -1.55943702325144)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_34 = structure(list(
    par = c(-0.342545775242512, -0.180358985382852, 0.498609538162244, 
    -1.53522148729347), value = 145.246516134987, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.291017272721, -9.62614228683378, 
    325.325018344813, -29.0913854072983, -9.62614228683378, 46.2472295268412, 
    -41.2762522898902, -15.4263414913203, 325.325018344813, -41.2762522898902, 
    5507.17744152962, -435.792386479505, -29.0913854072983, -15.4263414913203, 
    -435.792386479505, 361.702124905605), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.342545775242512, -0.180358985382852
    ), logphi = c(0.498609538162244, -1.53522148729347)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_35 = structure(list(
    par = c(-0.313669142881098, -0.0655506202179663, 0.493639277551561, 
    -1.7476973791946), value = 87.3401011417316, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.841738957405, -14.7810014752281, 
    370.791021545358, -26.7434435983205, -14.7810014752281, 47.8150007339195, 
    -39.4914347943143, -17.5807842452969, 370.791021545358, -39.4914347943143, 
    8916.50538401834, -587.895568141761, -26.7434435983205, -17.5807842452969, 
    -587.895568141761, 476.425518726842), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.313669142881098, -0.0655506202179663
    ), logphi = c(0.493639277551561, -1.7476973791946)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_36 = structure(list(
    par = c(-0.29452497952607, -0.00577621741986267, 0.490341815100094, 
    -1.71498412621001), value = 79.6551782362544, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.006224002684, -11.5418496804409, 
    340.287556650054, -22.3365174143453, -11.5418496804409, 50.626216133054, 
    -31.1999506408256, -17.4467611202545, 340.287556650054, -31.1999506408256, 
    7709.48785664416, -508.758922386221, -22.3365174143453, -17.4467611202545, 
    -508.758922386221, 424.99945377017), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29452497952607, -0.00577621741986267
    ), logphi = c(0.490341815100094, -1.71498412621001)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_37 = structure(list(
    par = c(-0.134015941628664, 0.222377366909525, 0.462744905898059, 
    -1.66310964710676), value = 72.62727253564, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(162.814085427954, -1.49886874112326, 
    307.302671693321, -2.67780603735446, -1.49886874112326, 80.6963936881289, 
    -2.10812203249588, -17.7045593368064, 307.302671693321, -2.10812203249588, 
    6761.59212910221, -325.461241313718, -2.67780603735446, -17.7045593368064, 
    -325.461241313718, 370.272874164357), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.134015941628664, 0.222377366909525
    ), logphi = c(0.462744905898059, -1.66310964710676)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_38 = structure(list(
    par = c(-0.396995633807316, 0.0369462737286236, 0.481035312666272, 
    -1.60261674011261), value = 87.6905347008405, counts = structure(c(267L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.593201791915, -1.76339363733291, 
    284.464060186451, -20.3509467819885, -1.76339363733291, 52.0664181067332, 
    -22.1190441607177, -17.0999565618501, 284.464060186451, -22.1190441607177, 
    5159.01398686935, -369.604065681983, -20.3509467819885, -17.0999565618501, 
    -369.604065681983, 314.298067461749), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.396995633807316, 0.0369462737286236
    ), logphi = c(0.481035312666272, -1.60261674011261)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_39 = structure(list(
    par = c(-0.325727540294911, -0.15118208063787, 0.5040686382103, 
    -1.56285868240164), value = 137.349670606112, counts = structure(c(265L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.262332626301, -11.9606364066271, 
    312.243893660025, -28.3017132645114, -11.9606364066271, 41.5204768913213, 
    -41.0800073353812, -14.7566651023112, 312.243893660025, -41.0800073353812, 
    5551.93145292776, -450.215708351465, -28.3017132645114, -14.7566651023112, 
    -450.215708351465, 361.17948756953), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.325727540294911, -0.15118208063787
    ), logphi = c(0.5040686382103, -1.56285868240164)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_40 = structure(list(
    par = c(-0.287930889264251, 0.0445638432313364, 0.489622562070278, 
    -1.59759640366238), value = 96.0638732047412, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.69153429718, -7.06620890866816, 
    306.470825336191, -19.4869546525922, -7.06620890866816, 55.1632267935531, 
    -27.1749704978674, -17.5207670451982, 306.470825336191, -27.1749704978674, 
    5681.47870647095, -402.39618840765, -19.4869546525922, -17.5207670451982, 
    -402.39618840765, 349.412398637838), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287930889264251, 0.0445638432313364
    ), logphi = c(0.489622562070278, -1.59759640366238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_41 = structure(list(
    par = c(-0.363611915673708, 0.141179314223131, 0.509266759727786, 
    -1.61341326943148), value = 77.744703533989, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.184107487556, -2.29478758839718, 
    347.841500275337, -30.5835312364167, -2.29478758839718, 79.8210691641543, 
    -37.0159024924988, -21.6382118907177, 347.841500275337, -37.0159024924988, 
    6385.47942905632, -560.482519158967, -30.5835312364167, -21.6382118907177, 
    -560.482519158967, 406.958914300759), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.363611915673708, 0.141179314223131
    ), logphi = c(0.509266759727786, -1.61341326943148)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_42 = structure(list(
    par = c(-0.355824080813902, 0.0183359655689889, 0.469593999589839, 
    -1.68451374973485), value = 86.1818656705441, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.423899603637, -4.65405999960922, 
    348.831159847407, -19.7203754233044, -4.65405999960922, 57.962998543104, 
    -19.3577981200121, -19.4869903396011, 348.831159847407, -19.3577981200121, 
    7364.92694096924, -449.114633209291, -19.7203754233044, -19.4869903396011, 
    -449.114633209291, 406.939602424217), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.355824080813902, 0.0183359655689889
    ), logphi = c(0.469593999589839, -1.68451374973485)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_43 = structure(list(
    par = c(-0.352736862213812, 0.0466967987468065, 0.494586866414984, 
    -1.63051447642883), value = 101.587367727837, counts = structure(c(163L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(147.535784513764, -6.70857909312872, 
    382.114424915869, -29.3652503842168, -6.70857909312872, 68.4261999630564, 
    -36.7671706058559, -22.0191240174472, 382.114424915869, -36.7671706058559, 
    7341.99055235152, -559.666131323411, -29.3652503842168, -22.0191240174472, 
    -559.666131323411, 446.567756725358), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.352736862213812, 0.0466967987468065
    ), logphi = c(0.494586866414984, -1.63051447642883)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_44 = structure(list(
    par = c(-0.29492233752656, 0.17358911982765, 0.504843791527199, 
    -1.60134017019885), value = 90.2296969037407, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.805087792865, -3.74930142754692, 
    301.377236414879, -21.9649125945409, -3.74930142754692, 67.1541424530631, 
    -27.6141126356322, -18.9601955860041, 301.377236414879, -27.6141126356322, 
    5502.23199962474, -453.383237205784, -21.9649125945409, -18.9601955860041, 
    -453.383237205784, 348.46118324694), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.29492233752656, 0.17358911982765
    ), logphi = c(0.504843791527199, -1.60134017019885)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_45 = structure(list(
    par = c(-0.335481148554081, 0.010236732141295, 0.49629854688504, 
    -1.6246206071071), value = 99.926153710674, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.140513655481, -7.73630879535858, 
    338.811318275845, -26.277527656049, -7.73630879535858, 58.0257357256642, 
    -35.2480479790529, -18.7277524652529, 338.811318275845, -35.2480479790529, 
    6510.73008485525, -494.594962558992, -26.277527656049, -18.7277524652529, 
    -494.594962558992, 398.37044879576), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.335481148554081, 0.010236732141295
    ), logphi = c(0.49629854688504, -1.6246206071071)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_46 = structure(list(
    par = c(-0.0191265995993498, -0.046456723400043, 0.496382102805264, 
    -1.48831139796228), value = 154.353361082342, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(161.027322938878, -17.8050519465955, 
    271.472607835221, -9.25881958835362, -17.8050519465955, 53.3054302920277, 
    -31.1153513479212, -13.2534222068159, 271.472607835221, -31.1153513479212, 
    4652.47040864369, -289.029468017787, -9.25881958835362, -13.2534222068159, 
    -289.029468017787, 303.790698914952), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0191265995993498, -0.046456723400043
    ), logphi = c(0.496382102805264, -1.48831139796228)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_47 = structure(list(
    par = c(-0.393770995527687, -0.221854722138194, 0.505462926354576, 
    -1.71381551714431), value = 87.7655475503984, counts = structure(c(283L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(92.349162599703, -13.4396849915674, 
    318.329725104149, -31.1018424277165, -13.4396849915674, 32.6966214068136, 
    -47.1149552225825, -12.9283291929738, 318.329725104149, -47.1149552225825, 
    7361.32826929747, -555.800465246392, -31.1018424277165, -12.9283291929738, 
    -555.800465246392, 419.76337792704), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.393770995527687, -0.221854722138194
    ), logphi = c(0.505462926354576, -1.71381551714431)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_48 = structure(list(
    par = c(-0.420224335601084, 0.0989178046016007, 0.491997674906618, 
    -1.62648599988184), value = 79.1495908909714, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.659528575223, -2.40388122918489, 
    358.026407365486, -29.3003938587333, -2.40388122918489, 67.5004012720137, 
    -30.325400533826, -22.4424150818692, 358.026407365486, -30.325400533826, 
    6662.49943980191, -530.46524884337, -29.3003938587333, -22.4424150818692, 
    -530.46524884337, 408.325118883113), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.420224335601084, 0.0989178046016007
    ), logphi = c(0.491997674906618, -1.62648599988184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_49 = structure(list(
    par = c(-0.128600054637421, -0.141355442656208, 0.483797919516858, 
    -1.58774868573364), value = 119.906408722509, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.93569354345, -13.9429707459726, 
    284.587323704955, -11.9998307983593, -13.9429707459726, 43.3546789473382, 
    -27.9928552302522, -13.0832553395521, 284.587323704955, -27.9928552302522, 
    5613.33956716936, -314.529847216249, -11.9998307983593, -13.0832553395521, 
    -314.529847216249, 338.817133400227), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.128600054637421, -0.141355442656208
    ), logphi = c(0.483797919516858, -1.58774868573364)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_50 = structure(list(
    par = c(-0.26455888373771, -0.0445411719537462, 0.517070889253156, 
    -1.64841314644348), value = 108.290346411096, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.063804130486, -14.7287198473123, 
    329.709403050771, -28.5146726550778, -14.7287198473123, 48.8039983821409, 
    -46.3115961579774, -15.7738405839325, 329.709403050771, -46.3115961579774, 
    6789.69121396022, -549.090970030974, -28.5146726550778, -15.7738405839325, 
    -549.090970030974, 416.905910800125), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26455888373771, -0.0445411719537462
    ), logphi = c(0.517070889253156, -1.64841314644348)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_51 = structure(list(
    par = c(-0.223171824486874, -0.0145253456308792, 0.490137706949638, 
    -1.63930472666733), value = 107.359033550029, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.191812163285, -11.8087565610381, 
    315.567566236297, -17.9495667538276, -11.8087565610381, 51.0592928790743, 
    -29.5202950049145, -16.2928834548381, 315.567566236297, -29.5202950049145, 
    6452.32829264586, -420.629564654718, -17.9495667538276, -16.2928834548381, 
    -420.629564654718, 380.767223077783), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.223171824486874, -0.0145253456308792
    ), logphi = c(0.490137706949638, -1.63930472666733)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_52 = structure(list(
    par = c(-0.37445022880845, -0.259559848742656, 0.508663587347417, 
    -1.62483989556934), value = 130.183815491853, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(111.182064166826, -14.5522333596659, 
    334.808954512766, -34.4233391658122, -14.5522333596659, 34.1997887645107, 
    -49.5546253631574, -13.5802786118688, 334.808954512766, -49.5546253631574, 
    6700.82161161645, -547.536086408229, -34.4233391658122, -13.5802786118688, 
    -547.536086408229, 419.507662080321), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.37445022880845, -0.259559848742656
    ), logphi = c(0.508663587347417, -1.62483989556934)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_53 = structure(list(
    par = c(-0.21141398739169, 0.00394154141192937, 0.504934936152659, 
    -1.66731132849201), value = 106.319024293075, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.293118919018, -15.5364442591122, 
    340.238073381016, -22.617469124242, -15.5364442591122, 52.6918601551074, 
    -38.403590398417, -17.1168145790546, 340.238073381016, -38.403590398417, 
    7278.42592914385, -516.791015973794, -22.617469124242, -17.1168145790546, 
    -516.791015973794, 427.810822845487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.21141398739169, 0.00394154141192937
    ), logphi = c(0.504934936152659, -1.66731132849201)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_54 = structure(list(
    par = c(-0.275464362034229, -0.0272644885504774, 0.504370748177875, 
    -1.64857820789873), value = 112.962648078928, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.374668677215, -12.4307857127803, 
    353.781065800973, -27.1778806517631, -12.4307857127803, 56.8620308918355, 
    -42.0240168281794, -17.8938497583658, 353.781065800973, -42.0240168281794, 
    7237.16950875186, -543.608588358779, -27.1778806517631, -17.8938497583658, 
    -543.608588358779, 435.939944999575), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.275464362034229, -0.0272644885504774
    ), logphi = c(0.504370748177875, -1.64857820789873)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_55 = structure(list(
    par = c(-0.422438371678609, 0.146699498367438, 0.53404246853649, 
    -1.69977649707107), value = 67.0239435939033, counts = structure(c(193L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(104.532792828849, -11.3285209053515, 
    356.077229849205, -39.7357824724054, -11.3285209053515, 60.8276919535911, 
    -57.8980521552808, -20.2855210726938, 356.077229849205, -57.8980521552808, 
    7510.55269951095, -717.764235300677, -39.7357824724054, -20.2855210726938, 
    -717.764235300677, 458.777726780824), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.422438371678609, 0.146699498367438
    ), logphi = c(0.53404246853649, -1.69977649707107)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_56 = structure(list(
    par = c(-0.490746963980841, 0.144137164020582, 0.522049454867545, 
    -1.55327113146269), value = 81.583148359619, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(105.692161788795, -0.23008830041249, 
    279.995624556051, -33.8659102805394, -0.23008830041249, 59.6115889592852, 
    -37.1265780536589, -18.2694673949158, 279.995624556051, -37.1265780536589, 
    4519.67387243357, -491.060910434271, -33.8659102805394, -18.2694673949158, 
    -491.060910434271, 318.499812575368), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.490746963980841, 0.144137164020582
    ), logphi = c(0.522049454867545, -1.55327113146269)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_57 = structure(list(
    par = c(-0.301423127834691, -0.122220177677344, 0.505377293673356, 
    -1.64298339983786), value = 103.312547044642, counts = structure(c(159L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.668036914063, -12.1288492032079, 
    308.940025622206, -26.2175460310488, -12.1288492032079, 41.8151873446959, 
    -40.384580184849, -14.3157939103133, 308.940025622206, -40.384580184849, 
    6317.60991220176, -481.574645849747, -26.2175460310488, -14.3157939103133, 
    -481.574645849747, 383.905857184175), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301423127834691, -0.122220177677344
    ), logphi = c(0.505377293673356, -1.64298339983786)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_58 = structure(list(
    par = c(-0.251964843342203, 0.11688831350304, 0.508897797418017, 
    -1.51523910502789), value = 128.527742828697, counts = structure(c(123L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(162.048645478308, -5.62569810114155, 
    335.677301876558, -25.325306527435, -5.62569810114155, 78.9811520576222, 
    -37.3698023139468, -20.1441156093551, 335.677301876558, -37.3698023139468, 
    5405.56313293905, -469.184612480689, -25.325306527435, -20.1441156093551, 
    -469.184612480689, 366.498726641851), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251964843342203, 0.11688831350304
    ), logphi = c(0.508897797418017, -1.51523910502789)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_59 = structure(list(
    par = c(-0.235736266900104, 0.12130411342385, 0.52585885449345, 
    -1.55974246033874), value = 127.518515167304, counts = structure(c(177L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(149.160515910296, -11.1958175992299, 
    347.164954174417, -30.6347237089, -11.1958175992299, 73.5513839487112, 
    -46.7151177581115, -19.6907241889477, 347.164954174417, -46.7151177581115, 
    6033.49080708426, -571.029299248238, -30.6347237089, -19.6907241889477, 
    -571.029299248238, 409.031035609075), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.235736266900104, 0.12130411342385
    ), logphi = c(0.52585885449345, -1.55974246033874)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_60 = structure(list(
    par = c(-0.319365162256203, 0.232219792530723, 0.480692869660117, 
    -1.68964394177081), value = 51.9419946959987, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.135158294413, 0.850675714758609, 
    325.658943644669, -16.3598828333278, 0.850675714758609, 74.4170311506309, 
    -8.69907017531091, -21.0407508998145, 325.658943644669, -8.69907017531091, 
    6829.20526623576, -457.260152062489, -16.3598828333278, -21.0407508998145, 
    -457.260152062489, 381.829659179544), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319365162256203, 0.232219792530723
    ), logphi = c(0.480692869660117, -1.68964394177081)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_61 = structure(list(
    par = c(-0.411108271710643, 0.239507958096788, 0.508052543383704, 
    -1.48034478465255), value = 99.5083507010699, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.449679528071, 8.38871049779755, 
    310.294935975008, -28.880204169468, 8.38871049779755, 89.6032581714223, 
    -27.5363075594726, -22.6627283890224, 310.294935975008, -27.5363075594726, 
    4434.20036665643, -444.511856752428, -28.880204169468, -22.6627283890224, 
    -444.511856752428, 315.255238337642), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.411108271710643, 0.239507958096788
    ), logphi = c(0.508052543383704, -1.48034478465255)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_62 = structure(list(
    par = c(-0.206098323036918, -0.174760968947143, 0.505619005815682, 
    -1.63433809606674), value = 106.649935845942, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.372823418307, -14.1104129198766, 
    296.123112104141, -21.7335943819563, -14.1104129198766, 40.5442186135474, 
    -38.179389221682, -12.6592873037623, 296.123112104141, -38.179389221682, 
    6168.79081393762, -437.108756878857, -21.7335943819563, -12.6592873037623, 
    -437.108756878857, 373.757035902145), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206098323036918, -0.174760968947143
    ), logphi = c(0.505619005815682, -1.63433809606674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_63 = structure(list(
    par = c(-0.0852590162773363, -0.0101092677893637, 0.487386660452554, 
    -1.52035450644509), value = 139.664323574645, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(158.244860983814, -14.0915149771104, 
    282.822085566181, -9.48219469876221, -14.0915149771104, 55.2377176035179, 
    -27.8737316392608, -14.6464689194659, 282.822085566181, -27.8737316392608, 
    4985.9916222772, -292.996114257704, -9.48219469876221, -14.6464689194659, 
    -292.996114257704, 316.138269283783), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0852590162773363, -0.0101092677893637
    ), logphi = c(0.487386660452554, -1.52035450644509)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_64 = structure(list(
    par = c(-0.20505061703909, -0.0109492495544466, 0.503602389523304, 
    -1.50695186767399), value = 140.359960287946, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.803370493993, -10.9315664502674, 
    289.117338297729, -19.7764894735997, -10.9315664502674, 54.2521923421191, 
    -34.2732337799134, -15.3301203802414, 289.117338297729, -34.2732337799134, 
    4737.44842268076, -370.925013911005, -19.7764894735997, -15.3301203802414, 
    -370.925013911005, 316.318272226113), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.20505061703909, -0.0109492495544466
    ), logphi = c(0.503602389523304, -1.50695186767399)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_65 = structure(list(
    par = c(-0.367888873088575, 0.163933406920507, 0.504771124713897, 
    -1.54343520874515), value = 100.731696285115, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.476598539938, -0.610047756310905, 
    313.448482796019, -26.7653468455364, -0.610047756310905, 
    70.8244328500029, -30.2166606793719, -20.6730504679342, 313.448482796019, 
    -30.2166606793719, 5093.59591373126, -458.508424753035, -26.7653468455364, 
    -20.6730504679342, -458.508424753035, 341.11076908161), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.367888873088575, 0.163933406920507
    ), logphi = c(0.504771124713897, -1.54343520874515)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_66 = structure(list(
    par = c(-0.251920607563106, -0.0696120628846267, 0.503547137578178, 
    -1.62971436907944), value = 107.821268665814, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.18738533124, -13.9237981358065, 
    327.503210414193, -24.5155010905052, -13.9237981358065, 47.6766452166544, 
    -39.6001033209359, -15.9310656737688, 327.503210414193, -39.6001033209359, 
    6574.3748913718, -485.869294683638, -24.5155010905052, -15.9310656737688, 
    -485.869294683638, 401.28527944816), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.251920607563106, -0.0696120628846267
    ), logphi = c(0.503547137578178, -1.62971436907944)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_67 = structure(list(
    par = c(-0.238476920744441, -0.120707874456862, 0.492681198641196, 
    -1.70141793908283), value = 99.2308960945989, counts = structure(c(147L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.353099468114, -14.3967987753513, 
    320.021673083204, -20.5581739116667, -14.3967987753513, 40.6238265853176, 
    -34.1796200657996, -14.4606439960171, 320.021673083204, -34.1796200657996, 
    7332.32306899723, -464.396052688443, -20.5581739116667, -14.4606439960171, 
    -464.396052688443, 409.183682542391), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.238476920744441, -0.120707874456862
    ), logphi = c(0.492681198641196, -1.70141793908283)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_68 = structure(list(
    par = c(-0.242702414186216, 0.129224922577346, 0.477127525596434, 
    -1.57752625309334), value = 95.4741976956383, counts = structure(c(113L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.862006308789, -2.49183165479394, 
    305.333992113077, -12.5271387396708, -2.49183165479394, 68.9476725561633, 
    -17.7336882636325, -18.6184681361112, 305.333992113077, -17.7336882636325, 
    5533.60550244264, -343.1224535273, -12.5271387396708, -18.6184681361112, 
    -343.1224535273, 336.136913077212), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242702414186216, 0.129224922577346
    ), logphi = c(0.477127525596434, -1.57752625309334)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_69 = structure(list(
    par = c(-0.167475935973857, 0.0190279467992922, 0.493236758824073, 
    -1.60290293628441), value = 122.442665365099, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(150.775068860298, -13.3038178802281, 
    327.469013186032, -16.5300623873321, -13.3038178802281, 58.6929659966984, 
    -31.3423083078135, -17.2481007183478, 327.469013186032, -31.3423083078135, 
    6391.43602678871, -419.636358238051, -16.5300623873321, -17.2481007183478, 
    -419.636358238051, 389.227886959276), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.167475935973857, 0.0190279467992922
    ), logphi = c(0.493236758824073, -1.60290293628441)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_70 = structure(list(
    par = c(-0.397589847752661, 0.272649456397667, 0.513964541872515, 
    -1.65112319959766), value = 69.7390317962861, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.219377577845, -0.469950386161599, 
    353.630943390471, -31.4394847720223, -0.469950386161599, 
    80.9420407819061, -30.5384624255112, -24.653780407391, 353.630943390471, 
    -30.5384624255112, 6713.38332453431, -614.179372036006, -31.4394847720223, 
    -24.653780407391, -614.179372036006, 419.29881239966), .Dim = c(4L, 
    4L)), hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.397589847752661, 0.272649456397667
    ), logphi = c(0.513964541872515, -1.65112319959766)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_71 = structure(list(
    par = c(-0.260483178134234, -0.161076898691827, 0.487029163436413, 
    -1.61324093399647), value = 127.495457090994, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.170866478518, -13.2850094374248, 
    329.917996239715, -21.4894627053042, -13.2850094374248, 42.9767960739014, 
    -34.8614778715728, -15.3876352886329, 329.917996239715, -34.8614778715728, 
    6507.6685902099, -419.918756389137, -21.4894627053042, -15.3876352886329, 
    -419.918756389137, 391.429453024728), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.260483178134234, -0.161076898691827
    ), logphi = c(0.487029163436413, -1.61324093399647)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_72 = structure(list(
    par = c(-0.294917937815381, -0.228500244325841, 0.504361620233271, 
    -1.49049368501034), value = 153.841891676911, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.974002012365, -11.7113580699879, 
    285.404628577623, -25.8150636405219, -11.7113580699879, 37.4425341718165, 
    -38.2367728235522, -12.626838344687, 285.404628577623, -38.2367728235522, 
    4556.51401713197, -372.592931629612, -25.8150636405219, -12.626838344687, 
    -372.592931629612, 309.537156688577), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.294917937815381, -0.228500244325841
    ), logphi = c(0.504361620233271, -1.49049368501034)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_73 = structure(list(
    par = c(-0.412249481550622, 0.113883986270799, 0.500152833611691, 
    -1.59713556766838), value = 98.4580022417739, counts = structure(c(197L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.532277581201, -2.94587163196525, 
    342.741613170716, -30.2361474808777, -2.94587163196525, 65.9472265809313, 
    -33.2293652931526, -21.7347946325219, 342.741613170716, -33.2293652931526, 
    6072.09753586346, -521.243576429242, -30.2361474808777, -21.7347946325219, 
    -521.243576429242, 387.773164256089), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.412249481550622, 0.113883986270799
    ), logphi = c(0.500152833611691, -1.59713556766838)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_74 = structure(list(
    par = c(-0.306031060172019, -0.150247273195678, 0.5048195376018, 
    -1.65698816355238), value = 113.638909781415, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.254068239234, -15.2951080387709, 
    346.23314188309, -29.5903886602389, -15.2951080387709, 42.021803022152, 
    -45.8523121942278, -15.5012313918235, 346.23314188309, -45.8523121942278, 
    7278.2499422992, -545.504275635267, -29.5903886602389, -15.5012313918235, 
    -545.504275635267, 436.102552590967), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306031060172019, -0.150247273195678
    ), logphi = c(0.5048195376018, -1.65698816355238)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_75 = structure(list(
    par = c(-0.351597861138194, -0.0257218095135521, 0.505109763540314, 
    -1.58040461194693), value = 111.366790420267, counts = structure(c(131L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.842896814186, -9.82231949109291, 
    302.539592105688, -27.363926804469, -9.82231949109291, 45.4796901081522, 
    -37.4106119629403, -16.2559192951051, 302.539592105688, -37.4106119629403, 
    5404.45580717019, -454.77154471385, -27.363926804469, -16.2559192951051, 
    -454.77154471385, 349.580034388453), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.351597861138194, -0.0257218095135521
    ), logphi = c(0.505109763540314, -1.58040461194693)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_76 = structure(list(
    par = c(-0.358410752673566, -0.0320626608902751, 0.501256862376189, 
    -1.63576543933738), value = 96.1174984314131, counts = structure(c(175L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.510697914407, -9.04872085172315, 
    321.707477848321, -27.8324580431644, -9.04872085172315, 49.8297753530608, 
    -38.1318151738697, -16.9368702334083, 321.707477848321, -38.1318151738697, 
    6309.41432810062, -497.841098953344, -27.8324580431644, -16.9368702334083, 
    -497.841098953344, 386.45935293502), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.358410752673566, -0.0320626608902751
    ), logphi = c(0.501256862376189, -1.63576543933738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_77 = structure(list(
    par = c(-0.305117568559313, 0.089098336625406, 0.504877596563309, 
    -1.64148310480874), value = 94.8724858830071, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.792219159924, -9.10082469829376, 
    322.684016989427, -24.8540638541073, -9.10082469829376, 57.0298286817206, 
    -33.9530519646303, -18.5341842353637, 322.684016989427, -33.9530519646303, 
    6354.79264263239, -502.984987342359, -24.8540638541073, -18.5341842353637, 
    -502.984987342359, 387.823242682828), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305117568559313, 0.089098336625406
    ), logphi = c(0.504877596563309, -1.64148310480874)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_78 = structure(list(
    par = c(-0.256013969827212, -0.065229299626654, 0.492513890843158, 
    -1.69770710825626), value = 106.326630837944, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.276859508172, -15.1023158565522, 
    355.885103093811, -23.0051364411565, -15.1023158565522, 47.6885215086043, 
    -36.2302559508976, -17.1213729966979, 355.885103093811, -36.2302559508976, 
    7993.91071651812, -519.901757062513, -23.0051364411565, -17.1213729966979, 
    -519.901757062513, 448.611288685896), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256013969827212, -0.065229299626654
    ), logphi = c(0.492513890843158, -1.69770710825626)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_79 = structure(list(
    par = c(-0.265812954278612, 0.108197241411181, 0.507608154690993, 
    -1.6544919730469), value = 94.4774388912603, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.112237884423, -12.1982692959932, 
    339.776658769608, -24.6546486000199, -12.1982692959932, 58.6414263814561, 
    -35.7472048051477, -19.3201009324184, 339.776658769608, -35.7472048051477, 
    6891.23196396224, -535.17163762784, -24.6546486000199, -19.3201009324184, 
    -535.17163762784, 415.212936431431), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265812954278612, 0.108197241411181
    ), logphi = c(0.507608154690993, -1.6544919730469)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_80 = structure(list(
    par = c(-0.382906028669171, 0.0295166867742769, 0.510025780055618, 
    -1.71441794501139), value = 80.3573148407174, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.326082247464, -12.6627203442808, 
    390.908313899985, -35.730224063002, -12.6627203442808, 58.9063165072901, 
    -50.4925078068652, -20.6582618815787, 390.908313899985, -50.4925078068652, 
    8639.63598197159, -688.978380395611, -35.730224063002, -20.6582618815787, 
    -688.978380395611, 496.204161649416), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.382906028669171, 0.0295166867742769
    ), logphi = c(0.510025780055618, -1.71441794501139)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_81 = structure(list(
    par = c(-0.274084633337375, 0.0988662221139948, 0.497897675992946, 
    -1.61133986689704), value = 111.079134402491, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.167374343747, -7.56017204750492, 
    331.219648785464, -22.0848156544662, -7.56017204750492, 64.6053189825579, 
    -30.6019618854236, -19.4145509020416, 331.219648785464, -30.6019618854236, 
    6256.93142119488, -471.188533586187, -22.0848156544662, -19.4145509020416, 
    -471.188533586187, 386.183350116198), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274084633337375, 0.0988662221139948
    ), logphi = c(0.497897675992946, -1.61133986689704)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_82 = structure(list(
    par = c(-0.38272269845031, -0.0799591514039864, 0.50580406190916, 
    -1.61399211004186), value = 109.274598501909, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.446737006347, -11.2634186066884, 
    354.306087611889, -34.1582104645966, -11.2634186066884, 49.8328183198282, 
    -46.8604506309589, -17.8758318867267, 354.306087611889, -46.8604506309589, 
    6719.96776381789, -561.764257739128, -34.1582104645966, -17.8758318867267, 
    -561.764257739128, 424.376588590292), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38272269845031, -0.0799591514039864
    ), logphi = c(0.50580406190916, -1.61399211004186)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_83 = structure(list(
    par = c(-0.14220763953645, -0.172477991556582, 0.499285926054477, 
    -1.60622143890915), value = 135.098611477539, counts = structure(c(221L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.513289617629, -17.4686716079009, 
    288.730442292717, -17.0912976784621, -17.4686716079009, 36.0143490354403, 
    -34.1830271750609, -12.487408380224, 288.730442292717, -34.1830271750609, 
    5848.22070904778, -381.451874915228, -17.0912976784621, -12.487408380224, 
    -381.451874915228, 357.216761912582), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.14220763953645, -0.172477991556582
    ), logphi = c(0.499285926054477, -1.60622143890915)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_84 = structure(list(
    par = c(-0.220415612010704, 0.00615712490020789, 0.472564977970426, 
    -1.60167289069143), value = 106.705384843761, counts = structure(c(287L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(137.060903949049, -8.18739246355449, 
    287.52608915994, -11.3627291948859, -8.18739246355449, 50.285438650377, 
    -19.6659846025682, -15.6017941677078, 287.52608915994, -19.6659846025682, 
    5543.42330772783, -309.324349412776, -11.3627291948859, -15.6017941677078, 
    -309.324349412776, 327.191888459311), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220415612010704, 0.00615712490020789
    ), logphi = c(0.472564977970426, -1.60167289069143)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_85 = structure(list(
    par = c(-0.276626669381646, 0.0742089890797943, 0.49328244792322, 
    -1.59247166388131), value = 93.7124906143696, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.131664183774, -5.05568673503376, 
    308.308304294513, -19.7706068831849, -5.05568673503376, 63.1291024788538, 
    -27.7802800283666, -17.9591223350428, 308.308304294513, -27.7802800283666, 
    5661.97936140611, -413.928261984609, -19.7706068831849, -17.9591223350428, 
    -413.928261984609, 351.846779832243), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276626669381646, 0.0742089890797943
    ), logphi = c(0.49328244792322, -1.59247166388131)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_86 = structure(list(
    par = c(-0.319631529057733, -0.0278648229342254, 0.492062286109165, 
    -1.60043563304549), value = 108.873763771024, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.512938664305, -8.84586822280653, 
    303.00542924877, -22.2424336140392, -8.84586822280653, 47.0757798147758, 
    -31.0655898196899, -16.3621099780187, 303.00542924877, -31.0655898196899, 
    5643.88279627082, -412.281341139575, -22.2424336140392, -16.3621099780187, 
    -412.281341139575, 348.809704739494), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.319631529057733, -0.0278648229342254
    ), logphi = c(0.492062286109165, -1.60043563304549)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_87 = structure(list(
    par = c(-0.194037493330685, -0.101312849418449, 0.476042579002461, 
    -1.61758244464132), value = 98.9875671968375, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.044218733601, -10.2104368835398, 
    266.059841372623, -11.5881713451671, -10.2104368835398, 40.0568133933632, 
    -22.3367162561772, -12.916302296162, 266.059841372623, -22.3367162561772, 
    5373.80421837241, -295.37265462487, -11.5881713451671, -12.916302296162, 
    -295.37265462487, 314.42797922665), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.194037493330685, -0.101312849418449
    ), logphi = c(0.476042579002461, -1.61758244464132)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_88 = structure(list(
    par = c(-0.32940302585723, 0.109655869364759, 0.503740845025795, 
    -1.62371402656894), value = 83.5824480370893, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.523259165154, -5.25987240251879, 
    330.407209322203, -26.1416460887176, -5.25987240251879, 66.8655010542807, 
    -33.3865893153984, -19.7587693069323, 330.407209322203, -33.3865893153984, 
    6256.51247679215, -509.221177930286, -26.1416460887176, -19.7587693069323, 
    -509.221177930286, 388.843387213456), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.32940302585723, 0.109655869364759
    ), logphi = c(0.503740845025795, -1.62371402656894)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_89 = structure(list(
    par = c(-0.330813345074875, 0.111226668538348, 0.49059265332537, 
    -1.63987872779917), value = 81.8967170409431, counts = structure(c(121L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.492523070316, -4.34792647041604, 
    317.225337834515, -21.3000435458355, -4.34792647041604, 61.0578876880652, 
    -24.46575647852, -19.1861865133092, 317.225337834515, -24.46575647852, 
    6175.67706119004, -452.179961493826, -21.3000435458355, -19.1861865133092, 
    -452.179961493826, 369.049579230563), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330813345074875, 0.111226668538348
    ), logphi = c(0.49059265332537, -1.63987872779917)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_90 = structure(list(
    par = c(-0.322142034537979, -0.19254760380364, 0.494614664014771, 
    -1.62219784834893), value = 125.896072048769, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.833882409803, -13.2930285694499, 
    336.05510087753, -27.4100511461484, -13.2930285694499, 39.7773152300829, 
    -40.6563922936698, -15.1889965280816, 336.05510087753, -40.6563922936698, 
    6656.1720041598, -477.468550130311, -27.4100511461484, -15.1889965280816, 
    -477.468550130311, 405.184992224861), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.322142034537979, -0.19254760380364
    ), logphi = c(0.494614664014771, -1.62219784834893)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_91 = structure(list(
    par = c(-0.233135847976078, 0.172653722907204, 0.505955448775947, 
    -1.50910388903937), value = 112.75117854652, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(156.295754702995, -1.97268029822339, 
    307.416625144441, -20.6399328064322, -1.97268029822339, 82.8297625581342, 
    -30.5805881701815, -19.3513385422506, 307.416625144441, -30.5805881701815, 
    4902.1188931988, -415.770047528241, -20.6399328064322, -19.3513385422506, 
    -415.770047528241, 331.249202481843), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.233135847976078, 0.172653722907204
    ), logphi = c(0.505955448775947, -1.50910388903937)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_92 = structure(list(
    par = c(-0.27678025916471, -0.230121306609665, 0.493346127970477, 
    -1.66981180393594), value = 114.318908847149, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.031545353223, -14.6448152804624, 
    325.249203875444, -24.1560297418175, -14.6448152804624, 35.6294388552669, 
    -38.5852906816808, -13.6028239765551, 325.249203875444, -38.5852906816808, 
    7111.46118452888, -469.209726219333, -24.1560297418175, -13.6028239765551, 
    -469.209726219333, 411.543021428429), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.27678025916471, -0.230121306609665
    ), logphi = c(0.493346127970477, -1.66981180393594)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_93 = structure(list(
    par = c(-0.26994149761728, 0.042073514728789, 0.483962750059206, 
    -1.6218153925763), value = 82.4921414664326, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.706810111202, -7.42485179472396, 
    286.330397337053, -15.9755904718395, -7.42485179472396, 49.0574943441402, 
    -22.4426190449378, -16.1020032152237, 286.330397337053, -22.4426190449378, 
    5568.17828077527, -365.513749827073, -15.9755904718395, -16.1020032152237, 
    -365.513749827073, 331.622521148489), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.26994149761728, 0.042073514728789
    ), logphi = c(0.483962750059206, -1.6218153925763)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_94 = structure(list(
    par = c(-0.197077509857649, 0.097442636937722, 0.489957154307771, 
    -1.5081881829135), value = 117.849312394078, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(147.177905976292, -5.42204469411445, 
    274.098399643208, -13.2457545110043, -5.42204469411445, 63.4015157672252, 
    -24.4924810921532, -16.2815937834182, 274.098399643208, -24.4924810921532, 
    4480.0700413532, -309.714812139816, -13.2457545110043, -16.2815937834182, 
    -309.714812139816, 290.8733143272), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.197077509857649, 0.097442636937722
    ), logphi = c(0.489957154307771, -1.5081881829135)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_95 = structure(list(
    par = c(-0.284055246145098, -0.304908213615645, 0.493413006940713, 
    -1.67605276370532), value = 127.522557534724, counts = structure(c(353L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.479871200032, -16.1167735477363, 
    340.444595693157, -26.3326784484263, -16.1167735477363, 32.2988243617317, 
    -41.7862752151166, -13.1443477719984, 340.444595693157, -41.7862752151166, 
    7601.15790292204, -496.325257087094, -26.3326784484263, -13.1443477719984, 
    -496.325257087094, 437.315005527239), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.284055246145098, -0.304908213615645
    ), logphi = c(0.493413006940713, -1.67605276370532)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_96 = structure(list(
    par = c(-0.207291828814809, -0.055281204075894, 0.503064729501818, 
    -1.65504637492996), value = 124.851171913154, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.476365560081, -17.322414421983, 
    355.037672711944, -23.7450154241259, -17.322414421983, 50.7875478561459, 
    -41.3147659976687, -17.0239607193423, 355.037672711944, -41.3147659976687, 
    7518.4988082988, -525.098434103199, -23.7450154241259, -17.0239607193423, 
    -525.098434103199, 445.603047911192), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.207291828814809, -0.055281204075894
    ), logphi = c(0.503064729501818, -1.65504637492996)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_97 = structure(list(
    par = c(-0.188709663514043, -0.293617442769952, 0.492180682711774, 
    -1.64588316815025), value = 127.480341893417, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(121.649450640859, -16.532259230928, 
    308.608351275552, -19.4627488756538, -16.532259230928, 32.2390822518059, 
    -35.5501276132486, -11.9833658551727, 308.608351275552, -35.5501276132486, 
    6702.47469289364, -407.97349478261, -19.4627488756538, -11.9833658551727, 
    -407.97349478261, 392.463096858364), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.188709663514043, -0.293617442769952
    ), logphi = c(0.492180682711774, -1.64588316815025)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_98 = structure(list(
    par = c(-0.304372849283278, 0.248359888380586, 0.484871674400958, 
    -1.66866827964919), value = 52.9669169403091, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.127325113099, 2.42908556202792, 
    344.125768549475, -17.5678218461428, 2.42908556202792, 83.9690062441889, 
    -11.326697386238, -22.6089608084123, 344.125768549475, -11.326697386238, 
    6986.48739679442, -484.230202600244, -17.5678218461428, -22.6089608084123, 
    -484.230202600244, 401.223520846372), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.304372849283278, 0.248359888380586
    ), logphi = c(0.484871674400958, -1.66866827964919)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_99 = structure(list(
    par = c(-0.266583975763155, 0.204269055004669, 0.49335806319702, 
    -1.54792813808834), value = 96.0313761303365, counts = structure(c(211L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(149.065833692674, 1.96708101540821, 
    301.16114292511, -17.1395968582289, 1.96708101540821, 82.5216284070507, 
    -21.4671655633936, -19.8015540355811, 301.16114292511, -21.4671655633936, 
    5078.56577965171, -387.613900038275, -17.1395968582289, -19.8015540355811, 
    -387.613900038275, 326.658610809716), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.266583975763155, 0.204269055004669
    ), logphi = c(0.49335806319702, -1.54792813808834)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_100 = structure(list(
    par = c(-0.371293382805545, 0.0407528047547142, 0.484580274267818, 
    -1.70890617056248), value = 74.4649068393708, counts = structure(c(229L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.331006877526, -7.43894577936999, 
    336.973950034292, -23.5166060882364, -7.43894577936999, 52.5906540538301, 
    -26.0636899369615, -18.8532032119326, 336.973950034292, -26.0636899369615, 
    7346.94661023383, -502.85801487604, -23.5166060882364, -18.8532032119326, 
    -502.85801487604, 407.258878343697), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.371293382805545, 0.0407528047547142
    ), logphi = c(0.484580274267818, -1.70890617056248)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_101 = structure(list(
    par = c(-0.243264594693776, 0.119801544533004, 0.484217588020917, 
    -1.55937230529983), value = 100.849181547033, counts = structure(c(155L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.18360371135, -3.91949484424003, 
    289.09070120875, -14.0020079637537, -3.91949484424003, 63.0792470808217, 
    -20.862447843939, -17.6042090611617, 289.09070120875, -20.862447843939, 
    5068.92173743623, -339.029036975802, -14.0020079637537, -17.6042090611617, 
    -339.029036975802, 316.292049561184), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.243264594693776, 0.119801544533004
    ), logphi = c(0.484217588020917, -1.55937230529983)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_102 = structure(list(
    par = c(-0.332547919120469, 0.108204572467594, 0.499098464099236, 
    -1.63998586976998), value = 83.8537738443601, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.622355294539, -5.95278610049377, 
    331.427821690156, -24.8746560025381, -5.95278610049377, 62.6841286788249, 
    -30.7161954875568, -19.8075352493277, 331.427821690156, -30.7161954875568, 
    6446.28663355107, -502.568001754966, -24.8746560025381, -19.8075352493277, 
    -502.568001754966, 391.286465163176), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.332547919120469, 0.108204572467594
    ), logphi = c(0.499098464099236, -1.63998586976998)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_103 = structure(list(
    par = c(-0.322331559644082, 0.0899978606722577, 0.517098372067592, 
    -1.65907904204899), value = 81.1544367577963, counts = structure(c(167L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(114.943980168647, -9.63501199180428, 
    326.334921048499, -29.0774107654101, -9.63501199180428, 59.4634215040912, 
    -41.6921579855511, -18.2349764905609, 326.334921048499, -41.6921579855511, 
    6591.04208123296, -561.670601296527, -29.0774107654101, -18.2349764905609, 
    -561.670601296527, 404.362318342066), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.322331559644082, 0.0899978606722577
    ), logphi = c(0.517098372067592, -1.65907904204899)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_104 = structure(list(
    par = c(-0.435325704293396, 0.10210546975465, 0.483182599572081, 
    -1.61970597284204), value = 68.8337766684992, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.174526842324, 1.11536528990541, 
    314.002925676959, -23.821742679786, 1.11536528990541, 62.0450003445683, 
    -21.660039543292, -20.1430720601081, 314.002925676959, -21.660039543292, 
    5750.56674522045, -434.949318279365, -23.821742679786, -20.1430720601081, 
    -434.949318279365, 348.774183070333), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.435325704293396, 0.10210546975465
    ), logphi = c(0.483182599572081, -1.61970597284204)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_105 = structure(list(
    par = c(-0.314382200533579, -0.091289795546729, 0.492775580051941, 
    -1.67595720952678), value = 99.1108270065374, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.193340189838, -12.5713746754741, 
    333.842122017813, -24.8295823617184, -12.5713746754741, 43.3805684139088, 
    -36.2879879354239, -16.2267993815135, 333.842122017813, -36.2879879354239, 
    7143.86909833564, -493.524412480184, -24.8295823617184, -16.2267993815135, 
    -493.524412480184, 412.559360267295), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.314382200533579, -0.091289795546729
    ), logphi = c(0.492775580051941, -1.67595720952678)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_106 = structure(list(
    par = c(-0.357715235977614, 0.0925368941272244, 0.483924999030659, 
    -1.75410264596055), value = 60.4010984862029, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.788033455696, -6.58301570410913, 
    364.111815532198, -23.4018813820569, -6.58301570410913, 62.0603738674674, 
    -22.9732777690117, -20.5737648215631, 364.111815532198, -22.9732777690117, 
    8515.68555924942, -560.922748924497, -23.4018813820569, -20.5737648215631, 
    -560.922748924497, 447.409619745542), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357715235977614, 0.0925368941272244
    ), logphi = c(0.483924999030659, -1.75410264596055)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_107 = structure(list(
    par = c(-0.0578600581009748, 0.0226928147448105, 0.491653025591742, 
    -1.6353647574979), value = 120.185059000145, counts = structure(c(233L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(144.037903279326, -16.7482873756342, 
    296.329831471098, -9.73216698163526, -16.7482873756342, 53.0173843387161, 
    -26.6240612063484, -14.7192649766481, 296.329831471098, -26.6240612063484, 
    6376.88581027263, -367.582084493279, -9.73216698163526, -14.7192649766481, 
    -367.582084493279, 373.322598932191), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0578600581009748, 0.0226928147448105
    ), logphi = c(0.491653025591742, -1.6353647574979)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_108 = structure(list(
    par = c(-0.452076535451191, 0.14270188560467, 0.510826741724701, 
    -1.6243397267641), value = 83.1167966944636, counts = structure(c(141L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.953907700842, -3.08928447267931, 
    351.321170708019, -35.6000349306385, -3.08928447267931, 68.9912481881549, 
    -39.5050260593166, -22.5391342674186, 351.321170708019, -39.5050260593166, 
    6437.5653145774, -599.649123973478, -35.6000349306385, -22.5391342674186, 
    -599.649123973478, 412.580823834219), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.452076535451191, 0.14270188560467
    ), logphi = c(0.510826741724701, -1.6243397267641)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_109 = structure(list(
    par = c(-0.276333679075848, 0.122007809098312, 0.49644708769641, 
    -1.64833565846196), value = 99.9635321146064, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.192529219912, -8.9222071686379, 
    372.940323231319, -23.8512917150047, -8.9222071686379, 69.9969968813718, 
    -31.2632078625086, -21.9696357675048, 372.940323231319, -31.2632078625086, 
    7465.53062609934, -544.994690308442, -23.8512917150047, -21.9696357675048, 
    -544.994690308442, 444.616794993635), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.276333679075848, 0.122007809098312
    ), logphi = c(0.49644708769641, -1.64833565846196)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_110 = structure(list(
    par = c(-0.278900242601938, 0.00921566243594475, 0.481835509215946, 
    -1.51609163536341), value = 107.067559166161, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.766249836664, -3.67624450348103, 
    276.846105091266, -15.4838504862198, -3.67624450348103, 56.5946023378672, 
    -24.4426636548667, -15.9605186542677, 276.846105091266, -24.4426636548667, 
    4507.44693470995, -298.22286954051, -15.4838504862198, -15.9605186542677, 
    -298.22286954051, 288.345396629808), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278900242601938, 0.00921566243594475
    ), logphi = c(0.481835509215946, -1.51609163536341)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_111 = structure(list(
    par = c(-0.163577205675325, 0.157089658439727, 0.503436634251818, 
    -1.63636214204323), value = 110.742106915795, counts = structure(c(195L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(156.504890913567, -11.7627242808283, 
    352.972626213699, -18.5874771716499, -11.7627242808283, 74.5247132201143, 
    -31.483805177146, -20.3085832275463, 352.972626213699, -31.483805177146, 
    7144.33274192672, -511.861045389139, -18.5874771716499, -20.3085832275463, 
    -511.861045389139, 430.522324737836), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.163577205675325, 0.157089658439727
    ), logphi = c(0.503436634251818, -1.63636214204323)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_112 = structure(list(
    par = c(-0.186033969441634, -0.0498926021740135, 0.47107652383075, 
    -1.55804297454267), value = 117.156551227911, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(148.927256983455, -8.37170143341837, 
    289.56087149723, -9.97523549628454, -8.37170143341837, 53.3729167209174, 
    -22.5619744931294, -15.131078363595, 289.56087149723, -22.5619744931294, 
    5285.24863143431, -274.91664446444, -9.97523549628454, -15.131078363595, 
    -274.91664446444, 320.049239594056), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.186033969441634, -0.0498926021740135
    ), logphi = c(0.47107652383075, -1.55804297454267)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_113 = structure(list(
    par = c(-0.265600405103679, -0.184235276236341, 0.499223256437344, 
    -1.64788940059291), value = 105.676063652144, counts = structure(c(297L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.587626156431, -14.3729305435158, 
    308.575140550715, -23.6147159711209, -14.3729305435158, 36.585954241275, 
    -38.1796503603482, -13.4494450989564, 308.575140550715, -38.1796503603482, 
    6477.81405504944, -452.909857456163, -23.6147159711209, -13.4494450989564, 
    -452.909857456163, 386.02626879225), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.265600405103679, -0.184235276236341
    ), logphi = c(0.499223256437344, -1.64788940059291)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_114 = structure(list(
    par = c(-0.374283517475035, -0.16489853186722, 0.492536763354101, 
    -1.58191590279747), value = 128.488283743308, counts = structure(c(237L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.049795762308, -9.83874310378496, 
    331.122184384469, -28.8132940120533, -9.83874310378496, 43.7064460001579, 
    -39.4046445677532, -16.0809963638542, 331.122184384469, -39.4046445677532, 
    6011.19890983171, -453.387833665886, -28.8132940120533, -16.0809963638542, 
    -453.387833665886, 378.899038700808), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.374283517475035, -0.16489853186722
    ), logphi = c(0.492536763354101, -1.58191590279747)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_115 = structure(list(
    par = c(-0.293844400278752, 0.112114255651743, 0.503229926139071, 
    -1.56613382666792), value = 93.7662432025501, counts = structure(c(109L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.607008673815, -3.94808001047409, 
    293.951843829632, -22.0207832697383, -3.94808001047409, 64.3119331300568, 
    -29.794972739694, -17.7822388955917, 293.951843829632, -29.794972739694, 
    5103.41504634937, -420.386535440187, -22.0207832697383, -17.7822388955917, 
    -420.386535440187, 331.154186174132), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.293844400278752, 0.112114255651743
    ), logphi = c(0.503229926139071, -1.56613382666792)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_116 = structure(list(
    par = c(-0.542692068011621, 0.0416175431254707, 0.495136211717299, 
    -1.6029685537594), value = 73.704039367521, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.342954052101, 1.02261111223356, 
    310.988182487648, -32.6860326005374, 1.02261111223356, 58.9955258156749, 
    -33.0248499196273, -19.5509134783833, 310.988182487648, -33.0248499196273, 
    5466.67927724798, -487.97507878362, -32.6860326005374, -19.5509134783833, 
    -487.97507878362, 349.63016503653), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.542692068011621, 0.0416175431254707
    ), logphi = c(0.495136211717299, -1.6029685537594)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_117 = structure(list(
    par = c(-0.0831802845741769, 0.123423978461101, 0.495837319422836, 
    -1.54914039962624), value = 104.056161065466, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.60445836914, -10.2790399942876, 
    264.490997587075, -9.58079902702025, -10.2790399942876, 63.133586543529, 
    -24.3634022787376, -14.9269404516872, 264.490997587075, -24.3634022787376, 
    4817.57767890656, -318.504358341798, -9.58079902702025, -14.9269404516872, 
    -318.504358341798, 304.882120950367), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0831802845741769, 0.123423978461101
    ), logphi = c(0.495837319422836, -1.54914039962624)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_118 = structure(list(
    par = c(-0.454174454957419, -0.257957777915982, 0.49107535389955, 
    -1.66314880233674), value = 100.86115715563, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(95.3544316395494, -10.3642998290354, 
    304.03113862576, -29.8543565691034, -10.3642998290354, 30.1223771330683, 
    -39.4949377913179, -13.140832754388, 304.03113862576, -39.4949377913179, 
    6351.16654644463, -475.555198681477, -29.8543565691034, -13.140832754388, 
    -475.555198681477, 375.701772874493), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.454174454957419, -0.257957777915982
    ), logphi = c(0.49107535389955, -1.66314880233674)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_119 = structure(list(
    par = c(-0.323359057320172, 0.117138009079371, 0.508890063565203, 
    -1.56732448511039), value = 97.567183194983, counts = structure(c(97L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.41993166487, -5.23135051722079, 
    291.37486603048, -24.6099526144405, -5.23135051722079, 59.1216518230908, 
    -32.0203063211011, -17.7465348123462, 291.37486603048, -32.0203063211011, 
    5019.71410889723, -441.370586369061, -24.6099526144405, -17.7465348123462, 
    -441.370586369061, 330.562692482772), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.323359057320172, 0.117138009079371
    ), logphi = c(0.508890063565203, -1.56732448511039)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_120 = structure(list(
    par = c(-0.206913266561305, -0.190630339800633, 0.477678438011229, 
    -1.5715776743257), value = 128.701782452891, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.029962022135, -11.8592039513032, 
    285.175988025799, -14.1236791293409, -11.8592039513032, 38.8426175135237, 
    -27.5320082110397, -13.1538497960548, 285.175988025799, -27.5320082110397, 
    5354.14556004099, -299.465903303542, -14.1236791293409, -13.1538497960548, 
    -299.465903303542, 325.324886631506), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206913266561305, -0.190630339800633
    ), logphi = c(0.477678438011229, -1.5715776743257)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_121 = structure(list(
    par = c(-0.239305945731016, 0.0821357953565106, 0.512881632733768, 
    -1.61216539561294), value = 110.604382144737, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(133.461750380093, -11.8396115453834, 
    327.197758924314, -24.8615578506417, -11.8396115453834, 60.8419836218843, 
    -38.7449957415242, -18.1267721472977, 327.197758924314, -38.7449957415242, 
    6251.62598724671, -511.506488049207, -24.8615578506417, -18.1267721472977, 
    -511.506488049207, 394.540026857015), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.239305945731016, 0.0821357953565106
    ), logphi = c(0.512881632733768, -1.61216539561294)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_122 = structure(list(
    par = c(-0.225722101802681, 0.128755094615381, 0.507840873821317, 
    -1.61577556247624), value = 90.6205403196297, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.629119596875, -8.26535857356703, 
    293.832922956483, -19.788735137638, -8.26535857356703, 60.4414440488199, 
    -30.2460267569415, -17.0321025905196, 293.832922956483, -30.2460267569415, 
    5640.369614337, -442.950397879116, -19.788735137638, -17.0321025905196, 
    -442.950397879116, 351.296987300742), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.225722101802681, 0.128755094615381
    ), logphi = c(0.507840873821317, -1.61577556247624)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_123 = structure(list(
    par = c(-0.190234490657564, -0.0286117697671763, 0.518183591724054, 
    -1.54710200764293), value = 133.656433143836, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.688670849594, -14.5206468218362, 
    307.781055632006, -24.7578093492962, -14.5206468218362, 53.5507108594402, 
    -42.2529146391071, -15.1555195984088, 307.781055632006, -42.2529146391071, 
    5427.64119164474, -463.536874832471, -24.7578093492962, -15.1555195984088, 
    -463.536874832471, 362.213359615282), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.190234490657564, -0.0286117697671763
    ), logphi = c(0.518183591724054, -1.54710200764293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_124 = structure(list(
    par = c(-0.372387676298137, 0.14971544075799, 0.486276761415435, 
    -1.6257845900442), value = 89.7772749453301, counts = structure(c(187L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(153.872064139193, 0.226807330250267, 
    373.901073256633, -25.2139724921108, 0.226807330250267, 79.1055546542907, 
    -23.6237225195168, -24.0945528169334, 373.901073256633, -23.6237225195168, 
    6995.54334193664, -519.59546282454, -25.2139724921108, -24.0945528169334, 
    -519.59546282454, 421.987336924445), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.372387676298137, 0.14971544075799
    ), logphi = c(0.486276761415435, -1.6257845900442)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_125 = structure(list(
    par = c(-0.23292139645403, -0.181397053060234, 0.481393431411223, 
    -1.62718782774946), value = 126.035584382974, counts = structure(c(129L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.611831107075, -13.0973239365062, 
    313.325567656619, -17.827601807241, -13.0973239365062, 40.2793541596225, 
    -30.7299321455901, -14.2188415264144, 313.325567656619, -30.7299321455901, 
    6401.43880642796, -378.281273128778, -17.827601807241, -14.2188415264144, 
    -378.281273128778, 375.99701632729), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.23292139645403, -0.181397053060234
    ), logphi = c(0.481393431411223, -1.62718782774946)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_126 = structure(list(
    par = c(-0.3686082931651, -0.023894172193579, 0.495400572830365, 
    -1.58058869293517), value = 103.63688230248, counts = structure(c(133L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.456226383771, -6.90093062871711, 
    317.045356933221, -26.5462702380148, -6.90093062871711, 51.3856607824437, 
    -34.6357059939351, -17.5765240566506, 317.045356933221, -34.6357059939351, 
    5632.70822480888, -444.473106007592, -26.5462702380148, -17.5765240566506, 
    -444.473106007592, 357.969770117705), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3686082931651, -0.023894172193579
    ), logphi = c(0.495400572830365, -1.58058869293517)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_127 = structure(list(
    par = c(-0.252555511917461, 0.122909818447878, 0.504910874884872, 
    -1.62853631330562), value = 94.2426574983411, counts = structure(c(93L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.695107492722, -8.63858605626433, 
    315.137802882504, -21.57602100894, -8.63858605626433, 61.4403919172446, 
    -31.142623637237, -18.3644772349112, 315.137802882504, -31.142623637237, 
    6136.93882883837, -475.452394596232, -21.57602100894, -18.3644772349112, 
    -475.452394596232, 376.935307471626), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252555511917461, 0.122909818447878
    ), logphi = c(0.504910874884872, -1.62853631330562)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_128 = structure(list(
    par = c(-0.215506369291263, -0.0994127677466305, 0.485649983920758, 
    -1.7038132054419), value = 90.7666125489381, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.533804392257, -13.7421135235627, 
    325.650137739331, -17.8543082789417, -13.7421135235627, 45.4345167462122, 
    -30.1372367310648, -15.0166482484337, 325.650137739331, -30.1372367310648, 
    7523.54353880946, -445.110537338422, -17.8543082789417, -15.0166482484337, 
    -445.110537338422, 413.701056579896), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.215506369291263, -0.0994127677466305
    ), logphi = c(0.485649983920758, -1.7038132054419)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_129 = structure(list(
    par = c(-0.263893920381743, -0.188614681842143, 0.494515165279212, 
    -1.58510292526184), value = 107.781741222425, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(115.611486709355, -10.7773792485943, 
    280.646538097784, -20.6331988845676, -10.7773792485943, 38.7119094433785, 
    -33.1891424849573, -12.7258028932431, 280.646538097784, -33.1891424849573, 
    5292.37533872262, -369.19679370051, -20.6331988845676, -12.7258028932431, 
    -369.19679370051, 329.80862910037), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.263893920381743, -0.188614681842143
    ), logphi = c(0.494515165279212, -1.58510292526184)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_130 = structure(list(
    par = c(-0.420663708601015, 0.0579114171460793, 0.518702107568635, 
    -1.62578393509815), value = 99.5659429728723, counts = structure(c(189L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(118.244220281838, -8.73011392954481, 
    347.053448475521, -37.2680903346634, -8.73011392954481, 57.6349483587535, 
    -48.7826329411689, -19.6595745158845, 347.053448475521, -48.7826329411689, 
    6529.59706845024, -615.73753880495, -37.2680903346634, -19.6595745158845, 
    -615.73753880495, 421.438284650577), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.420663708601015, 0.0579114171460793
    ), logphi = c(0.518702107568635, -1.62578393509815)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_131 = structure(list(
    par = c(-0.272826004951881, 0.0588097443533642, 0.50856666070435, 
    -1.58571549655127), value = 106.819021323135, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.025832767444, -8.10394528727443, 
    311.073441366716, -24.4902680961445, -8.10394528727443, 61.3945017455819, 
    -36.1514374667138, -17.4326890114429, 311.073441366716, -36.1514374667138, 
    5652.88142526654, -467.063784451938, -24.4902680961445, -17.4326890114429, 
    -467.063784451938, 363.519203578022), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.272826004951881, 0.0588097443533642
    ), logphi = c(0.50856666070435, -1.58571549655127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_132 = structure(list(
    par = c(-0.127506694519507, 0.178369394112946, 0.468827046416434, 
    -1.64266550440173), value = 82.4937316007365, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(149.09592915302, -5.13621037612211, 
    284.794729001447, -4.3277437171696, -5.13621037612211, 67.2770194292127, 
    -8.5609865223546, -16.27023356221, 284.794729001447, -8.5609865223546, 
    6050.04891489003, -306.017559470462, -4.3277437171696, -16.27023356221, 
    -306.017559470462, 340.802043048427), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.127506694519507, 0.178369394112946
    ), logphi = c(0.468827046416434, -1.64266550440173)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_133 = structure(list(
    par = c(-0.248849166703973, 0.00678107864374711, 0.497790058869669, 
    -1.49875600941243), value = 127.450774520768, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.754028151477, -7.31558644417873, 
    288.929124717896, -19.7274868707353, -7.31558644417873, 57.2263870424194, 
    -31.846184263884, -16.0919709095708, 288.929124717896, -31.846184263884, 
    4598.07983546767, -354.36922438592, -19.7274868707353, -16.0919709095708, 
    -354.36922438592, 306.408107395129), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.248849166703973, 0.00678107864374711
    ), logphi = c(0.497790058869669, -1.49875600941243)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_134 = structure(list(
    par = c(-0.181088633488207, 0.215119007437923, 0.505517785016565, 
    -1.61997024184366), value = 83.517181771454, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(139.348953652529, -7.8401844803011, 
    307.261661522062, -16.7898373177877, -7.8401844803011, 71.0296848289715, 
    -25.6552558184353, -18.8025611898013, 307.261661522062, -25.6552558184353, 
    5971.40641972871, -452.106564127419, -16.7898373177877, -18.8025611898013, 
    -452.106564127419, 367.573062959536), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.181088633488207, 0.215119007437923
    ), logphi = c(0.505517785016565, -1.61997024184366)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_135 = structure(list(
    par = c(-0.166253059942384, -0.0741995449852291, 0.500339577284616, 
    -1.64555768284037), value = 113.383870716224, counts = structure(c(255L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.144539482453, -15.4827456562145, 
    306.756109758055, -18.2894462632532, -15.4827456562145, 46.3389341867071, 
    -34.5810822324211, -14.3763173490186, 306.756109758055, -34.5810822324211, 
    6497.00262497888, -431.793364482402, -18.2894462632532, -14.3763173490186, 
    -431.793364482402, 385.243356113563), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.166253059942384, -0.0741995449852291
    ), logphi = c(0.500339577284616, -1.64555768284037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_136 = structure(list(
    par = c(-0.347709654343181, -0.226680694522033, 0.499084509963638, 
    -1.63161006614784), value = 108.811020097437, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.201419942195, -12.3703602952219, 
    312.027875928322, -28.0291730518911, -12.3703602952219, 35.225598946198, 
    -40.8807264236088, -13.4627736656512, 312.027875928322, -40.8807264236088, 
    6288.53769516624, -470.738962098594, -28.0291730518911, -13.4627736656512, 
    -470.738962098594, 383.621597467965), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.347709654343181, -0.226680694522033
    ), logphi = c(0.499084509963638, -1.63161006614784)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_137 = structure(list(
    par = c(-0.28213821970367, 0.0515985286587657, 0.502475508792738, 
    -1.66164909537572), value = 81.2826472967229, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.554534595869, -10.6334202492064, 
    335.557206874171, -24.3907651977793, -10.6334202492064, 56.8741373569992, 
    -35.3909059320756, -18.3092532974882, 335.557206874171, -35.3909059320756, 
    6917.85289929925, -517.05943057101, -24.3907651977793, -18.3092532974882, 
    -517.05943057101, 410.821510246961), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.28213821970367, 0.0515985286587657
    ), logphi = c(0.502475508792738, -1.66164909537572)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_138 = structure(list(
    par = c(-0.399683778191658, 0.115833995504381, 0.486319247955239, 
    -1.6041764335815), value = 89.701785766099, counts = structure(c(183L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.18149175854, 0.270751407072112, 
    340.002545744511, -24.8929285895372, 0.270751407072112, 68.8830539523622, 
    -24.4886844278369, -21.7979245835664, 340.002545744511, -24.4886844278369, 
    6114.25561972823, -466.397193610746, -24.8929285895372, -21.7979245835664, 
    -466.397193610746, 376.741791679791), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.399683778191658, 0.115833995504381
    ), logphi = c(0.486319247955239, -1.6041764335815)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_139 = structure(list(
    par = c(-0.194707096569369, -0.0189971732366134, 0.48371006247189, 
    -1.68088843755421), value = 87.368727410712, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.517352881601, -12.3036645085506, 
    295.579480344088, -14.0052703887505, -12.3036645085506, 44.796000786107, 
    -23.8790592028693, -14.7512242687498, 295.579480344088, -23.8790592028693, 
    6554.65085589313, -385.61982425378, -14.0052703887505, -14.7512242687498, 
    -385.61982425378, 367.167054523776), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.194707096569369, -0.0189971732366134
    ), logphi = c(0.48371006247189, -1.68088843755421)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_140 = structure(list(
    par = c(-0.38947573995807, 0.129832892866836, 0.511749561260676, 
    -1.59770441060589), value = 84.5699585699344, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.261134151813, -4.36911167156495, 
    318.534512803836, -30.2730633539028, -4.36911167156495, 62.9281748913968, 
    -36.2732017400447, -19.8460381675147, 318.534512803836, -36.2732017400447, 
    5670.10799793266, -520.411437886281, -30.2730633539028, -19.8460381675147, 
    -520.411437886281, 369.682898615054), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.38947573995807, 0.129832892866836
    ), logphi = c(0.511749561260676, -1.59770441060589)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_141 = structure(list(
    par = c(-0.172289573436211, -0.00835394061953976, 0.482809647433594, 
    -1.62977119327953), value = 102.493782263897, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(136.696642591971, -11.4392317414058, 
    299.823053762083, -12.8540371271413, -11.4392317414058, 51.4497723322904, 
    -24.5691868556719, -15.4080797649669, 299.823053762083, -24.5691868556719, 
    6153.32426418647, -361.143286262688, -12.8540371271413, -15.4080797649669, 
    -361.143286262688, 360.093588515298), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.172289573436211, -0.00835394061953976
    ), logphi = c(0.482809647433594, -1.62977119327953)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_142 = structure(list(
    par = c(-0.369911656329016, -0.132589514568417, 0.504302185845926, 
    -1.58140229420481), value = 108.98014045012, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(110.191719354447, -9.70993186300007, 
    293.089348797793, -28.1767060776872, -9.70993186300007, 39.6184213968809, 
    -39.0078673184746, -14.2055759901893, 293.089348797793, -39.0078673184746, 
    5312.22789815899, -441.68791728616, -28.1767060776872, -14.2055759901893, 
    -441.68791728616, 342.89874738036), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.369911656329016, -0.132589514568417
    ), logphi = c(0.504302185845926, -1.58140229420481)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_143 = structure(list(
    par = c(-0.161923849044175, 0.148425163492767, 0.472769775342087, 
    -1.61008886017678), value = 101.962158306316, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(164.647969143061, -6.1649281555276, 
    318.390034632188, -7.85122909263691, -6.1649281555276, 70.9739509225926, 
    -14.5905647137567, -18.5670497536705, 318.390034632188, -14.5905647137567, 
    6300.57400875828, -344.368782290161, -7.85122909263691, -18.5670497536705, 
    -344.368782290161, 368.170060951911), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.161923849044175, 0.148425163492767
    ), logphi = c(0.472769775342087, -1.61008886017678)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_144 = structure(list(
    par = c(-0.368922807573621, 0.10796454438306, 0.512832762670878, 
    -1.63990496890141), value = 94.6924835951736, counts = structure(c(165L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.068872953691, -8.00828372859996, 
    356.74965572241, -32.8928732997724, -8.00828372859996, 65.3913244086368, 
    -42.4780110073186, -21.0972121212905, 356.74965572241, -42.4780110073186, 
    6877.18503754198, -602.024484139818, -32.8928732997724, -21.0972121212905, 
    -602.024484139818, 430.175685465883), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.368922807573621, 0.10796454438306
    ), logphi = c(0.512832762670878, -1.63990496890141)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_145 = structure(list(
    par = c(-0.436275203249746, 0.117888186268211, 0.518091417660643, 
    -1.60084389482037), value = 74.7347718708715, counts = structure(c(217L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.709240884825, -3.60654943420968, 
    299.70127627621, -32.341905688682, -3.60654943420968, 60.3439557984586, 
    -38.8693520285699, -18.4596326313624, 299.70127627621, -38.8693520285699, 
    5327.88727305089, -522.26209579942, -32.341905688682, -18.4596326313624, 
    -522.26209579942, 354.846499526218), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.436275203249746, 0.117888186268211
    ), logphi = c(0.518091417660643, -1.60084389482037)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_146 = structure(list(
    par = c(-0.196977645182938, 0.221976507661326, 0.500179835359339, 
    -1.66054947997361), value = 78.4912110994305, counts = structure(c(169L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(145.824925585458, -7.90230308211903, 
    336.821581448987, -17.1543315659051, -7.90230308211903, 74.5605874570288, 
    -23.269622477784, -20.5532559078847, 336.821581448987, -23.269622477784, 
    6968.48142645123, -496.622519268186, -17.1543315659051, -20.5532559078847, 
    -496.622519268186, 409.587456182692), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.196977645182938, 0.221976507661326
    ), logphi = c(0.500179835359339, -1.66054947997361)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_147 = structure(list(
    par = c(-0.357296109340754, 0.0491912425093416, 0.514980717134985, 
    -1.56419081732178), value = 104.042530530614, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.636214728, -6.58322046476201, 
    320.705846039715, -31.5152373033811, -6.58322046476201, 60.8381845950134, 
    -41.8065689409275, -18.2636042005413, 320.705846039715, -41.8065689409275, 
    5505.51384689513, -512.873917813295, -31.5152373033811, -18.2636042005413, 
    -512.873917813295, 369.292664281318), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.357296109340754, 0.0491912425093416
    ), logphi = c(0.514980717134985, -1.56419081732178)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_148 = structure(list(
    par = c(-0.287079063560843, -0.16397336972754, 0.501061123205707, 
    -1.61807044835365), value = 121.278836881898, counts = structure(c(179L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.966556908466, -14.2233997877383, 
    325.188578269575, -26.4291112550552, -14.2233997877383, 40.1352516590237, 
    -41.0863786655113, -14.7330888218278, 325.188578269575, -41.0863786655113, 
    6431.89062354921, -475.653058195746, -26.4291112550552, -14.7330888218278, 
    -475.653058195746, 396.018087357675), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.287079063560843, -0.16397336972754
    ), logphi = c(0.501061123205707, -1.61807044835365)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_149 = structure(list(
    par = c(-0.33995140945692, 0.0432983088014459, 0.509949889856092, 
    -1.60844463543738), value = 114.248523612651, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(130.336949510479, -10.4273424383905, 
    342.435815948505, -30.6630188902091, -10.4273424383905, 58.1542318833783, 
    -41.9340344883778, -19.1676344805103, 342.435815948505, -41.9340344883778, 
    6368.65240064566, -545.512067445131, -30.6630188902091, -19.1676344805103, 
    -545.512067445131, 406.077068969779), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33995140945692, 0.0432983088014459
    ), logphi = c(0.509949889856092, -1.60844463543738)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_150 = structure(list(
    par = c(-0.41404319773683, -0.0299740792517219, 0.505727217238987, 
    -1.53482200245814), value = 127.975177807084, counts = structure(c(185L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.409724025223, -6.5208053428023, 
    312.061406518183, -31.7241009852864, -6.5208053428023, 50.6102917263718, 
    -39.7560833107491, -17.3658607085514, 312.061406518183, -39.7560833107491, 
    5081.67963581485, -461.310814436899, -31.7241009852864, -17.3658607085514, 
    -461.310814436899, 343.495049584419), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.41404319773683, -0.0299740792517219
    ), logphi = c(0.505727217238987, -1.53482200245814)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_151 = structure(list(
    par = c(-0.2187526739709, -0.0823306206302689, 0.507430310452324, 
    -1.50002418819104), value = 147.44180257291, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(146.783537708473, -11.648965781319, 
    306.486632197789, -23.6617879139089, -11.648965781319, 55.0899775788594, 
    -39.4719278702382, -15.1353965733847, 306.486632197789, -39.4719278702382, 
    4983.23436513459, -405.273305524645, -23.6617879139089, -15.1353965733847, 
    -405.273305524645, 336.921779471311), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.2187526739709, -0.0823306206302689
    ), logphi = c(0.507430310452324, -1.50002418819104)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_152 = structure(list(
    par = c(-0.296394038900032, -0.142059534150703, 0.496704865866638, 
    -1.60709189054552), value = 123.86537383929, counts = structure(c(251L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(125.910314380917, -11.645037439223, 
    322.676918226961, -25.2736806913845, -11.645037439223, 45.0654910792991, 
    -38.474898133245, -15.2546017098132, 322.676918226961, -38.474898133245, 
    6222.3839365636, -452.655804071611, -25.2736806913845, -15.2546017098132, 
    -452.655804071611, 384.236750598177), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.296394038900032, -0.142059534150703
    ), logphi = c(0.496704865866638, -1.60709189054552)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_153 = structure(list(
    par = c(-0.337757648231637, 0.232781727303169, 0.499389749878679, 
    -1.4487002973615), value = 97.1104745355699, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(152.337042223394, 7.7596151903947, 
    277.133157410958, -20.3380012386845, 7.7596151903947, 85.0402930971939, 
    -22.5112913909697, -19.7767198848453, 277.133157410958, -22.5112913909697, 
    3841.66948232689, -344.143032148025, -20.3380012386845, -19.7767198848453, 
    -344.143032148025, 268.957583863028), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.337757648231637, 0.232781727303169
    ), logphi = c(0.499389749878679, -1.4487002973615)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_154 = structure(list(
    par = c(-0.080455480304889, -0.194992929936471, 0.489927638160932, 
    -1.58515068070115), value = 135.422833916318, counts = structure(c(199L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.083406298975, -17.8745483054854, 
    277.968027688758, -11.8088357794477, -17.8745483054854, 37.1257809206327, 
    -29.9531985206158, -11.864171963083, 277.968027688758, -29.9531985206158, 
    5584.93669963411, -315.76156719737, -11.8088357794477, -11.864171963083, 
    -315.76156719737, 339.818696531324), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.080455480304889, -0.194992929936471
    ), logphi = c(0.489927638160932, -1.58515068070115)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_155 = structure(list(
    par = c(-0.206613572879256, 0.119108312157351, 0.467897579641628, 
    -1.66987480049704), value = 68.3084130161711, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.503423025962, -5.45746890878718, 
    301.801994471163, -8.82908479837852, -5.45746890878718, 61.0556261051443, 
    -10.3346384889846, -16.9982512563394, 301.801994471163, -10.3346384889846, 
    6504.65488792307, -347.399135229409, -8.82908479837852, -16.9982512563394, 
    -347.399135229409, 359.109189197682), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.206613572879256, 0.119108312157351
    ), logphi = c(0.467897579641628, -1.66987480049704)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_156 = structure(list(
    par = c(-0.220691652289836, 0.242595383444617, 0.514961027868003, 
    -1.67317219596896), value = 69.7305338715157, counts = structure(c(171L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.59834907231, -8.94127650852283, 
    334.07711793032, -21.915434786024, -8.94127650852283, 72.3680862542153, 
    -30.4693917989596, -20.5912954349685, 334.07711793032, -30.4693917989596, 
    6931.74042824651, -549.928832679569, -21.915434786024, -20.5912954349685, 
    -549.928832679569, 412.942015671547), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.220691652289836, 0.242595383444617
    ), logphi = c(0.514961027868003, -1.67317219596896)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_157 = structure(list(
    par = c(-0.359593338203791, -0.0810497814697632, 0.508365008400476, 
    -1.52841427936788), value = 110.348535975454, counts = structure(c(201L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(109.701192329226, -6.9522933721089, 
    265.03072845685, -26.0697806595545, -6.9522933721089, 42.678780548755, 
    -35.4480506352672, -13.6267499826204, 265.03072845685, -35.4480506352672, 
    4358.37257138161, -387.978154021695, -26.0697806595545, -13.6267499826204, 
    -387.978154021695, 295.101706104361), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.359593338203791, -0.0810497814697632
    ), logphi = c(0.508365008400476, -1.52841427936788)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_158 = structure(list(
    par = c(-0.306846983861798, 0.0983871148941473, 0.501120803562922, 
    -1.55525078297649), value = 96.309133692542, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.893730306449, -2.50893300801636, 
    298.154892309554, -22.5362533683438, -2.50893300801636, 67.5809918284642, 
    -30.0662894332504, -18.0523387118825, 298.154892309554, -30.0662894332504, 
    5073.42451403403, -416.406322027996, -22.5362533683438, -18.0523387118825, 
    -416.406322027996, 330.911380320487), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.306846983861798, 0.0983871148941473
    ), logphi = c(0.501120803562922, -1.55525078297649)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_159 = structure(list(
    par = c(-0.318418084897937, -0.024581775977555, 0.50443339795115, 
    -1.72177277110484), value = 92.0315564640889, counts = structure(c(191L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.174149932965, -13.5325907244521, 
    398.373273704067, -31.9135784785374, -13.5325907244521, 60.6849374804597, 
    -48.2825772252227, -19.6329843902276, 398.373273704067, -48.2825772252227, 
    9115.94234537461, -662.12071651961, -31.9135784785374, -19.6329843902276, 
    -662.12071651961, 510.369064421923), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.318418084897937, -0.024581775977555
    ), logphi = c(0.50443339795115, -1.72177277110484)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_160 = structure(list(
    par = c(-0.167094384326357, 0.00860125830361462, 0.484606469251086, 
    -1.63018875581347), value = 103.4777031046, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(143.689334016983, -12.7023566278694, 
    314.602289087418, -13.5328885662034, -12.7023566278694, 53.3875046322407, 
    -25.9127644639534, -16.3340377934418, 314.602289087418, -25.9127644639534, 
    6457.06490913156, -385.057128491795, -13.5328885662034, -16.3340377934418, 
    -385.057128491795, 378.718801059108), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.167094384326357, 0.00860125830361462
    ), logphi = c(0.484606469251086, -1.63018875581347)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_161 = structure(list(
    par = c(-0.280192623140753, -0.00424106415905886, 0.504600392508744, 
    -1.54981854176781), value = 130.700580106822, counts = structure(c(119L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(135.50580293753, -11.1047952131571, 
    309.925975237491, -24.641280049309, -11.1047952131571, 51.7256087420037, 
    -36.8141414810452, -16.7670615738302, 309.925975237491, -36.8141414810452, 
    5336.39347626291, -435.210327598412, -24.641280049309, -16.7670615738302, 
    -435.210327598412, 350.026464182918), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.280192623140753, -0.00424106415905886
    ), logphi = c(0.504600392508744, -1.54981854176781)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_162 = structure(list(
    par = c(-0.256640076220696, 0.212269132488449, 0.508302844344607, 
    -1.57850355429189), value = 87.4459385413608, counts = structure(c(107L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.70654898534, -3.35025233155761, 
    293.678762165683, -20.3817449886401, -3.35025233155761, 71.0642408954243, 
    -26.8110978289826, -18.8487957633043, 293.678762165683, -26.8110978289826, 
    5193.0822943973, -438.251149683211, -20.3817449886401, -18.8487957633043, 
    -438.251149683211, 336.238454408999), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.256640076220696, 0.212269132488449
    ), logphi = c(0.508302844344607, -1.57850355429189)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_163 = structure(list(
    par = c(-0.33832712279499, 0.0595735689066166, 0.509976951177829, 
    -1.64775709155635), value = 84.3287997403586, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.753313581659, -9.72248334463188, 
    327.129959789119, -28.4956391745084, -9.72248334463188, 54.8907279060984, 
    -39.3154351101543, -18.25266912725, 327.129959789119, -39.3154351101543, 
    6487.17679041155, -537.912504519511, -28.4956391745084, -18.25266912725, 
    -537.912504519511, 398.502814135782), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.33832712279499, 0.0595735689066166
    ), logphi = c(0.509976951177829, -1.64775709155635)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_164 = structure(list(
    par = c(-0.262298706004016, 0.0875811574563494, 0.488877924410827, 
    -1.65618478208478), value = 74.0421043048904, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(120.479241687121, -5.80202783595496, 
    292.318936914171, -16.6165684643005, -5.80202783595496, 57.0788285401136, 
    -22.284269480366, -16.652318494792, 292.318936914171, -22.284269480366, 
    5992.52611919354, -403.844312666379, -16.6165684643005, -16.652318494792, 
    -403.844312666379, 349.044709611945), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.262298706004016, 0.0875811574563494
    ), logphi = c(0.488877924410827, -1.65618478208478)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_165 = structure(list(
    par = c(-0.252709561741318, -0.157977574972237, 0.515272193268762, 
    -1.53053832897513), value = 133.403735831237, counts = structure(c(173L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(113.222067419372, -12.5861671946836, 
    266.356923553701, -24.4638381765583, -12.5861671946836, 37.2721041941304, 
    -38.0465759022286, -11.8834980291638, 266.356923553701, -38.0465759022286, 
    4572.56422009067, -394.729770150093, -24.4638381765583, -11.8834980291638, 
    -394.729770150093, 308.668424835901), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.252709561741318, -0.157977574972237
    ), logphi = c(0.515272193268762, -1.53053832897513)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_166 = structure(list(
    par = c(-0.191565612955906, -0.10644873700389, 0.532875102218901, 
    -1.58005413866422), value = 135.073735136208, counts = structure(c(157L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(116.28768844929, -17.4529455989614, 
    296.340107475146, -28.2554694166492, -17.4529455989614, 42.3879681079598, 
    -47.9270522646402, -12.5719869643603, 296.340107475146, -47.9270522646402, 
    5596.00023318296, -509.925760081131, -28.2554694166492, -12.5719869643603, 
    -509.925760081131, 372.659577529078), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.191565612955906, -0.10644873700389
    ), logphi = c(0.532875102218901, -1.58005413866422)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_167 = structure(list(
    par = c(-0.254019755547543, -0.109115611478069, 0.511725068991802, 
    -1.5250897984533), value = 117.974303640422, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.958186502345, -10.6418123593244, 
    273.248774611545, -23.809070196279, -10.6418123593244, 44.8596287725422, 
    -37.2045102423613, -13.0254219961046, 273.248774611545, -37.2045102423613, 
    4609.96723674612, -391.245466975221, -23.809070196279, -13.0254219961046, 
    -391.245466975221, 310.506653896425), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.254019755547543, -0.109115611478069
    ), logphi = c(0.511725068991802, -1.5250897984533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_168 = structure(list(
    par = c(-0.214891039881011, 0.0534790228002449, 0.492426464803662, 
    -1.5931973490616), value = 99.3638441977308, counts = structure(c(137L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(140.070948514648, -8.45003025773394, 
    306.819317078322, -16.9511755405694, -8.45003025773394, 60.4612044128316, 
    -28.0039801516807, -17.0864254727121, 306.819317078322, -28.0039801516807, 
    5772.85202135869, -396.660220925327, -16.9511755405694, -17.0864254727121, 
    -396.660220925327, 355.575048764933), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.214891039881011, 0.0534790228002449
    ), logphi = c(0.492426464803662, -1.5931973490616)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_169 = structure(list(
    par = c(-0.380686618967537, -0.0930039080362664, 0.509549652607493, 
    -1.5781755131568), value = 119.235876654939, counts = structure(c(227L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.108743722928, -10.294033440772, 
    333.107408792443, -33.7416443851879, -10.294033440772, 48.4533267055554, 
    -46.0560214108341, -16.6383973763118, 333.107408792443, -46.0560214108341, 
    5959.98104654427, -523.779635205557, -33.7416443851879, -16.6383973763118, 
    -523.779635205557, 390.65331353072), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.380686618967537, -0.0930039080362664
    ), logphi = c(0.509549652607493, -1.5781755131568)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_170 = structure(list(
    par = c(-0.213842450819767, 0.0382496266030427, 0.488861036623156, 
    -1.51825994473181), value = 119.288200971689, counts = structure(c(117L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(142.160230328869, -7.68103289061628, 
    276.159967949496, -14.4513690081283, -7.68103289061628, 55.2223639509464, 
    -26.0118180257507, -15.7043696233927, 276.159967949496, -26.0118180257507, 
    4592.40432251562, -312.700192843351, -14.4513690081283, -15.7043696233927, 
    -312.700192843351, 295.960973645037), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.213842450819767, 0.0382496266030427
    ), logphi = c(0.488861036623156, -1.51825994473181)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_171 = structure(list(
    par = c(-0.234311282729029, 0.0432463942051855, 0.516512105662856, 
    -1.63361254439985), value = 106.150916018118, counts = structure(c(143L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.594254966762, -14.1009838863226, 
    359.105587612873, -28.4311071609977, -14.1009838863226, 63.7126028131263, 
    -46.2278166182273, -18.7748287672207, 359.105587612873, -46.2278166182273, 
    7162.31473043294, -581.746324833432, -28.4311071609977, -18.7748287672207, 
    -581.746324833432, 444.954001075359), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.234311282729029, 0.0432463942051855
    ), logphi = c(0.516512105662856, -1.63361254439985)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_172 = structure(list(
    par = c(-0.631805910621406, -0.235340259422412, 0.504812259875327, 
    -1.66960757740533), value = 87.0161679664874, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(79.0266806198758, -8.33725845339472, 
    302.118920433969, -39.9737959533297, -8.33725845339472, 30.8314189574332, 
    -51.6792414089196, -13.0222860175166, 302.118920433969, -51.6792414089196, 
    6301.02481217065, -579.999965255595, -39.9737959533297, -13.0222860175166, 
    -579.999965255595, 389.602933349664), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.631805910621406, -0.235340259422412
    ), logphi = c(0.504812259875327, -1.66960757740533)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_173 = structure(list(
    par = c(-0.333227946372848, -0.152077022853596, 0.517917556902376, 
    -1.63660921215121), value = 117.978722435373, counts = structure(c(259L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(112.504101149824, -13.8502125643925, 
    336.312490102131, -33.9589862807799, -13.8502125643925, 43.9871666344516, 
    -51.8569555154613, -14.6099224789253, 336.312490102131, -51.8569555154613, 
    6819.67524403149, -578.511577902674, -33.9589862807799, -14.6099224789253, 
    -578.511577902674, 427.415451738966), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.333227946372848, -0.152077022853596
    ), logphi = c(0.517917556902376, -1.63660921215121)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_174 = structure(list(
    par = c(-0.199723526155273, 0.0902272142497048, 0.4974714163936, 
    -1.71044359936652), value = 74.0329691405374, counts = structure(c(203L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.277565959678, -13.0276597545276, 
    330.277157281955, -17.9195698102319, -13.0276597545276, 56.5796564728771, 
    -28.2413580663388, -17.6198280357198, 330.277157281955, -28.2413580663388, 
    7532.29911054376, -492.162968278365, -17.9195698102319, -17.6198280357198, 
    -492.162968278365, 417.923858879732), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.199723526155273, 0.0902272142497048
    ), logphi = c(0.4974714163936, -1.71044359936652)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_175 = structure(list(
    par = c(-0.208278780941234, -0.0625730098598756, 0.498559162410763, 
    -1.60982308233802), value = 126.550858188734, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(128.753789830682, -13.7361837140304, 
    304.66719582023, -19.6069794657916, -13.7361837140304, 45.6860406714554, 
    -34.1107681229857, -14.9830014350982, 304.66719582023, -34.1107681229857, 
    5986.54610236693, -417.359686178287, -19.6069794657916, -14.9830014350982, 
    -417.359686178287, 366.953404142834), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.208278780941234, -0.0625730098598756
    ), logphi = c(0.498559162410763, -1.60982308233802)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_176 = structure(list(
    par = c(-0.216414708089489, 0.141616461451514, 0.49149826727332, 
    -1.65148563020541), value = 88.634017497643, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.490799848043, -8.08332418955615, 
    326.177809853334, -16.3593919264571, -8.08332418955615, 66.3192716103822, 
    -23.132712023255, -19.0213667377037, 326.177809853334, -23.132712023255, 
    6691.16487076593, -449.415044089463, -16.3593919264571, -19.0213667377037, 
    -449.415044089463, 391.673991948949), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.216414708089489, 0.141616461451514
    ), logphi = c(0.49149826727332, -1.65148563020541)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_177 = structure(list(
    par = c(-0.103917022823646, 0.183488347560011, 0.497100523198175, 
    -1.55721365813321), value = 105.602632979976, counts = structure(c(125L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.034913201897, -8.55730930382492, 
    281.575520606481, -10.6223321338916, -8.55730930382492, 70.3647181410361, 
    -23.6155766799584, -16.7343505559359, 281.575520606481, -23.6155766799584, 
    5123.73800552979, -352.639556719936, -10.6223321338916, -16.7343505559359, 
    -352.639556719936, 324.151826394115), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.103917022823646, 0.183488347560011
    ), logphi = c(0.497100523198175, -1.55721365813321)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_178 = structure(list(
    par = c(-0.242485709336575, -0.136637202608119, 0.491306043186843, 
    -1.62721118659344), value = 120.440355957012, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.255362514324, -14.0510564179408, 
    332.848105539796, -21.7474157793163, -14.0510564179408, 45.0446208262179, 
    -36.1128500721009, -15.540495841293, 332.848105539796, -36.1128500721009, 
    6737.07263103651, -443.258893168874, -21.7474157793163, -15.540495841293, 
    -443.258893168874, 402.841753199823), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.242485709336575, -0.136637202608119
    ), logphi = c(0.491306043186843, -1.62721118659344)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_179 = structure(list(
    par = c(-0.3024311719489, 0.0180275393039785, 0.533065493150281, 
    -1.52911298001177), value = 128.071284133277, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.022507678656, -12.2137229396913, 
    316.265121490744, -35.0691476143083, -12.2137229396913, 55.705538834161, 
    -50.0297835230867, -16.1934042886003, 316.265121490744, -50.0297835230867, 
    5213.42797048874, -547.047468486994, -35.0691476143083, -16.1934042886003, 
    -547.047468486994, 370.779697469459), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.3024311719489, 0.0180275393039785
    ), logphi = c(0.533065493150281, -1.52911298001177)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_180 = structure(list(
    par = c(-0.148280759384087, -0.0654215857854057, 0.523027341910168, 
    -1.4941001090705), value = 121.667968439459, counts = structure(c(101L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(119.77868376789, -13.6699021524578, 
    246.49865513382, -20.3008216761447, -13.6699021524578, 43.1425683871112, 
    -35.7300843809583, -11.4868061231732, 246.49865513382, -35.7300843809583, 
    4037.67456958448, -362.958999140517, -20.3008216761447, -11.4868061231732, 
    -362.958999140517, 281.055256316165), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.148280759384087, -0.0654215857854057
    ), logphi = c(0.523027341910168, -1.4941001090705)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_181 = structure(list(
    par = c(-0.331424500854154, -0.138741109520719, 0.504916351881344, 
    -1.60038199134745), value = 126.410205051415, counts = structure(c(207L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.045577627882, -12.2801437640874, 
    340.194793444937, -30.8671432094343, -12.2801437640874, 46.5837233925015, 
    -45.0893328363122, -16.0068305348204, 340.194793444937, -45.0893328363122, 
    6435.9261377227, -515.637719573192, -30.8671432094343, -16.0068305348204, 
    -515.637719573192, 407.653091890836), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.331424500854154, -0.138741109520719
    ), logphi = c(0.504916351881344, -1.60038199134745)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_182 = structure(list(
    par = c(-0.344887064659257, -0.00220667173936558, 0.525821119621029, 
    -1.5984045098773), value = 117.393131998046, counts = structure(c(181L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(117.768953831643, -12.7562956002691, 
    328.140666923105, -35.0212328577015, -12.7562956002691, 51.4916288523182, 
    -50.5944963258287, -16.7387828167165, 328.140666923105, -50.5944963258287, 
    6057.55759083948, -578.624132288041, -35.0212328577015, -16.7387828167165, 
    -578.624132288041, 401.540952388757), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.344887064659257, -0.00220667173936558
    ), logphi = c(0.525821119621029, -1.5984045098773)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_183 = structure(list(
    par = c(-0.301821346674969, 0.0456883154896378, 0.527048104231924, 
    -1.58829232439237), value = 112.711894182765, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(127.151828625216, -10.4788372716769, 
    334.300777570462, -33.5847114811827, -10.4788372716769, 63.0949970208405, 
    -49.5700551361722, -17.7216164800598, 334.300777570462, -49.5700551361722, 
    6070.64773369714, -579.355239320734, -33.5847114811827, -17.7216164800598, 
    -579.355239320734, 405.203605396309), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.301821346674969, 0.0456883154896378
    ), logphi = c(0.527048104231924, -1.58829232439237)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_184 = structure(list(
    par = c(-0.378526586173658, 0.0965035563605958, 0.468829938397781, 
    -1.59421215248293), value = 90.1291713052707, counts = structure(c(245L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(147.88125520937, 2.64974948294139, 
    328.611982446603, -17.8770368357561, 2.64974948294139, 67.5604978184197, 
    -15.6800291613024, -20.7948005659375, 328.611982446603, -15.6800291613024, 
    5876.77177845336, -374.580037302508, -17.8770368357561, -20.7948005659375, 
    -374.580037302508, 350.911892738281), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.378526586173658, 0.0965035563605958
    ), logphi = c(0.468829938397781, -1.59421215248293)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_185 = structure(list(
    par = c(-0.274022703735748, -0.0184387988184687, 0.485995636326366, 
    -1.62262466858965), value = 98.06416851453, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(131.947246934772, -9.27592053301396, 
    315.305271588073, -19.1637519471044, -9.27592053301396, 50.5766873466484, 
    -28.3584433979911, -16.812708166114, 315.305271588073, -28.3584433979911, 
    6174.99812750211, -409.023796322572, -19.1637519471044, -16.812708166114, 
    -409.023796322572, 368.849026266105), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.274022703735748, -0.0184387988184687
    ), logphi = c(0.485995636326366, -1.62262466858965)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_186 = structure(list(
    par = c(-0.160845662677589, -0.128038720096552, 0.498337135606465, 
    -1.631259967234), value = 115.1020685427, counts = structure(c(103L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(126.890744244434, -15.9068685015029, 
    302.971949381003, -17.9532416630934, -15.9068685015029, 42.5041076113075, 
    -34.6461891069794, -13.6206653156279, 302.971949381003, -34.6461891069794, 
    6325.01096708893, -412.072321388735, -17.9532416630934, -13.6206653156279, 
    -412.072321388735, 378.416118291369), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.160845662677589, -0.128038720096552
    ), logphi = c(0.498337135606465, -1.631259967234)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_187 = structure(list(
    par = c(-0.129092156234244, 0.0503731580182564, 0.481561770081581, 
    -1.66239904950388), value = 107.08151050811, counts = structure(c(145L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(153.641465683307, -13.3311319814311, 
    331.736807638094, -11.0366057359812, -13.3311319814311, 60.5553643957535, 
    -22.864342170692, -17.2085231433527, 331.736807638094, -22.864342170692, 
    7270.73965890313, -404.425376977713, -11.0366057359812, -17.2085231433527, 
    -404.425376977713, 410.945038431976), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.129092156234244, 0.0503731580182564
    ), logphi = c(0.481561770081581, -1.66239904950388)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_188 = structure(list(
    par = c(-0.0191140217888959, 0.082149440752193, 0.493631701221467, 
    -1.62316897310882), value = 106.868565418462, counts = structure(c(139L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(144.826520788399, -15.9175279605961, 
    280.87839957891, -7.42410463949739, -15.9175279605961, 57.9362062858024, 
    -24.5202308981618, -14.4591300532682, 280.87839957891, -24.5202308981618, 
    5982.59204048546, -346.089622720314, -7.42410463949739, -14.4591300532682, 
    -346.089622720314, 354.153506716415), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.0191140217888959, 0.082149440752193
    ), logphi = c(0.493631701221467, -1.62316897310882)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_189 = structure(list(
    par = c(-0.353531079260936, 0.0169515320411995, 0.489282970795573, 
    -1.66543157507282), value = 85.5428795677027, counts = structure(c(393L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(122.905658695771, -7.14806094492815, 
    332.639953509073, -24.2735037652153, -7.14806094492815, 54.3616034853756, 
    -30.1660938184511, -18.4460655674457, 332.639953509073, -30.1660938184511, 
    6804.00444131379, -485.531136261486, -24.2735037652153, -18.4460655674457, 
    -485.531136261486, 396.67881845773), .Dim = c(4L, 4L)), hr = function (y, 
        x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.353531079260936, 0.0169515320411995
    ), logphi = c(0.489282970795573, -1.66543157507282)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_190 = structure(list(
    par = c(-0.308684911652777, 0.365488189490311, 0.494313894607054, 
    -1.54218145476921), value = 75.0671293719149, counts = structure(c(209L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(157.000387897455, 12.4609960927557, 
    302.915460256514, -16.680512681333, 12.4609960927557, 101.719608540662, 
    -10.0535407447921, -22.984966978612, 302.915460256514, -10.0535407447921, 
    4922.9692217132, -406.765289238109, -16.680512681333, -22.984966978612, 
    -406.765289238109, 321.165023425607), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.308684911652777, 0.365488189490311
    ), logphi = c(0.494313894607054, -1.54218145476921)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_191 = structure(list(
    par = c(-0.237589057945883, 0.0461705941418525, 0.497657329271062, 
    -1.62950125051521), value = 92.5378668831276, counts = structure(c(99L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(124.237672562089, -8.31846838522665, 
    298.541673078745, -18.8611121032523, -8.31846838522665, 57.2419649493838, 
    -29.3233026944506, -16.2937097858418, 298.541673078745, -29.3233026944506, 
    5920.41519542619, -422.799978537114, -18.8611121032523, -16.2937097858418, 
    -422.799978537114, 357.798468794357), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.237589057945883, 0.0461705941418525
    ), logphi = c(0.497657329271062, -1.62950125051521)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_192 = structure(list(
    par = c(-0.127396123889664, 0.0941219278001996, 0.4725290869408, 
    -1.6245283678208), value = 93.5729788321436, counts = structure(c(105L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(151.548827940218, -8.56663428194793, 
    295.751500779318, -6.62902997561332, -8.56663428194793, 62.6601376545466, 
    -15.8780960042293, -16.1839223640214, 295.751500779318, -15.8780960042293, 
    6108.82916021183, -316.028104816013, -6.62902997561332, -16.1839223640214, 
    -316.028104816013, 351.752876639466), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.127396123889664, 0.0941219278001996
    ), logphi = c(0.4725290869408, -1.6245283678208)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_193 = structure(list(
    par = c(-0.227152835319927, 0.00537037964703806, 0.476716153809671, 
    -1.63199661945952), value = 104.500356775899, counts = structure(c(111L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.826450569951, -9.64897907707041, 
    310.479765207816, -13.8992031608609, -9.64897907707041, 51.7784681974831, 
    -22.1962051121238, -16.5875828272988, 310.479765207816, -22.1962051121238, 
    6272.36737667758, -366.054332932464, -13.8992031608609, -16.5875828272988, 
    -366.054332932464, 364.152478052659), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.227152835319927, 0.00537037964703806
    ), logphi = c(0.476716153809671, -1.63199661945952)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_194 = structure(list(
    par = c(-0.278072734987193, 0.0066791542916885, 0.485754778624814, 
    -1.57351144995117), value = 108.801954677933, counts = structure(c(127L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(141.896263961883, -6.27586394585933, 
    313.286502393595, -18.8533829170723, -6.27586394585933, 58.1678975599687, 
    -28.0748810190801, -17.5196807159494, 313.286502393595, -28.0748810190801, 
    5623.61229918906, -382.143195444939, -18.8533829170723, -17.5196807159494, 
    -382.143195444939, 349.132856925394), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.278072734987193, 0.0066791542916885
    ), logphi = c(0.485754778624814, -1.57351144995117)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_195 = structure(list(
    par = c(-0.454259949879668, 0.0186502656076448, 0.497407693264163, 
    -1.58239415962127), value = 96.7365525865768, counts = structure(c(253L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(123.001330287309, -3.48154057050465, 
    322.347637997211, -31.0064263597809, -3.48154057050465, 55.2518279590686, 
    -35.399967629246, -19.1923594439203, 322.347637997211, -35.399967629246, 
    5594.54777719637, -480.548937577652, -31.0064263597809, -19.1923594439203, 
    -480.548937577652, 360.794971903999), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.454259949879668, 0.0186502656076448
    ), logphi = c(0.497407693264163, -1.58239415962127)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_196 = structure(list(
    par = c(-0.386054143190453, 0.0970056032358883, 0.513460868055686, 
    -1.68556320449078), value = 88.3916295721416, counts = structure(c(223L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(129.239145593374, -11.126287105867, 
    394.501145745352, -36.8213847750098, -11.126287105867, 64.9603364379914, 
    -48.946876692213, -22.620559768427, 394.501145745352, -48.946876692213, 
    8199.23722853844, -695.561194763883, -36.8213847750098, -22.620559768427, 
    -695.561194763883, 490.174289140555), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.386054143190453, 0.0970056032358883
    ), logphi = c(0.513460868055686, -1.68556320449078)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_197 = structure(list(
    par = c(-0.305503660331592, -0.0694695245561821, 0.470657662941747, 
    -1.61331763209772), value = 104.128734980649, counts = structure(c(161L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(134.748112497363, -6.69542919595756, 
    311.864511139959, -16.665838273866, -6.69542919595756, 49.4455077664213, 
    -23.4103759879645, -16.4513121809762, 311.864511139959, -23.4103759879645, 
    6001.4488792568, -350.420217689162, -16.665838273866, -16.4513121809762, 
    -350.420217689162, 351.991710360267), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.305503660331592, -0.0694695245561821
    ), logphi = c(0.470657662941747, -1.61331763209772)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_198 = structure(list(
    par = c(-0.330843420650203, 0.0902269251666098, 0.514072216643029, 
    -1.61030330857424), value = 110.890878000124, counts = structure(c(151L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(132.809900417641, -10.4624004819698, 
    347.323237601671, -31.2430843685263, -10.4624004819698, 61.0941700998069, 
    -42.4958269178433, -20.0861981838329, 347.323237601671, -42.4958269178433, 
    6447.02612964565, -568.076737337719, -31.2430843685263, -20.0861981838329, 
    -568.076737337719, 413.502405951505), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330843420650203, 0.0902269251666098
    ), logphi = c(0.514072216643029, -1.61030330857424)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_199 = structure(list(
    par = c(-0.330381140893528, 0.408098693026457, 0.491732105435809, 
    -1.63028144702197), value = 40.2044338073176, counts = structure(c(213L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(138.612987989006, 13.3576684397951, 
    300.186756696519, -15.5572704585438, 13.3576684397951, 98.9730606093531, 
    -0.540536596815855, -22.8507538828637, 300.186756696519, 
    -0.540536596815855, 5584.67851224975, -440.178955050996, 
    -15.5572704585438, -22.8507538828637, -440.178955050996, 
    338.429015073416), .Dim = c(4L, 4L)), hr = function (y, x, 
        b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.330381140893528, 0.408098693026457
    ), logphi = c(0.491732105435809, -1.63028144702197)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi")), n_300_200 = structure(list(
    par = c(-0.135300954000863, 0.227225595462682, 0.509976082416387, 
    -1.56319633847064), value = 102.430302790071, counts = structure(c(115L, 
    NA), .Names = c("function", "gradient")), convergence = 0L, 
    message = NULL, hessian = structure(c(149.649122892725, -7.76098825028271, 
    297.218954894873, -15.7448679320993, -7.76098825028271, 77.1110036517086, 
    -27.9675304959426, -18.293764801669, 297.218954894873, -27.9675304959426, 
    5329.60352245482, -424.895072777431, -15.7448679320993, -18.293764801669, 
    -424.895072777431, 345.388675395242), .Dim = c(4L, 4L)), 
    hr = function (y, x, b) 
    {
        if (length(b) != 2) {
            cat(b, "\n")
            stop("b must be vector of length 2.")
        }
        theta = exp(b)
        return(theta[1] * y * (y^2 + x^2)^(-(theta[2] + 3)/2))
    }, pi.x = function (x, logphi, w) 
    {
        if (length(logphi) != 2) {
            cat(logphi, "\n")
            stop("logphi must be vector of length 2.")
        }
        if (any(x > w)) 
            stop("x can't be greater than w")
        mu = logphi[1]
        sigma = exp(logphi[2])
        f = dnorm(x, mean = mu, sd = sigma)/(pnorm(w, mean = mu, 
            sd = sigma) - pnorm(0, mean = mu, sd = sigma))
        return(f)
    }, ystart = 3, w = 1, b = c(-0.135300954000863, 0.227225595462682
    ), logphi = c(0.509976082416387, -1.56319633847064)), .Names = c("par", 
"value", "counts", "convergence", "message", "hessian", "hr", 
"pi.x", "ystart", "w", "b", "logphi"))), .Names = c("n_30_1", 
"n_30_2", "n_30_3", "n_30_4", "n_30_5", "n_30_6", "n_30_7", "n_30_8", 
"n_30_9", "n_30_10", "n_30_11", "n_30_12", "n_30_13", "n_30_14", 
"n_30_15", "n_30_16", "n_30_17", "n_30_18", "n_30_19", "n_30_20", 
"n_30_21", "n_30_22", "n_30_23", "n_30_24", "n_30_25", "n_30_26", 
"n_30_27", "n_30_28", "n_30_29", "n_30_30", "n_30_31", "n_30_32", 
"n_30_33", "n_30_34", "n_30_35", "n_30_36", "n_30_37", "n_30_38", 
"n_30_39", "n_30_40", "n_30_41", "n_30_42", "n_30_43", "n_30_44", 
"n_30_45", "n_30_46", "n_30_47", "n_30_48", "n_30_49", "n_30_50", 
"n_30_51", "n_30_52", "n_30_53", "n_30_54", "n_30_55", "n_30_56", 
"n_30_57", "n_30_58", "n_30_59", "n_30_60", "n_30_61", "n_30_62", 
"n_30_63", "n_30_64", "n_30_65", "n_30_66", "n_30_67", "n_30_68", 
"n_30_69", "n_30_70", "n_30_71", "n_30_72", "n_30_73", "n_30_74", 
"n_30_75", "n_30_76", "n_30_77", "n_30_78", "n_30_79", "n_30_80", 
"n_30_81", "n_30_82", "n_30_83", "n_30_84", "n_30_85", "n_30_86", 
"n_30_87", "n_30_88", "n_30_89", "n_30_90", "n_30_91", "n_30_92", 
"n_30_93", "n_30_94", "n_30_95", "n_30_96", "n_30_97", "n_30_98", 
"n_30_99", "n_30_100", "n_30_101", "n_30_102", "n_30_103", "n_30_104", 
"n_30_105", "n_30_106", "n_30_107", "n_30_108", "n_30_109", "n_30_110", 
"n_30_111", "n_30_112", "n_30_113", "n_30_114", "n_30_115", "n_30_116", 
"n_30_117", "n_30_118", "n_30_119", "n_30_120", "n_30_121", "n_30_122", 
"n_30_123", "n_30_124", "n_30_125", "n_30_126", "n_30_127", "n_30_128", 
"n_30_129", "n_30_130", "n_30_131", "n_30_132", "n_30_133", "n_30_134", 
"n_30_135", "n_30_136", "n_30_137", "n_30_138", "n_30_139", "n_30_140", 
"n_30_141", "n_30_142", "n_30_143", "n_30_144", "n_30_145", "n_30_146", 
"n_30_147", "n_30_148", "n_30_149", "n_30_150", "n_30_151", "n_30_152", 
"n_30_153", "n_30_154", "n_30_155", "n_30_156", "n_30_157", "n_30_158", 
"n_30_159", "n_30_160", "n_30_161", "n_30_162", "n_30_163", "n_30_164", 
"n_30_165", "n_30_166", "n_30_167", "n_30_168", "n_30_169", "n_30_170", 
"n_30_171", "n_30_172", "n_30_173", "n_30_174", "n_30_175", "n_30_176", 
"n_30_177", "n_30_178", "n_30_179", "n_30_180", "n_30_181", "n_30_182", 
"n_30_183", "n_30_184", "n_30_185", "n_30_186", "n_30_187", "n_30_188", 
"n_30_189", "n_30_190", "n_30_191", "n_30_192", "n_30_193", "n_30_194", 
"n_30_195", "n_30_196", "n_30_197", "n_30_198", "n_30_199", "n_30_200", 
"n_60_1", "n_60_2", "n_60_3", "n_60_4", "n_60_5", "n_60_6", "n_60_7", 
"n_60_8", "n_60_9", "n_60_10", "n_60_11", "n_60_12", "n_60_13", 
"n_60_14", "n_60_15", "n_60_16", "n_60_17", "n_60_18", "n_60_19", 
"n_60_20", "n_60_21", "n_60_22", "n_60_23", "n_60_24", "n_60_25", 
"n_60_26", "n_60_27", "n_60_28", "n_60_29", "n_60_30", "n_60_31", 
"n_60_32", "n_60_33", "n_60_34", "n_60_35", "n_60_36", "n_60_37", 
"n_60_38", "n_60_39", "n_60_40", "n_60_41", "n_60_42", "n_60_43", 
"n_60_44", "n_60_45", "n_60_46", "n_60_47", "n_60_48", "n_60_49", 
"n_60_50", "n_60_51", "n_60_52", "n_60_53", "n_60_54", "n_60_55", 
"n_60_56", "n_60_57", "n_60_58", "n_60_59", "n_60_60", "n_60_61", 
"n_60_62", "n_60_63", "n_60_64", "n_60_65", "n_60_66", "n_60_67", 
"n_60_68", "n_60_69", "n_60_70", "n_60_71", "n_60_72", "n_60_73", 
"n_60_74", "n_60_75", "n_60_76", "n_60_77", "n_60_78", "n_60_79", 
"n_60_80", "n_60_81", "n_60_82", "n_60_83", "n_60_84", "n_60_85", 
"n_60_86", "n_60_87", "n_60_88", "n_60_89", "n_60_90", "n_60_91", 
"n_60_92", "n_60_93", "n_60_94", "n_60_95", "n_60_96", "n_60_97", 
"n_60_98", "n_60_99", "n_60_100", "n_60_101", "n_60_102", "n_60_103", 
"n_60_104", "n_60_105", "n_60_106", "n_60_107", "n_60_108", "n_60_109", 
"n_60_110", "n_60_111", "n_60_112", "n_60_113", "n_60_114", "n_60_115", 
"n_60_116", "n_60_117", "n_60_118", "n_60_119", "n_60_120", "n_60_121", 
"n_60_122", "n_60_123", "n_60_124", "n_60_125", "n_60_126", "n_60_127", 
"n_60_128", "n_60_129", "n_60_130", "n_60_131", "n_60_132", "n_60_133", 
"n_60_134", "n_60_135", "n_60_136", "n_60_137", "n_60_138", "n_60_139", 
"n_60_140", "n_60_141", "n_60_142", "n_60_143", "n_60_144", "n_60_145", 
"n_60_146", "n_60_147", "n_60_148", "n_60_149", "n_60_150", "n_60_151", 
"n_60_152", "n_60_153", "n_60_154", "n_60_155", "n_60_156", "n_60_157", 
"n_60_158", "n_60_159", "n_60_160", "n_60_161", "n_60_162", "n_60_163", 
"n_60_164", "n_60_165", "n_60_166", "n_60_167", "n_60_168", "n_60_169", 
"n_60_170", "n_60_171", "n_60_172", "n_60_173", "n_60_174", "n_60_175", 
"n_60_176", "n_60_177", "n_60_178", "n_60_179", "n_60_180", "n_60_181", 
"n_60_182", "n_60_183", "n_60_184", "n_60_185", "n_60_186", "n_60_187", 
"n_60_188", "n_60_189", "n_60_190", "n_60_191", "n_60_192", "n_60_193", 
"n_60_194", "n_60_195", "n_60_196", "n_60_197", "n_60_198", "n_60_199", 
"n_60_200", "n_90_1", "n_90_2", "n_90_3", "n_90_4", "n_90_5", 
"n_90_6", "n_90_7", "n_90_8", "n_90_9", "n_90_10", "n_90_11", 
"n_90_12", "n_90_13", "n_90_14", "n_90_15", "n_90_16", "n_90_17", 
"n_90_18", "n_90_19", "n_90_20", "n_90_21", "n_90_22", "n_90_23", 
"n_90_24", "n_90_25", "n_90_26", "n_90_27", "n_90_28", "n_90_29", 
"n_90_30", "n_90_31", "n_90_32", "n_90_33", "n_90_34", "n_90_35", 
"n_90_36", "n_90_37", "n_90_38", "n_90_39", "n_90_40", "n_90_41", 
"n_90_42", "n_90_43", "n_90_44", "n_90_45", "n_90_46", "n_90_47", 
"n_90_48", "n_90_49", "n_90_50", "n_90_51", "n_90_52", "n_90_53", 
"n_90_54", "n_90_55", "n_90_56", "n_90_57", "n_90_58", "n_90_59", 
"n_90_60", "n_90_61", "n_90_62", "n_90_63", "n_90_64", "n_90_65", 
"n_90_66", "n_90_67", "n_90_68", "n_90_69", "n_90_70", "n_90_71", 
"n_90_72", "n_90_73", "n_90_74", "n_90_75", "n_90_76", "n_90_77", 
"n_90_78", "n_90_79", "n_90_80", "n_90_81", "n_90_82", "n_90_83", 
"n_90_84", "n_90_85", "n_90_86", "n_90_87", "n_90_88", "n_90_89", 
"n_90_90", "n_90_91", "n_90_92", "n_90_93", "n_90_94", "n_90_95", 
"n_90_96", "n_90_97", "n_90_98", "n_90_99", "n_90_100", "n_90_101", 
"n_90_102", "n_90_103", "n_90_104", "n_90_105", "n_90_106", "n_90_107", 
"n_90_108", "n_90_109", "n_90_110", "n_90_111", "n_90_112", "n_90_113", 
"n_90_114", "n_90_115", "n_90_116", "n_90_117", "n_90_118", "n_90_119", 
"n_90_120", "n_90_121", "n_90_122", "n_90_123", "n_90_124", "n_90_125", 
"n_90_126", "n_90_127", "n_90_128", "n_90_129", "n_90_130", "n_90_131", 
"n_90_132", "n_90_133", "n_90_134", "n_90_135", "n_90_136", "n_90_137", 
"n_90_138", "n_90_139", "n_90_140", "n_90_141", "n_90_142", "n_90_143", 
"n_90_144", "n_90_145", "n_90_146", "n_90_147", "n_90_148", "n_90_149", 
"n_90_150", "n_90_151", "n_90_152", "n_90_153", "n_90_154", "n_90_155", 
"n_90_156", "n_90_157", "n_90_158", "n_90_159", "n_90_160", "n_90_161", 
"n_90_162", "n_90_163", "n_90_164", "n_90_165", "n_90_166", "n_90_167", 
"n_90_168", "n_90_169", "n_90_170", "n_90_171", "n_90_172", "n_90_173", 
"n_90_174", "n_90_175", "n_90_176", "n_90_177", "n_90_178", "n_90_179", 
"n_90_180", "n_90_181", "n_90_182", "n_90_183", "n_90_184", "n_90_185", 
"n_90_186", "n_90_187", "n_90_188", "n_90_189", "n_90_190", "n_90_191", 
"n_90_192", "n_90_193", "n_90_194", "n_90_195", "n_90_196", "n_90_197", 
"n_90_198", "n_90_199", "n_90_200", "n_120_1", "n_120_2", "n_120_3", 
"n_120_4", "n_120_5", "n_120_6", "n_120_7", "n_120_8", "n_120_9", 
"n_120_10", "n_120_11", "n_120_12", "n_120_13", "n_120_14", "n_120_15", 
"n_120_16", "n_120_17", "n_120_18", "n_120_19", "n_120_20", "n_120_21", 
"n_120_22", "n_120_23", "n_120_24", "n_120_25", "n_120_26", "n_120_27", 
"n_120_28", "n_120_29", "n_120_30", "n_120_31", "n_120_32", "n_120_33", 
"n_120_34", "n_120_35", "n_120_36", "n_120_37", "n_120_38", "n_120_39", 
"n_120_40", "n_120_41", "n_120_42", "n_120_43", "n_120_44", "n_120_45", 
"n_120_46", "n_120_47", "n_120_48", "n_120_49", "n_120_50", "n_120_51", 
"n_120_52", "n_120_53", "n_120_54", "n_120_55", "n_120_56", "n_120_57", 
"n_120_58", "n_120_59", "n_120_60", "n_120_61", "n_120_62", "n_120_63", 
"n_120_64", "n_120_65", "n_120_66", "n_120_67", "n_120_68", "n_120_69", 
"n_120_70", "n_120_71", "n_120_72", "n_120_73", "n_120_74", "n_120_75", 
"n_120_76", "n_120_77", "n_120_78", "n_120_79", "n_120_80", "n_120_81", 
"n_120_82", "n_120_83", "n_120_84", "n_120_85", "n_120_86", "n_120_87", 
"n_120_88", "n_120_89", "n_120_90", "n_120_91", "n_120_92", "n_120_93", 
"n_120_94", "n_120_95", "n_120_96", "n_120_97", "n_120_98", "n_120_99", 
"n_120_100", "n_120_101", "n_120_102", "n_120_103", "n_120_104", 
"n_120_105", "n_120_106", "n_120_107", "n_120_108", "n_120_109", 
"n_120_110", "n_120_111", "n_120_112", "n_120_113", "n_120_114", 
"n_120_115", "n_120_116", "n_120_117", "n_120_118", "n_120_119", 
"n_120_120", "n_120_121", "n_120_122", "n_120_123", "n_120_124", 
"n_120_125", "n_120_126", "n_120_127", "n_120_128", "n_120_129", 
"n_120_130", "n_120_131", "n_120_132", "n_120_133", "n_120_134", 
"n_120_135", "n_120_136", "n_120_137", "n_120_138", "n_120_139", 
"n_120_140", "n_120_141", "n_120_142", "n_120_143", "n_120_144", 
"n_120_145", "n_120_146", "n_120_147", "n_120_148", "n_120_149", 
"n_120_150", "n_120_151", "n_120_152", "n_120_153", "n_120_154", 
"n_120_155", "n_120_156", "n_120_157", "n_120_158", "n_120_159", 
"n_120_160", "n_120_161", "n_120_162", "n_120_163", "n_120_164", 
"n_120_165", "n_120_166", "n_120_167", "n_120_168", "n_120_169", 
"n_120_170", "n_120_171", "n_120_172", "n_120_173", "n_120_174", 
"n_120_175", "n_120_176", "n_120_177", "n_120_178", "n_120_179", 
"n_120_180", "n_120_181", "n_120_182", "n_120_183", "n_120_184", 
"n_120_185", "n_120_186", "n_120_187", "n_120_188", "n_120_189", 
"n_120_190", "n_120_191", "n_120_192", "n_120_193", "n_120_194", 
"n_120_195", "n_120_196", "n_120_197", "n_120_198", "n_120_199", 
"n_120_200", "n_150_1", "n_150_2", "n_150_3", "n_150_4", "n_150_5", 
"n_150_6", "n_150_7", "n_150_8", "n_150_9", "n_150_10", "n_150_11", 
"n_150_12", "n_150_13", "n_150_14", "n_150_15", "n_150_16", "n_150_17", 
"n_150_18", "n_150_19", "n_150_20", "n_150_21", "n_150_22", "n_150_23", 
"n_150_24", "n_150_25", "n_150_26", "n_150_27", "n_150_28", "n_150_29", 
"n_150_30", "n_150_31", "n_150_32", "n_150_33", "n_150_34", "n_150_35", 
"n_150_36", "n_150_37", "n_150_38", "n_150_39", "n_150_40", "n_150_41", 
"n_150_42", "n_150_43", "n_150_44", "n_150_45", "n_150_46", "n_150_47", 
"n_150_48", "n_150_49", "n_150_50", "n_150_51", "n_150_52", "n_150_53", 
"n_150_54", "n_150_55", "n_150_56", "n_150_57", "n_150_58", "n_150_59", 
"n_150_60", "n_150_61", "n_150_62", "n_150_63", "n_150_64", "n_150_65", 
"n_150_66", "n_150_67", "n_150_68", "n_150_69", "n_150_70", "n_150_71", 
"n_150_72", "n_150_73", "n_150_74", "n_150_75", "n_150_76", "n_150_77", 
"n_150_78", "n_150_79", "n_150_80", "n_150_81", "n_150_82", "n_150_83", 
"n_150_84", "n_150_85", "n_150_86", "n_150_87", "n_150_88", "n_150_89", 
"n_150_90", "n_150_91", "n_150_92", "n_150_93", "n_150_94", "n_150_95", 
"n_150_96", "n_150_97", "n_150_98", "n_150_99", "n_150_100", 
"n_150_101", "n_150_102", "n_150_103", "n_150_104", "n_150_105", 
"n_150_106", "n_150_107", "n_150_108", "n_150_109", "n_150_110", 
"n_150_111", "n_150_112", "n_150_113", "n_150_114", "n_150_115", 
"n_150_116", "n_150_117", "n_150_118", "n_150_119", "n_150_120", 
"n_150_121", "n_150_122", "n_150_123", "n_150_124", "n_150_125", 
"n_150_126", "n_150_127", "n_150_128", "n_150_129", "n_150_130", 
"n_150_131", "n_150_132", "n_150_133", "n_150_134", "n_150_135", 
"n_150_136", "n_150_137", "n_150_138", "n_150_139", "n_150_140", 
"n_150_141", "n_150_142", "n_150_143", "n_150_144", "n_150_145", 
"n_150_146", "n_150_147", "n_150_148", "n_150_149", "n_150_150", 
"n_150_151", "n_150_152", "n_150_153", "n_150_154", "n_150_155", 
"n_150_156", "n_150_157", "n_150_158", "n_150_159", "n_150_160", 
"n_150_161", "n_150_162", "n_150_163", "n_150_164", "n_150_165", 
"n_150_166", "n_150_167", "n_150_168", "n_150_169", "n_150_170", 
"n_150_171", "n_150_172", "n_150_173", "n_150_174", "n_150_175", 
"n_150_176", "n_150_177", "n_150_178", "n_150_179", "n_150_180", 
"n_150_181", "n_150_182", "n_150_183", "n_150_184", "n_150_185", 
"n_150_186", "n_150_187", "n_150_188", "n_150_189", "n_150_190", 
"n_150_191", "n_150_192", "n_150_193", "n_150_194", "n_150_195", 
"n_150_196", "n_150_197", "n_150_198", "n_150_199", "n_150_200", 
"n_180_1", "n_180_2", "n_180_3", "n_180_4", "n_180_5", "n_180_6", 
"n_180_7", "n_180_8", "n_180_9", "n_180_10", "n_180_11", "n_180_12", 
"n_180_13", "n_180_14", "n_180_15", "n_180_16", "n_180_17", "n_180_18", 
"n_180_19", "n_180_20", "n_180_21", "n_180_22", "n_180_23", "n_180_24", 
"n_180_25", "n_180_26", "n_180_27", "n_180_28", "n_180_29", "n_180_30", 
"n_180_31", "n_180_32", "n_180_33", "n_180_34", "n_180_35", "n_180_36", 
"n_180_37", "n_180_38", "n_180_39", "n_180_40", "n_180_41", "n_180_42", 
"n_180_43", "n_180_44", "n_180_45", "n_180_46", "n_180_47", "n_180_48", 
"n_180_49", "n_180_50", "n_180_51", "n_180_52", "n_180_53", "n_180_54", 
"n_180_55", "n_180_56", "n_180_57", "n_180_58", "n_180_59", "n_180_60", 
"n_180_61", "n_180_62", "n_180_63", "n_180_64", "n_180_65", "n_180_66", 
"n_180_67", "n_180_68", "n_180_69", "n_180_70", "n_180_71", "n_180_72", 
"n_180_73", "n_180_74", "n_180_75", "n_180_76", "n_180_77", "n_180_78", 
"n_180_79", "n_180_80", "n_180_81", "n_180_82", "n_180_83", "n_180_84", 
"n_180_85", "n_180_86", "n_180_87", "n_180_88", "n_180_89", "n_180_90", 
"n_180_91", "n_180_92", "n_180_93", "n_180_94", "n_180_95", "n_180_96", 
"n_180_97", "n_180_98", "n_180_99", "n_180_100", "n_180_101", 
"n_180_102", "n_180_103", "n_180_104", "n_180_105", "n_180_106", 
"n_180_107", "n_180_108", "n_180_109", "n_180_110", "n_180_111", 
"n_180_112", "n_180_113", "n_180_114", "n_180_115", "n_180_116", 
"n_180_117", "n_180_118", "n_180_119", "n_180_120", "n_180_121", 
"n_180_122", "n_180_123", "n_180_124", "n_180_125", "n_180_126", 
"n_180_127", "n_180_128", "n_180_129", "n_180_130", "n_180_131", 
"n_180_132", "n_180_133", "n_180_134", "n_180_135", "n_180_136", 
"n_180_137", "n_180_138", "n_180_139", "n_180_140", "n_180_141", 
"n_180_142", "n_180_143", "n_180_144", "n_180_145", "n_180_146", 
"n_180_147", "n_180_148", "n_180_149", "n_180_150", "n_180_151", 
"n_180_152", "n_180_153", "n_180_154", "n_180_155", "n_180_156", 
"n_180_157", "n_180_158", "n_180_159", "n_180_160", "n_180_161", 
"n_180_162", "n_180_163", "n_180_164", "n_180_165", "n_180_166", 
"n_180_167", "n_180_168", "n_180_169", "n_180_170", "n_180_171", 
"n_180_172", "n_180_173", "n_180_174", "n_180_175", "n_180_176", 
"n_180_177", "n_180_178", "n_180_179", "n_180_180", "n_180_181", 
"n_180_182", "n_180_183", "n_180_184", "n_180_185", "n_180_186", 
"n_180_187", "n_180_188", "n_180_189", "n_180_190", "n_180_191", 
"n_180_192", "n_180_193", "n_180_194", "n_180_195", "n_180_196", 
"n_180_197", "n_180_198", "n_180_199", "n_180_200", "n_210_1", 
"n_210_2", "n_210_3", "n_210_4", "n_210_5", "n_210_6", "n_210_7", 
"n_210_8", "n_210_9", "n_210_10", "n_210_11", "n_210_12", "n_210_13", 
"n_210_14", "n_210_15", "n_210_16", "n_210_17", "n_210_18", "n_210_19", 
"n_210_20", "n_210_21", "n_210_22", "n_210_23", "n_210_24", "n_210_25", 
"n_210_26", "n_210_27", "n_210_28", "n_210_29", "n_210_30", "n_210_31", 
"n_210_32", "n_210_33", "n_210_34", "n_210_35", "n_210_36", "n_210_37", 
"n_210_38", "n_210_39", "n_210_40", "n_210_41", "n_210_42", "n_210_43", 
"n_210_44", "n_210_45", "n_210_46", "n_210_47", "n_210_48", "n_210_49", 
"n_210_50", "n_210_51", "n_210_52", "n_210_53", "n_210_54", "n_210_55", 
"n_210_56", "n_210_57", "n_210_58", "n_210_59", "n_210_60", "n_210_61", 
"n_210_62", "n_210_63", "n_210_64", "n_210_65", "n_210_66", "n_210_67", 
"n_210_68", "n_210_69", "n_210_70", "n_210_71", "n_210_72", "n_210_73", 
"n_210_74", "n_210_75", "n_210_76", "n_210_77", "n_210_78", "n_210_79", 
"n_210_80", "n_210_81", "n_210_82", "n_210_83", "n_210_84", "n_210_85", 
"n_210_86", "n_210_87", "n_210_88", "n_210_89", "n_210_90", "n_210_91", 
"n_210_92", "n_210_93", "n_210_94", "n_210_95", "n_210_96", "n_210_97", 
"n_210_98", "n_210_99", "n_210_100", "n_210_101", "n_210_102", 
"n_210_103", "n_210_104", "n_210_105", "n_210_106", "n_210_107", 
"n_210_108", "n_210_109", "n_210_110", "n_210_111", "n_210_112", 
"n_210_113", "n_210_114", "n_210_115", "n_210_116", "n_210_117", 
"n_210_118", "n_210_119", "n_210_120", "n_210_121", "n_210_122", 
"n_210_123", "n_210_124", "n_210_125", "n_210_126", "n_210_127", 
"n_210_128", "n_210_129", "n_210_130", "n_210_131", "n_210_132", 
"n_210_133", "n_210_134", "n_210_135", "n_210_136", "n_210_137", 
"n_210_138", "n_210_139", "n_210_140", "n_210_141", "n_210_142", 
"n_210_143", "n_210_144", "n_210_145", "n_210_146", "n_210_147", 
"n_210_148", "n_210_149", "n_210_150", "n_210_151", "n_210_152", 
"n_210_153", "n_210_154", "n_210_155", "n_210_156", "n_210_157", 
"n_210_158", "n_210_159", "n_210_160", "n_210_161", "n_210_162", 
"n_210_163", "n_210_164", "n_210_165", "n_210_166", "n_210_167", 
"n_210_168", "n_210_169", "n_210_170", "n_210_171", "n_210_172", 
"n_210_173", "n_210_174", "n_210_175", "n_210_176", "n_210_177", 
"n_210_178", "n_210_179", "n_210_180", "n_210_181", "n_210_182", 
"n_210_183", "n_210_184", "n_210_185", "n_210_186", "n_210_187", 
"n_210_188", "n_210_189", "n_210_190", "n_210_191", "n_210_192", 
"n_210_193", "n_210_194", "n_210_195", "n_210_196", "n_210_197", 
"n_210_198", "n_210_199", "n_210_200", "n_240_1", "n_240_2", 
"n_240_3", "n_240_4", "n_240_5", "n_240_6", "n_240_7", "n_240_8", 
"n_240_9", "n_240_10", "n_240_11", "n_240_12", "n_240_13", "n_240_14", 
"n_240_15", "n_240_16", "n_240_17", "n_240_18", "n_240_19", "n_240_20", 
"n_240_21", "n_240_22", "n_240_23", "n_240_24", "n_240_25", "n_240_26", 
"n_240_27", "n_240_28", "n_240_29", "n_240_30", "n_240_31", "n_240_32", 
"n_240_33", "n_240_34", "n_240_35", "n_240_36", "n_240_37", "n_240_38", 
"n_240_39", "n_240_40", "n_240_41", "n_240_42", "n_240_43", "n_240_44", 
"n_240_45", "n_240_46", "n_240_47", "n_240_48", "n_240_49", "n_240_50", 
"n_240_51", "n_240_52", "n_240_53", "n_240_54", "n_240_55", "n_240_56", 
"n_240_57", "n_240_58", "n_240_59", "n_240_60", "n_240_61", "n_240_62", 
"n_240_63", "n_240_64", "n_240_65", "n_240_66", "n_240_67", "n_240_68", 
"n_240_69", "n_240_70", "n_240_71", "n_240_72", "n_240_73", "n_240_74", 
"n_240_75", "n_240_76", "n_240_77", "n_240_78", "n_240_79", "n_240_80", 
"n_240_81", "n_240_82", "n_240_83", "n_240_84", "n_240_85", "n_240_86", 
"n_240_87", "n_240_88", "n_240_89", "n_240_90", "n_240_91", "n_240_92", 
"n_240_93", "n_240_94", "n_240_95", "n_240_96", "n_240_97", "n_240_98", 
"n_240_99", "n_240_100", "n_240_101", "n_240_102", "n_240_103", 
"n_240_104", "n_240_105", "n_240_106", "n_240_107", "n_240_108", 
"n_240_109", "n_240_110", "n_240_111", "n_240_112", "n_240_113", 
"n_240_114", "n_240_115", "n_240_116", "n_240_117", "n_240_118", 
"n_240_119", "n_240_120", "n_240_121", "n_240_122", "n_240_123", 
"n_240_124", "n_240_125", "n_240_126", "n_240_127", "n_240_128", 
"n_240_129", "n_240_130", "n_240_131", "n_240_132", "n_240_133", 
"n_240_134", "n_240_135", "n_240_136", "n_240_137", "n_240_138", 
"n_240_139", "n_240_140", "n_240_141", "n_240_142", "n_240_143", 
"n_240_144", "n_240_145", "n_240_146", "n_240_147", "n_240_148", 
"n_240_149", "n_240_150", "n_240_151", "n_240_152", "n_240_153", 
"n_240_154", "n_240_155", "n_240_156", "n_240_157", "n_240_158", 
"n_240_159", "n_240_160", "n_240_161", "n_240_162", "n_240_163", 
"n_240_164", "n_240_165", "n_240_166", "n_240_167", "n_240_168", 
"n_240_169", "n_240_170", "n_240_171", "n_240_172", "n_240_173", 
"n_240_174", "n_240_175", "n_240_176", "n_240_177", "n_240_178", 
"n_240_179", "n_240_180", "n_240_181", "n_240_182", "n_240_183", 
"n_240_184", "n_240_185", "n_240_186", "n_240_187", "n_240_188", 
"n_240_189", "n_240_190", "n_240_191", "n_240_192", "n_240_193", 
"n_240_194", "n_240_195", "n_240_196", "n_240_197", "n_240_198", 
"n_240_199", "n_240_200", "n_270_1", "n_270_2", "n_270_3", "n_270_4", 
"n_270_5", "n_270_6", "n_270_7", "n_270_8", "n_270_9", "n_270_10", 
"n_270_11", "n_270_12", "n_270_13", "n_270_14", "n_270_15", "n_270_16", 
"n_270_17", "n_270_18", "n_270_19", "n_270_20", "n_270_21", "n_270_22", 
"n_270_23", "n_270_24", "n_270_25", "n_270_26", "n_270_27", "n_270_28", 
"n_270_29", "n_270_30", "n_270_31", "n_270_32", "n_270_33", "n_270_34", 
"n_270_35", "n_270_36", "n_270_37", "n_270_38", "n_270_39", "n_270_40", 
"n_270_41", "n_270_42", "n_270_43", "n_270_44", "n_270_45", "n_270_46", 
"n_270_47", "n_270_48", "n_270_49", "n_270_50", "n_270_51", "n_270_52", 
"n_270_53", "n_270_54", "n_270_55", "n_270_56", "n_270_57", "n_270_58", 
"n_270_59", "n_270_60", "n_270_61", "n_270_62", "n_270_63", "n_270_64", 
"n_270_65", "n_270_66", "n_270_67", "n_270_68", "n_270_69", "n_270_70", 
"n_270_71", "n_270_72", "n_270_73", "n_270_74", "n_270_75", "n_270_76", 
"n_270_77", "n_270_78", "n_270_79", "n_270_80", "n_270_81", "n_270_82", 
"n_270_83", "n_270_84", "n_270_85", "n_270_86", "n_270_87", "n_270_88", 
"n_270_89", "n_270_90", "n_270_91", "n_270_92", "n_270_93", "n_270_94", 
"n_270_95", "n_270_96", "n_270_97", "n_270_98", "n_270_99", "n_270_100", 
"n_270_101", "n_270_102", "n_270_103", "n_270_104", "n_270_105", 
"n_270_106", "n_270_107", "n_270_108", "n_270_109", "n_270_110", 
"n_270_111", "n_270_112", "n_270_113", "n_270_114", "n_270_115", 
"n_270_116", "n_270_117", "n_270_118", "n_270_119", "n_270_120", 
"n_270_121", "n_270_122", "n_270_123", "n_270_124", "n_270_125", 
"n_270_126", "n_270_127", "n_270_128", "n_270_129", "n_270_130", 
"n_270_131", "n_270_132", "n_270_133", "n_270_134", "n_270_135", 
"n_270_136", "n_270_137", "n_270_138", "n_270_139", "n_270_140", 
"n_270_141", "n_270_142", "n_270_143", "n_270_144", "n_270_145", 
"n_270_146", "n_270_147", "n_270_148", "n_270_149", "n_270_150", 
"n_270_151", "n_270_152", "n_270_153", "n_270_154", "n_270_155", 
"n_270_156", "n_270_157", "n_270_158", "n_270_159", "n_270_160", 
"n_270_161", "n_270_162", "n_270_163", "n_270_164", "n_270_165", 
"n_270_166", "n_270_167", "n_270_168", "n_270_169", "n_270_170", 
"n_270_171", "n_270_172", "n_270_173", "n_270_174", "n_270_175", 
"n_270_176", "n_270_177", "n_270_178", "n_270_179", "n_270_180", 
"n_270_181", "n_270_182", "n_270_183", "n_270_184", "n_270_185", 
"n_270_186", "n_270_187", "n_270_188", "n_270_189", "n_270_190", 
"n_270_191", "n_270_192", "n_270_193", "n_270_194", "n_270_195", 
"n_270_196", "n_270_197", "n_270_198", "n_270_199", "n_270_200", 
"n_300_1", "n_300_2", "n_300_3", "n_300_4", "n_300_5", "n_300_6", 
"n_300_7", "n_300_8", "n_300_9", "n_300_10", "n_300_11", "n_300_12", 
"n_300_13", "n_300_14", "n_300_15", "n_300_16", "n_300_17", "n_300_18", 
"n_300_19", "n_300_20", "n_300_21", "n_300_22", "n_300_23", "n_300_24", 
"n_300_25", "n_300_26", "n_300_27", "n_300_28", "n_300_29", "n_300_30", 
"n_300_31", "n_300_32", "n_300_33", "n_300_34", "n_300_35", "n_300_36", 
"n_300_37", "n_300_38", "n_300_39", "n_300_40", "n_300_41", "n_300_42", 
"n_300_43", "n_300_44", "n_300_45", "n_300_46", "n_300_47", "n_300_48", 
"n_300_49", "n_300_50", "n_300_51", "n_300_52", "n_300_53", "n_300_54", 
"n_300_55", "n_300_56", "n_300_57", "n_300_58", "n_300_59", "n_300_60", 
"n_300_61", "n_300_62", "n_300_63", "n_300_64", "n_300_65", "n_300_66", 
"n_300_67", "n_300_68", "n_300_69", "n_300_70", "n_300_71", "n_300_72", 
"n_300_73", "n_300_74", "n_300_75", "n_300_76", "n_300_77", "n_300_78", 
"n_300_79", "n_300_80", "n_300_81", "n_300_82", "n_300_83", "n_300_84", 
"n_300_85", "n_300_86", "n_300_87", "n_300_88", "n_300_89", "n_300_90", 
"n_300_91", "n_300_92", "n_300_93", "n_300_94", "n_300_95", "n_300_96", 
"n_300_97", "n_300_98", "n_300_99", "n_300_100", "n_300_101", 
"n_300_102", "n_300_103", "n_300_104", "n_300_105", "n_300_106", 
"n_300_107", "n_300_108", "n_300_109", "n_300_110", "n_300_111", 
"n_300_112", "n_300_113", "n_300_114", "n_300_115", "n_300_116", 
"n_300_117", "n_300_118", "n_300_119", "n_300_120", "n_300_121", 
"n_300_122", "n_300_123", "n_300_124", "n_300_125", "n_300_126", 
"n_300_127", "n_300_128", "n_300_129", "n_300_130", "n_300_131", 
"n_300_132", "n_300_133", "n_300_134", "n_300_135", "n_300_136", 
"n_300_137", "n_300_138", "n_300_139", "n_300_140", "n_300_141", 
"n_300_142", "n_300_143", "n_300_144", "n_300_145", "n_300_146", 
"n_300_147", "n_300_148", "n_300_149", "n_300_150", "n_300_151", 
"n_300_152", "n_300_153", "n_300_154", "n_300_155", "n_300_156", 
"n_300_157", "n_300_158", "n_300_159", "n_300_160", "n_300_161", 
"n_300_162", "n_300_163", "n_300_164", "n_300_165", "n_300_166", 
"n_300_167", "n_300_168", "n_300_169", "n_300_170", "n_300_171", 
"n_300_172", "n_300_173", "n_300_174", "n_300_175", "n_300_176", 
"n_300_177", "n_300_178", "n_300_179", "n_300_180", "n_300_181", 
"n_300_182", "n_300_183", "n_300_184", "n_300_185", "n_300_186", 
"n_300_187", "n_300_188", "n_300_189", "n_300_190", "n_300_191", 
"n_300_192", "n_300_193", "n_300_194", "n_300_195", "n_300_196", 
"n_300_197", "n_300_198", "n_300_199", "n_300_200"))
